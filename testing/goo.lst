     1                                  %define T_void 				0
     2                                  %define T_nil 				1
     3                                  %define T_char 				2
     4                                  %define T_string 			3
     5                                  %define T_symbol 			4
     6                                  %define T_closure 			5
     7                                  %define T_boolean 			8
     8                                  %define T_boolean_false 		(T_boolean | 1)
     9                                  %define T_boolean_true 			(T_boolean | 2)
    10                                  %define T_number 			16
    11                                  %define T_rational 			(T_number | 1)
    12                                  %define T_real 				(T_number | 2)
    13                                  %define T_collection 			32
    14                                  %define T_pair 				(T_collection | 1)
    15                                  %define T_vector 			(T_collection | 2)
    16                                  
    17                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    18                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    19                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    20                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    21                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    22                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    23                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    24                                  
    25                                  %define OLD_RDP 			qword [rbp]
    26                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    27                                  %define ENV 				qword [rbp + 8 * 2]
    28                                  %define COUNT 				qword [rbp + 8 * 3]
    29                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    30                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    31                                  
    32                                  %macro ENTER 0
    33                                  	enter 0, 0
    34                                  	and rsp, ~15
    35                                  %endmacro
    36                                  
    37                                  %macro LEAVE 0
    38                                  	leave
    39                                  %endmacro
    40                                  
    41                                  %macro assert_type 2
    42                                          cmp byte [%1], %2
    43                                          jne L_error_incorrect_type
    44                                  %endmacro
    45                                  
    46                                  %macro assert_type_integer 1
    47                                          assert_rational(%1)
    48                                          cmp qword [%1 + 1 + 8], 1
    49                                          jne L_error_incorrect_type
    50                                  %endmacro
    51                                  
    52                                  %define assert_void(reg)		assert_type reg, T_void
    53                                  %define assert_nil(reg)			assert_type reg, T_nil
    54                                  %define assert_char(reg)		assert_type reg, T_char
    55                                  %define assert_string(reg)		assert_type reg, T_string
    56                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    57                                  %define assert_closure(reg)		assert_type reg, T_closure
    58                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    59                                  %define assert_rational(reg)		assert_type reg, T_rational
    60                                  %define assert_integer(reg)		assert_type_integer reg
    61                                  %define assert_real(reg)		assert_type reg, T_real
    62                                  %define assert_pair(reg)		assert_type reg, T_pair
    63                                  %define assert_vector(reg)		assert_type reg, T_vector
    64                                  
    65                                  %define sob_void			(L_constants + 0)
    66                                  %define sob_nil				(L_constants + 1)
    67                                  %define sob_boolean_false		(L_constants + 2)
    68                                  %define sob_boolean_true		(L_constants + 3)
    69                                  %define sob_char_nul			(L_constants + 4)
    70                                  
    71                                  %define bytes(n)			(n)
    72                                  %define kbytes(n) 			(bytes(n) << 10)
    73                                  %define mbytes(n) 			(kbytes(n) << 10)
    74                                  %define gbytes(n) 			(mbytes(n) << 10)
    75                                  
    76                                  section .data
    77                                  L_constants:
    78 00000000 00                      	db T_void
    79 00000001 01                      	db T_nil
    80 00000002 09                      	db T_boolean_false
    81 00000003 0A                      	db T_boolean_true
    82 00000004 0200                    	db T_char, 0x00	; #\x0
    83 00000006 03                      	db T_string	; "whatever"
    84 00000007 0800000000000000        	dq 8
    85 0000000F 7768617465766572        	db 0x77, 0x68, 0x61, 0x74, 0x65, 0x76, 0x65, 0x72
    86 00000017 04                      	db T_symbol	; whatever
    87 00000018 [0600000000000000]      	dq L_constants + 6
    88 00000020 11                      	db T_rational	; 0
    89 00000021 000000000000000001-     	dq 0, 1
    89 0000002A 00000000000000     
    90 00000031 03                      	db T_string	; "+"
    91 00000032 0100000000000000        	dq 1
    92 0000003A 2B                      	db 0x2B
    93 0000003B 04                      	db T_symbol	; +
    94 0000003C [3100000000000000]      	dq L_constants + 49
    95 00000044 03                      	db T_string	; "all arguments need ...
    96 00000045 2000000000000000        	dq 32
    97 0000004D 616C6C2061726775        	db 0x61, 0x6C, 0x6C, 0x20, 0x61, 0x72, 0x67, 0x75
    98 00000055 6D656E7473206E65        	db 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x20, 0x6E, 0x65
    99 0000005D 656420746F206265        	db 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65
   100 00000065 206E756D62657273        	db 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x73
   101 0000006D 03                      	db T_string	; "-"
   102 0000006E 0100000000000000        	dq 1
   103 00000076 2D                      	db 0x2D
   104 00000077 04                      	db T_symbol	; -
   105 00000078 [6D00000000000000]      	dq L_constants + 109
   106 00000080 11                      	db T_rational	; 1
   107 00000081 010000000000000001-     	dq 1, 1
   107 0000008A 00000000000000     
   108 00000091 03                      	db T_string	; "*"
   109 00000092 0100000000000000        	dq 1
   110 0000009A 2A                      	db 0x2A
   111 0000009B 04                      	db T_symbol	; *
   112 0000009C [9100000000000000]      	dq L_constants + 145
   113 000000A4 03                      	db T_string	; "/"
   114 000000A5 0100000000000000        	dq 1
   115 000000AD 2F                      	db 0x2F
   116 000000AE 04                      	db T_symbol	; /
   117 000000AF [A400000000000000]      	dq L_constants + 164
   118 000000B7 03                      	db T_string	; "generic-comparator"
   119 000000B8 1200000000000000        	dq 18
   120 000000C0 67656E657269632D        	db 0x67, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x2D
   121 000000C8 636F6D7061726174        	db 0x63, 0x6F, 0x6D, 0x70, 0x61, 0x72, 0x61, 0x74
   122 000000D0 6F72                    	db 0x6F, 0x72
   123 000000D2 04                      	db T_symbol	; generic-comparator
   124 000000D3 [B700000000000000]      	dq L_constants + 183
   125 000000DB 03                      	db T_string	; "all the arguments m...
   126 000000DC 2100000000000000        	dq 33
   127 000000E4 616C6C2074686520        	db 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20
   128 000000EC 617267756D656E74        	db 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74
   129 000000F4 73206D7573742062        	db 0x73, 0x20, 0x6D, 0x75, 0x73, 0x74, 0x20, 0x62
   130 000000FC 65206E756D626572        	db 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72
   131 00000104 73                      	db 0x73
   132 00000105 03                      	db T_string	; "make-list"
   133 00000106 0900000000000000        	dq 9
   134 0000010E 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   135 00000116 74                      	db 0x74
   136 00000117 04                      	db T_symbol	; make-list
   137 00000118 [0501000000000000]      	dq L_constants + 261
   138 00000120 03                      	db T_string	; "Usage: (make-list l...
   139 00000121 2D00000000000000        	dq 45
   140 00000129 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   141 00000131 6D616B652D6C6973        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x6C, 0x69, 0x73
   142 00000139 74206C656E677468        	db 0x74, 0x20, 0x6C, 0x65, 0x6E, 0x67, 0x74, 0x68
   143 00000141 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   144 00000149 616C2D696E69742D        	db 0x61, 0x6C, 0x2D, 0x69, 0x6E, 0x69, 0x74, 0x2D
   145 00000151 6368617229              	db 0x63, 0x68, 0x61, 0x72, 0x29
   146 00000156 0241                    	db T_char, 0x41	; #\A
   147 00000158 025A                    	db T_char, 0x5A	; #\Z
   148 0000015A 0261                    	db T_char, 0x61	; #\a
   149 0000015C 027A                    	db T_char, 0x7A	; #\z
   150 0000015E 03                      	db T_string	; "make-vector"
   151 0000015F 0B00000000000000        	dq 11
   152 00000167 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   153 0000016F 746F72                  	db 0x74, 0x6F, 0x72
   154 00000172 04                      	db T_symbol	; make-vector
   155 00000173 [5E01000000000000]      	dq L_constants + 350
   156 0000017B 03                      	db T_string	; "Usage: (make-vector...
   157 0000017C 2B00000000000000        	dq 43
   158 00000184 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   159 0000018C 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   160 00000194 746F722073697A65        	db 0x74, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x7A, 0x65
   161 0000019C 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   162 000001A4 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   163 000001AC 6C7429                  	db 0x6C, 0x74, 0x29
   164 000001AF 03                      	db T_string	; "make-string"
   165 000001B0 0B00000000000000        	dq 11
   166 000001B8 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   167 000001C0 696E67                  	db 0x69, 0x6E, 0x67
   168 000001C3 04                      	db T_symbol	; make-string
   169 000001C4 [AF01000000000000]      	dq L_constants + 431
   170 000001CC 03                      	db T_string	; "Usage: (make-string...
   171 000001CD 2B00000000000000        	dq 43
   172 000001D5 55736167653A2028        	db 0x55, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x28
   173 000001DD 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   174 000001E5 696E672073697A65        	db 0x69, 0x6E, 0x67, 0x20, 0x73, 0x69, 0x7A, 0x65
   175 000001ED 203F6F7074696F6E        	db 0x20, 0x3F, 0x6F, 0x70, 0x74, 0x69, 0x6F, 0x6E
   176 000001F5 616C2D6465666175        	db 0x61, 0x6C, 0x2D, 0x64, 0x65, 0x66, 0x61, 0x75
   177 000001FD 6C7429                  	db 0x6C, 0x74, 0x29
   178 00000200 11                      	db T_rational	; 2
   179 00000201 020000000000000001-     	dq 2, 1
   179 0000020A 00000000000000     
   180                                  
   181                                  section .bss
   182                                  free_var_0:	; location of null?
   183 00000000 ????????????????        	resq 1
   184                                  free_var_1:	; location of pair?
   185 00000008 ????????????????        	resq 1
   186                                  free_var_2:	; location of void?
   187 00000010 ????????????????        	resq 1
   188                                  free_var_3:	; location of char?
   189 00000018 ????????????????        	resq 1
   190                                  free_var_4:	; location of string?
   191 00000020 ????????????????        	resq 1
   192                                  free_var_5:	; location of symbol?
   193 00000028 ????????????????        	resq 1
   194                                  free_var_6:	; location of vector?
   195 00000030 ????????????????        	resq 1
   196                                  free_var_7:	; location of procedure?
   197 00000038 ????????????????        	resq 1
   198                                  free_var_8:	; location of real?
   199 00000040 ????????????????        	resq 1
   200                                  free_var_9:	; location of rational?
   201 00000048 ????????????????        	resq 1
   202                                  free_var_10:	; location of boolean?
   203 00000050 ????????????????        	resq 1
   204                                  free_var_11:	; location of number?
   205 00000058 ????????????????        	resq 1
   206                                  free_var_12:	; location of collection?
   207 00000060 ????????????????        	resq 1
   208                                  free_var_13:	; location of cons
   209 00000068 ????????????????        	resq 1
   210                                  free_var_14:	; location of display-sexpr
   211 00000070 ????????????????        	resq 1
   212                                  free_var_15:	; location of write-char
   213 00000078 ????????????????        	resq 1
   214                                  free_var_16:	; location of car
   215 00000080 ????????????????        	resq 1
   216                                  free_var_17:	; location of cdr
   217 00000088 ????????????????        	resq 1
   218                                  free_var_18:	; location of string-length
   219 00000090 ????????????????        	resq 1
   220                                  free_var_19:	; location of vector-length
   221 00000098 ????????????????        	resq 1
   222                                  free_var_20:	; location of real->integer
   223 000000A0 ????????????????        	resq 1
   224                                  free_var_21:	; location of exit
   225 000000A8 ????????????????        	resq 1
   226                                  free_var_22:	; location of integer->real
   227 000000B0 ????????????????        	resq 1
   228                                  free_var_23:	; location of rational->real
   229 000000B8 ????????????????        	resq 1
   230                                  free_var_24:	; location of char->integer
   231 000000C0 ????????????????        	resq 1
   232                                  free_var_25:	; location of integer->char
   233 000000C8 ????????????????        	resq 1
   234                                  free_var_26:	; location of trng
   235 000000D0 ????????????????        	resq 1
   236                                  free_var_27:	; location of zero?
   237 000000D8 ????????????????        	resq 1
   238                                  free_var_28:	; location of integer?
   239 000000E0 ????????????????        	resq 1
   240                                  free_var_29:	; location of __bin-apply
   241 000000E8 ????????????????        	resq 1
   242                                  free_var_30:	; location of __bin-add-rr
   243 000000F0 ????????????????        	resq 1
   244                                  free_var_31:	; location of __bin-sub-rr
   245 000000F8 ????????????????        	resq 1
   246                                  free_var_32:	; location of __bin-mul-rr
   247 00000100 ????????????????        	resq 1
   248                                  free_var_33:	; location of __bin-div-rr
   249 00000108 ????????????????        	resq 1
   250                                  free_var_34:	; location of __bin-add-qq
   251 00000110 ????????????????        	resq 1
   252                                  free_var_35:	; location of __bin-sub-qq
   253 00000118 ????????????????        	resq 1
   254                                  free_var_36:	; location of __bin-mul-qq
   255 00000120 ????????????????        	resq 1
   256                                  free_var_37:	; location of __bin-div-qq
   257 00000128 ????????????????        	resq 1
   258                                  free_var_38:	; location of error
   259 00000130 ????????????????        	resq 1
   260                                  free_var_39:	; location of __bin-less-than-rr
   261 00000138 ????????????????        	resq 1
   262                                  free_var_40:	; location of __bin-less-than-qq
   263 00000140 ????????????????        	resq 1
   264                                  free_var_41:	; location of __bin-equal-rr
   265 00000148 ????????????????        	resq 1
   266                                  free_var_42:	; location of __bin-equal-qq
   267 00000150 ????????????????        	resq 1
   268                                  free_var_43:	; location of quotient
   269 00000158 ????????????????        	resq 1
   270                                  free_var_44:	; location of remainder
   271 00000160 ????????????????        	resq 1
   272                                  free_var_45:	; location of set-car!
   273 00000168 ????????????????        	resq 1
   274                                  free_var_46:	; location of set-cdr!
   275 00000170 ????????????????        	resq 1
   276                                  free_var_47:	; location of string-ref
   277 00000178 ????????????????        	resq 1
   278                                  free_var_48:	; location of vector-ref
   279 00000180 ????????????????        	resq 1
   280                                  free_var_49:	; location of vector-set!
   281 00000188 ????????????????        	resq 1
   282                                  free_var_50:	; location of string-set!
   283 00000190 ????????????????        	resq 1
   284                                  free_var_51:	; location of make-vector
   285 00000198 ????????????????        	resq 1
   286                                  free_var_52:	; location of make-string
   287 000001A0 ????????????????        	resq 1
   288                                  free_var_53:	; location of numerator
   289 000001A8 ????????????????        	resq 1
   290                                  free_var_54:	; location of denominator
   291 000001B0 ????????????????        	resq 1
   292                                  free_var_55:	; location of eq?
   293 000001B8 ????????????????        	resq 1
   294                                  free_var_56:	; location of caar
   295 000001C0 ????????????????        	resq 1
   296                                  free_var_57:	; location of cadr
   297 000001C8 ????????????????        	resq 1
   298                                  free_var_58:	; location of cdar
   299 000001D0 ????????????????        	resq 1
   300                                  free_var_59:	; location of cddr
   301 000001D8 ????????????????        	resq 1
   302                                  free_var_60:	; location of caaar
   303 000001E0 ????????????????        	resq 1
   304                                  free_var_61:	; location of caadr
   305 000001E8 ????????????????        	resq 1
   306                                  free_var_62:	; location of cadar
   307 000001F0 ????????????????        	resq 1
   308                                  free_var_63:	; location of caddr
   309 000001F8 ????????????????        	resq 1
   310                                  free_var_64:	; location of cdaar
   311 00000200 ????????????????        	resq 1
   312                                  free_var_65:	; location of cdadr
   313 00000208 ????????????????        	resq 1
   314                                  free_var_66:	; location of cddar
   315 00000210 ????????????????        	resq 1
   316                                  free_var_67:	; location of cdddr
   317 00000218 ????????????????        	resq 1
   318                                  free_var_68:	; location of caaaar
   319 00000220 ????????????????        	resq 1
   320                                  free_var_69:	; location of caaadr
   321 00000228 ????????????????        	resq 1
   322                                  free_var_70:	; location of caadar
   323 00000230 ????????????????        	resq 1
   324                                  free_var_71:	; location of caaddr
   325 00000238 ????????????????        	resq 1
   326                                  free_var_72:	; location of cadaar
   327 00000240 ????????????????        	resq 1
   328                                  free_var_73:	; location of cadadr
   329 00000248 ????????????????        	resq 1
   330                                  free_var_74:	; location of caddar
   331 00000250 ????????????????        	resq 1
   332                                  free_var_75:	; location of cadddr
   333 00000258 ????????????????        	resq 1
   334                                  free_var_76:	; location of cdaaar
   335 00000260 ????????????????        	resq 1
   336                                  free_var_77:	; location of cdaadr
   337 00000268 ????????????????        	resq 1
   338                                  free_var_78:	; location of cdadar
   339 00000270 ????????????????        	resq 1
   340                                  free_var_79:	; location of cdaddr
   341 00000278 ????????????????        	resq 1
   342                                  free_var_80:	; location of cddaar
   343 00000280 ????????????????        	resq 1
   344                                  free_var_81:	; location of cddadr
   345 00000288 ????????????????        	resq 1
   346                                  free_var_82:	; location of cdddar
   347 00000290 ????????????????        	resq 1
   348                                  free_var_83:	; location of cddddr
   349 00000298 ????????????????        	resq 1
   350                                  free_var_84:	; location of list?
   351 000002A0 ????????????????        	resq 1
   352                                  free_var_85:	; location of list
   353 000002A8 ????????????????        	resq 1
   354                                  free_var_86:	; location of not
   355 000002B0 ????????????????        	resq 1
   356                                  free_var_87:	; location of fraction?
   357 000002B8 ????????????????        	resq 1
   358                                  free_var_88:	; location of list*
   359 000002C0 ????????????????        	resq 1
   360                                  free_var_89:	; location of apply
   361 000002C8 ????????????????        	resq 1
   362                                  free_var_90:	; location of ormap
   363 000002D0 ????????????????        	resq 1
   364                                  free_var_91:	; location of map
   365 000002D8 ????????????????        	resq 1
   366                                  free_var_92:	; location of andmap
   367 000002E0 ????????????????        	resq 1
   368                                  free_var_93:	; location of reverse
   369 000002E8 ????????????????        	resq 1
   370                                  free_var_94:	; location of append
   371 000002F0 ????????????????        	resq 1
   372                                  free_var_95:	; location of fold-left
   373 000002F8 ????????????????        	resq 1
   374                                  free_var_96:	; location of fold-right
   375 00000300 ????????????????        	resq 1
   376                                  free_var_97:	; location of +
   377 00000308 ????????????????        	resq 1
   378                                  free_var_98:	; location of -
   379 00000310 ????????????????        	resq 1
   380                                  free_var_99:	; location of *
   381 00000318 ????????????????        	resq 1
   382                                  free_var_100:	; location of /
   383 00000320 ????????????????        	resq 1
   384                                  free_var_101:	; location of fact
   385 00000328 ????????????????        	resq 1
   386                                  free_var_102:	; location of <
   387 00000330 ????????????????        	resq 1
   388                                  free_var_103:	; location of <=
   389 00000338 ????????????????        	resq 1
   390                                  free_var_104:	; location of >
   391 00000340 ????????????????        	resq 1
   392                                  free_var_105:	; location of >=
   393 00000348 ????????????????        	resq 1
   394                                  free_var_106:	; location of =
   395 00000350 ????????????????        	resq 1
   396                                  free_var_107:	; location of make-list
   397 00000358 ????????????????        	resq 1
   398                                  free_var_108:	; location of char<?
   399 00000360 ????????????????        	resq 1
   400                                  free_var_109:	; location of char<=?
   401 00000368 ????????????????        	resq 1
   402                                  free_var_110:	; location of char=?
   403 00000370 ????????????????        	resq 1
   404                                  free_var_111:	; location of char>?
   405 00000378 ????????????????        	resq 1
   406                                  free_var_112:	; location of char>=?
   407 00000380 ????????????????        	resq 1
   408                                  free_var_113:	; location of char-downcase
   409 00000388 ????????????????        	resq 1
   410                                  free_var_114:	; location of char-upcase
   411 00000390 ????????????????        	resq 1
   412                                  free_var_115:	; location of char-ci<?
   413 00000398 ????????????????        	resq 1
   414                                  free_var_116:	; location of char-ci<=?
   415 000003A0 ????????????????        	resq 1
   416                                  free_var_117:	; location of char-ci=?
   417 000003A8 ????????????????        	resq 1
   418                                  free_var_118:	; location of char-ci>?
   419 000003B0 ????????????????        	resq 1
   420                                  free_var_119:	; location of char-ci>=?
   421 000003B8 ????????????????        	resq 1
   422                                  free_var_120:	; location of string-downcase
   423 000003C0 ????????????????        	resq 1
   424                                  free_var_121:	; location of string-upcase
   425 000003C8 ????????????????        	resq 1
   426                                  free_var_122:	; location of list->string
   427 000003D0 ????????????????        	resq 1
   428                                  free_var_123:	; location of string->list
   429 000003D8 ????????????????        	resq 1
   430                                  free_var_124:	; location of string<?
   431 000003E0 ????????????????        	resq 1
   432                                  free_var_125:	; location of string<=?
   433 000003E8 ????????????????        	resq 1
   434                                  free_var_126:	; location of string=?
   435 000003F0 ????????????????        	resq 1
   436                                  free_var_127:	; location of string>=?
   437 000003F8 ????????????????        	resq 1
   438                                  free_var_128:	; location of string>?
   439 00000400 ????????????????        	resq 1
   440                                  free_var_129:	; location of string-ci<?
   441 00000408 ????????????????        	resq 1
   442                                  free_var_130:	; location of string-ci<=?
   443 00000410 ????????????????        	resq 1
   444                                  free_var_131:	; location of string-ci=?
   445 00000418 ????????????????        	resq 1
   446                                  free_var_132:	; location of string-ci>=?
   447 00000420 ????????????????        	resq 1
   448                                  free_var_133:	; location of string-ci>?
   449 00000428 ????????????????        	resq 1
   450                                  free_var_134:	; location of length
   451 00000430 ????????????????        	resq 1
   452                                  free_var_135:	; location of list->vector
   453 00000438 ????????????????        	resq 1
   454                                  free_var_136:	; location of vector
   455 00000440 ????????????????        	resq 1
   456                                  free_var_137:	; location of vector->list
   457 00000448 ????????????????        	resq 1
   458                                  free_var_138:	; location of random
   459 00000450 ????????????????        	resq 1
   460                                  free_var_139:	; location of positive?
   461 00000458 ????????????????        	resq 1
   462                                  free_var_140:	; location of negative?
   463 00000460 ????????????????        	resq 1
   464                                  free_var_141:	; location of even?
   465 00000468 ????????????????        	resq 1
   466                                  free_var_142:	; location of odd?
   467 00000470 ????????????????        	resq 1
   468                                  free_var_143:	; location of abs
   469 00000478 ????????????????        	resq 1
   470                                  free_var_144:	; location of equal?
   471 00000480 ????????????????        	resq 1
   472                                  free_var_145:	; location of assoc
   473 00000488 ????????????????        	resq 1
   474                                  
   475                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar
   476                                  global main
   477                                  section .text
   478                                  main:
   479 00000000 C8000000                        enter 0, 0
   480                                          
   481                                  	; building closure for null?
   482 00000004 48BF-                   	mov rdi, free_var_0
   482 00000006 [0000000000000000] 
   483 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   483 00000010 [4500010000000000] 
   484 00000018 E851FF0000              	call bind_primitive
   485                                  
   486                                  	; building closure for pair?
   487 0000001D 48BF-                   	mov rdi, free_var_1
   487 0000001F [0800000000000000] 
   488 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   488 00000029 [7B00010000000000] 
   489 00000031 E838FF0000              	call bind_primitive
   490                                  
   491                                  	; building closure for void?
   492 00000036 48BF-                   	mov rdi, free_var_2
   492 00000038 [1000000000000000] 
   493 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   493 00000042 [B100010000000000] 
   494 0000004A E81FFF0000              	call bind_primitive
   495                                  
   496                                  	; building closure for char?
   497 0000004F 48BF-                   	mov rdi, free_var_3
   497 00000051 [1800000000000000] 
   498 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   498 0000005B [E700010000000000] 
   499 00000063 E806FF0000              	call bind_primitive
   500                                  
   501                                  	; building closure for string?
   502 00000068 48BF-                   	mov rdi, free_var_4
   502 0000006A [2000000000000000] 
   503 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   503 00000074 [1D01010000000000] 
   504 0000007C E8EDFE0000              	call bind_primitive
   505                                  
   506                                  	; building closure for symbol?
   507 00000081 48BF-                   	mov rdi, free_var_5
   507 00000083 [2800000000000000] 
   508 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   508 0000008D [5301010000000000] 
   509 00000095 E8D4FE0000              	call bind_primitive
   510                                  
   511                                  	; building closure for vector?
   512 0000009A 48BF-                   	mov rdi, free_var_6
   512 0000009C [3000000000000000] 
   513 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   513 000000A6 [8901010000000000] 
   514 000000AE E8BBFE0000              	call bind_primitive
   515                                  
   516                                  	; building closure for procedure?
   517 000000B3 48BF-                   	mov rdi, free_var_7
   517 000000B5 [3800000000000000] 
   518 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   518 000000BF [BF01010000000000] 
   519 000000C7 E8A2FE0000              	call bind_primitive
   520                                  
   521                                  	; building closure for real?
   522 000000CC 48BF-                   	mov rdi, free_var_8
   522 000000CE [4000000000000000] 
   523 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   523 000000D8 [F501010000000000] 
   524 000000E0 E889FE0000              	call bind_primitive
   525                                  
   526                                  	; building closure for rational?
   527 000000E5 48BF-                   	mov rdi, free_var_9
   527 000000E7 [4800000000000000] 
   528 000000EF 48BE-                   	mov rsi, L_code_ptr_is_rational
   528 000000F1 [2B02010000000000] 
   529 000000F9 E870FE0000              	call bind_primitive
   530                                  
   531                                  	; building closure for boolean?
   532 000000FE 48BF-                   	mov rdi, free_var_10
   532 00000100 [5000000000000000] 
   533 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   533 0000010A [6102010000000000] 
   534 00000112 E857FE0000              	call bind_primitive
   535                                  
   536                                  	; building closure for number?
   537 00000117 48BF-                   	mov rdi, free_var_11
   537 00000119 [5800000000000000] 
   538 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   538 00000123 [9902010000000000] 
   539 0000012B E83EFE0000              	call bind_primitive
   540                                  
   541                                  	; building closure for collection?
   542 00000130 48BF-                   	mov rdi, free_var_12
   542 00000132 [6000000000000000] 
   543 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   543 0000013C [D102010000000000] 
   544 00000144 E825FE0000              	call bind_primitive
   545                                  
   546                                  	; building closure for cons
   547 00000149 48BF-                   	mov rdi, free_var_13
   547 0000014B [6800000000000000] 
   548 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   548 00000155 [0903010000000000] 
   549 0000015D E80CFE0000              	call bind_primitive
   550                                  
   551                                  	; building closure for display-sexpr
   552 00000162 48BF-                   	mov rdi, free_var_14
   552 00000164 [7000000000000000] 
   553 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   553 0000016E [3D03010000000000] 
   554 00000176 E8F3FD0000              	call bind_primitive
   555                                  
   556                                  	; building closure for write-char
   557 0000017B 48BF-                   	mov rdi, free_var_15
   557 0000017D [7800000000000000] 
   558 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   558 00000187 [6703010000000000] 
   559 0000018F E8DAFD0000              	call bind_primitive
   560                                  
   561                                  	; building closure for car
   562 00000194 48BF-                   	mov rdi, free_var_16
   562 00000196 [8000000000000000] 
   563 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   563 000001A0 [BE03010000000000] 
   564 000001A8 E8C1FD0000              	call bind_primitive
   565                                  
   566                                  	; building closure for cdr
   567 000001AD 48BF-                   	mov rdi, free_var_17
   567 000001AF [8800000000000000] 
   568 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
   568 000001B9 [E603010000000000] 
   569 000001C1 E8A8FD0000              	call bind_primitive
   570                                  
   571                                  	; building closure for string-length
   572 000001C6 48BF-                   	mov rdi, free_var_18
   572 000001C8 [9000000000000000] 
   573 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
   573 000001D2 [0E04010000000000] 
   574 000001DA E88FFD0000              	call bind_primitive
   575                                  
   576                                  	; building closure for vector-length
   577 000001DF 48BF-                   	mov rdi, free_var_19
   577 000001E1 [9800000000000000] 
   578 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
   578 000001EB [3B04010000000000] 
   579 000001F3 E876FD0000              	call bind_primitive
   580                                  
   581                                  	; building closure for real->integer
   582 000001F8 48BF-                   	mov rdi, free_var_20
   582 000001FA [A000000000000000] 
   583 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
   583 00000204 [6804010000000000] 
   584 0000020C E85DFD0000              	call bind_primitive
   585                                  
   586                                  	; building closure for exit
   587 00000211 48BF-                   	mov rdi, free_var_21
   587 00000213 [A800000000000000] 
   588 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
   588 0000021D [9B04010000000000] 
   589 00000225 E844FD0000              	call bind_primitive
   590                                  
   591                                  	; building closure for integer->real
   592 0000022A 48BF-                   	mov rdi, free_var_22
   592 0000022C [B000000000000000] 
   593 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
   593 00000236 [B804010000000000] 
   594 0000023E E82BFD0000              	call bind_primitive
   595                                  
   596                                  	; building closure for rational->real
   597 00000243 48BF-                   	mov rdi, free_var_23
   597 00000245 [B800000000000000] 
   598 0000024D 48BE-                   	mov rsi, L_code_ptr_rational_to_real
   598 0000024F [F504010000000000] 
   599 00000257 E812FD0000              	call bind_primitive
   600                                  
   601                                  	; building closure for char->integer
   602 0000025C 48BF-                   	mov rdi, free_var_24
   602 0000025E [C000000000000000] 
   603 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
   603 00000268 [3405010000000000] 
   604 00000270 E8F9FC0000              	call bind_primitive
   605                                  
   606                                  	; building closure for integer->char
   607 00000275 48BF-                   	mov rdi, free_var_25
   607 00000277 [C800000000000000] 
   608 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
   608 00000281 [6905010000000000] 
   609 00000289 E8E0FC0000              	call bind_primitive
   610                                  
   611                                  	; building closure for trng
   612 0000028E 48BF-                   	mov rdi, free_var_26
   612 00000290 [D000000000000000] 
   613 00000298 48BE-                   	mov rsi, L_code_ptr_trng
   613 0000029A [C305010000000000] 
   614 000002A2 E8C7FC0000              	call bind_primitive
   615                                  
   616                                  	; building closure for zero?
   617 000002A7 48BF-                   	mov rdi, free_var_27
   617 000002A9 [D800000000000000] 
   618 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
   618 000002B3 [E605010000000000] 
   619 000002BB E8AEFC0000              	call bind_primitive
   620                                  
   621                                  	; building closure for integer?
   622 000002C0 48BF-                   	mov rdi, free_var_28
   622 000002C2 [E000000000000000] 
   623 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
   623 000002CC [4106010000000000] 
   624 000002D4 E895FC0000              	call bind_primitive
   625                                  
   626                                  	; building closure for __bin-apply
   627 000002D9 48BF-                   	mov rdi, free_var_29
   627 000002DB [E800000000000000] 
   628 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
   628 000002E5 [96FF000000000000] 
   629 000002ED E87CFC0000              	call bind_primitive
   630                                  
   631                                  	; building closure for __bin-add-rr
   632 000002F2 48BF-                   	mov rdi, free_var_30
   632 000002F4 [F000000000000000] 
   633 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
   633 000002FE [7E06010000000000] 
   634 00000306 E863FC0000              	call bind_primitive
   635                                  
   636                                  	; building closure for __bin-sub-rr
   637 0000030B 48BF-                   	mov rdi, free_var_31
   637 0000030D [F800000000000000] 
   638 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
   638 00000317 [C206010000000000] 
   639 0000031F E84AFC0000              	call bind_primitive
   640                                  
   641                                  	; building closure for __bin-mul-rr
   642 00000324 48BF-                   	mov rdi, free_var_32
   642 00000326 [0001000000000000] 
   643 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
   643 00000330 [0607010000000000] 
   644 00000338 E831FC0000              	call bind_primitive
   645                                  
   646                                  	; building closure for __bin-div-rr
   647 0000033D 48BF-                   	mov rdi, free_var_33
   647 0000033F [0801000000000000] 
   648 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
   648 00000349 [4A07010000000000] 
   649 00000351 E818FC0000              	call bind_primitive
   650                                  
   651                                  	; building closure for __bin-add-qq
   652 00000356 48BF-                   	mov rdi, free_var_34
   652 00000358 [1001000000000000] 
   653 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
   653 00000362 [9C07010000000000] 
   654 0000036A E8FFFB0000              	call bind_primitive
   655                                  
   656                                  	; building closure for __bin-sub-qq
   657 0000036F 48BF-                   	mov rdi, free_var_35
   657 00000371 [1801000000000000] 
   658 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
   658 0000037B [0408010000000000] 
   659 00000383 E8E6FB0000              	call bind_primitive
   660                                  
   661                                  	; building closure for __bin-mul-qq
   662 00000388 48BF-                   	mov rdi, free_var_36
   662 0000038A [2001000000000000] 
   663 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
   663 00000394 [6C08010000000000] 
   664 0000039C E8CDFB0000              	call bind_primitive
   665                                  
   666                                  	; building closure for __bin-div-qq
   667 000003A1 48BF-                   	mov rdi, free_var_37
   667 000003A3 [2801000000000000] 
   668 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
   668 000003AD [C408010000000000] 
   669 000003B5 E8B4FB0000              	call bind_primitive
   670                                  
   671                                  	; building closure for error
   672 000003BA 48BF-                   	mov rdi, free_var_38
   672 000003BC [3001000000000000] 
   673 000003C4 48BE-                   	mov rsi, L_code_ptr_error
   673 000003C6 [9209010000000000] 
   674 000003CE E89BFB0000              	call bind_primitive
   675                                  
   676                                  	; building closure for __bin-less-than-rr
   677 000003D3 48BF-                   	mov rdi, free_var_39
   677 000003D5 [3801000000000000] 
   678 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
   678 000003DF [490A010000000000] 
   679 000003E7 E882FB0000              	call bind_primitive
   680                                  
   681                                  	; building closure for __bin-less-than-qq
   682 000003EC 48BF-                   	mov rdi, free_var_40
   682 000003EE [4001000000000000] 
   683 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
   683 000003F8 [A00A010000000000] 
   684 00000400 E869FB0000              	call bind_primitive
   685                                  
   686                                  	; building closure for __bin-equal-rr
   687 00000405 48BF-                   	mov rdi, free_var_41
   687 00000407 [4801000000000000] 
   688 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
   688 00000411 [030B010000000000] 
   689 00000419 E850FB0000              	call bind_primitive
   690                                  
   691                                  	; building closure for __bin-equal-qq
   692 0000041E 48BF-                   	mov rdi, free_var_42
   692 00000420 [5001000000000000] 
   693 00000428 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
   693 0000042A [5A0B010000000000] 
   694 00000432 E837FB0000              	call bind_primitive
   695                                  
   696                                  	; building closure for quotient
   697 00000437 48BF-                   	mov rdi, free_var_43
   697 00000439 [5801000000000000] 
   698 00000441 48BE-                   	mov rsi, L_code_ptr_quotient
   698 00000443 [BD0B010000000000] 
   699 0000044B E81EFB0000              	call bind_primitive
   700                                  
   701                                  	; building closure for remainder
   702 00000450 48BF-                   	mov rdi, free_var_44
   702 00000452 [6001000000000000] 
   703 0000045A 48BE-                   	mov rsi, L_code_ptr_remainder
   703 0000045C [230C010000000000] 
   704 00000464 E805FB0000              	call bind_primitive
   705                                  
   706                                  	; building closure for set-car!
   707 00000469 48BF-                   	mov rdi, free_var_45
   707 0000046B [6801000000000000] 
   708 00000473 48BE-                   	mov rsi, L_code_ptr_set_car
   708 00000475 [890C010000000000] 
   709 0000047D E8ECFA0000              	call bind_primitive
   710                                  
   711                                  	; building closure for set-cdr!
   712 00000482 48BF-                   	mov rdi, free_var_46
   712 00000484 [7001000000000000] 
   713 0000048C 48BE-                   	mov rsi, L_code_ptr_set_cdr
   713 0000048E [BF0C010000000000] 
   714 00000496 E8D3FA0000              	call bind_primitive
   715                                  
   716                                  	; building closure for string-ref
   717 0000049B 48BF-                   	mov rdi, free_var_47
   717 0000049D [7801000000000000] 
   718 000004A5 48BE-                   	mov rsi, L_code_ptr_string_ref
   718 000004A7 [F50C010000000000] 
   719 000004AF E8BAFA0000              	call bind_primitive
   720                                  
   721                                  	; building closure for vector-ref
   722 000004B4 48BF-                   	mov rdi, free_var_48
   722 000004B6 [8001000000000000] 
   723 000004BE 48BE-                   	mov rsi, L_code_ptr_vector_ref
   723 000004C0 [600D010000000000] 
   724 000004C8 E8A1FA0000              	call bind_primitive
   725                                  
   726                                  	; building closure for vector-set!
   727 000004CD 48BF-                   	mov rdi, free_var_49
   727 000004CF [8801000000000000] 
   728 000004D7 48BE-                   	mov rsi, L_code_ptr_vector_set
   728 000004D9 [BC0D010000000000] 
   729 000004E1 E888FA0000              	call bind_primitive
   730                                  
   731                                  	; building closure for string-set!
   732 000004E6 48BF-                   	mov rdi, free_var_50
   732 000004E8 [9001000000000000] 
   733 000004F0 48BE-                   	mov rsi, L_code_ptr_string_set
   733 000004F2 [260E010000000000] 
   734 000004FA E86FFA0000              	call bind_primitive
   735                                  
   736                                  	; building closure for make-vector
   737 000004FF 48BF-                   	mov rdi, free_var_51
   737 00000501 [9801000000000000] 
   738 00000509 48BE-                   	mov rsi, L_code_ptr_make_vector
   738 0000050B [9B0E010000000000] 
   739 00000513 E856FA0000              	call bind_primitive
   740                                  
   741                                  	; building closure for make-string
   742 00000518 48BF-                   	mov rdi, free_var_52
   742 0000051A [A001000000000000] 
   743 00000522 48BE-                   	mov rsi, L_code_ptr_make_string
   743 00000524 [050F010000000000] 
   744 0000052C E83DFA0000              	call bind_primitive
   745                                  
   746                                  	; building closure for numerator
   747 00000531 48BF-                   	mov rdi, free_var_53
   747 00000533 [A801000000000000] 
   748 0000053B 48BE-                   	mov rsi, L_code_ptr_numerator
   748 0000053D [770F010000000000] 
   749 00000545 E824FA0000              	call bind_primitive
   750                                  
   751                                  	; building closure for denominator
   752 0000054A 48BF-                   	mov rdi, free_var_54
   752 0000054C [B001000000000000] 
   753 00000554 48BE-                   	mov rsi, L_code_ptr_denominator
   753 00000556 [A40F010000000000] 
   754 0000055E E80BFA0000              	call bind_primitive
   755                                  
   756                                  	; building closure for eq?
   757 00000563 48BF-                   	mov rdi, free_var_55
   757 00000565 [B801000000000000] 
   758 0000056D 48BE-                   	mov rsi, L_code_ptr_eq
   758 0000056F [D10F010000000000] 
   759 00000577 E8F2F90000              	call bind_primitive
   760                                  
   761 0000057C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   762 00000581 E857F40000              	call malloc
   763 00000586 50                      	push rax
   764 00000587 BF00000000              	mov rdi, 8 * 0	; new rib
   765 0000058C E84CF40000              	call malloc
   766 00000591 50                      	push rax
   767 00000592 BF08000000              	mov rdi, 8 * 1	; extended env
   768 00000597 E841F40000              	call malloc
   769 0000059C 488B7D10                	mov rdi, ENV
   770 000005A0 BE00000000              	mov rsi, 0
   771 000005A5 BA01000000              	mov rdx, 1
   772                                  .L_lambda_simple_env_loop_009d:	; ext_env[i + 1] <-- env[i]
   773 000005AA 4883FE00                	cmp rsi, 0
   774 000005AE 7410                    	je .L_lambda_simple_env_end_009d
   775 000005B0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   776 000005B4 48890CD0                	mov qword [rax + 8 * rdx], rcx
   777 000005B8 48FFC6                  	inc rsi
   778 000005BB 48FFC2                  	inc rdx
   779 000005BE EBEA                    	jmp .L_lambda_simple_env_loop_009d
   780                                  .L_lambda_simple_env_end_009d:
   781 000005C0 5B                      	pop rbx
   782 000005C1 BE00000000              	mov rsi, 0
   783                                  .L_lambda_simple_params_loop_009d:	; copy params
   784 000005C6 4883FE00                	cmp rsi, 0
   785 000005CA 740E                    	je .L_lambda_simple_params_end_009d
   786 000005CC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   787 000005D1 488914F3                	mov qword [rbx + 8 * rsi], rdx
   788 000005D5 48FFC6                  	inc rsi
   789 000005D8 EBEC                    	jmp .L_lambda_simple_params_loop_009d
   790                                  .L_lambda_simple_params_end_009d:
   791 000005DA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   792 000005DD 4889C3                  	mov rbx, rax
   793 000005E0 58                      	pop rax
   794 000005E1 C60005                  	mov byte [rax], T_closure
   795 000005E4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   796 000005E8 48C74009[F5050000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009d
   797 000005F0 E982000000              	jmp .L_lambda_simple_end_009d
   798                                  .L_lambda_simple_code_009d:	; lambda-simple body
   799 000005F5 48837C241001            	cmp qword [rsp + 8 * 2], 1
   800 000005FB 740B                    	je .L_lambda_simple_arity_check_ok_009d
   801 000005FD FF742410                	push qword [rsp + 8 * 2]
   802 00000601 6A01                    	push 1
   803 00000603 E98EF30000              	jmp L_error_incorrect_arity_simple
   804                                  .L_lambda_simple_arity_check_ok_009d:
   805 00000608 C8000000                	enter 0, 0
   806 0000060C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   807 00000610 50                      	push rax
   808 00000611 6A01                    	push 1
   809 00000613 488B0425[80000000]      	mov rax, qword [free_var_16]
   810                                  	assert_closure(rax)
    42 0000061B 803805              <1>  cmp byte [%1], %2
    43 0000061E 0F85AD0B0100        <1>  jne L_error_incorrect_type
   811 00000624 FF7001                  	push SOB_CLOSURE_ENV(rax)
   812 00000627 FF5009                  	call SOB_CLOSURE_CODE(rax)
   813 0000062A 50                      	push rax
   814 0000062B 6A01                    	push 1
   815 0000062D 488B0425[80000000]      	mov rax, qword [free_var_16]
   816                                  	assert_closure(rax)
    42 00000635 803805              <1>  cmp byte [%1], %2
    43 00000638 0F85930B0100        <1>  jne L_error_incorrect_type
   817 0000063E FF7001                  	push SOB_CLOSURE_ENV(rax)
   818 00000641 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
   819 00000644 FF7500                  	push qword [rbp] ; same the old rbp
   820 00000647 BA04000000              	mov rdx, 1 + 3
   821 0000064C 488B4D00                	mov rcx, [rbp]
   822 00000650 4889EF                  	mov rdi, rbp
   823                                  .L_tc_recycle_frame_loop_00b7:
   824 00000653 4883FA00                	cmp rdx, 0
   825 00000657 7413                    	je .L_tc_recycle_frame_done_00b7
   826 00000659 4883E908                	sub rcx, 8
   827 0000065D 4883EF08                	sub rdi, 8
   828 00000661 488B37                  	mov rsi, [rdi]
   829 00000664 488931                  	mov qword [rcx], rsi
   830 00000667 48FFCA                  	dec rdx
   831 0000066A EBE7                    	jmp .L_tc_recycle_frame_loop_00b7
   832                                  .L_tc_recycle_frame_done_00b7:
   833 0000066C 5D                      	pop rbp ; restore the old rbp
   834 0000066D 4889CC                  	mov rsp, rcx
   835 00000670 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   836 00000673 C9                      	leave
   837 00000674 C21800                  	ret 8 * (2 + 1)
   838                                  .L_lambda_simple_end_009d:	; new closure is in rax
   839 00000677 48890425[C0010000]      	mov qword [free_var_56], rax
   840 0000067F 48B8-                   	mov rax, sob_void
   840 00000681 [0000000000000000] 
   841                                  
   842 00000689 4889C7                  	mov rdi, rax
   843 0000068C E85DF30000              	call print_sexpr_if_not_void
   844                                  
   845 00000691 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   846 00000696 E842F30000              	call malloc
   847 0000069B 50                      	push rax
   848 0000069C BF00000000              	mov rdi, 8 * 0	; new rib
   849 000006A1 E837F30000              	call malloc
   850 000006A6 50                      	push rax
   851 000006A7 BF08000000              	mov rdi, 8 * 1	; extended env
   852 000006AC E82CF30000              	call malloc
   853 000006B1 488B7D10                	mov rdi, ENV
   854 000006B5 BE00000000              	mov rsi, 0
   855 000006BA BA01000000              	mov rdx, 1
   856                                  .L_lambda_simple_env_loop_009e:	; ext_env[i + 1] <-- env[i]
   857 000006BF 4883FE00                	cmp rsi, 0
   858 000006C3 7410                    	je .L_lambda_simple_env_end_009e
   859 000006C5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   860 000006C9 48890CD0                	mov qword [rax + 8 * rdx], rcx
   861 000006CD 48FFC6                  	inc rsi
   862 000006D0 48FFC2                  	inc rdx
   863 000006D3 EBEA                    	jmp .L_lambda_simple_env_loop_009e
   864                                  .L_lambda_simple_env_end_009e:
   865 000006D5 5B                      	pop rbx
   866 000006D6 BE00000000              	mov rsi, 0
   867                                  .L_lambda_simple_params_loop_009e:	; copy params
   868 000006DB 4883FE00                	cmp rsi, 0
   869 000006DF 740E                    	je .L_lambda_simple_params_end_009e
   870 000006E1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   871 000006E6 488914F3                	mov qword [rbx + 8 * rsi], rdx
   872 000006EA 48FFC6                  	inc rsi
   873 000006ED EBEC                    	jmp .L_lambda_simple_params_loop_009e
   874                                  .L_lambda_simple_params_end_009e:
   875 000006EF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   876 000006F2 4889C3                  	mov rbx, rax
   877 000006F5 58                      	pop rax
   878 000006F6 C60005                  	mov byte [rax], T_closure
   879 000006F9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   880 000006FD 48C74009[0A070000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009e
   881 00000705 E982000000              	jmp .L_lambda_simple_end_009e
   882                                  .L_lambda_simple_code_009e:	; lambda-simple body
   883 0000070A 48837C241001            	cmp qword [rsp + 8 * 2], 1
   884 00000710 740B                    	je .L_lambda_simple_arity_check_ok_009e
   885 00000712 FF742410                	push qword [rsp + 8 * 2]
   886 00000716 6A01                    	push 1
   887 00000718 E979F20000              	jmp L_error_incorrect_arity_simple
   888                                  .L_lambda_simple_arity_check_ok_009e:
   889 0000071D C8000000                	enter 0, 0
   890 00000721 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   891 00000725 50                      	push rax
   892 00000726 6A01                    	push 1
   893 00000728 488B0425[88000000]      	mov rax, qword [free_var_17]
   894                                  	assert_closure(rax)
    42 00000730 803805              <1>  cmp byte [%1], %2
    43 00000733 0F85980A0100        <1>  jne L_error_incorrect_type
   895 00000739 FF7001                  	push SOB_CLOSURE_ENV(rax)
   896 0000073C FF5009                  	call SOB_CLOSURE_CODE(rax)
   897 0000073F 50                      	push rax
   898 00000740 6A01                    	push 1
   899 00000742 488B0425[80000000]      	mov rax, qword [free_var_16]
   900                                  	assert_closure(rax)
    42 0000074A 803805              <1>  cmp byte [%1], %2
    43 0000074D 0F857E0A0100        <1>  jne L_error_incorrect_type
   901 00000753 FF7001                  	push SOB_CLOSURE_ENV(rax)
   902 00000756 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
   903 00000759 FF7500                  	push qword [rbp] ; same the old rbp
   904 0000075C BA04000000              	mov rdx, 1 + 3
   905 00000761 488B4D00                	mov rcx, [rbp]
   906 00000765 4889EF                  	mov rdi, rbp
   907                                  .L_tc_recycle_frame_loop_00b8:
   908 00000768 4883FA00                	cmp rdx, 0
   909 0000076C 7413                    	je .L_tc_recycle_frame_done_00b8
   910 0000076E 4883E908                	sub rcx, 8
   911 00000772 4883EF08                	sub rdi, 8
   912 00000776 488B37                  	mov rsi, [rdi]
   913 00000779 488931                  	mov qword [rcx], rsi
   914 0000077C 48FFCA                  	dec rdx
   915 0000077F EBE7                    	jmp .L_tc_recycle_frame_loop_00b8
   916                                  .L_tc_recycle_frame_done_00b8:
   917 00000781 5D                      	pop rbp ; restore the old rbp
   918 00000782 4889CC                  	mov rsp, rcx
   919 00000785 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
   920 00000788 C9                      	leave
   921 00000789 C21800                  	ret 8 * (2 + 1)
   922                                  .L_lambda_simple_end_009e:	; new closure is in rax
   923 0000078C 48890425[C8010000]      	mov qword [free_var_57], rax
   924 00000794 48B8-                   	mov rax, sob_void
   924 00000796 [0000000000000000] 
   925                                  
   926 0000079E 4889C7                  	mov rdi, rax
   927 000007A1 E848F20000              	call print_sexpr_if_not_void
   928                                  
   929 000007A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
   930 000007AB E82DF20000              	call malloc
   931 000007B0 50                      	push rax
   932 000007B1 BF00000000              	mov rdi, 8 * 0	; new rib
   933 000007B6 E822F20000              	call malloc
   934 000007BB 50                      	push rax
   935 000007BC BF08000000              	mov rdi, 8 * 1	; extended env
   936 000007C1 E817F20000              	call malloc
   937 000007C6 488B7D10                	mov rdi, ENV
   938 000007CA BE00000000              	mov rsi, 0
   939 000007CF BA01000000              	mov rdx, 1
   940                                  .L_lambda_simple_env_loop_009f:	; ext_env[i + 1] <-- env[i]
   941 000007D4 4883FE00                	cmp rsi, 0
   942 000007D8 7410                    	je .L_lambda_simple_env_end_009f
   943 000007DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
   944 000007DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
   945 000007E2 48FFC6                  	inc rsi
   946 000007E5 48FFC2                  	inc rdx
   947 000007E8 EBEA                    	jmp .L_lambda_simple_env_loop_009f
   948                                  .L_lambda_simple_env_end_009f:
   949 000007EA 5B                      	pop rbx
   950 000007EB BE00000000              	mov rsi, 0
   951                                  .L_lambda_simple_params_loop_009f:	; copy params
   952 000007F0 4883FE00                	cmp rsi, 0
   953 000007F4 740E                    	je .L_lambda_simple_params_end_009f
   954 000007F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
   955 000007FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
   956 000007FF 48FFC6                  	inc rsi
   957 00000802 EBEC                    	jmp .L_lambda_simple_params_loop_009f
   958                                  .L_lambda_simple_params_end_009f:
   959 00000804 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
   960 00000807 4889C3                  	mov rbx, rax
   961 0000080A 58                      	pop rax
   962 0000080B C60005                  	mov byte [rax], T_closure
   963 0000080E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
   964 00000812 48C74009[1F080000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_009f
   965 0000081A E982000000              	jmp .L_lambda_simple_end_009f
   966                                  .L_lambda_simple_code_009f:	; lambda-simple body
   967 0000081F 48837C241001            	cmp qword [rsp + 8 * 2], 1
   968 00000825 740B                    	je .L_lambda_simple_arity_check_ok_009f
   969 00000827 FF742410                	push qword [rsp + 8 * 2]
   970 0000082B 6A01                    	push 1
   971 0000082D E964F10000              	jmp L_error_incorrect_arity_simple
   972                                  .L_lambda_simple_arity_check_ok_009f:
   973 00000832 C8000000                	enter 0, 0
   974 00000836 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
   975 0000083A 50                      	push rax
   976 0000083B 6A01                    	push 1
   977 0000083D 488B0425[80000000]      	mov rax, qword [free_var_16]
   978                                  	assert_closure(rax)
    42 00000845 803805              <1>  cmp byte [%1], %2
    43 00000848 0F8583090100        <1>  jne L_error_incorrect_type
   979 0000084E FF7001                  	push SOB_CLOSURE_ENV(rax)
   980 00000851 FF5009                  	call SOB_CLOSURE_CODE(rax)
   981 00000854 50                      	push rax
   982 00000855 6A01                    	push 1
   983 00000857 488B0425[88000000]      	mov rax, qword [free_var_17]
   984                                  	assert_closure(rax)
    42 0000085F 803805              <1>  cmp byte [%1], %2
    43 00000862 0F8569090100        <1>  jne L_error_incorrect_type
   985 00000868 FF7001                  	push SOB_CLOSURE_ENV(rax)
   986 0000086B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
   987 0000086E FF7500                  	push qword [rbp] ; same the old rbp
   988 00000871 BA04000000              	mov rdx, 1 + 3
   989 00000876 488B4D00                	mov rcx, [rbp]
   990 0000087A 4889EF                  	mov rdi, rbp
   991                                  .L_tc_recycle_frame_loop_00b9:
   992 0000087D 4883FA00                	cmp rdx, 0
   993 00000881 7413                    	je .L_tc_recycle_frame_done_00b9
   994 00000883 4883E908                	sub rcx, 8
   995 00000887 4883EF08                	sub rdi, 8
   996 0000088B 488B37                  	mov rsi, [rdi]
   997 0000088E 488931                  	mov qword [rcx], rsi
   998 00000891 48FFCA                  	dec rdx
   999 00000894 EBE7                    	jmp .L_tc_recycle_frame_loop_00b9
  1000                                  .L_tc_recycle_frame_done_00b9:
  1001 00000896 5D                      	pop rbp ; restore the old rbp
  1002 00000897 4889CC                  	mov rsp, rcx
  1003 0000089A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1004 0000089D C9                      	leave
  1005 0000089E C21800                  	ret 8 * (2 + 1)
  1006                                  .L_lambda_simple_end_009f:	; new closure is in rax
  1007 000008A1 48890425[D0010000]      	mov qword [free_var_58], rax
  1008 000008A9 48B8-                   	mov rax, sob_void
  1008 000008AB [0000000000000000] 
  1009                                  
  1010 000008B3 4889C7                  	mov rdi, rax
  1011 000008B6 E833F10000              	call print_sexpr_if_not_void
  1012                                  
  1013 000008BB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1014 000008C0 E818F10000              	call malloc
  1015 000008C5 50                      	push rax
  1016 000008C6 BF00000000              	mov rdi, 8 * 0	; new rib
  1017 000008CB E80DF10000              	call malloc
  1018 000008D0 50                      	push rax
  1019 000008D1 BF08000000              	mov rdi, 8 * 1	; extended env
  1020 000008D6 E802F10000              	call malloc
  1021 000008DB 488B7D10                	mov rdi, ENV
  1022 000008DF BE00000000              	mov rsi, 0
  1023 000008E4 BA01000000              	mov rdx, 1
  1024                                  .L_lambda_simple_env_loop_00a0:	; ext_env[i + 1] <-- env[i]
  1025 000008E9 4883FE00                	cmp rsi, 0
  1026 000008ED 7410                    	je .L_lambda_simple_env_end_00a0
  1027 000008EF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1028 000008F3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1029 000008F7 48FFC6                  	inc rsi
  1030 000008FA 48FFC2                  	inc rdx
  1031 000008FD EBEA                    	jmp .L_lambda_simple_env_loop_00a0
  1032                                  .L_lambda_simple_env_end_00a0:
  1033 000008FF 5B                      	pop rbx
  1034 00000900 BE00000000              	mov rsi, 0
  1035                                  .L_lambda_simple_params_loop_00a0:	; copy params
  1036 00000905 4883FE00                	cmp rsi, 0
  1037 00000909 740E                    	je .L_lambda_simple_params_end_00a0
  1038 0000090B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1039 00000910 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1040 00000914 48FFC6                  	inc rsi
  1041 00000917 EBEC                    	jmp .L_lambda_simple_params_loop_00a0
  1042                                  .L_lambda_simple_params_end_00a0:
  1043 00000919 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1044 0000091C 4889C3                  	mov rbx, rax
  1045 0000091F 58                      	pop rax
  1046 00000920 C60005                  	mov byte [rax], T_closure
  1047 00000923 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1048 00000927 48C74009[34090000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a0
  1049 0000092F E982000000              	jmp .L_lambda_simple_end_00a0
  1050                                  .L_lambda_simple_code_00a0:	; lambda-simple body
  1051 00000934 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1052 0000093A 740B                    	je .L_lambda_simple_arity_check_ok_00a0
  1053 0000093C FF742410                	push qword [rsp + 8 * 2]
  1054 00000940 6A01                    	push 1
  1055 00000942 E94FF00000              	jmp L_error_incorrect_arity_simple
  1056                                  .L_lambda_simple_arity_check_ok_00a0:
  1057 00000947 C8000000                	enter 0, 0
  1058 0000094B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1059 0000094F 50                      	push rax
  1060 00000950 6A01                    	push 1
  1061 00000952 488B0425[88000000]      	mov rax, qword [free_var_17]
  1062                                  	assert_closure(rax)
    42 0000095A 803805              <1>  cmp byte [%1], %2
    43 0000095D 0F856E080100        <1>  jne L_error_incorrect_type
  1063 00000963 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1064 00000966 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1065 00000969 50                      	push rax
  1066 0000096A 6A01                    	push 1
  1067 0000096C 488B0425[88000000]      	mov rax, qword [free_var_17]
  1068                                  	assert_closure(rax)
    42 00000974 803805              <1>  cmp byte [%1], %2
    43 00000977 0F8554080100        <1>  jne L_error_incorrect_type
  1069 0000097D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1070 00000980 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1071 00000983 FF7500                  	push qword [rbp] ; same the old rbp
  1072 00000986 BA04000000              	mov rdx, 1 + 3
  1073 0000098B 488B4D00                	mov rcx, [rbp]
  1074 0000098F 4889EF                  	mov rdi, rbp
  1075                                  .L_tc_recycle_frame_loop_00ba:
  1076 00000992 4883FA00                	cmp rdx, 0
  1077 00000996 7413                    	je .L_tc_recycle_frame_done_00ba
  1078 00000998 4883E908                	sub rcx, 8
  1079 0000099C 4883EF08                	sub rdi, 8
  1080 000009A0 488B37                  	mov rsi, [rdi]
  1081 000009A3 488931                  	mov qword [rcx], rsi
  1082 000009A6 48FFCA                  	dec rdx
  1083 000009A9 EBE7                    	jmp .L_tc_recycle_frame_loop_00ba
  1084                                  .L_tc_recycle_frame_done_00ba:
  1085 000009AB 5D                      	pop rbp ; restore the old rbp
  1086 000009AC 4889CC                  	mov rsp, rcx
  1087 000009AF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1088 000009B2 C9                      	leave
  1089 000009B3 C21800                  	ret 8 * (2 + 1)
  1090                                  .L_lambda_simple_end_00a0:	; new closure is in rax
  1091 000009B6 48890425[D8010000]      	mov qword [free_var_59], rax
  1092 000009BE 48B8-                   	mov rax, sob_void
  1092 000009C0 [0000000000000000] 
  1093                                  
  1094 000009C8 4889C7                  	mov rdi, rax
  1095 000009CB E81EF00000              	call print_sexpr_if_not_void
  1096                                  
  1097 000009D0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1098 000009D5 E803F00000              	call malloc
  1099 000009DA 50                      	push rax
  1100 000009DB BF00000000              	mov rdi, 8 * 0	; new rib
  1101 000009E0 E8F8EF0000              	call malloc
  1102 000009E5 50                      	push rax
  1103 000009E6 BF08000000              	mov rdi, 8 * 1	; extended env
  1104 000009EB E8EDEF0000              	call malloc
  1105 000009F0 488B7D10                	mov rdi, ENV
  1106 000009F4 BE00000000              	mov rsi, 0
  1107 000009F9 BA01000000              	mov rdx, 1
  1108                                  .L_lambda_simple_env_loop_00a1:	; ext_env[i + 1] <-- env[i]
  1109 000009FE 4883FE00                	cmp rsi, 0
  1110 00000A02 7410                    	je .L_lambda_simple_env_end_00a1
  1111 00000A04 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1112 00000A08 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1113 00000A0C 48FFC6                  	inc rsi
  1114 00000A0F 48FFC2                  	inc rdx
  1115 00000A12 EBEA                    	jmp .L_lambda_simple_env_loop_00a1
  1116                                  .L_lambda_simple_env_end_00a1:
  1117 00000A14 5B                      	pop rbx
  1118 00000A15 BE00000000              	mov rsi, 0
  1119                                  .L_lambda_simple_params_loop_00a1:	; copy params
  1120 00000A1A 4883FE00                	cmp rsi, 0
  1121 00000A1E 740E                    	je .L_lambda_simple_params_end_00a1
  1122 00000A20 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1123 00000A25 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1124 00000A29 48FFC6                  	inc rsi
  1125 00000A2C EBEC                    	jmp .L_lambda_simple_params_loop_00a1
  1126                                  .L_lambda_simple_params_end_00a1:
  1127 00000A2E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1128 00000A31 4889C3                  	mov rbx, rax
  1129 00000A34 58                      	pop rax
  1130 00000A35 C60005                  	mov byte [rax], T_closure
  1131 00000A38 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1132 00000A3C 48C74009[490A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a1
  1133 00000A44 E982000000              	jmp .L_lambda_simple_end_00a1
  1134                                  .L_lambda_simple_code_00a1:	; lambda-simple body
  1135 00000A49 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1136 00000A4F 740B                    	je .L_lambda_simple_arity_check_ok_00a1
  1137 00000A51 FF742410                	push qword [rsp + 8 * 2]
  1138 00000A55 6A01                    	push 1
  1139 00000A57 E93AEF0000              	jmp L_error_incorrect_arity_simple
  1140                                  .L_lambda_simple_arity_check_ok_00a1:
  1141 00000A5C C8000000                	enter 0, 0
  1142 00000A60 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1143 00000A64 50                      	push rax
  1144 00000A65 6A01                    	push 1
  1145 00000A67 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1146                                  	assert_closure(rax)
    42 00000A6F 803805              <1>  cmp byte [%1], %2
    43 00000A72 0F8559070100        <1>  jne L_error_incorrect_type
  1147 00000A78 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1148 00000A7B FF5009                  	call SOB_CLOSURE_CODE(rax)
  1149 00000A7E 50                      	push rax
  1150 00000A7F 6A01                    	push 1
  1151 00000A81 488B0425[80000000]      	mov rax, qword [free_var_16]
  1152                                  	assert_closure(rax)
    42 00000A89 803805              <1>  cmp byte [%1], %2
    43 00000A8C 0F853F070100        <1>  jne L_error_incorrect_type
  1153 00000A92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1154 00000A95 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1155 00000A98 FF7500                  	push qword [rbp] ; same the old rbp
  1156 00000A9B BA04000000              	mov rdx, 1 + 3
  1157 00000AA0 488B4D00                	mov rcx, [rbp]
  1158 00000AA4 4889EF                  	mov rdi, rbp
  1159                                  .L_tc_recycle_frame_loop_00bb:
  1160 00000AA7 4883FA00                	cmp rdx, 0
  1161 00000AAB 7413                    	je .L_tc_recycle_frame_done_00bb
  1162 00000AAD 4883E908                	sub rcx, 8
  1163 00000AB1 4883EF08                	sub rdi, 8
  1164 00000AB5 488B37                  	mov rsi, [rdi]
  1165 00000AB8 488931                  	mov qword [rcx], rsi
  1166 00000ABB 48FFCA                  	dec rdx
  1167 00000ABE EBE7                    	jmp .L_tc_recycle_frame_loop_00bb
  1168                                  .L_tc_recycle_frame_done_00bb:
  1169 00000AC0 5D                      	pop rbp ; restore the old rbp
  1170 00000AC1 4889CC                  	mov rsp, rcx
  1171 00000AC4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1172 00000AC7 C9                      	leave
  1173 00000AC8 C21800                  	ret 8 * (2 + 1)
  1174                                  .L_lambda_simple_end_00a1:	; new closure is in rax
  1175 00000ACB 48890425[E0010000]      	mov qword [free_var_60], rax
  1176 00000AD3 48B8-                   	mov rax, sob_void
  1176 00000AD5 [0000000000000000] 
  1177                                  
  1178 00000ADD 4889C7                  	mov rdi, rax
  1179 00000AE0 E809EF0000              	call print_sexpr_if_not_void
  1180                                  
  1181 00000AE5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1182 00000AEA E8EEEE0000              	call malloc
  1183 00000AEF 50                      	push rax
  1184 00000AF0 BF00000000              	mov rdi, 8 * 0	; new rib
  1185 00000AF5 E8E3EE0000              	call malloc
  1186 00000AFA 50                      	push rax
  1187 00000AFB BF08000000              	mov rdi, 8 * 1	; extended env
  1188 00000B00 E8D8EE0000              	call malloc
  1189 00000B05 488B7D10                	mov rdi, ENV
  1190 00000B09 BE00000000              	mov rsi, 0
  1191 00000B0E BA01000000              	mov rdx, 1
  1192                                  .L_lambda_simple_env_loop_00a2:	; ext_env[i + 1] <-- env[i]
  1193 00000B13 4883FE00                	cmp rsi, 0
  1194 00000B17 7410                    	je .L_lambda_simple_env_end_00a2
  1195 00000B19 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1196 00000B1D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1197 00000B21 48FFC6                  	inc rsi
  1198 00000B24 48FFC2                  	inc rdx
  1199 00000B27 EBEA                    	jmp .L_lambda_simple_env_loop_00a2
  1200                                  .L_lambda_simple_env_end_00a2:
  1201 00000B29 5B                      	pop rbx
  1202 00000B2A BE00000000              	mov rsi, 0
  1203                                  .L_lambda_simple_params_loop_00a2:	; copy params
  1204 00000B2F 4883FE00                	cmp rsi, 0
  1205 00000B33 740E                    	je .L_lambda_simple_params_end_00a2
  1206 00000B35 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1207 00000B3A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1208 00000B3E 48FFC6                  	inc rsi
  1209 00000B41 EBEC                    	jmp .L_lambda_simple_params_loop_00a2
  1210                                  .L_lambda_simple_params_end_00a2:
  1211 00000B43 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1212 00000B46 4889C3                  	mov rbx, rax
  1213 00000B49 58                      	pop rax
  1214 00000B4A C60005                  	mov byte [rax], T_closure
  1215 00000B4D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1216 00000B51 48C74009[5E0B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a2
  1217 00000B59 E982000000              	jmp .L_lambda_simple_end_00a2
  1218                                  .L_lambda_simple_code_00a2:	; lambda-simple body
  1219 00000B5E 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1220 00000B64 740B                    	je .L_lambda_simple_arity_check_ok_00a2
  1221 00000B66 FF742410                	push qword [rsp + 8 * 2]
  1222 00000B6A 6A01                    	push 1
  1223 00000B6C E925EE0000              	jmp L_error_incorrect_arity_simple
  1224                                  .L_lambda_simple_arity_check_ok_00a2:
  1225 00000B71 C8000000                	enter 0, 0
  1226 00000B75 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1227 00000B79 50                      	push rax
  1228 00000B7A 6A01                    	push 1
  1229 00000B7C 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1230                                  	assert_closure(rax)
    42 00000B84 803805              <1>  cmp byte [%1], %2
    43 00000B87 0F8544060100        <1>  jne L_error_incorrect_type
  1231 00000B8D FF7001                  	push SOB_CLOSURE_ENV(rax)
  1232 00000B90 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1233 00000B93 50                      	push rax
  1234 00000B94 6A01                    	push 1
  1235 00000B96 488B0425[80000000]      	mov rax, qword [free_var_16]
  1236                                  	assert_closure(rax)
    42 00000B9E 803805              <1>  cmp byte [%1], %2
    43 00000BA1 0F852A060100        <1>  jne L_error_incorrect_type
  1237 00000BA7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1238 00000BAA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1239 00000BAD FF7500                  	push qword [rbp] ; same the old rbp
  1240 00000BB0 BA04000000              	mov rdx, 1 + 3
  1241 00000BB5 488B4D00                	mov rcx, [rbp]
  1242 00000BB9 4889EF                  	mov rdi, rbp
  1243                                  .L_tc_recycle_frame_loop_00bc:
  1244 00000BBC 4883FA00                	cmp rdx, 0
  1245 00000BC0 7413                    	je .L_tc_recycle_frame_done_00bc
  1246 00000BC2 4883E908                	sub rcx, 8
  1247 00000BC6 4883EF08                	sub rdi, 8
  1248 00000BCA 488B37                  	mov rsi, [rdi]
  1249 00000BCD 488931                  	mov qword [rcx], rsi
  1250 00000BD0 48FFCA                  	dec rdx
  1251 00000BD3 EBE7                    	jmp .L_tc_recycle_frame_loop_00bc
  1252                                  .L_tc_recycle_frame_done_00bc:
  1253 00000BD5 5D                      	pop rbp ; restore the old rbp
  1254 00000BD6 4889CC                  	mov rsp, rcx
  1255 00000BD9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1256 00000BDC C9                      	leave
  1257 00000BDD C21800                  	ret 8 * (2 + 1)
  1258                                  .L_lambda_simple_end_00a2:	; new closure is in rax
  1259 00000BE0 48890425[E8010000]      	mov qword [free_var_61], rax
  1260 00000BE8 48B8-                   	mov rax, sob_void
  1260 00000BEA [0000000000000000] 
  1261                                  
  1262 00000BF2 4889C7                  	mov rdi, rax
  1263 00000BF5 E8F4ED0000              	call print_sexpr_if_not_void
  1264                                  
  1265 00000BFA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1266 00000BFF E8D9ED0000              	call malloc
  1267 00000C04 50                      	push rax
  1268 00000C05 BF00000000              	mov rdi, 8 * 0	; new rib
  1269 00000C0A E8CEED0000              	call malloc
  1270 00000C0F 50                      	push rax
  1271 00000C10 BF08000000              	mov rdi, 8 * 1	; extended env
  1272 00000C15 E8C3ED0000              	call malloc
  1273 00000C1A 488B7D10                	mov rdi, ENV
  1274 00000C1E BE00000000              	mov rsi, 0
  1275 00000C23 BA01000000              	mov rdx, 1
  1276                                  .L_lambda_simple_env_loop_00a3:	; ext_env[i + 1] <-- env[i]
  1277 00000C28 4883FE00                	cmp rsi, 0
  1278 00000C2C 7410                    	je .L_lambda_simple_env_end_00a3
  1279 00000C2E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1280 00000C32 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1281 00000C36 48FFC6                  	inc rsi
  1282 00000C39 48FFC2                  	inc rdx
  1283 00000C3C EBEA                    	jmp .L_lambda_simple_env_loop_00a3
  1284                                  .L_lambda_simple_env_end_00a3:
  1285 00000C3E 5B                      	pop rbx
  1286 00000C3F BE00000000              	mov rsi, 0
  1287                                  .L_lambda_simple_params_loop_00a3:	; copy params
  1288 00000C44 4883FE00                	cmp rsi, 0
  1289 00000C48 740E                    	je .L_lambda_simple_params_end_00a3
  1290 00000C4A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1291 00000C4F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1292 00000C53 48FFC6                  	inc rsi
  1293 00000C56 EBEC                    	jmp .L_lambda_simple_params_loop_00a3
  1294                                  .L_lambda_simple_params_end_00a3:
  1295 00000C58 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1296 00000C5B 4889C3                  	mov rbx, rax
  1297 00000C5E 58                      	pop rax
  1298 00000C5F C60005                  	mov byte [rax], T_closure
  1299 00000C62 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1300 00000C66 48C74009[730C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a3
  1301 00000C6E E982000000              	jmp .L_lambda_simple_end_00a3
  1302                                  .L_lambda_simple_code_00a3:	; lambda-simple body
  1303 00000C73 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1304 00000C79 740B                    	je .L_lambda_simple_arity_check_ok_00a3
  1305 00000C7B FF742410                	push qword [rsp + 8 * 2]
  1306 00000C7F 6A01                    	push 1
  1307 00000C81 E910ED0000              	jmp L_error_incorrect_arity_simple
  1308                                  .L_lambda_simple_arity_check_ok_00a3:
  1309 00000C86 C8000000                	enter 0, 0
  1310 00000C8A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1311 00000C8E 50                      	push rax
  1312 00000C8F 6A01                    	push 1
  1313 00000C91 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1314                                  	assert_closure(rax)
    42 00000C99 803805              <1>  cmp byte [%1], %2
    43 00000C9C 0F852F050100        <1>  jne L_error_incorrect_type
  1315 00000CA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1316 00000CA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1317 00000CA8 50                      	push rax
  1318 00000CA9 6A01                    	push 1
  1319 00000CAB 488B0425[80000000]      	mov rax, qword [free_var_16]
  1320                                  	assert_closure(rax)
    42 00000CB3 803805              <1>  cmp byte [%1], %2
    43 00000CB6 0F8515050100        <1>  jne L_error_incorrect_type
  1321 00000CBC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1322 00000CBF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1323 00000CC2 FF7500                  	push qword [rbp] ; same the old rbp
  1324 00000CC5 BA04000000              	mov rdx, 1 + 3
  1325 00000CCA 488B4D00                	mov rcx, [rbp]
  1326 00000CCE 4889EF                  	mov rdi, rbp
  1327                                  .L_tc_recycle_frame_loop_00bd:
  1328 00000CD1 4883FA00                	cmp rdx, 0
  1329 00000CD5 7413                    	je .L_tc_recycle_frame_done_00bd
  1330 00000CD7 4883E908                	sub rcx, 8
  1331 00000CDB 4883EF08                	sub rdi, 8
  1332 00000CDF 488B37                  	mov rsi, [rdi]
  1333 00000CE2 488931                  	mov qword [rcx], rsi
  1334 00000CE5 48FFCA                  	dec rdx
  1335 00000CE8 EBE7                    	jmp .L_tc_recycle_frame_loop_00bd
  1336                                  .L_tc_recycle_frame_done_00bd:
  1337 00000CEA 5D                      	pop rbp ; restore the old rbp
  1338 00000CEB 4889CC                  	mov rsp, rcx
  1339 00000CEE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1340 00000CF1 C9                      	leave
  1341 00000CF2 C21800                  	ret 8 * (2 + 1)
  1342                                  .L_lambda_simple_end_00a3:	; new closure is in rax
  1343 00000CF5 48890425[F0010000]      	mov qword [free_var_62], rax
  1344 00000CFD 48B8-                   	mov rax, sob_void
  1344 00000CFF [0000000000000000] 
  1345                                  
  1346 00000D07 4889C7                  	mov rdi, rax
  1347 00000D0A E8DFEC0000              	call print_sexpr_if_not_void
  1348                                  
  1349 00000D0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1350 00000D14 E8C4EC0000              	call malloc
  1351 00000D19 50                      	push rax
  1352 00000D1A BF00000000              	mov rdi, 8 * 0	; new rib
  1353 00000D1F E8B9EC0000              	call malloc
  1354 00000D24 50                      	push rax
  1355 00000D25 BF08000000              	mov rdi, 8 * 1	; extended env
  1356 00000D2A E8AEEC0000              	call malloc
  1357 00000D2F 488B7D10                	mov rdi, ENV
  1358 00000D33 BE00000000              	mov rsi, 0
  1359 00000D38 BA01000000              	mov rdx, 1
  1360                                  .L_lambda_simple_env_loop_00a4:	; ext_env[i + 1] <-- env[i]
  1361 00000D3D 4883FE00                	cmp rsi, 0
  1362 00000D41 7410                    	je .L_lambda_simple_env_end_00a4
  1363 00000D43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1364 00000D47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1365 00000D4B 48FFC6                  	inc rsi
  1366 00000D4E 48FFC2                  	inc rdx
  1367 00000D51 EBEA                    	jmp .L_lambda_simple_env_loop_00a4
  1368                                  .L_lambda_simple_env_end_00a4:
  1369 00000D53 5B                      	pop rbx
  1370 00000D54 BE00000000              	mov rsi, 0
  1371                                  .L_lambda_simple_params_loop_00a4:	; copy params
  1372 00000D59 4883FE00                	cmp rsi, 0
  1373 00000D5D 740E                    	je .L_lambda_simple_params_end_00a4
  1374 00000D5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1375 00000D64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1376 00000D68 48FFC6                  	inc rsi
  1377 00000D6B EBEC                    	jmp .L_lambda_simple_params_loop_00a4
  1378                                  .L_lambda_simple_params_end_00a4:
  1379 00000D6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1380 00000D70 4889C3                  	mov rbx, rax
  1381 00000D73 58                      	pop rax
  1382 00000D74 C60005                  	mov byte [rax], T_closure
  1383 00000D77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1384 00000D7B 48C74009[880D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a4
  1385 00000D83 E982000000              	jmp .L_lambda_simple_end_00a4
  1386                                  .L_lambda_simple_code_00a4:	; lambda-simple body
  1387 00000D88 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1388 00000D8E 740B                    	je .L_lambda_simple_arity_check_ok_00a4
  1389 00000D90 FF742410                	push qword [rsp + 8 * 2]
  1390 00000D94 6A01                    	push 1
  1391 00000D96 E9FBEB0000              	jmp L_error_incorrect_arity_simple
  1392                                  .L_lambda_simple_arity_check_ok_00a4:
  1393 00000D9B C8000000                	enter 0, 0
  1394 00000D9F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1395 00000DA3 50                      	push rax
  1396 00000DA4 6A01                    	push 1
  1397 00000DA6 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1398                                  	assert_closure(rax)
    42 00000DAE 803805              <1>  cmp byte [%1], %2
    43 00000DB1 0F851A040100        <1>  jne L_error_incorrect_type
  1399 00000DB7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1400 00000DBA FF5009                  	call SOB_CLOSURE_CODE(rax)
  1401 00000DBD 50                      	push rax
  1402 00000DBE 6A01                    	push 1
  1403 00000DC0 488B0425[80000000]      	mov rax, qword [free_var_16]
  1404                                  	assert_closure(rax)
    42 00000DC8 803805              <1>  cmp byte [%1], %2
    43 00000DCB 0F8500040100        <1>  jne L_error_incorrect_type
  1405 00000DD1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1406 00000DD4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1407 00000DD7 FF7500                  	push qword [rbp] ; same the old rbp
  1408 00000DDA BA04000000              	mov rdx, 1 + 3
  1409 00000DDF 488B4D00                	mov rcx, [rbp]
  1410 00000DE3 4889EF                  	mov rdi, rbp
  1411                                  .L_tc_recycle_frame_loop_00be:
  1412 00000DE6 4883FA00                	cmp rdx, 0
  1413 00000DEA 7413                    	je .L_tc_recycle_frame_done_00be
  1414 00000DEC 4883E908                	sub rcx, 8
  1415 00000DF0 4883EF08                	sub rdi, 8
  1416 00000DF4 488B37                  	mov rsi, [rdi]
  1417 00000DF7 488931                  	mov qword [rcx], rsi
  1418 00000DFA 48FFCA                  	dec rdx
  1419 00000DFD EBE7                    	jmp .L_tc_recycle_frame_loop_00be
  1420                                  .L_tc_recycle_frame_done_00be:
  1421 00000DFF 5D                      	pop rbp ; restore the old rbp
  1422 00000E00 4889CC                  	mov rsp, rcx
  1423 00000E03 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1424 00000E06 C9                      	leave
  1425 00000E07 C21800                  	ret 8 * (2 + 1)
  1426                                  .L_lambda_simple_end_00a4:	; new closure is in rax
  1427 00000E0A 48890425[F8010000]      	mov qword [free_var_63], rax
  1428 00000E12 48B8-                   	mov rax, sob_void
  1428 00000E14 [0000000000000000] 
  1429                                  
  1430 00000E1C 4889C7                  	mov rdi, rax
  1431 00000E1F E8CAEB0000              	call print_sexpr_if_not_void
  1432                                  
  1433 00000E24 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1434 00000E29 E8AFEB0000              	call malloc
  1435 00000E2E 50                      	push rax
  1436 00000E2F BF00000000              	mov rdi, 8 * 0	; new rib
  1437 00000E34 E8A4EB0000              	call malloc
  1438 00000E39 50                      	push rax
  1439 00000E3A BF08000000              	mov rdi, 8 * 1	; extended env
  1440 00000E3F E899EB0000              	call malloc
  1441 00000E44 488B7D10                	mov rdi, ENV
  1442 00000E48 BE00000000              	mov rsi, 0
  1443 00000E4D BA01000000              	mov rdx, 1
  1444                                  .L_lambda_simple_env_loop_00a5:	; ext_env[i + 1] <-- env[i]
  1445 00000E52 4883FE00                	cmp rsi, 0
  1446 00000E56 7410                    	je .L_lambda_simple_env_end_00a5
  1447 00000E58 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1448 00000E5C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1449 00000E60 48FFC6                  	inc rsi
  1450 00000E63 48FFC2                  	inc rdx
  1451 00000E66 EBEA                    	jmp .L_lambda_simple_env_loop_00a5
  1452                                  .L_lambda_simple_env_end_00a5:
  1453 00000E68 5B                      	pop rbx
  1454 00000E69 BE00000000              	mov rsi, 0
  1455                                  .L_lambda_simple_params_loop_00a5:	; copy params
  1456 00000E6E 4883FE00                	cmp rsi, 0
  1457 00000E72 740E                    	je .L_lambda_simple_params_end_00a5
  1458 00000E74 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1459 00000E79 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1460 00000E7D 48FFC6                  	inc rsi
  1461 00000E80 EBEC                    	jmp .L_lambda_simple_params_loop_00a5
  1462                                  .L_lambda_simple_params_end_00a5:
  1463 00000E82 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1464 00000E85 4889C3                  	mov rbx, rax
  1465 00000E88 58                      	pop rax
  1466 00000E89 C60005                  	mov byte [rax], T_closure
  1467 00000E8C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1468 00000E90 48C74009[9D0E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a5
  1469 00000E98 E982000000              	jmp .L_lambda_simple_end_00a5
  1470                                  .L_lambda_simple_code_00a5:	; lambda-simple body
  1471 00000E9D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1472 00000EA3 740B                    	je .L_lambda_simple_arity_check_ok_00a5
  1473 00000EA5 FF742410                	push qword [rsp + 8 * 2]
  1474 00000EA9 6A01                    	push 1
  1475 00000EAB E9E6EA0000              	jmp L_error_incorrect_arity_simple
  1476                                  .L_lambda_simple_arity_check_ok_00a5:
  1477 00000EB0 C8000000                	enter 0, 0
  1478 00000EB4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1479 00000EB8 50                      	push rax
  1480 00000EB9 6A01                    	push 1
  1481 00000EBB 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1482                                  	assert_closure(rax)
    42 00000EC3 803805              <1>  cmp byte [%1], %2
    43 00000EC6 0F8505030100        <1>  jne L_error_incorrect_type
  1483 00000ECC FF7001                  	push SOB_CLOSURE_ENV(rax)
  1484 00000ECF FF5009                  	call SOB_CLOSURE_CODE(rax)
  1485 00000ED2 50                      	push rax
  1486 00000ED3 6A01                    	push 1
  1487 00000ED5 488B0425[88000000]      	mov rax, qword [free_var_17]
  1488                                  	assert_closure(rax)
    42 00000EDD 803805              <1>  cmp byte [%1], %2
    43 00000EE0 0F85EB020100        <1>  jne L_error_incorrect_type
  1489 00000EE6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1490 00000EE9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1491 00000EEC FF7500                  	push qword [rbp] ; same the old rbp
  1492 00000EEF BA04000000              	mov rdx, 1 + 3
  1493 00000EF4 488B4D00                	mov rcx, [rbp]
  1494 00000EF8 4889EF                  	mov rdi, rbp
  1495                                  .L_tc_recycle_frame_loop_00bf:
  1496 00000EFB 4883FA00                	cmp rdx, 0
  1497 00000EFF 7413                    	je .L_tc_recycle_frame_done_00bf
  1498 00000F01 4883E908                	sub rcx, 8
  1499 00000F05 4883EF08                	sub rdi, 8
  1500 00000F09 488B37                  	mov rsi, [rdi]
  1501 00000F0C 488931                  	mov qword [rcx], rsi
  1502 00000F0F 48FFCA                  	dec rdx
  1503 00000F12 EBE7                    	jmp .L_tc_recycle_frame_loop_00bf
  1504                                  .L_tc_recycle_frame_done_00bf:
  1505 00000F14 5D                      	pop rbp ; restore the old rbp
  1506 00000F15 4889CC                  	mov rsp, rcx
  1507 00000F18 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1508 00000F1B C9                      	leave
  1509 00000F1C C21800                  	ret 8 * (2 + 1)
  1510                                  .L_lambda_simple_end_00a5:	; new closure is in rax
  1511 00000F1F 48890425[00020000]      	mov qword [free_var_64], rax
  1512 00000F27 48B8-                   	mov rax, sob_void
  1512 00000F29 [0000000000000000] 
  1513                                  
  1514 00000F31 4889C7                  	mov rdi, rax
  1515 00000F34 E8B5EA0000              	call print_sexpr_if_not_void
  1516                                  
  1517 00000F39 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1518 00000F3E E89AEA0000              	call malloc
  1519 00000F43 50                      	push rax
  1520 00000F44 BF00000000              	mov rdi, 8 * 0	; new rib
  1521 00000F49 E88FEA0000              	call malloc
  1522 00000F4E 50                      	push rax
  1523 00000F4F BF08000000              	mov rdi, 8 * 1	; extended env
  1524 00000F54 E884EA0000              	call malloc
  1525 00000F59 488B7D10                	mov rdi, ENV
  1526 00000F5D BE00000000              	mov rsi, 0
  1527 00000F62 BA01000000              	mov rdx, 1
  1528                                  .L_lambda_simple_env_loop_00a6:	; ext_env[i + 1] <-- env[i]
  1529 00000F67 4883FE00                	cmp rsi, 0
  1530 00000F6B 7410                    	je .L_lambda_simple_env_end_00a6
  1531 00000F6D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1532 00000F71 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1533 00000F75 48FFC6                  	inc rsi
  1534 00000F78 48FFC2                  	inc rdx
  1535 00000F7B EBEA                    	jmp .L_lambda_simple_env_loop_00a6
  1536                                  .L_lambda_simple_env_end_00a6:
  1537 00000F7D 5B                      	pop rbx
  1538 00000F7E BE00000000              	mov rsi, 0
  1539                                  .L_lambda_simple_params_loop_00a6:	; copy params
  1540 00000F83 4883FE00                	cmp rsi, 0
  1541 00000F87 740E                    	je .L_lambda_simple_params_end_00a6
  1542 00000F89 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1543 00000F8E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1544 00000F92 48FFC6                  	inc rsi
  1545 00000F95 EBEC                    	jmp .L_lambda_simple_params_loop_00a6
  1546                                  .L_lambda_simple_params_end_00a6:
  1547 00000F97 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1548 00000F9A 4889C3                  	mov rbx, rax
  1549 00000F9D 58                      	pop rax
  1550 00000F9E C60005                  	mov byte [rax], T_closure
  1551 00000FA1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1552 00000FA5 48C74009[B20F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a6
  1553 00000FAD E982000000              	jmp .L_lambda_simple_end_00a6
  1554                                  .L_lambda_simple_code_00a6:	; lambda-simple body
  1555 00000FB2 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1556 00000FB8 740B                    	je .L_lambda_simple_arity_check_ok_00a6
  1557 00000FBA FF742410                	push qword [rsp + 8 * 2]
  1558 00000FBE 6A01                    	push 1
  1559 00000FC0 E9D1E90000              	jmp L_error_incorrect_arity_simple
  1560                                  .L_lambda_simple_arity_check_ok_00a6:
  1561 00000FC5 C8000000                	enter 0, 0
  1562 00000FC9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1563 00000FCD 50                      	push rax
  1564 00000FCE 6A01                    	push 1
  1565 00000FD0 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1566                                  	assert_closure(rax)
    42 00000FD8 803805              <1>  cmp byte [%1], %2
    43 00000FDB 0F85F0010100        <1>  jne L_error_incorrect_type
  1567 00000FE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1568 00000FE4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1569 00000FE7 50                      	push rax
  1570 00000FE8 6A01                    	push 1
  1571 00000FEA 488B0425[88000000]      	mov rax, qword [free_var_17]
  1572                                  	assert_closure(rax)
    42 00000FF2 803805              <1>  cmp byte [%1], %2
    43 00000FF5 0F85D6010100        <1>  jne L_error_incorrect_type
  1573 00000FFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  1574 00000FFE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1575 00001001 FF7500                  	push qword [rbp] ; same the old rbp
  1576 00001004 BA04000000              	mov rdx, 1 + 3
  1577 00001009 488B4D00                	mov rcx, [rbp]
  1578 0000100D 4889EF                  	mov rdi, rbp
  1579                                  .L_tc_recycle_frame_loop_00c0:
  1580 00001010 4883FA00                	cmp rdx, 0
  1581 00001014 7413                    	je .L_tc_recycle_frame_done_00c0
  1582 00001016 4883E908                	sub rcx, 8
  1583 0000101A 4883EF08                	sub rdi, 8
  1584 0000101E 488B37                  	mov rsi, [rdi]
  1585 00001021 488931                  	mov qword [rcx], rsi
  1586 00001024 48FFCA                  	dec rdx
  1587 00001027 EBE7                    	jmp .L_tc_recycle_frame_loop_00c0
  1588                                  .L_tc_recycle_frame_done_00c0:
  1589 00001029 5D                      	pop rbp ; restore the old rbp
  1590 0000102A 4889CC                  	mov rsp, rcx
  1591 0000102D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1592 00001030 C9                      	leave
  1593 00001031 C21800                  	ret 8 * (2 + 1)
  1594                                  .L_lambda_simple_end_00a6:	; new closure is in rax
  1595 00001034 48890425[08020000]      	mov qword [free_var_65], rax
  1596 0000103C 48B8-                   	mov rax, sob_void
  1596 0000103E [0000000000000000] 
  1597                                  
  1598 00001046 4889C7                  	mov rdi, rax
  1599 00001049 E8A0E90000              	call print_sexpr_if_not_void
  1600                                  
  1601 0000104E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1602 00001053 E885E90000              	call malloc
  1603 00001058 50                      	push rax
  1604 00001059 BF00000000              	mov rdi, 8 * 0	; new rib
  1605 0000105E E87AE90000              	call malloc
  1606 00001063 50                      	push rax
  1607 00001064 BF08000000              	mov rdi, 8 * 1	; extended env
  1608 00001069 E86FE90000              	call malloc
  1609 0000106E 488B7D10                	mov rdi, ENV
  1610 00001072 BE00000000              	mov rsi, 0
  1611 00001077 BA01000000              	mov rdx, 1
  1612                                  .L_lambda_simple_env_loop_00a7:	; ext_env[i + 1] <-- env[i]
  1613 0000107C 4883FE00                	cmp rsi, 0
  1614 00001080 7410                    	je .L_lambda_simple_env_end_00a7
  1615 00001082 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1616 00001086 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1617 0000108A 48FFC6                  	inc rsi
  1618 0000108D 48FFC2                  	inc rdx
  1619 00001090 EBEA                    	jmp .L_lambda_simple_env_loop_00a7
  1620                                  .L_lambda_simple_env_end_00a7:
  1621 00001092 5B                      	pop rbx
  1622 00001093 BE00000000              	mov rsi, 0
  1623                                  .L_lambda_simple_params_loop_00a7:	; copy params
  1624 00001098 4883FE00                	cmp rsi, 0
  1625 0000109C 740E                    	je .L_lambda_simple_params_end_00a7
  1626 0000109E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1627 000010A3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1628 000010A7 48FFC6                  	inc rsi
  1629 000010AA EBEC                    	jmp .L_lambda_simple_params_loop_00a7
  1630                                  .L_lambda_simple_params_end_00a7:
  1631 000010AC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1632 000010AF 4889C3                  	mov rbx, rax
  1633 000010B2 58                      	pop rax
  1634 000010B3 C60005                  	mov byte [rax], T_closure
  1635 000010B6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1636 000010BA 48C74009[C7100000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a7
  1637 000010C2 E982000000              	jmp .L_lambda_simple_end_00a7
  1638                                  .L_lambda_simple_code_00a7:	; lambda-simple body
  1639 000010C7 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1640 000010CD 740B                    	je .L_lambda_simple_arity_check_ok_00a7
  1641 000010CF FF742410                	push qword [rsp + 8 * 2]
  1642 000010D3 6A01                    	push 1
  1643 000010D5 E9BCE80000              	jmp L_error_incorrect_arity_simple
  1644                                  .L_lambda_simple_arity_check_ok_00a7:
  1645 000010DA C8000000                	enter 0, 0
  1646 000010DE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1647 000010E2 50                      	push rax
  1648 000010E3 6A01                    	push 1
  1649 000010E5 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1650                                  	assert_closure(rax)
    42 000010ED 803805              <1>  cmp byte [%1], %2
    43 000010F0 0F85DB000100        <1>  jne L_error_incorrect_type
  1651 000010F6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1652 000010F9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1653 000010FC 50                      	push rax
  1654 000010FD 6A01                    	push 1
  1655 000010FF 488B0425[88000000]      	mov rax, qword [free_var_17]
  1656                                  	assert_closure(rax)
    42 00001107 803805              <1>  cmp byte [%1], %2
    43 0000110A 0F85C1000100        <1>  jne L_error_incorrect_type
  1657 00001110 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1658 00001113 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1659 00001116 FF7500                  	push qword [rbp] ; same the old rbp
  1660 00001119 BA04000000              	mov rdx, 1 + 3
  1661 0000111E 488B4D00                	mov rcx, [rbp]
  1662 00001122 4889EF                  	mov rdi, rbp
  1663                                  .L_tc_recycle_frame_loop_00c1:
  1664 00001125 4883FA00                	cmp rdx, 0
  1665 00001129 7413                    	je .L_tc_recycle_frame_done_00c1
  1666 0000112B 4883E908                	sub rcx, 8
  1667 0000112F 4883EF08                	sub rdi, 8
  1668 00001133 488B37                  	mov rsi, [rdi]
  1669 00001136 488931                  	mov qword [rcx], rsi
  1670 00001139 48FFCA                  	dec rdx
  1671 0000113C EBE7                    	jmp .L_tc_recycle_frame_loop_00c1
  1672                                  .L_tc_recycle_frame_done_00c1:
  1673 0000113E 5D                      	pop rbp ; restore the old rbp
  1674 0000113F 4889CC                  	mov rsp, rcx
  1675 00001142 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1676 00001145 C9                      	leave
  1677 00001146 C21800                  	ret 8 * (2 + 1)
  1678                                  .L_lambda_simple_end_00a7:	; new closure is in rax
  1679 00001149 48890425[10020000]      	mov qword [free_var_66], rax
  1680 00001151 48B8-                   	mov rax, sob_void
  1680 00001153 [0000000000000000] 
  1681                                  
  1682 0000115B 4889C7                  	mov rdi, rax
  1683 0000115E E88BE80000              	call print_sexpr_if_not_void
  1684                                  
  1685 00001163 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1686 00001168 E870E80000              	call malloc
  1687 0000116D 50                      	push rax
  1688 0000116E BF00000000              	mov rdi, 8 * 0	; new rib
  1689 00001173 E865E80000              	call malloc
  1690 00001178 50                      	push rax
  1691 00001179 BF08000000              	mov rdi, 8 * 1	; extended env
  1692 0000117E E85AE80000              	call malloc
  1693 00001183 488B7D10                	mov rdi, ENV
  1694 00001187 BE00000000              	mov rsi, 0
  1695 0000118C BA01000000              	mov rdx, 1
  1696                                  .L_lambda_simple_env_loop_00a8:	; ext_env[i + 1] <-- env[i]
  1697 00001191 4883FE00                	cmp rsi, 0
  1698 00001195 7410                    	je .L_lambda_simple_env_end_00a8
  1699 00001197 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1700 0000119B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1701 0000119F 48FFC6                  	inc rsi
  1702 000011A2 48FFC2                  	inc rdx
  1703 000011A5 EBEA                    	jmp .L_lambda_simple_env_loop_00a8
  1704                                  .L_lambda_simple_env_end_00a8:
  1705 000011A7 5B                      	pop rbx
  1706 000011A8 BE00000000              	mov rsi, 0
  1707                                  .L_lambda_simple_params_loop_00a8:	; copy params
  1708 000011AD 4883FE00                	cmp rsi, 0
  1709 000011B1 740E                    	je .L_lambda_simple_params_end_00a8
  1710 000011B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1711 000011B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1712 000011BC 48FFC6                  	inc rsi
  1713 000011BF EBEC                    	jmp .L_lambda_simple_params_loop_00a8
  1714                                  .L_lambda_simple_params_end_00a8:
  1715 000011C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1716 000011C4 4889C3                  	mov rbx, rax
  1717 000011C7 58                      	pop rax
  1718 000011C8 C60005                  	mov byte [rax], T_closure
  1719 000011CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1720 000011CF 48C74009[DC110000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a8
  1721 000011D7 E982000000              	jmp .L_lambda_simple_end_00a8
  1722                                  .L_lambda_simple_code_00a8:	; lambda-simple body
  1723 000011DC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1724 000011E2 740B                    	je .L_lambda_simple_arity_check_ok_00a8
  1725 000011E4 FF742410                	push qword [rsp + 8 * 2]
  1726 000011E8 6A01                    	push 1
  1727 000011EA E9A7E70000              	jmp L_error_incorrect_arity_simple
  1728                                  .L_lambda_simple_arity_check_ok_00a8:
  1729 000011EF C8000000                	enter 0, 0
  1730 000011F3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1731 000011F7 50                      	push rax
  1732 000011F8 6A01                    	push 1
  1733 000011FA 488B0425[D8010000]      	mov rax, qword [free_var_59]
  1734                                  	assert_closure(rax)
    42 00001202 803805              <1>  cmp byte [%1], %2
    43 00001205 0F85C6FF0000        <1>  jne L_error_incorrect_type
  1735 0000120B FF7001                  	push SOB_CLOSURE_ENV(rax)
  1736 0000120E FF5009                  	call SOB_CLOSURE_CODE(rax)
  1737 00001211 50                      	push rax
  1738 00001212 6A01                    	push 1
  1739 00001214 488B0425[88000000]      	mov rax, qword [free_var_17]
  1740                                  	assert_closure(rax)
    42 0000121C 803805              <1>  cmp byte [%1], %2
    43 0000121F 0F85ACFF0000        <1>  jne L_error_incorrect_type
  1741 00001225 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1742 00001228 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1743 0000122B FF7500                  	push qword [rbp] ; same the old rbp
  1744 0000122E BA04000000              	mov rdx, 1 + 3
  1745 00001233 488B4D00                	mov rcx, [rbp]
  1746 00001237 4889EF                  	mov rdi, rbp
  1747                                  .L_tc_recycle_frame_loop_00c2:
  1748 0000123A 4883FA00                	cmp rdx, 0
  1749 0000123E 7413                    	je .L_tc_recycle_frame_done_00c2
  1750 00001240 4883E908                	sub rcx, 8
  1751 00001244 4883EF08                	sub rdi, 8
  1752 00001248 488B37                  	mov rsi, [rdi]
  1753 0000124B 488931                  	mov qword [rcx], rsi
  1754 0000124E 48FFCA                  	dec rdx
  1755 00001251 EBE7                    	jmp .L_tc_recycle_frame_loop_00c2
  1756                                  .L_tc_recycle_frame_done_00c2:
  1757 00001253 5D                      	pop rbp ; restore the old rbp
  1758 00001254 4889CC                  	mov rsp, rcx
  1759 00001257 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1760 0000125A C9                      	leave
  1761 0000125B C21800                  	ret 8 * (2 + 1)
  1762                                  .L_lambda_simple_end_00a8:	; new closure is in rax
  1763 0000125E 48890425[18020000]      	mov qword [free_var_67], rax
  1764 00001266 48B8-                   	mov rax, sob_void
  1764 00001268 [0000000000000000] 
  1765                                  
  1766 00001270 4889C7                  	mov rdi, rax
  1767 00001273 E876E70000              	call print_sexpr_if_not_void
  1768                                  
  1769 00001278 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1770 0000127D E85BE70000              	call malloc
  1771 00001282 50                      	push rax
  1772 00001283 BF00000000              	mov rdi, 8 * 0	; new rib
  1773 00001288 E850E70000              	call malloc
  1774 0000128D 50                      	push rax
  1775 0000128E BF08000000              	mov rdi, 8 * 1	; extended env
  1776 00001293 E845E70000              	call malloc
  1777 00001298 488B7D10                	mov rdi, ENV
  1778 0000129C BE00000000              	mov rsi, 0
  1779 000012A1 BA01000000              	mov rdx, 1
  1780                                  .L_lambda_simple_env_loop_00a9:	; ext_env[i + 1] <-- env[i]
  1781 000012A6 4883FE00                	cmp rsi, 0
  1782 000012AA 7410                    	je .L_lambda_simple_env_end_00a9
  1783 000012AC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1784 000012B0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1785 000012B4 48FFC6                  	inc rsi
  1786 000012B7 48FFC2                  	inc rdx
  1787 000012BA EBEA                    	jmp .L_lambda_simple_env_loop_00a9
  1788                                  .L_lambda_simple_env_end_00a9:
  1789 000012BC 5B                      	pop rbx
  1790 000012BD BE00000000              	mov rsi, 0
  1791                                  .L_lambda_simple_params_loop_00a9:	; copy params
  1792 000012C2 4883FE00                	cmp rsi, 0
  1793 000012C6 740E                    	je .L_lambda_simple_params_end_00a9
  1794 000012C8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1795 000012CD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1796 000012D1 48FFC6                  	inc rsi
  1797 000012D4 EBEC                    	jmp .L_lambda_simple_params_loop_00a9
  1798                                  .L_lambda_simple_params_end_00a9:
  1799 000012D6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1800 000012D9 4889C3                  	mov rbx, rax
  1801 000012DC 58                      	pop rax
  1802 000012DD C60005                  	mov byte [rax], T_closure
  1803 000012E0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1804 000012E4 48C74009[F1120000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00a9
  1805 000012EC E982000000              	jmp .L_lambda_simple_end_00a9
  1806                                  .L_lambda_simple_code_00a9:	; lambda-simple body
  1807 000012F1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1808 000012F7 740B                    	je .L_lambda_simple_arity_check_ok_00a9
  1809 000012F9 FF742410                	push qword [rsp + 8 * 2]
  1810 000012FD 6A01                    	push 1
  1811 000012FF E992E60000              	jmp L_error_incorrect_arity_simple
  1812                                  .L_lambda_simple_arity_check_ok_00a9:
  1813 00001304 C8000000                	enter 0, 0
  1814 00001308 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1815 0000130C 50                      	push rax
  1816 0000130D 6A01                    	push 1
  1817 0000130F 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1818                                  	assert_closure(rax)
    42 00001317 803805              <1>  cmp byte [%1], %2
    43 0000131A 0F85B1FE0000        <1>  jne L_error_incorrect_type
  1819 00001320 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1820 00001323 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1821 00001326 50                      	push rax
  1822 00001327 6A01                    	push 1
  1823 00001329 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1824                                  	assert_closure(rax)
    42 00001331 803805              <1>  cmp byte [%1], %2
    43 00001334 0F8597FE0000        <1>  jne L_error_incorrect_type
  1825 0000133A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1826 0000133D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1827 00001340 FF7500                  	push qword [rbp] ; same the old rbp
  1828 00001343 BA04000000              	mov rdx, 1 + 3
  1829 00001348 488B4D00                	mov rcx, [rbp]
  1830 0000134C 4889EF                  	mov rdi, rbp
  1831                                  .L_tc_recycle_frame_loop_00c3:
  1832 0000134F 4883FA00                	cmp rdx, 0
  1833 00001353 7413                    	je .L_tc_recycle_frame_done_00c3
  1834 00001355 4883E908                	sub rcx, 8
  1835 00001359 4883EF08                	sub rdi, 8
  1836 0000135D 488B37                  	mov rsi, [rdi]
  1837 00001360 488931                  	mov qword [rcx], rsi
  1838 00001363 48FFCA                  	dec rdx
  1839 00001366 EBE7                    	jmp .L_tc_recycle_frame_loop_00c3
  1840                                  .L_tc_recycle_frame_done_00c3:
  1841 00001368 5D                      	pop rbp ; restore the old rbp
  1842 00001369 4889CC                  	mov rsp, rcx
  1843 0000136C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1844 0000136F C9                      	leave
  1845 00001370 C21800                  	ret 8 * (2 + 1)
  1846                                  .L_lambda_simple_end_00a9:	; new closure is in rax
  1847 00001373 48890425[20020000]      	mov qword [free_var_68], rax
  1848 0000137B 48B8-                   	mov rax, sob_void
  1848 0000137D [0000000000000000] 
  1849                                  
  1850 00001385 4889C7                  	mov rdi, rax
  1851 00001388 E861E60000              	call print_sexpr_if_not_void
  1852                                  
  1853 0000138D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1854 00001392 E846E60000              	call malloc
  1855 00001397 50                      	push rax
  1856 00001398 BF00000000              	mov rdi, 8 * 0	; new rib
  1857 0000139D E83BE60000              	call malloc
  1858 000013A2 50                      	push rax
  1859 000013A3 BF08000000              	mov rdi, 8 * 1	; extended env
  1860 000013A8 E830E60000              	call malloc
  1861 000013AD 488B7D10                	mov rdi, ENV
  1862 000013B1 BE00000000              	mov rsi, 0
  1863 000013B6 BA01000000              	mov rdx, 1
  1864                                  .L_lambda_simple_env_loop_00aa:	; ext_env[i + 1] <-- env[i]
  1865 000013BB 4883FE00                	cmp rsi, 0
  1866 000013BF 7410                    	je .L_lambda_simple_env_end_00aa
  1867 000013C1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1868 000013C5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1869 000013C9 48FFC6                  	inc rsi
  1870 000013CC 48FFC2                  	inc rdx
  1871 000013CF EBEA                    	jmp .L_lambda_simple_env_loop_00aa
  1872                                  .L_lambda_simple_env_end_00aa:
  1873 000013D1 5B                      	pop rbx
  1874 000013D2 BE00000000              	mov rsi, 0
  1875                                  .L_lambda_simple_params_loop_00aa:	; copy params
  1876 000013D7 4883FE00                	cmp rsi, 0
  1877 000013DB 740E                    	je .L_lambda_simple_params_end_00aa
  1878 000013DD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1879 000013E2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1880 000013E6 48FFC6                  	inc rsi
  1881 000013E9 EBEC                    	jmp .L_lambda_simple_params_loop_00aa
  1882                                  .L_lambda_simple_params_end_00aa:
  1883 000013EB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1884 000013EE 4889C3                  	mov rbx, rax
  1885 000013F1 58                      	pop rax
  1886 000013F2 C60005                  	mov byte [rax], T_closure
  1887 000013F5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1888 000013F9 48C74009[06140000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00aa
  1889 00001401 E982000000              	jmp .L_lambda_simple_end_00aa
  1890                                  .L_lambda_simple_code_00aa:	; lambda-simple body
  1891 00001406 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1892 0000140C 740B                    	je .L_lambda_simple_arity_check_ok_00aa
  1893 0000140E FF742410                	push qword [rsp + 8 * 2]
  1894 00001412 6A01                    	push 1
  1895 00001414 E97DE50000              	jmp L_error_incorrect_arity_simple
  1896                                  .L_lambda_simple_arity_check_ok_00aa:
  1897 00001419 C8000000                	enter 0, 0
  1898 0000141D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1899 00001421 50                      	push rax
  1900 00001422 6A01                    	push 1
  1901 00001424 488B0425[C8010000]      	mov rax, qword [free_var_57]
  1902                                  	assert_closure(rax)
    42 0000142C 803805              <1>  cmp byte [%1], %2
    43 0000142F 0F859CFD0000        <1>  jne L_error_incorrect_type
  1903 00001435 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1904 00001438 FF5009                  	call SOB_CLOSURE_CODE(rax)
  1905 0000143B 50                      	push rax
  1906 0000143C 6A01                    	push 1
  1907 0000143E 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1908                                  	assert_closure(rax)
    42 00001446 803805              <1>  cmp byte [%1], %2
    43 00001449 0F8582FD0000        <1>  jne L_error_incorrect_type
  1909 0000144F FF7001                  	push SOB_CLOSURE_ENV(rax)
  1910 00001452 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1911 00001455 FF7500                  	push qword [rbp] ; same the old rbp
  1912 00001458 BA04000000              	mov rdx, 1 + 3
  1913 0000145D 488B4D00                	mov rcx, [rbp]
  1914 00001461 4889EF                  	mov rdi, rbp
  1915                                  .L_tc_recycle_frame_loop_00c4:
  1916 00001464 4883FA00                	cmp rdx, 0
  1917 00001468 7413                    	je .L_tc_recycle_frame_done_00c4
  1918 0000146A 4883E908                	sub rcx, 8
  1919 0000146E 4883EF08                	sub rdi, 8
  1920 00001472 488B37                  	mov rsi, [rdi]
  1921 00001475 488931                  	mov qword [rcx], rsi
  1922 00001478 48FFCA                  	dec rdx
  1923 0000147B EBE7                    	jmp .L_tc_recycle_frame_loop_00c4
  1924                                  .L_tc_recycle_frame_done_00c4:
  1925 0000147D 5D                      	pop rbp ; restore the old rbp
  1926 0000147E 4889CC                  	mov rsp, rcx
  1927 00001481 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  1928 00001484 C9                      	leave
  1929 00001485 C21800                  	ret 8 * (2 + 1)
  1930                                  .L_lambda_simple_end_00aa:	; new closure is in rax
  1931 00001488 48890425[28020000]      	mov qword [free_var_69], rax
  1932 00001490 48B8-                   	mov rax, sob_void
  1932 00001492 [0000000000000000] 
  1933                                  
  1934 0000149A 4889C7                  	mov rdi, rax
  1935 0000149D E84CE50000              	call print_sexpr_if_not_void
  1936                                  
  1937 000014A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  1938 000014A7 E831E50000              	call malloc
  1939 000014AC 50                      	push rax
  1940 000014AD BF00000000              	mov rdi, 8 * 0	; new rib
  1941 000014B2 E826E50000              	call malloc
  1942 000014B7 50                      	push rax
  1943 000014B8 BF08000000              	mov rdi, 8 * 1	; extended env
  1944 000014BD E81BE50000              	call malloc
  1945 000014C2 488B7D10                	mov rdi, ENV
  1946 000014C6 BE00000000              	mov rsi, 0
  1947 000014CB BA01000000              	mov rdx, 1
  1948                                  .L_lambda_simple_env_loop_00ab:	; ext_env[i + 1] <-- env[i]
  1949 000014D0 4883FE00                	cmp rsi, 0
  1950 000014D4 7410                    	je .L_lambda_simple_env_end_00ab
  1951 000014D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  1952 000014DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
  1953 000014DE 48FFC6                  	inc rsi
  1954 000014E1 48FFC2                  	inc rdx
  1955 000014E4 EBEA                    	jmp .L_lambda_simple_env_loop_00ab
  1956                                  .L_lambda_simple_env_end_00ab:
  1957 000014E6 5B                      	pop rbx
  1958 000014E7 BE00000000              	mov rsi, 0
  1959                                  .L_lambda_simple_params_loop_00ab:	; copy params
  1960 000014EC 4883FE00                	cmp rsi, 0
  1961 000014F0 740E                    	je .L_lambda_simple_params_end_00ab
  1962 000014F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  1963 000014F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  1964 000014FB 48FFC6                  	inc rsi
  1965 000014FE EBEC                    	jmp .L_lambda_simple_params_loop_00ab
  1966                                  .L_lambda_simple_params_end_00ab:
  1967 00001500 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  1968 00001503 4889C3                  	mov rbx, rax
  1969 00001506 58                      	pop rax
  1970 00001507 C60005                  	mov byte [rax], T_closure
  1971 0000150A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  1972 0000150E 48C74009[1B150000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ab
  1973 00001516 E982000000              	jmp .L_lambda_simple_end_00ab
  1974                                  .L_lambda_simple_code_00ab:	; lambda-simple body
  1975 0000151B 48837C241001            	cmp qword [rsp + 8 * 2], 1
  1976 00001521 740B                    	je .L_lambda_simple_arity_check_ok_00ab
  1977 00001523 FF742410                	push qword [rsp + 8 * 2]
  1978 00001527 6A01                    	push 1
  1979 00001529 E968E40000              	jmp L_error_incorrect_arity_simple
  1980                                  .L_lambda_simple_arity_check_ok_00ab:
  1981 0000152E C8000000                	enter 0, 0
  1982 00001532 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  1983 00001536 50                      	push rax
  1984 00001537 6A01                    	push 1
  1985 00001539 488B0425[D0010000]      	mov rax, qword [free_var_58]
  1986                                  	assert_closure(rax)
    42 00001541 803805              <1>  cmp byte [%1], %2
    43 00001544 0F8587FC0000        <1>  jne L_error_incorrect_type
  1987 0000154A FF7001                  	push SOB_CLOSURE_ENV(rax)
  1988 0000154D FF5009                  	call SOB_CLOSURE_CODE(rax)
  1989 00001550 50                      	push rax
  1990 00001551 6A01                    	push 1
  1991 00001553 488B0425[C0010000]      	mov rax, qword [free_var_56]
  1992                                  	assert_closure(rax)
    42 0000155B 803805              <1>  cmp byte [%1], %2
    43 0000155E 0F856DFC0000        <1>  jne L_error_incorrect_type
  1993 00001564 FF7001                  	push SOB_CLOSURE_ENV(rax)
  1994 00001567 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  1995 0000156A FF7500                  	push qword [rbp] ; same the old rbp
  1996 0000156D BA04000000              	mov rdx, 1 + 3
  1997 00001572 488B4D00                	mov rcx, [rbp]
  1998 00001576 4889EF                  	mov rdi, rbp
  1999                                  .L_tc_recycle_frame_loop_00c5:
  2000 00001579 4883FA00                	cmp rdx, 0
  2001 0000157D 7413                    	je .L_tc_recycle_frame_done_00c5
  2002 0000157F 4883E908                	sub rcx, 8
  2003 00001583 4883EF08                	sub rdi, 8
  2004 00001587 488B37                  	mov rsi, [rdi]
  2005 0000158A 488931                  	mov qword [rcx], rsi
  2006 0000158D 48FFCA                  	dec rdx
  2007 00001590 EBE7                    	jmp .L_tc_recycle_frame_loop_00c5
  2008                                  .L_tc_recycle_frame_done_00c5:
  2009 00001592 5D                      	pop rbp ; restore the old rbp
  2010 00001593 4889CC                  	mov rsp, rcx
  2011 00001596 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2012 00001599 C9                      	leave
  2013 0000159A C21800                  	ret 8 * (2 + 1)
  2014                                  .L_lambda_simple_end_00ab:	; new closure is in rax
  2015 0000159D 48890425[30020000]      	mov qword [free_var_70], rax
  2016 000015A5 48B8-                   	mov rax, sob_void
  2016 000015A7 [0000000000000000] 
  2017                                  
  2018 000015AF 4889C7                  	mov rdi, rax
  2019 000015B2 E837E40000              	call print_sexpr_if_not_void
  2020                                  
  2021 000015B7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2022 000015BC E81CE40000              	call malloc
  2023 000015C1 50                      	push rax
  2024 000015C2 BF00000000              	mov rdi, 8 * 0	; new rib
  2025 000015C7 E811E40000              	call malloc
  2026 000015CC 50                      	push rax
  2027 000015CD BF08000000              	mov rdi, 8 * 1	; extended env
  2028 000015D2 E806E40000              	call malloc
  2029 000015D7 488B7D10                	mov rdi, ENV
  2030 000015DB BE00000000              	mov rsi, 0
  2031 000015E0 BA01000000              	mov rdx, 1
  2032                                  .L_lambda_simple_env_loop_00ac:	; ext_env[i + 1] <-- env[i]
  2033 000015E5 4883FE00                	cmp rsi, 0
  2034 000015E9 7410                    	je .L_lambda_simple_env_end_00ac
  2035 000015EB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2036 000015EF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2037 000015F3 48FFC6                  	inc rsi
  2038 000015F6 48FFC2                  	inc rdx
  2039 000015F9 EBEA                    	jmp .L_lambda_simple_env_loop_00ac
  2040                                  .L_lambda_simple_env_end_00ac:
  2041 000015FB 5B                      	pop rbx
  2042 000015FC BE00000000              	mov rsi, 0
  2043                                  .L_lambda_simple_params_loop_00ac:	; copy params
  2044 00001601 4883FE00                	cmp rsi, 0
  2045 00001605 740E                    	je .L_lambda_simple_params_end_00ac
  2046 00001607 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2047 0000160C 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2048 00001610 48FFC6                  	inc rsi
  2049 00001613 EBEC                    	jmp .L_lambda_simple_params_loop_00ac
  2050                                  .L_lambda_simple_params_end_00ac:
  2051 00001615 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2052 00001618 4889C3                  	mov rbx, rax
  2053 0000161B 58                      	pop rax
  2054 0000161C C60005                  	mov byte [rax], T_closure
  2055 0000161F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2056 00001623 48C74009[30160000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ac
  2057 0000162B E982000000              	jmp .L_lambda_simple_end_00ac
  2058                                  .L_lambda_simple_code_00ac:	; lambda-simple body
  2059 00001630 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2060 00001636 740B                    	je .L_lambda_simple_arity_check_ok_00ac
  2061 00001638 FF742410                	push qword [rsp + 8 * 2]
  2062 0000163C 6A01                    	push 1
  2063 0000163E E953E30000              	jmp L_error_incorrect_arity_simple
  2064                                  .L_lambda_simple_arity_check_ok_00ac:
  2065 00001643 C8000000                	enter 0, 0
  2066 00001647 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2067 0000164B 50                      	push rax
  2068 0000164C 6A01                    	push 1
  2069 0000164E 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2070                                  	assert_closure(rax)
    42 00001656 803805              <1>  cmp byte [%1], %2
    43 00001659 0F8572FB0000        <1>  jne L_error_incorrect_type
  2071 0000165F FF7001                  	push SOB_CLOSURE_ENV(rax)
  2072 00001662 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2073 00001665 50                      	push rax
  2074 00001666 6A01                    	push 1
  2075 00001668 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2076                                  	assert_closure(rax)
    42 00001670 803805              <1>  cmp byte [%1], %2
    43 00001673 0F8558FB0000        <1>  jne L_error_incorrect_type
  2077 00001679 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2078 0000167C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2079 0000167F FF7500                  	push qword [rbp] ; same the old rbp
  2080 00001682 BA04000000              	mov rdx, 1 + 3
  2081 00001687 488B4D00                	mov rcx, [rbp]
  2082 0000168B 4889EF                  	mov rdi, rbp
  2083                                  .L_tc_recycle_frame_loop_00c6:
  2084 0000168E 4883FA00                	cmp rdx, 0
  2085 00001692 7413                    	je .L_tc_recycle_frame_done_00c6
  2086 00001694 4883E908                	sub rcx, 8
  2087 00001698 4883EF08                	sub rdi, 8
  2088 0000169C 488B37                  	mov rsi, [rdi]
  2089 0000169F 488931                  	mov qword [rcx], rsi
  2090 000016A2 48FFCA                  	dec rdx
  2091 000016A5 EBE7                    	jmp .L_tc_recycle_frame_loop_00c6
  2092                                  .L_tc_recycle_frame_done_00c6:
  2093 000016A7 5D                      	pop rbp ; restore the old rbp
  2094 000016A8 4889CC                  	mov rsp, rcx
  2095 000016AB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2096 000016AE C9                      	leave
  2097 000016AF C21800                  	ret 8 * (2 + 1)
  2098                                  .L_lambda_simple_end_00ac:	; new closure is in rax
  2099 000016B2 48890425[38020000]      	mov qword [free_var_71], rax
  2100 000016BA 48B8-                   	mov rax, sob_void
  2100 000016BC [0000000000000000] 
  2101                                  
  2102 000016C4 4889C7                  	mov rdi, rax
  2103 000016C7 E822E30000              	call print_sexpr_if_not_void
  2104                                  
  2105 000016CC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2106 000016D1 E807E30000              	call malloc
  2107 000016D6 50                      	push rax
  2108 000016D7 BF00000000              	mov rdi, 8 * 0	; new rib
  2109 000016DC E8FCE20000              	call malloc
  2110 000016E1 50                      	push rax
  2111 000016E2 BF08000000              	mov rdi, 8 * 1	; extended env
  2112 000016E7 E8F1E20000              	call malloc
  2113 000016EC 488B7D10                	mov rdi, ENV
  2114 000016F0 BE00000000              	mov rsi, 0
  2115 000016F5 BA01000000              	mov rdx, 1
  2116                                  .L_lambda_simple_env_loop_00ad:	; ext_env[i + 1] <-- env[i]
  2117 000016FA 4883FE00                	cmp rsi, 0
  2118 000016FE 7410                    	je .L_lambda_simple_env_end_00ad
  2119 00001700 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2120 00001704 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2121 00001708 48FFC6                  	inc rsi
  2122 0000170B 48FFC2                  	inc rdx
  2123 0000170E EBEA                    	jmp .L_lambda_simple_env_loop_00ad
  2124                                  .L_lambda_simple_env_end_00ad:
  2125 00001710 5B                      	pop rbx
  2126 00001711 BE00000000              	mov rsi, 0
  2127                                  .L_lambda_simple_params_loop_00ad:	; copy params
  2128 00001716 4883FE00                	cmp rsi, 0
  2129 0000171A 740E                    	je .L_lambda_simple_params_end_00ad
  2130 0000171C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2131 00001721 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2132 00001725 48FFC6                  	inc rsi
  2133 00001728 EBEC                    	jmp .L_lambda_simple_params_loop_00ad
  2134                                  .L_lambda_simple_params_end_00ad:
  2135 0000172A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2136 0000172D 4889C3                  	mov rbx, rax
  2137 00001730 58                      	pop rax
  2138 00001731 C60005                  	mov byte [rax], T_closure
  2139 00001734 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2140 00001738 48C74009[45170000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ad
  2141 00001740 E982000000              	jmp .L_lambda_simple_end_00ad
  2142                                  .L_lambda_simple_code_00ad:	; lambda-simple body
  2143 00001745 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2144 0000174B 740B                    	je .L_lambda_simple_arity_check_ok_00ad
  2145 0000174D FF742410                	push qword [rsp + 8 * 2]
  2146 00001751 6A01                    	push 1
  2147 00001753 E93EE20000              	jmp L_error_incorrect_arity_simple
  2148                                  .L_lambda_simple_arity_check_ok_00ad:
  2149 00001758 C8000000                	enter 0, 0
  2150 0000175C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2151 00001760 50                      	push rax
  2152 00001761 6A01                    	push 1
  2153 00001763 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2154                                  	assert_closure(rax)
    42 0000176B 803805              <1>  cmp byte [%1], %2
    43 0000176E 0F855DFA0000        <1>  jne L_error_incorrect_type
  2155 00001774 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2156 00001777 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2157 0000177A 50                      	push rax
  2158 0000177B 6A01                    	push 1
  2159 0000177D 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2160                                  	assert_closure(rax)
    42 00001785 803805              <1>  cmp byte [%1], %2
    43 00001788 0F8543FA0000        <1>  jne L_error_incorrect_type
  2161 0000178E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2162 00001791 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2163 00001794 FF7500                  	push qword [rbp] ; same the old rbp
  2164 00001797 BA04000000              	mov rdx, 1 + 3
  2165 0000179C 488B4D00                	mov rcx, [rbp]
  2166 000017A0 4889EF                  	mov rdi, rbp
  2167                                  .L_tc_recycle_frame_loop_00c7:
  2168 000017A3 4883FA00                	cmp rdx, 0
  2169 000017A7 7413                    	je .L_tc_recycle_frame_done_00c7
  2170 000017A9 4883E908                	sub rcx, 8
  2171 000017AD 4883EF08                	sub rdi, 8
  2172 000017B1 488B37                  	mov rsi, [rdi]
  2173 000017B4 488931                  	mov qword [rcx], rsi
  2174 000017B7 48FFCA                  	dec rdx
  2175 000017BA EBE7                    	jmp .L_tc_recycle_frame_loop_00c7
  2176                                  .L_tc_recycle_frame_done_00c7:
  2177 000017BC 5D                      	pop rbp ; restore the old rbp
  2178 000017BD 4889CC                  	mov rsp, rcx
  2179 000017C0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2180 000017C3 C9                      	leave
  2181 000017C4 C21800                  	ret 8 * (2 + 1)
  2182                                  .L_lambda_simple_end_00ad:	; new closure is in rax
  2183 000017C7 48890425[40020000]      	mov qword [free_var_72], rax
  2184 000017CF 48B8-                   	mov rax, sob_void
  2184 000017D1 [0000000000000000] 
  2185                                  
  2186 000017D9 4889C7                  	mov rdi, rax
  2187 000017DC E80DE20000              	call print_sexpr_if_not_void
  2188                                  
  2189 000017E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2190 000017E6 E8F2E10000              	call malloc
  2191 000017EB 50                      	push rax
  2192 000017EC BF00000000              	mov rdi, 8 * 0	; new rib
  2193 000017F1 E8E7E10000              	call malloc
  2194 000017F6 50                      	push rax
  2195 000017F7 BF08000000              	mov rdi, 8 * 1	; extended env
  2196 000017FC E8DCE10000              	call malloc
  2197 00001801 488B7D10                	mov rdi, ENV
  2198 00001805 BE00000000              	mov rsi, 0
  2199 0000180A BA01000000              	mov rdx, 1
  2200                                  .L_lambda_simple_env_loop_00ae:	; ext_env[i + 1] <-- env[i]
  2201 0000180F 4883FE00                	cmp rsi, 0
  2202 00001813 7410                    	je .L_lambda_simple_env_end_00ae
  2203 00001815 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2204 00001819 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2205 0000181D 48FFC6                  	inc rsi
  2206 00001820 48FFC2                  	inc rdx
  2207 00001823 EBEA                    	jmp .L_lambda_simple_env_loop_00ae
  2208                                  .L_lambda_simple_env_end_00ae:
  2209 00001825 5B                      	pop rbx
  2210 00001826 BE00000000              	mov rsi, 0
  2211                                  .L_lambda_simple_params_loop_00ae:	; copy params
  2212 0000182B 4883FE00                	cmp rsi, 0
  2213 0000182F 740E                    	je .L_lambda_simple_params_end_00ae
  2214 00001831 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2215 00001836 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2216 0000183A 48FFC6                  	inc rsi
  2217 0000183D EBEC                    	jmp .L_lambda_simple_params_loop_00ae
  2218                                  .L_lambda_simple_params_end_00ae:
  2219 0000183F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2220 00001842 4889C3                  	mov rbx, rax
  2221 00001845 58                      	pop rax
  2222 00001846 C60005                  	mov byte [rax], T_closure
  2223 00001849 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2224 0000184D 48C74009[5A180000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ae
  2225 00001855 E982000000              	jmp .L_lambda_simple_end_00ae
  2226                                  .L_lambda_simple_code_00ae:	; lambda-simple body
  2227 0000185A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2228 00001860 740B                    	je .L_lambda_simple_arity_check_ok_00ae
  2229 00001862 FF742410                	push qword [rsp + 8 * 2]
  2230 00001866 6A01                    	push 1
  2231 00001868 E929E10000              	jmp L_error_incorrect_arity_simple
  2232                                  .L_lambda_simple_arity_check_ok_00ae:
  2233 0000186D C8000000                	enter 0, 0
  2234 00001871 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2235 00001875 50                      	push rax
  2236 00001876 6A01                    	push 1
  2237 00001878 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2238                                  	assert_closure(rax)
    42 00001880 803805              <1>  cmp byte [%1], %2
    43 00001883 0F8548F90000        <1>  jne L_error_incorrect_type
  2239 00001889 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2240 0000188C FF5009                  	call SOB_CLOSURE_CODE(rax)
  2241 0000188F 50                      	push rax
  2242 00001890 6A01                    	push 1
  2243 00001892 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2244                                  	assert_closure(rax)
    42 0000189A 803805              <1>  cmp byte [%1], %2
    43 0000189D 0F852EF90000        <1>  jne L_error_incorrect_type
  2245 000018A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2246 000018A6 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2247 000018A9 FF7500                  	push qword [rbp] ; same the old rbp
  2248 000018AC BA04000000              	mov rdx, 1 + 3
  2249 000018B1 488B4D00                	mov rcx, [rbp]
  2250 000018B5 4889EF                  	mov rdi, rbp
  2251                                  .L_tc_recycle_frame_loop_00c8:
  2252 000018B8 4883FA00                	cmp rdx, 0
  2253 000018BC 7413                    	je .L_tc_recycle_frame_done_00c8
  2254 000018BE 4883E908                	sub rcx, 8
  2255 000018C2 4883EF08                	sub rdi, 8
  2256 000018C6 488B37                  	mov rsi, [rdi]
  2257 000018C9 488931                  	mov qword [rcx], rsi
  2258 000018CC 48FFCA                  	dec rdx
  2259 000018CF EBE7                    	jmp .L_tc_recycle_frame_loop_00c8
  2260                                  .L_tc_recycle_frame_done_00c8:
  2261 000018D1 5D                      	pop rbp ; restore the old rbp
  2262 000018D2 4889CC                  	mov rsp, rcx
  2263 000018D5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2264 000018D8 C9                      	leave
  2265 000018D9 C21800                  	ret 8 * (2 + 1)
  2266                                  .L_lambda_simple_end_00ae:	; new closure is in rax
  2267 000018DC 48890425[48020000]      	mov qword [free_var_73], rax
  2268 000018E4 48B8-                   	mov rax, sob_void
  2268 000018E6 [0000000000000000] 
  2269                                  
  2270 000018EE 4889C7                  	mov rdi, rax
  2271 000018F1 E8F8E00000              	call print_sexpr_if_not_void
  2272                                  
  2273 000018F6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2274 000018FB E8DDE00000              	call malloc
  2275 00001900 50                      	push rax
  2276 00001901 BF00000000              	mov rdi, 8 * 0	; new rib
  2277 00001906 E8D2E00000              	call malloc
  2278 0000190B 50                      	push rax
  2279 0000190C BF08000000              	mov rdi, 8 * 1	; extended env
  2280 00001911 E8C7E00000              	call malloc
  2281 00001916 488B7D10                	mov rdi, ENV
  2282 0000191A BE00000000              	mov rsi, 0
  2283 0000191F BA01000000              	mov rdx, 1
  2284                                  .L_lambda_simple_env_loop_00af:	; ext_env[i + 1] <-- env[i]
  2285 00001924 4883FE00                	cmp rsi, 0
  2286 00001928 7410                    	je .L_lambda_simple_env_end_00af
  2287 0000192A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2288 0000192E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2289 00001932 48FFC6                  	inc rsi
  2290 00001935 48FFC2                  	inc rdx
  2291 00001938 EBEA                    	jmp .L_lambda_simple_env_loop_00af
  2292                                  .L_lambda_simple_env_end_00af:
  2293 0000193A 5B                      	pop rbx
  2294 0000193B BE00000000              	mov rsi, 0
  2295                                  .L_lambda_simple_params_loop_00af:	; copy params
  2296 00001940 4883FE00                	cmp rsi, 0
  2297 00001944 740E                    	je .L_lambda_simple_params_end_00af
  2298 00001946 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2299 0000194B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2300 0000194F 48FFC6                  	inc rsi
  2301 00001952 EBEC                    	jmp .L_lambda_simple_params_loop_00af
  2302                                  .L_lambda_simple_params_end_00af:
  2303 00001954 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2304 00001957 4889C3                  	mov rbx, rax
  2305 0000195A 58                      	pop rax
  2306 0000195B C60005                  	mov byte [rax], T_closure
  2307 0000195E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2308 00001962 48C74009[6F190000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00af
  2309 0000196A E982000000              	jmp .L_lambda_simple_end_00af
  2310                                  .L_lambda_simple_code_00af:	; lambda-simple body
  2311 0000196F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2312 00001975 740B                    	je .L_lambda_simple_arity_check_ok_00af
  2313 00001977 FF742410                	push qword [rsp + 8 * 2]
  2314 0000197B 6A01                    	push 1
  2315 0000197D E914E00000              	jmp L_error_incorrect_arity_simple
  2316                                  .L_lambda_simple_arity_check_ok_00af:
  2317 00001982 C8000000                	enter 0, 0
  2318 00001986 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2319 0000198A 50                      	push rax
  2320 0000198B 6A01                    	push 1
  2321 0000198D 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2322                                  	assert_closure(rax)
    42 00001995 803805              <1>  cmp byte [%1], %2
    43 00001998 0F8533F80000        <1>  jne L_error_incorrect_type
  2323 0000199E FF7001                  	push SOB_CLOSURE_ENV(rax)
  2324 000019A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2325 000019A4 50                      	push rax
  2326 000019A5 6A01                    	push 1
  2327 000019A7 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2328                                  	assert_closure(rax)
    42 000019AF 803805              <1>  cmp byte [%1], %2
    43 000019B2 0F8519F80000        <1>  jne L_error_incorrect_type
  2329 000019B8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2330 000019BB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2331 000019BE FF7500                  	push qword [rbp] ; same the old rbp
  2332 000019C1 BA04000000              	mov rdx, 1 + 3
  2333 000019C6 488B4D00                	mov rcx, [rbp]
  2334 000019CA 4889EF                  	mov rdi, rbp
  2335                                  .L_tc_recycle_frame_loop_00c9:
  2336 000019CD 4883FA00                	cmp rdx, 0
  2337 000019D1 7413                    	je .L_tc_recycle_frame_done_00c9
  2338 000019D3 4883E908                	sub rcx, 8
  2339 000019D7 4883EF08                	sub rdi, 8
  2340 000019DB 488B37                  	mov rsi, [rdi]
  2341 000019DE 488931                  	mov qword [rcx], rsi
  2342 000019E1 48FFCA                  	dec rdx
  2343 000019E4 EBE7                    	jmp .L_tc_recycle_frame_loop_00c9
  2344                                  .L_tc_recycle_frame_done_00c9:
  2345 000019E6 5D                      	pop rbp ; restore the old rbp
  2346 000019E7 4889CC                  	mov rsp, rcx
  2347 000019EA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2348 000019ED C9                      	leave
  2349 000019EE C21800                  	ret 8 * (2 + 1)
  2350                                  .L_lambda_simple_end_00af:	; new closure is in rax
  2351 000019F1 48890425[50020000]      	mov qword [free_var_74], rax
  2352 000019F9 48B8-                   	mov rax, sob_void
  2352 000019FB [0000000000000000] 
  2353                                  
  2354 00001A03 4889C7                  	mov rdi, rax
  2355 00001A06 E8E3DF0000              	call print_sexpr_if_not_void
  2356                                  
  2357 00001A0B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2358 00001A10 E8C8DF0000              	call malloc
  2359 00001A15 50                      	push rax
  2360 00001A16 BF00000000              	mov rdi, 8 * 0	; new rib
  2361 00001A1B E8BDDF0000              	call malloc
  2362 00001A20 50                      	push rax
  2363 00001A21 BF08000000              	mov rdi, 8 * 1	; extended env
  2364 00001A26 E8B2DF0000              	call malloc
  2365 00001A2B 488B7D10                	mov rdi, ENV
  2366 00001A2F BE00000000              	mov rsi, 0
  2367 00001A34 BA01000000              	mov rdx, 1
  2368                                  .L_lambda_simple_env_loop_00b0:	; ext_env[i + 1] <-- env[i]
  2369 00001A39 4883FE00                	cmp rsi, 0
  2370 00001A3D 7410                    	je .L_lambda_simple_env_end_00b0
  2371 00001A3F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2372 00001A43 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2373 00001A47 48FFC6                  	inc rsi
  2374 00001A4A 48FFC2                  	inc rdx
  2375 00001A4D EBEA                    	jmp .L_lambda_simple_env_loop_00b0
  2376                                  .L_lambda_simple_env_end_00b0:
  2377 00001A4F 5B                      	pop rbx
  2378 00001A50 BE00000000              	mov rsi, 0
  2379                                  .L_lambda_simple_params_loop_00b0:	; copy params
  2380 00001A55 4883FE00                	cmp rsi, 0
  2381 00001A59 740E                    	je .L_lambda_simple_params_end_00b0
  2382 00001A5B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2383 00001A60 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2384 00001A64 48FFC6                  	inc rsi
  2385 00001A67 EBEC                    	jmp .L_lambda_simple_params_loop_00b0
  2386                                  .L_lambda_simple_params_end_00b0:
  2387 00001A69 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2388 00001A6C 4889C3                  	mov rbx, rax
  2389 00001A6F 58                      	pop rax
  2390 00001A70 C60005                  	mov byte [rax], T_closure
  2391 00001A73 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2392 00001A77 48C74009[841A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b0
  2393 00001A7F E982000000              	jmp .L_lambda_simple_end_00b0
  2394                                  .L_lambda_simple_code_00b0:	; lambda-simple body
  2395 00001A84 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2396 00001A8A 740B                    	je .L_lambda_simple_arity_check_ok_00b0
  2397 00001A8C FF742410                	push qword [rsp + 8 * 2]
  2398 00001A90 6A01                    	push 1
  2399 00001A92 E9FFDE0000              	jmp L_error_incorrect_arity_simple
  2400                                  .L_lambda_simple_arity_check_ok_00b0:
  2401 00001A97 C8000000                	enter 0, 0
  2402 00001A9B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2403 00001A9F 50                      	push rax
  2404 00001AA0 6A01                    	push 1
  2405 00001AA2 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2406                                  	assert_closure(rax)
    42 00001AAA 803805              <1>  cmp byte [%1], %2
    43 00001AAD 0F851EF70000        <1>  jne L_error_incorrect_type
  2407 00001AB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2408 00001AB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2409 00001AB9 50                      	push rax
  2410 00001ABA 6A01                    	push 1
  2411 00001ABC 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2412                                  	assert_closure(rax)
    42 00001AC4 803805              <1>  cmp byte [%1], %2
    43 00001AC7 0F8504F70000        <1>  jne L_error_incorrect_type
  2413 00001ACD FF7001                  	push SOB_CLOSURE_ENV(rax)
  2414 00001AD0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2415 00001AD3 FF7500                  	push qword [rbp] ; same the old rbp
  2416 00001AD6 BA04000000              	mov rdx, 1 + 3
  2417 00001ADB 488B4D00                	mov rcx, [rbp]
  2418 00001ADF 4889EF                  	mov rdi, rbp
  2419                                  .L_tc_recycle_frame_loop_00ca:
  2420 00001AE2 4883FA00                	cmp rdx, 0
  2421 00001AE6 7413                    	je .L_tc_recycle_frame_done_00ca
  2422 00001AE8 4883E908                	sub rcx, 8
  2423 00001AEC 4883EF08                	sub rdi, 8
  2424 00001AF0 488B37                  	mov rsi, [rdi]
  2425 00001AF3 488931                  	mov qword [rcx], rsi
  2426 00001AF6 48FFCA                  	dec rdx
  2427 00001AF9 EBE7                    	jmp .L_tc_recycle_frame_loop_00ca
  2428                                  .L_tc_recycle_frame_done_00ca:
  2429 00001AFB 5D                      	pop rbp ; restore the old rbp
  2430 00001AFC 4889CC                  	mov rsp, rcx
  2431 00001AFF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2432 00001B02 C9                      	leave
  2433 00001B03 C21800                  	ret 8 * (2 + 1)
  2434                                  .L_lambda_simple_end_00b0:	; new closure is in rax
  2435 00001B06 48890425[58020000]      	mov qword [free_var_75], rax
  2436 00001B0E 48B8-                   	mov rax, sob_void
  2436 00001B10 [0000000000000000] 
  2437                                  
  2438 00001B18 4889C7                  	mov rdi, rax
  2439 00001B1B E8CEDE0000              	call print_sexpr_if_not_void
  2440                                  
  2441 00001B20 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2442 00001B25 E8B3DE0000              	call malloc
  2443 00001B2A 50                      	push rax
  2444 00001B2B BF00000000              	mov rdi, 8 * 0	; new rib
  2445 00001B30 E8A8DE0000              	call malloc
  2446 00001B35 50                      	push rax
  2447 00001B36 BF08000000              	mov rdi, 8 * 1	; extended env
  2448 00001B3B E89DDE0000              	call malloc
  2449 00001B40 488B7D10                	mov rdi, ENV
  2450 00001B44 BE00000000              	mov rsi, 0
  2451 00001B49 BA01000000              	mov rdx, 1
  2452                                  .L_lambda_simple_env_loop_00b1:	; ext_env[i + 1] <-- env[i]
  2453 00001B4E 4883FE00                	cmp rsi, 0
  2454 00001B52 7410                    	je .L_lambda_simple_env_end_00b1
  2455 00001B54 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2456 00001B58 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2457 00001B5C 48FFC6                  	inc rsi
  2458 00001B5F 48FFC2                  	inc rdx
  2459 00001B62 EBEA                    	jmp .L_lambda_simple_env_loop_00b1
  2460                                  .L_lambda_simple_env_end_00b1:
  2461 00001B64 5B                      	pop rbx
  2462 00001B65 BE00000000              	mov rsi, 0
  2463                                  .L_lambda_simple_params_loop_00b1:	; copy params
  2464 00001B6A 4883FE00                	cmp rsi, 0
  2465 00001B6E 740E                    	je .L_lambda_simple_params_end_00b1
  2466 00001B70 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2467 00001B75 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2468 00001B79 48FFC6                  	inc rsi
  2469 00001B7C EBEC                    	jmp .L_lambda_simple_params_loop_00b1
  2470                                  .L_lambda_simple_params_end_00b1:
  2471 00001B7E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2472 00001B81 4889C3                  	mov rbx, rax
  2473 00001B84 58                      	pop rax
  2474 00001B85 C60005                  	mov byte [rax], T_closure
  2475 00001B88 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2476 00001B8C 48C74009[991B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b1
  2477 00001B94 E982000000              	jmp .L_lambda_simple_end_00b1
  2478                                  .L_lambda_simple_code_00b1:	; lambda-simple body
  2479 00001B99 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2480 00001B9F 740B                    	je .L_lambda_simple_arity_check_ok_00b1
  2481 00001BA1 FF742410                	push qword [rsp + 8 * 2]
  2482 00001BA5 6A01                    	push 1
  2483 00001BA7 E9EADD0000              	jmp L_error_incorrect_arity_simple
  2484                                  .L_lambda_simple_arity_check_ok_00b1:
  2485 00001BAC C8000000                	enter 0, 0
  2486 00001BB0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2487 00001BB4 50                      	push rax
  2488 00001BB5 6A01                    	push 1
  2489 00001BB7 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2490                                  	assert_closure(rax)
    42 00001BBF 803805              <1>  cmp byte [%1], %2
    43 00001BC2 0F8509F60000        <1>  jne L_error_incorrect_type
  2491 00001BC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2492 00001BCB FF5009                  	call SOB_CLOSURE_CODE(rax)
  2493 00001BCE 50                      	push rax
  2494 00001BCF 6A01                    	push 1
  2495 00001BD1 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2496                                  	assert_closure(rax)
    42 00001BD9 803805              <1>  cmp byte [%1], %2
    43 00001BDC 0F85EFF50000        <1>  jne L_error_incorrect_type
  2497 00001BE2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2498 00001BE5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2499 00001BE8 FF7500                  	push qword [rbp] ; same the old rbp
  2500 00001BEB BA04000000              	mov rdx, 1 + 3
  2501 00001BF0 488B4D00                	mov rcx, [rbp]
  2502 00001BF4 4889EF                  	mov rdi, rbp
  2503                                  .L_tc_recycle_frame_loop_00cb:
  2504 00001BF7 4883FA00                	cmp rdx, 0
  2505 00001BFB 7413                    	je .L_tc_recycle_frame_done_00cb
  2506 00001BFD 4883E908                	sub rcx, 8
  2507 00001C01 4883EF08                	sub rdi, 8
  2508 00001C05 488B37                  	mov rsi, [rdi]
  2509 00001C08 488931                  	mov qword [rcx], rsi
  2510 00001C0B 48FFCA                  	dec rdx
  2511 00001C0E EBE7                    	jmp .L_tc_recycle_frame_loop_00cb
  2512                                  .L_tc_recycle_frame_done_00cb:
  2513 00001C10 5D                      	pop rbp ; restore the old rbp
  2514 00001C11 4889CC                  	mov rsp, rcx
  2515 00001C14 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2516 00001C17 C9                      	leave
  2517 00001C18 C21800                  	ret 8 * (2 + 1)
  2518                                  .L_lambda_simple_end_00b1:	; new closure is in rax
  2519 00001C1B 48890425[60020000]      	mov qword [free_var_76], rax
  2520 00001C23 48B8-                   	mov rax, sob_void
  2520 00001C25 [0000000000000000] 
  2521                                  
  2522 00001C2D 4889C7                  	mov rdi, rax
  2523 00001C30 E8B9DD0000              	call print_sexpr_if_not_void
  2524                                  
  2525 00001C35 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2526 00001C3A E89EDD0000              	call malloc
  2527 00001C3F 50                      	push rax
  2528 00001C40 BF00000000              	mov rdi, 8 * 0	; new rib
  2529 00001C45 E893DD0000              	call malloc
  2530 00001C4A 50                      	push rax
  2531 00001C4B BF08000000              	mov rdi, 8 * 1	; extended env
  2532 00001C50 E888DD0000              	call malloc
  2533 00001C55 488B7D10                	mov rdi, ENV
  2534 00001C59 BE00000000              	mov rsi, 0
  2535 00001C5E BA01000000              	mov rdx, 1
  2536                                  .L_lambda_simple_env_loop_00b2:	; ext_env[i + 1] <-- env[i]
  2537 00001C63 4883FE00                	cmp rsi, 0
  2538 00001C67 7410                    	je .L_lambda_simple_env_end_00b2
  2539 00001C69 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2540 00001C6D 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2541 00001C71 48FFC6                  	inc rsi
  2542 00001C74 48FFC2                  	inc rdx
  2543 00001C77 EBEA                    	jmp .L_lambda_simple_env_loop_00b2
  2544                                  .L_lambda_simple_env_end_00b2:
  2545 00001C79 5B                      	pop rbx
  2546 00001C7A BE00000000              	mov rsi, 0
  2547                                  .L_lambda_simple_params_loop_00b2:	; copy params
  2548 00001C7F 4883FE00                	cmp rsi, 0
  2549 00001C83 740E                    	je .L_lambda_simple_params_end_00b2
  2550 00001C85 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2551 00001C8A 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2552 00001C8E 48FFC6                  	inc rsi
  2553 00001C91 EBEC                    	jmp .L_lambda_simple_params_loop_00b2
  2554                                  .L_lambda_simple_params_end_00b2:
  2555 00001C93 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2556 00001C96 4889C3                  	mov rbx, rax
  2557 00001C99 58                      	pop rax
  2558 00001C9A C60005                  	mov byte [rax], T_closure
  2559 00001C9D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2560 00001CA1 48C74009[AE1C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b2
  2561 00001CA9 E982000000              	jmp .L_lambda_simple_end_00b2
  2562                                  .L_lambda_simple_code_00b2:	; lambda-simple body
  2563 00001CAE 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2564 00001CB4 740B                    	je .L_lambda_simple_arity_check_ok_00b2
  2565 00001CB6 FF742410                	push qword [rsp + 8 * 2]
  2566 00001CBA 6A01                    	push 1
  2567 00001CBC E9D5DC0000              	jmp L_error_incorrect_arity_simple
  2568                                  .L_lambda_simple_arity_check_ok_00b2:
  2569 00001CC1 C8000000                	enter 0, 0
  2570 00001CC5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2571 00001CC9 50                      	push rax
  2572 00001CCA 6A01                    	push 1
  2573 00001CCC 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2574                                  	assert_closure(rax)
    42 00001CD4 803805              <1>  cmp byte [%1], %2
    43 00001CD7 0F85F4F40000        <1>  jne L_error_incorrect_type
  2575 00001CDD FF7001                  	push SOB_CLOSURE_ENV(rax)
  2576 00001CE0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2577 00001CE3 50                      	push rax
  2578 00001CE4 6A01                    	push 1
  2579 00001CE6 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2580                                  	assert_closure(rax)
    42 00001CEE 803805              <1>  cmp byte [%1], %2
    43 00001CF1 0F85DAF40000        <1>  jne L_error_incorrect_type
  2581 00001CF7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2582 00001CFA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2583 00001CFD FF7500                  	push qword [rbp] ; same the old rbp
  2584 00001D00 BA04000000              	mov rdx, 1 + 3
  2585 00001D05 488B4D00                	mov rcx, [rbp]
  2586 00001D09 4889EF                  	mov rdi, rbp
  2587                                  .L_tc_recycle_frame_loop_00cc:
  2588 00001D0C 4883FA00                	cmp rdx, 0
  2589 00001D10 7413                    	je .L_tc_recycle_frame_done_00cc
  2590 00001D12 4883E908                	sub rcx, 8
  2591 00001D16 4883EF08                	sub rdi, 8
  2592 00001D1A 488B37                  	mov rsi, [rdi]
  2593 00001D1D 488931                  	mov qword [rcx], rsi
  2594 00001D20 48FFCA                  	dec rdx
  2595 00001D23 EBE7                    	jmp .L_tc_recycle_frame_loop_00cc
  2596                                  .L_tc_recycle_frame_done_00cc:
  2597 00001D25 5D                      	pop rbp ; restore the old rbp
  2598 00001D26 4889CC                  	mov rsp, rcx
  2599 00001D29 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2600 00001D2C C9                      	leave
  2601 00001D2D C21800                  	ret 8 * (2 + 1)
  2602                                  .L_lambda_simple_end_00b2:	; new closure is in rax
  2603 00001D30 48890425[68020000]      	mov qword [free_var_77], rax
  2604 00001D38 48B8-                   	mov rax, sob_void
  2604 00001D3A [0000000000000000] 
  2605                                  
  2606 00001D42 4889C7                  	mov rdi, rax
  2607 00001D45 E8A4DC0000              	call print_sexpr_if_not_void
  2608                                  
  2609 00001D4A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2610 00001D4F E889DC0000              	call malloc
  2611 00001D54 50                      	push rax
  2612 00001D55 BF00000000              	mov rdi, 8 * 0	; new rib
  2613 00001D5A E87EDC0000              	call malloc
  2614 00001D5F 50                      	push rax
  2615 00001D60 BF08000000              	mov rdi, 8 * 1	; extended env
  2616 00001D65 E873DC0000              	call malloc
  2617 00001D6A 488B7D10                	mov rdi, ENV
  2618 00001D6E BE00000000              	mov rsi, 0
  2619 00001D73 BA01000000              	mov rdx, 1
  2620                                  .L_lambda_simple_env_loop_00b3:	; ext_env[i + 1] <-- env[i]
  2621 00001D78 4883FE00                	cmp rsi, 0
  2622 00001D7C 7410                    	je .L_lambda_simple_env_end_00b3
  2623 00001D7E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2624 00001D82 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2625 00001D86 48FFC6                  	inc rsi
  2626 00001D89 48FFC2                  	inc rdx
  2627 00001D8C EBEA                    	jmp .L_lambda_simple_env_loop_00b3
  2628                                  .L_lambda_simple_env_end_00b3:
  2629 00001D8E 5B                      	pop rbx
  2630 00001D8F BE00000000              	mov rsi, 0
  2631                                  .L_lambda_simple_params_loop_00b3:	; copy params
  2632 00001D94 4883FE00                	cmp rsi, 0
  2633 00001D98 740E                    	je .L_lambda_simple_params_end_00b3
  2634 00001D9A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2635 00001D9F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2636 00001DA3 48FFC6                  	inc rsi
  2637 00001DA6 EBEC                    	jmp .L_lambda_simple_params_loop_00b3
  2638                                  .L_lambda_simple_params_end_00b3:
  2639 00001DA8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2640 00001DAB 4889C3                  	mov rbx, rax
  2641 00001DAE 58                      	pop rax
  2642 00001DAF C60005                  	mov byte [rax], T_closure
  2643 00001DB2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2644 00001DB6 48C74009[C31D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b3
  2645 00001DBE E982000000              	jmp .L_lambda_simple_end_00b3
  2646                                  .L_lambda_simple_code_00b3:	; lambda-simple body
  2647 00001DC3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2648 00001DC9 740B                    	je .L_lambda_simple_arity_check_ok_00b3
  2649 00001DCB FF742410                	push qword [rsp + 8 * 2]
  2650 00001DCF 6A01                    	push 1
  2651 00001DD1 E9C0DB0000              	jmp L_error_incorrect_arity_simple
  2652                                  .L_lambda_simple_arity_check_ok_00b3:
  2653 00001DD6 C8000000                	enter 0, 0
  2654 00001DDA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2655 00001DDE 50                      	push rax
  2656 00001DDF 6A01                    	push 1
  2657 00001DE1 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2658                                  	assert_closure(rax)
    42 00001DE9 803805              <1>  cmp byte [%1], %2
    43 00001DEC 0F85DFF30000        <1>  jne L_error_incorrect_type
  2659 00001DF2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2660 00001DF5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2661 00001DF8 50                      	push rax
  2662 00001DF9 6A01                    	push 1
  2663 00001DFB 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2664                                  	assert_closure(rax)
    42 00001E03 803805              <1>  cmp byte [%1], %2
    43 00001E06 0F85C5F30000        <1>  jne L_error_incorrect_type
  2665 00001E0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2666 00001E0F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2667 00001E12 FF7500                  	push qword [rbp] ; same the old rbp
  2668 00001E15 BA04000000              	mov rdx, 1 + 3
  2669 00001E1A 488B4D00                	mov rcx, [rbp]
  2670 00001E1E 4889EF                  	mov rdi, rbp
  2671                                  .L_tc_recycle_frame_loop_00cd:
  2672 00001E21 4883FA00                	cmp rdx, 0
  2673 00001E25 7413                    	je .L_tc_recycle_frame_done_00cd
  2674 00001E27 4883E908                	sub rcx, 8
  2675 00001E2B 4883EF08                	sub rdi, 8
  2676 00001E2F 488B37                  	mov rsi, [rdi]
  2677 00001E32 488931                  	mov qword [rcx], rsi
  2678 00001E35 48FFCA                  	dec rdx
  2679 00001E38 EBE7                    	jmp .L_tc_recycle_frame_loop_00cd
  2680                                  .L_tc_recycle_frame_done_00cd:
  2681 00001E3A 5D                      	pop rbp ; restore the old rbp
  2682 00001E3B 4889CC                  	mov rsp, rcx
  2683 00001E3E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2684 00001E41 C9                      	leave
  2685 00001E42 C21800                  	ret 8 * (2 + 1)
  2686                                  .L_lambda_simple_end_00b3:	; new closure is in rax
  2687 00001E45 48890425[70020000]      	mov qword [free_var_78], rax
  2688 00001E4D 48B8-                   	mov rax, sob_void
  2688 00001E4F [0000000000000000] 
  2689                                  
  2690 00001E57 4889C7                  	mov rdi, rax
  2691 00001E5A E88FDB0000              	call print_sexpr_if_not_void
  2692                                  
  2693 00001E5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2694 00001E64 E874DB0000              	call malloc
  2695 00001E69 50                      	push rax
  2696 00001E6A BF00000000              	mov rdi, 8 * 0	; new rib
  2697 00001E6F E869DB0000              	call malloc
  2698 00001E74 50                      	push rax
  2699 00001E75 BF08000000              	mov rdi, 8 * 1	; extended env
  2700 00001E7A E85EDB0000              	call malloc
  2701 00001E7F 488B7D10                	mov rdi, ENV
  2702 00001E83 BE00000000              	mov rsi, 0
  2703 00001E88 BA01000000              	mov rdx, 1
  2704                                  .L_lambda_simple_env_loop_00b4:	; ext_env[i + 1] <-- env[i]
  2705 00001E8D 4883FE00                	cmp rsi, 0
  2706 00001E91 7410                    	je .L_lambda_simple_env_end_00b4
  2707 00001E93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2708 00001E97 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2709 00001E9B 48FFC6                  	inc rsi
  2710 00001E9E 48FFC2                  	inc rdx
  2711 00001EA1 EBEA                    	jmp .L_lambda_simple_env_loop_00b4
  2712                                  .L_lambda_simple_env_end_00b4:
  2713 00001EA3 5B                      	pop rbx
  2714 00001EA4 BE00000000              	mov rsi, 0
  2715                                  .L_lambda_simple_params_loop_00b4:	; copy params
  2716 00001EA9 4883FE00                	cmp rsi, 0
  2717 00001EAD 740E                    	je .L_lambda_simple_params_end_00b4
  2718 00001EAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2719 00001EB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2720 00001EB8 48FFC6                  	inc rsi
  2721 00001EBB EBEC                    	jmp .L_lambda_simple_params_loop_00b4
  2722                                  .L_lambda_simple_params_end_00b4:
  2723 00001EBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2724 00001EC0 4889C3                  	mov rbx, rax
  2725 00001EC3 58                      	pop rax
  2726 00001EC4 C60005                  	mov byte [rax], T_closure
  2727 00001EC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2728 00001ECB 48C74009[D81E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b4
  2729 00001ED3 E982000000              	jmp .L_lambda_simple_end_00b4
  2730                                  .L_lambda_simple_code_00b4:	; lambda-simple body
  2731 00001ED8 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2732 00001EDE 740B                    	je .L_lambda_simple_arity_check_ok_00b4
  2733 00001EE0 FF742410                	push qword [rsp + 8 * 2]
  2734 00001EE4 6A01                    	push 1
  2735 00001EE6 E9ABDA0000              	jmp L_error_incorrect_arity_simple
  2736                                  .L_lambda_simple_arity_check_ok_00b4:
  2737 00001EEB C8000000                	enter 0, 0
  2738 00001EEF 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2739 00001EF3 50                      	push rax
  2740 00001EF4 6A01                    	push 1
  2741 00001EF6 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2742                                  	assert_closure(rax)
    42 00001EFE 803805              <1>  cmp byte [%1], %2
    43 00001F01 0F85CAF20000        <1>  jne L_error_incorrect_type
  2743 00001F07 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2744 00001F0A FF5009                  	call SOB_CLOSURE_CODE(rax)
  2745 00001F0D 50                      	push rax
  2746 00001F0E 6A01                    	push 1
  2747 00001F10 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2748                                  	assert_closure(rax)
    42 00001F18 803805              <1>  cmp byte [%1], %2
    43 00001F1B 0F85B0F20000        <1>  jne L_error_incorrect_type
  2749 00001F21 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2750 00001F24 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2751 00001F27 FF7500                  	push qword [rbp] ; same the old rbp
  2752 00001F2A BA04000000              	mov rdx, 1 + 3
  2753 00001F2F 488B4D00                	mov rcx, [rbp]
  2754 00001F33 4889EF                  	mov rdi, rbp
  2755                                  .L_tc_recycle_frame_loop_00ce:
  2756 00001F36 4883FA00                	cmp rdx, 0
  2757 00001F3A 7413                    	je .L_tc_recycle_frame_done_00ce
  2758 00001F3C 4883E908                	sub rcx, 8
  2759 00001F40 4883EF08                	sub rdi, 8
  2760 00001F44 488B37                  	mov rsi, [rdi]
  2761 00001F47 488931                  	mov qword [rcx], rsi
  2762 00001F4A 48FFCA                  	dec rdx
  2763 00001F4D EBE7                    	jmp .L_tc_recycle_frame_loop_00ce
  2764                                  .L_tc_recycle_frame_done_00ce:
  2765 00001F4F 5D                      	pop rbp ; restore the old rbp
  2766 00001F50 4889CC                  	mov rsp, rcx
  2767 00001F53 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2768 00001F56 C9                      	leave
  2769 00001F57 C21800                  	ret 8 * (2 + 1)
  2770                                  .L_lambda_simple_end_00b4:	; new closure is in rax
  2771 00001F5A 48890425[78020000]      	mov qword [free_var_79], rax
  2772 00001F62 48B8-                   	mov rax, sob_void
  2772 00001F64 [0000000000000000] 
  2773                                  
  2774 00001F6C 4889C7                  	mov rdi, rax
  2775 00001F6F E87ADA0000              	call print_sexpr_if_not_void
  2776                                  
  2777 00001F74 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2778 00001F79 E85FDA0000              	call malloc
  2779 00001F7E 50                      	push rax
  2780 00001F7F BF00000000              	mov rdi, 8 * 0	; new rib
  2781 00001F84 E854DA0000              	call malloc
  2782 00001F89 50                      	push rax
  2783 00001F8A BF08000000              	mov rdi, 8 * 1	; extended env
  2784 00001F8F E849DA0000              	call malloc
  2785 00001F94 488B7D10                	mov rdi, ENV
  2786 00001F98 BE00000000              	mov rsi, 0
  2787 00001F9D BA01000000              	mov rdx, 1
  2788                                  .L_lambda_simple_env_loop_00b5:	; ext_env[i + 1] <-- env[i]
  2789 00001FA2 4883FE00                	cmp rsi, 0
  2790 00001FA6 7410                    	je .L_lambda_simple_env_end_00b5
  2791 00001FA8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2792 00001FAC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2793 00001FB0 48FFC6                  	inc rsi
  2794 00001FB3 48FFC2                  	inc rdx
  2795 00001FB6 EBEA                    	jmp .L_lambda_simple_env_loop_00b5
  2796                                  .L_lambda_simple_env_end_00b5:
  2797 00001FB8 5B                      	pop rbx
  2798 00001FB9 BE00000000              	mov rsi, 0
  2799                                  .L_lambda_simple_params_loop_00b5:	; copy params
  2800 00001FBE 4883FE00                	cmp rsi, 0
  2801 00001FC2 740E                    	je .L_lambda_simple_params_end_00b5
  2802 00001FC4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2803 00001FC9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2804 00001FCD 48FFC6                  	inc rsi
  2805 00001FD0 EBEC                    	jmp .L_lambda_simple_params_loop_00b5
  2806                                  .L_lambda_simple_params_end_00b5:
  2807 00001FD2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2808 00001FD5 4889C3                  	mov rbx, rax
  2809 00001FD8 58                      	pop rax
  2810 00001FD9 C60005                  	mov byte [rax], T_closure
  2811 00001FDC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2812 00001FE0 48C74009[ED1F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b5
  2813 00001FE8 E982000000              	jmp .L_lambda_simple_end_00b5
  2814                                  .L_lambda_simple_code_00b5:	; lambda-simple body
  2815 00001FED 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2816 00001FF3 740B                    	je .L_lambda_simple_arity_check_ok_00b5
  2817 00001FF5 FF742410                	push qword [rsp + 8 * 2]
  2818 00001FF9 6A01                    	push 1
  2819 00001FFB E996D90000              	jmp L_error_incorrect_arity_simple
  2820                                  .L_lambda_simple_arity_check_ok_00b5:
  2821 00002000 C8000000                	enter 0, 0
  2822 00002004 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2823 00002008 50                      	push rax
  2824 00002009 6A01                    	push 1
  2825 0000200B 488B0425[C0010000]      	mov rax, qword [free_var_56]
  2826                                  	assert_closure(rax)
    42 00002013 803805              <1>  cmp byte [%1], %2
    43 00002016 0F85B5F10000        <1>  jne L_error_incorrect_type
  2827 0000201C FF7001                  	push SOB_CLOSURE_ENV(rax)
  2828 0000201F FF5009                  	call SOB_CLOSURE_CODE(rax)
  2829 00002022 50                      	push rax
  2830 00002023 6A01                    	push 1
  2831 00002025 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2832                                  	assert_closure(rax)
    42 0000202D 803805              <1>  cmp byte [%1], %2
    43 00002030 0F859BF10000        <1>  jne L_error_incorrect_type
  2833 00002036 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2834 00002039 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2835 0000203C FF7500                  	push qword [rbp] ; same the old rbp
  2836 0000203F BA04000000              	mov rdx, 1 + 3
  2837 00002044 488B4D00                	mov rcx, [rbp]
  2838 00002048 4889EF                  	mov rdi, rbp
  2839                                  .L_tc_recycle_frame_loop_00cf:
  2840 0000204B 4883FA00                	cmp rdx, 0
  2841 0000204F 7413                    	je .L_tc_recycle_frame_done_00cf
  2842 00002051 4883E908                	sub rcx, 8
  2843 00002055 4883EF08                	sub rdi, 8
  2844 00002059 488B37                  	mov rsi, [rdi]
  2845 0000205C 488931                  	mov qword [rcx], rsi
  2846 0000205F 48FFCA                  	dec rdx
  2847 00002062 EBE7                    	jmp .L_tc_recycle_frame_loop_00cf
  2848                                  .L_tc_recycle_frame_done_00cf:
  2849 00002064 5D                      	pop rbp ; restore the old rbp
  2850 00002065 4889CC                  	mov rsp, rcx
  2851 00002068 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2852 0000206B C9                      	leave
  2853 0000206C C21800                  	ret 8 * (2 + 1)
  2854                                  .L_lambda_simple_end_00b5:	; new closure is in rax
  2855 0000206F 48890425[80020000]      	mov qword [free_var_80], rax
  2856 00002077 48B8-                   	mov rax, sob_void
  2856 00002079 [0000000000000000] 
  2857                                  
  2858 00002081 4889C7                  	mov rdi, rax
  2859 00002084 E865D90000              	call print_sexpr_if_not_void
  2860                                  
  2861 00002089 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2862 0000208E E84AD90000              	call malloc
  2863 00002093 50                      	push rax
  2864 00002094 BF00000000              	mov rdi, 8 * 0	; new rib
  2865 00002099 E83FD90000              	call malloc
  2866 0000209E 50                      	push rax
  2867 0000209F BF08000000              	mov rdi, 8 * 1	; extended env
  2868 000020A4 E834D90000              	call malloc
  2869 000020A9 488B7D10                	mov rdi, ENV
  2870 000020AD BE00000000              	mov rsi, 0
  2871 000020B2 BA01000000              	mov rdx, 1
  2872                                  .L_lambda_simple_env_loop_00b6:	; ext_env[i + 1] <-- env[i]
  2873 000020B7 4883FE00                	cmp rsi, 0
  2874 000020BB 7410                    	je .L_lambda_simple_env_end_00b6
  2875 000020BD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2876 000020C1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2877 000020C5 48FFC6                  	inc rsi
  2878 000020C8 48FFC2                  	inc rdx
  2879 000020CB EBEA                    	jmp .L_lambda_simple_env_loop_00b6
  2880                                  .L_lambda_simple_env_end_00b6:
  2881 000020CD 5B                      	pop rbx
  2882 000020CE BE00000000              	mov rsi, 0
  2883                                  .L_lambda_simple_params_loop_00b6:	; copy params
  2884 000020D3 4883FE00                	cmp rsi, 0
  2885 000020D7 740E                    	je .L_lambda_simple_params_end_00b6
  2886 000020D9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2887 000020DE 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2888 000020E2 48FFC6                  	inc rsi
  2889 000020E5 EBEC                    	jmp .L_lambda_simple_params_loop_00b6
  2890                                  .L_lambda_simple_params_end_00b6:
  2891 000020E7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2892 000020EA 4889C3                  	mov rbx, rax
  2893 000020ED 58                      	pop rax
  2894 000020EE C60005                  	mov byte [rax], T_closure
  2895 000020F1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2896 000020F5 48C74009[02210000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b6
  2897 000020FD E982000000              	jmp .L_lambda_simple_end_00b6
  2898                                  .L_lambda_simple_code_00b6:	; lambda-simple body
  2899 00002102 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2900 00002108 740B                    	je .L_lambda_simple_arity_check_ok_00b6
  2901 0000210A FF742410                	push qword [rsp + 8 * 2]
  2902 0000210E 6A01                    	push 1
  2903 00002110 E981D80000              	jmp L_error_incorrect_arity_simple
  2904                                  .L_lambda_simple_arity_check_ok_00b6:
  2905 00002115 C8000000                	enter 0, 0
  2906 00002119 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2907 0000211D 50                      	push rax
  2908 0000211E 6A01                    	push 1
  2909 00002120 488B0425[C8010000]      	mov rax, qword [free_var_57]
  2910                                  	assert_closure(rax)
    42 00002128 803805              <1>  cmp byte [%1], %2
    43 0000212B 0F85A0F00000        <1>  jne L_error_incorrect_type
  2911 00002131 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2912 00002134 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2913 00002137 50                      	push rax
  2914 00002138 6A01                    	push 1
  2915 0000213A 488B0425[D8010000]      	mov rax, qword [free_var_59]
  2916                                  	assert_closure(rax)
    42 00002142 803805              <1>  cmp byte [%1], %2
    43 00002145 0F8586F00000        <1>  jne L_error_incorrect_type
  2917 0000214B FF7001                  	push SOB_CLOSURE_ENV(rax)
  2918 0000214E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  2919 00002151 FF7500                  	push qword [rbp] ; same the old rbp
  2920 00002154 BA04000000              	mov rdx, 1 + 3
  2921 00002159 488B4D00                	mov rcx, [rbp]
  2922 0000215D 4889EF                  	mov rdi, rbp
  2923                                  .L_tc_recycle_frame_loop_00d0:
  2924 00002160 4883FA00                	cmp rdx, 0
  2925 00002164 7413                    	je .L_tc_recycle_frame_done_00d0
  2926 00002166 4883E908                	sub rcx, 8
  2927 0000216A 4883EF08                	sub rdi, 8
  2928 0000216E 488B37                  	mov rsi, [rdi]
  2929 00002171 488931                  	mov qword [rcx], rsi
  2930 00002174 48FFCA                  	dec rdx
  2931 00002177 EBE7                    	jmp .L_tc_recycle_frame_loop_00d0
  2932                                  .L_tc_recycle_frame_done_00d0:
  2933 00002179 5D                      	pop rbp ; restore the old rbp
  2934 0000217A 4889CC                  	mov rsp, rcx
  2935 0000217D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  2936 00002180 C9                      	leave
  2937 00002181 C21800                  	ret 8 * (2 + 1)
  2938                                  .L_lambda_simple_end_00b6:	; new closure is in rax
  2939 00002184 48890425[88020000]      	mov qword [free_var_81], rax
  2940 0000218C 48B8-                   	mov rax, sob_void
  2940 0000218E [0000000000000000] 
  2941                                  
  2942 00002196 4889C7                  	mov rdi, rax
  2943 00002199 E850D80000              	call print_sexpr_if_not_void
  2944                                  
  2945 0000219E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  2946 000021A3 E835D80000              	call malloc
  2947 000021A8 50                      	push rax
  2948 000021A9 BF00000000              	mov rdi, 8 * 0	; new rib
  2949 000021AE E82AD80000              	call malloc
  2950 000021B3 50                      	push rax
  2951 000021B4 BF08000000              	mov rdi, 8 * 1	; extended env
  2952 000021B9 E81FD80000              	call malloc
  2953 000021BE 488B7D10                	mov rdi, ENV
  2954 000021C2 BE00000000              	mov rsi, 0
  2955 000021C7 BA01000000              	mov rdx, 1
  2956                                  .L_lambda_simple_env_loop_00b7:	; ext_env[i + 1] <-- env[i]
  2957 000021CC 4883FE00                	cmp rsi, 0
  2958 000021D0 7410                    	je .L_lambda_simple_env_end_00b7
  2959 000021D2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  2960 000021D6 48890CD0                	mov qword [rax + 8 * rdx], rcx
  2961 000021DA 48FFC6                  	inc rsi
  2962 000021DD 48FFC2                  	inc rdx
  2963 000021E0 EBEA                    	jmp .L_lambda_simple_env_loop_00b7
  2964                                  .L_lambda_simple_env_end_00b7:
  2965 000021E2 5B                      	pop rbx
  2966 000021E3 BE00000000              	mov rsi, 0
  2967                                  .L_lambda_simple_params_loop_00b7:	; copy params
  2968 000021E8 4883FE00                	cmp rsi, 0
  2969 000021EC 740E                    	je .L_lambda_simple_params_end_00b7
  2970 000021EE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  2971 000021F3 488914F3                	mov qword [rbx + 8 * rsi], rdx
  2972 000021F7 48FFC6                  	inc rsi
  2973 000021FA EBEC                    	jmp .L_lambda_simple_params_loop_00b7
  2974                                  .L_lambda_simple_params_end_00b7:
  2975 000021FC 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  2976 000021FF 4889C3                  	mov rbx, rax
  2977 00002202 58                      	pop rax
  2978 00002203 C60005                  	mov byte [rax], T_closure
  2979 00002206 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  2980 0000220A 48C74009[17220000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b7
  2981 00002212 E982000000              	jmp .L_lambda_simple_end_00b7
  2982                                  .L_lambda_simple_code_00b7:	; lambda-simple body
  2983 00002217 48837C241001            	cmp qword [rsp + 8 * 2], 1
  2984 0000221D 740B                    	je .L_lambda_simple_arity_check_ok_00b7
  2985 0000221F FF742410                	push qword [rsp + 8 * 2]
  2986 00002223 6A01                    	push 1
  2987 00002225 E96CD70000              	jmp L_error_incorrect_arity_simple
  2988                                  .L_lambda_simple_arity_check_ok_00b7:
  2989 0000222A C8000000                	enter 0, 0
  2990 0000222E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  2991 00002232 50                      	push rax
  2992 00002233 6A01                    	push 1
  2993 00002235 488B0425[D0010000]      	mov rax, qword [free_var_58]
  2994                                  	assert_closure(rax)
    42 0000223D 803805              <1>  cmp byte [%1], %2
    43 00002240 0F858BEF0000        <1>  jne L_error_incorrect_type
  2995 00002246 FF7001                  	push SOB_CLOSURE_ENV(rax)
  2996 00002249 FF5009                  	call SOB_CLOSURE_CODE(rax)
  2997 0000224C 50                      	push rax
  2998 0000224D 6A01                    	push 1
  2999 0000224F 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3000                                  	assert_closure(rax)
    42 00002257 803805              <1>  cmp byte [%1], %2
    43 0000225A 0F8571EF0000        <1>  jne L_error_incorrect_type
  3001 00002260 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3002 00002263 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3003 00002266 FF7500                  	push qword [rbp] ; same the old rbp
  3004 00002269 BA04000000              	mov rdx, 1 + 3
  3005 0000226E 488B4D00                	mov rcx, [rbp]
  3006 00002272 4889EF                  	mov rdi, rbp
  3007                                  .L_tc_recycle_frame_loop_00d1:
  3008 00002275 4883FA00                	cmp rdx, 0
  3009 00002279 7413                    	je .L_tc_recycle_frame_done_00d1
  3010 0000227B 4883E908                	sub rcx, 8
  3011 0000227F 4883EF08                	sub rdi, 8
  3012 00002283 488B37                  	mov rsi, [rdi]
  3013 00002286 488931                  	mov qword [rcx], rsi
  3014 00002289 48FFCA                  	dec rdx
  3015 0000228C EBE7                    	jmp .L_tc_recycle_frame_loop_00d1
  3016                                  .L_tc_recycle_frame_done_00d1:
  3017 0000228E 5D                      	pop rbp ; restore the old rbp
  3018 0000228F 4889CC                  	mov rsp, rcx
  3019 00002292 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3020 00002295 C9                      	leave
  3021 00002296 C21800                  	ret 8 * (2 + 1)
  3022                                  .L_lambda_simple_end_00b7:	; new closure is in rax
  3023 00002299 48890425[90020000]      	mov qword [free_var_82], rax
  3024 000022A1 48B8-                   	mov rax, sob_void
  3024 000022A3 [0000000000000000] 
  3025                                  
  3026 000022AB 4889C7                  	mov rdi, rax
  3027 000022AE E83BD70000              	call print_sexpr_if_not_void
  3028                                  
  3029 000022B3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3030 000022B8 E820D70000              	call malloc
  3031 000022BD 50                      	push rax
  3032 000022BE BF00000000              	mov rdi, 8 * 0	; new rib
  3033 000022C3 E815D70000              	call malloc
  3034 000022C8 50                      	push rax
  3035 000022C9 BF08000000              	mov rdi, 8 * 1	; extended env
  3036 000022CE E80AD70000              	call malloc
  3037 000022D3 488B7D10                	mov rdi, ENV
  3038 000022D7 BE00000000              	mov rsi, 0
  3039 000022DC BA01000000              	mov rdx, 1
  3040                                  .L_lambda_simple_env_loop_00b8:	; ext_env[i + 1] <-- env[i]
  3041 000022E1 4883FE00                	cmp rsi, 0
  3042 000022E5 7410                    	je .L_lambda_simple_env_end_00b8
  3043 000022E7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3044 000022EB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3045 000022EF 48FFC6                  	inc rsi
  3046 000022F2 48FFC2                  	inc rdx
  3047 000022F5 EBEA                    	jmp .L_lambda_simple_env_loop_00b8
  3048                                  .L_lambda_simple_env_end_00b8:
  3049 000022F7 5B                      	pop rbx
  3050 000022F8 BE00000000              	mov rsi, 0
  3051                                  .L_lambda_simple_params_loop_00b8:	; copy params
  3052 000022FD 4883FE00                	cmp rsi, 0
  3053 00002301 740E                    	je .L_lambda_simple_params_end_00b8
  3054 00002303 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3055 00002308 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3056 0000230C 48FFC6                  	inc rsi
  3057 0000230F EBEC                    	jmp .L_lambda_simple_params_loop_00b8
  3058                                  .L_lambda_simple_params_end_00b8:
  3059 00002311 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3060 00002314 4889C3                  	mov rbx, rax
  3061 00002317 58                      	pop rax
  3062 00002318 C60005                  	mov byte [rax], T_closure
  3063 0000231B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3064 0000231F 48C74009[2C230000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b8
  3065 00002327 E982000000              	jmp .L_lambda_simple_end_00b8
  3066                                  .L_lambda_simple_code_00b8:	; lambda-simple body
  3067 0000232C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3068 00002332 740B                    	je .L_lambda_simple_arity_check_ok_00b8
  3069 00002334 FF742410                	push qword [rsp + 8 * 2]
  3070 00002338 6A01                    	push 1
  3071 0000233A E957D60000              	jmp L_error_incorrect_arity_simple
  3072                                  .L_lambda_simple_arity_check_ok_00b8:
  3073 0000233F C8000000                	enter 0, 0
  3074 00002343 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3075 00002347 50                      	push rax
  3076 00002348 6A01                    	push 1
  3077 0000234A 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3078                                  	assert_closure(rax)
    42 00002352 803805              <1>  cmp byte [%1], %2
    43 00002355 0F8576EE0000        <1>  jne L_error_incorrect_type
  3079 0000235B FF7001                  	push SOB_CLOSURE_ENV(rax)
  3080 0000235E FF5009                  	call SOB_CLOSURE_CODE(rax)
  3081 00002361 50                      	push rax
  3082 00002362 6A01                    	push 1
  3083 00002364 488B0425[D8010000]      	mov rax, qword [free_var_59]
  3084                                  	assert_closure(rax)
    42 0000236C 803805              <1>  cmp byte [%1], %2
    43 0000236F 0F855CEE0000        <1>  jne L_error_incorrect_type
  3085 00002375 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3086 00002378 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3087 0000237B FF7500                  	push qword [rbp] ; same the old rbp
  3088 0000237E BA04000000              	mov rdx, 1 + 3
  3089 00002383 488B4D00                	mov rcx, [rbp]
  3090 00002387 4889EF                  	mov rdi, rbp
  3091                                  .L_tc_recycle_frame_loop_00d2:
  3092 0000238A 4883FA00                	cmp rdx, 0
  3093 0000238E 7413                    	je .L_tc_recycle_frame_done_00d2
  3094 00002390 4883E908                	sub rcx, 8
  3095 00002394 4883EF08                	sub rdi, 8
  3096 00002398 488B37                  	mov rsi, [rdi]
  3097 0000239B 488931                  	mov qword [rcx], rsi
  3098 0000239E 48FFCA                  	dec rdx
  3099 000023A1 EBE7                    	jmp .L_tc_recycle_frame_loop_00d2
  3100                                  .L_tc_recycle_frame_done_00d2:
  3101 000023A3 5D                      	pop rbp ; restore the old rbp
  3102 000023A4 4889CC                  	mov rsp, rcx
  3103 000023A7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3104 000023AA C9                      	leave
  3105 000023AB C21800                  	ret 8 * (2 + 1)
  3106                                  .L_lambda_simple_end_00b8:	; new closure is in rax
  3107 000023AE 48890425[98020000]      	mov qword [free_var_83], rax
  3108 000023B6 48B8-                   	mov rax, sob_void
  3108 000023B8 [0000000000000000] 
  3109                                  
  3110 000023C0 4889C7                  	mov rdi, rax
  3111 000023C3 E826D60000              	call print_sexpr_if_not_void
  3112                                  
  3113 000023C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3114 000023CD E80BD60000              	call malloc
  3115 000023D2 50                      	push rax
  3116 000023D3 BF00000000              	mov rdi, 8 * 0	; new rib
  3117 000023D8 E800D60000              	call malloc
  3118 000023DD 50                      	push rax
  3119 000023DE BF08000000              	mov rdi, 8 * 1	; extended env
  3120 000023E3 E8F5D50000              	call malloc
  3121 000023E8 488B7D10                	mov rdi, ENV
  3122 000023EC BE00000000              	mov rsi, 0
  3123 000023F1 BA01000000              	mov rdx, 1
  3124                                  .L_lambda_simple_env_loop_00b9:	; ext_env[i + 1] <-- env[i]
  3125 000023F6 4883FE00                	cmp rsi, 0
  3126 000023FA 7410                    	je .L_lambda_simple_env_end_00b9
  3127 000023FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3128 00002400 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3129 00002404 48FFC6                  	inc rsi
  3130 00002407 48FFC2                  	inc rdx
  3131 0000240A EBEA                    	jmp .L_lambda_simple_env_loop_00b9
  3132                                  .L_lambda_simple_env_end_00b9:
  3133 0000240C 5B                      	pop rbx
  3134 0000240D BE00000000              	mov rsi, 0
  3135                                  .L_lambda_simple_params_loop_00b9:	; copy params
  3136 00002412 4883FE00                	cmp rsi, 0
  3137 00002416 740E                    	je .L_lambda_simple_params_end_00b9
  3138 00002418 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3139 0000241D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3140 00002421 48FFC6                  	inc rsi
  3141 00002424 EBEC                    	jmp .L_lambda_simple_params_loop_00b9
  3142                                  .L_lambda_simple_params_end_00b9:
  3143 00002426 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3144 00002429 4889C3                  	mov rbx, rax
  3145 0000242C 58                      	pop rax
  3146 0000242D C60005                  	mov byte [rax], T_closure
  3147 00002430 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3148 00002434 48C74009[41240000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00b9
  3149 0000243C E9DE000000              	jmp .L_lambda_simple_end_00b9
  3150                                  .L_lambda_simple_code_00b9:	; lambda-simple body
  3151 00002441 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3152 00002447 740B                    	je .L_lambda_simple_arity_check_ok_00b9
  3153 00002449 FF742410                	push qword [rsp + 8 * 2]
  3154 0000244D 6A01                    	push 1
  3155 0000244F E942D50000              	jmp L_error_incorrect_arity_simple
  3156                                  .L_lambda_simple_arity_check_ok_00b9:
  3157 00002454 C8000000                	enter 0, 0
  3158 00002458 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3159 0000245C 50                      	push rax
  3160 0000245D 6A01                    	push 1
  3161 0000245F 488B0425[00000000]      	mov rax, qword [free_var_0]
  3162                                  	assert_closure(rax)
    42 00002467 803805              <1>  cmp byte [%1], %2
    43 0000246A 0F8561ED0000        <1>  jne L_error_incorrect_type
  3163 00002470 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3164 00002473 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3165 00002476 483D[02000000]          	cmp rax, sob_boolean_false
  3166 0000247C 0F8599000000            	jne .L_or_end_000d
  3167 00002482 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3168 00002486 50                      	push rax
  3169 00002487 6A01                    	push 1
  3170 00002489 488B0425[08000000]      	mov rax, qword [free_var_1]
  3171                                  	assert_closure(rax)
    42 00002491 803805              <1>  cmp byte [%1], %2
    43 00002494 0F8537ED0000        <1>  jne L_error_incorrect_type
  3172 0000249A FF7001                  	push SOB_CLOSURE_ENV(rax)
  3173 0000249D FF5009                  	call SOB_CLOSURE_CODE(rax)
  3174 000024A0 483D[02000000]          	cmp rax, sob_boolean_false
  3175 000024A6 7469                              	je .L_if_else_005f
  3176 000024A8 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3177 000024AC 50                      	push rax
  3178 000024AD 6A01                    	push 1
  3179 000024AF 488B0425[88000000]      	mov rax, qword [free_var_17]
  3180                                  	assert_closure(rax)
    42 000024B7 803805              <1>  cmp byte [%1], %2
    43 000024BA 0F8511ED0000        <1>  jne L_error_incorrect_type
  3181 000024C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3182 000024C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3183 000024C6 50                      	push rax
  3184 000024C7 6A01                    	push 1
  3185 000024C9 488B0425[A0020000]      	mov rax, qword [free_var_84]
  3186                                  	assert_closure(rax)
    42 000024D1 803805              <1>  cmp byte [%1], %2
    43 000024D4 0F85F7EC0000        <1>  jne L_error_incorrect_type
  3187 000024DA FF7001                  	push SOB_CLOSURE_ENV(rax)
  3188 000024DD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3189 000024E0 FF7500                  	push qword [rbp] ; same the old rbp
  3190 000024E3 BA04000000              	mov rdx, 1 + 3
  3191 000024E8 488B4D00                	mov rcx, [rbp]
  3192 000024EC 4889EF                  	mov rdi, rbp
  3193                                  .L_tc_recycle_frame_loop_00d3:
  3194 000024EF 4883FA00                	cmp rdx, 0
  3195 000024F3 7413                    	je .L_tc_recycle_frame_done_00d3
  3196 000024F5 4883E908                	sub rcx, 8
  3197 000024F9 4883EF08                	sub rdi, 8
  3198 000024FD 488B37                  	mov rsi, [rdi]
  3199 00002500 488931                  	mov qword [rcx], rsi
  3200 00002503 48FFCA                  	dec rdx
  3201 00002506 EBE7                    	jmp .L_tc_recycle_frame_loop_00d3
  3202                                  .L_tc_recycle_frame_done_00d3:
  3203 00002508 5D                      	pop rbp ; restore the old rbp
  3204 00002509 4889CC                  	mov rsp, rcx
  3205 0000250C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3206 0000250F EB0A                    	jmp .L_if_end_005f
  3207                                            .L_if_else_005f:
  3208 00002511 48B8-                             	mov rax, L_constants + 2
  3208 00002513 [0200000000000000] 
  3209                                  .L_if_end_005f:
  3210                                  .L_or_end_000d:
  3211 0000251B C9                      	leave
  3212 0000251C C21800                  	ret 8 * (2 + 1)
  3213                                  .L_lambda_simple_end_00b9:	; new closure is in rax
  3214 0000251F 48890425[A0020000]      	mov qword [free_var_84], rax
  3215 00002527 48B8-                   	mov rax, sob_void
  3215 00002529 [0000000000000000] 
  3216                                  
  3217 00002531 4889C7                  	mov rdi, rax
  3218 00002534 E8B5D40000              	call print_sexpr_if_not_void
  3219                                  
  3220 00002539 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3221 0000253E E89AD40000              	call malloc
  3222 00002543 50                      	push rax
  3223 00002544 BF00000000              	mov rdi, 8 * 0	; new rib
  3224 00002549 E88FD40000              	call malloc
  3225 0000254E 50                      	push rax
  3226 0000254F BF08000000              	mov rdi, 8 * 1	; extended env
  3227 00002554 E884D40000              	call malloc
  3228 00002559 488B7D10                	mov rdi, ENV
  3229 0000255D BE00000000              	mov rsi, 0
  3230 00002562 BA01000000              	mov rdx, 1
  3231                                  .L_lambda_opt_env_loop_0018:	; ext_env[i + 1] <-- env[i]
  3232 00002567 4883FE00                	cmp rsi, 0
  3233 0000256B 7410                    	je .L_lambda_opt_env_end_0018
  3234 0000256D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3235 00002571 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3236 00002575 48FFC6                  	inc rsi
  3237 00002578 48FFC2                  	inc rdx
  3238 0000257B EBEA                    	jmp .L_lambda_opt_env_loop_0018
  3239                                  .L_lambda_opt_env_end_0018:
  3240 0000257D 5B                      	pop rbx
  3241 0000257E BE00000000              	mov rsi, 0
  3242                                  .L_lambda_opt_params_loop_0018:	; copy params
  3243 00002583 4883FE00                	cmp rsi, 0
  3244 00002587 740E                    	je .L_lambda_opt_params_end_0018
  3245 00002589 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3246 0000258E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3247 00002592 48FFC6                  	inc rsi
  3248 00002595 EBEC                    	jmp .L_lambda_opt_params_loop_0018
  3249                                  .L_lambda_opt_params_end_0018:
  3250 00002597 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3251 0000259A 4889C3                  	mov rbx, rax
  3252 0000259D 58                      	pop rax
  3253 0000259E C60005                  	mov byte [rax], T_closure
  3254 000025A1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3255 000025A5 48C74009[B2250000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0018
  3256 000025AD E9DE000000              	jmp .L_lambda_opt_end_0018
  3257                                  .L_lambda_opt_code_0018:	; lambda-opt body
  3258 000025B2 48837C241000            	cmp qword [rsp + 8 * 2], 0
  3259 000025B8 740D                    	je .L_lambda_opt_arity_check_exact_0018
  3260 000025BA 7F43                    	jg .L_lambda_opt_arity_check_more_0018
  3261 000025BC FF742410                	push qword [rsp + 8 * 2]
  3262 000025C0 6A00                    	push 0
  3263 000025C2 E9E3D30000              	jmp L_error_incorrect_arity_opt
  3264                                  .L_lambda_opt_arity_check_exact_0018:
  3265 000025C7 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3266 000025D0 BA03000000              	mov rdx, 3
  3267 000025D5 FF3424                  	push qword [rsp]
  3268 000025D8 BE01000000              	mov rsi, 1
  3269                                  .L_lambda_opt_stack_shrink_loop_0046:
  3270 000025DD 4839D6                  	cmp rsi, rdx
  3271 000025E0 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0046
  3272 000025E2 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  3273 000025E7 488B0B                  	mov rcx, [rbx]
  3274 000025EA 48894BF8                	mov qword [rbx - 8], rcx
  3275 000025EE 48FFC6                  	inc rsi
  3276 000025F1 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0046
  3277                                  .L_lambda_opt_stack_shrink_loop_exit_0046:
  3278 000025F3 48C703[01000000]        	mov qword [rbx], sob_nil
  3279 000025FA E985000000              	jmp .L_lambda_opt_stack_adjusted_0018
  3280                                  .L_lambda_opt_arity_check_more_0018:
  3281 000025FF 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3282 00002604 4883EA00                	sub rdx, 0
  3283 00002608 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  3284 00002611 BE00000000              	mov rsi, 0
  3285 00002616 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  3286 0000261B 48B9-                   	mov rcx, sob_nil
  3286 0000261D [0100000000000000] 
  3287                                  .L_lambda_opt_stack_shrink_loop_0047:
  3288 00002625 4839D6                  	cmp rsi, rdx
  3289 00002628 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0047
  3290 0000262A BF11000000              	mov rdi, 17 ; 1+8+8
  3291 0000262F E8A9D30000              	call malloc
  3292 00002634 48894809                	mov SOB_PAIR_CDR(rax), rcx
  3293 00002638 48F7DE                  	neg rsi
  3294 0000263B 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  3295 0000263F 48F7DE                  	neg rsi
  3296 00002642 48894801                	mov SOB_PAIR_CAR(rax), rcx
  3297 00002646 C60021                  	mov byte [rax], T_pair
  3298 00002649 4889C1                  	mov rcx, rax
  3299 0000264C 48FFC6                  	inc rsi
  3300 0000264F EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0047
  3301                                  .L_lambda_opt_stack_shrink_loop_exit_0047:
  3302 00002651 48890B                  	mov qword [rbx], rcx
  3303 00002654 4883EB08                	sub rbx, 8
  3304 00002658 4889E7                  	mov rdi, rsp
  3305 0000265B 4883C710                	add rdi, 16
  3306 0000265F BE03000000              	mov rsi, 3
  3307                                  .L_lambda_opt_stack_shrink_loop_0048:
  3308 00002664 4883FE00                	cmp rsi,0
  3309 00002668 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0048
  3310 0000266A 488B0F                  	mov rcx, qword [rdi]
  3311 0000266D 48890B                  	mov [rbx], rcx
  3312 00002670 48FFCE                  	dec rsi
  3313 00002673 4883EB08                	sub rbx, 8
  3314 00002677 4883EF08                	sub rdi, 8
  3315 0000267B EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0048
  3316                                  .L_lambda_opt_stack_shrink_loop_exit_0048:
  3317 0000267D 4883C308                	add rbx, 8
  3318 00002681 4889DC                  	mov rsp, rbx
  3319                                  .L_lambda_opt_stack_adjusted_0018:
  3320 00002684 C8000000                	enter 0, 0
  3321 00002688 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3322 0000268C C9                      	leave
  3323 0000268D C21800                  	ret 8 * (2 + 1)
  3324                                  .L_lambda_opt_end_0018:	; new closure is in rax
  3325 00002690 48890425[A8020000]      	mov qword [free_var_85], rax
  3326 00002698 48B8-                   	mov rax, sob_void
  3326 0000269A [0000000000000000] 
  3327                                  
  3328 000026A2 4889C7                  	mov rdi, rax
  3329 000026A5 E844D30000              	call print_sexpr_if_not_void
  3330                                  
  3331 000026AA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3332 000026AF E829D30000              	call malloc
  3333 000026B4 50                      	push rax
  3334 000026B5 BF00000000              	mov rdi, 8 * 0	; new rib
  3335 000026BA E81ED30000              	call malloc
  3336 000026BF 50                      	push rax
  3337 000026C0 BF08000000              	mov rdi, 8 * 1	; extended env
  3338 000026C5 E813D30000              	call malloc
  3339 000026CA 488B7D10                	mov rdi, ENV
  3340 000026CE BE00000000              	mov rsi, 0
  3341 000026D3 BA01000000              	mov rdx, 1
  3342                                  .L_lambda_simple_env_loop_00ba:	; ext_env[i + 1] <-- env[i]
  3343 000026D8 4883FE00                	cmp rsi, 0
  3344 000026DC 7410                    	je .L_lambda_simple_env_end_00ba
  3345 000026DE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3346 000026E2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3347 000026E6 48FFC6                  	inc rsi
  3348 000026E9 48FFC2                  	inc rdx
  3349 000026EC EBEA                    	jmp .L_lambda_simple_env_loop_00ba
  3350                                  .L_lambda_simple_env_end_00ba:
  3351 000026EE 5B                      	pop rbx
  3352 000026EF BE00000000              	mov rsi, 0
  3353                                  .L_lambda_simple_params_loop_00ba:	; copy params
  3354 000026F4 4883FE00                	cmp rsi, 0
  3355 000026F8 740E                    	je .L_lambda_simple_params_end_00ba
  3356 000026FA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3357 000026FF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3358 00002703 48FFC6                  	inc rsi
  3359 00002706 EBEC                    	jmp .L_lambda_simple_params_loop_00ba
  3360                                  .L_lambda_simple_params_end_00ba:
  3361 00002708 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3362 0000270B 4889C3                  	mov rbx, rax
  3363 0000270E 58                      	pop rax
  3364 0000270F C60005                  	mov byte [rax], T_closure
  3365 00002712 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3366 00002716 48C74009[20270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ba
  3367 0000271E EB3D                    	jmp .L_lambda_simple_end_00ba
  3368                                  .L_lambda_simple_code_00ba:	; lambda-simple body
  3369 00002720 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3370 00002726 740B                    	je .L_lambda_simple_arity_check_ok_00ba
  3371 00002728 FF742410                	push qword [rsp + 8 * 2]
  3372 0000272C 6A01                    	push 1
  3373 0000272E E963D20000              	jmp L_error_incorrect_arity_simple
  3374                                  .L_lambda_simple_arity_check_ok_00ba:
  3375 00002733 C8000000                	enter 0, 0
  3376 00002737 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3377 0000273B 483D[02000000]          	cmp rax, sob_boolean_false
  3378 00002741 740C                              	je .L_if_else_0060
  3379 00002743 48B8-                             	mov rax, L_constants + 2
  3379 00002745 [0200000000000000] 
  3380 0000274D EB0A                    	jmp .L_if_end_0060
  3381                                            .L_if_else_0060:
  3382 0000274F 48B8-                             	mov rax, L_constants + 3
  3382 00002751 [0300000000000000] 
  3383                                  .L_if_end_0060:
  3384 00002759 C9                      	leave
  3385 0000275A C21800                  	ret 8 * (2 + 1)
  3386                                  .L_lambda_simple_end_00ba:	; new closure is in rax
  3387 0000275D 48890425[B0020000]      	mov qword [free_var_86], rax
  3388 00002765 48B8-                   	mov rax, sob_void
  3388 00002767 [0000000000000000] 
  3389                                  
  3390 0000276F 4889C7                  	mov rdi, rax
  3391 00002772 E877D20000              	call print_sexpr_if_not_void
  3392                                  
  3393 00002777 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3394 0000277C E85CD20000              	call malloc
  3395 00002781 50                      	push rax
  3396 00002782 BF00000000              	mov rdi, 8 * 0	; new rib
  3397 00002787 E851D20000              	call malloc
  3398 0000278C 50                      	push rax
  3399 0000278D BF08000000              	mov rdi, 8 * 1	; extended env
  3400 00002792 E846D20000              	call malloc
  3401 00002797 488B7D10                	mov rdi, ENV
  3402 0000279B BE00000000              	mov rsi, 0
  3403 000027A0 BA01000000              	mov rdx, 1
  3404                                  .L_lambda_simple_env_loop_00bb:	; ext_env[i + 1] <-- env[i]
  3405 000027A5 4883FE00                	cmp rsi, 0
  3406 000027A9 7410                    	je .L_lambda_simple_env_end_00bb
  3407 000027AB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3408 000027AF 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3409 000027B3 48FFC6                  	inc rsi
  3410 000027B6 48FFC2                  	inc rdx
  3411 000027B9 EBEA                    	jmp .L_lambda_simple_env_loop_00bb
  3412                                  .L_lambda_simple_env_end_00bb:
  3413 000027BB 5B                      	pop rbx
  3414 000027BC BE00000000              	mov rsi, 0
  3415                                  .L_lambda_simple_params_loop_00bb:	; copy params
  3416 000027C1 4883FE00                	cmp rsi, 0
  3417 000027C5 740E                    	je .L_lambda_simple_params_end_00bb
  3418 000027C7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3419 000027CC 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3420 000027D0 48FFC6                  	inc rsi
  3421 000027D3 EBEC                    	jmp .L_lambda_simple_params_loop_00bb
  3422                                  .L_lambda_simple_params_end_00bb:
  3423 000027D5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3424 000027D8 4889C3                  	mov rbx, rax
  3425 000027DB 58                      	pop rax
  3426 000027DC C60005                  	mov byte [rax], T_closure
  3427 000027DF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3428 000027E3 48C74009[F0270000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bb
  3429 000027EB E9B4000000              	jmp .L_lambda_simple_end_00bb
  3430                                  .L_lambda_simple_code_00bb:	; lambda-simple body
  3431 000027F0 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3432 000027F6 740B                    	je .L_lambda_simple_arity_check_ok_00bb
  3433 000027F8 FF742410                	push qword [rsp + 8 * 2]
  3434 000027FC 6A01                    	push 1
  3435 000027FE E993D10000              	jmp L_error_incorrect_arity_simple
  3436                                  .L_lambda_simple_arity_check_ok_00bb:
  3437 00002803 C8000000                	enter 0, 0
  3438 00002807 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3439 0000280B 50                      	push rax
  3440 0000280C 6A01                    	push 1
  3441 0000280E 488B0425[48000000]      	mov rax, qword [free_var_9]
  3442                                  	assert_closure(rax)
    42 00002816 803805              <1>  cmp byte [%1], %2
    43 00002819 0F85B2E90000        <1>  jne L_error_incorrect_type
  3443 0000281F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3444 00002822 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3445 00002825 483D[02000000]          	cmp rax, sob_boolean_false
  3446 0000282B 7469                              	je .L_if_else_0061
  3447 0000282D 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3448 00002831 50                      	push rax
  3449 00002832 6A01                    	push 1
  3450 00002834 488B0425[E0000000]      	mov rax, qword [free_var_28]
  3451                                  	assert_closure(rax)
    42 0000283C 803805              <1>  cmp byte [%1], %2
    43 0000283F 0F858CE90000        <1>  jne L_error_incorrect_type
  3452 00002845 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3453 00002848 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3454 0000284B 50                      	push rax
  3455 0000284C 6A01                    	push 1
  3456 0000284E 488B0425[B0020000]      	mov rax, qword [free_var_86]
  3457                                  	assert_closure(rax)
    42 00002856 803805              <1>  cmp byte [%1], %2
    43 00002859 0F8572E90000        <1>  jne L_error_incorrect_type
  3458 0000285F FF7001                  	push SOB_CLOSURE_ENV(rax)
  3459 00002862 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3460 00002865 FF7500                  	push qword [rbp] ; same the old rbp
  3461 00002868 BA04000000              	mov rdx, 1 + 3
  3462 0000286D 488B4D00                	mov rcx, [rbp]
  3463 00002871 4889EF                  	mov rdi, rbp
  3464                                  .L_tc_recycle_frame_loop_00d4:
  3465 00002874 4883FA00                	cmp rdx, 0
  3466 00002878 7413                    	je .L_tc_recycle_frame_done_00d4
  3467 0000287A 4883E908                	sub rcx, 8
  3468 0000287E 4883EF08                	sub rdi, 8
  3469 00002882 488B37                  	mov rsi, [rdi]
  3470 00002885 488931                  	mov qword [rcx], rsi
  3471 00002888 48FFCA                  	dec rdx
  3472 0000288B EBE7                    	jmp .L_tc_recycle_frame_loop_00d4
  3473                                  .L_tc_recycle_frame_done_00d4:
  3474 0000288D 5D                      	pop rbp ; restore the old rbp
  3475 0000288E 4889CC                  	mov rsp, rcx
  3476 00002891 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3477 00002894 EB0A                    	jmp .L_if_end_0061
  3478                                            .L_if_else_0061:
  3479 00002896 48B8-                             	mov rax, L_constants + 2
  3479 00002898 [0200000000000000] 
  3480                                  .L_if_end_0061:
  3481 000028A0 C9                      	leave
  3482 000028A1 C21800                  	ret 8 * (2 + 1)
  3483                                  .L_lambda_simple_end_00bb:	; new closure is in rax
  3484 000028A4 48890425[B8020000]      	mov qword [free_var_87], rax
  3485 000028AC 48B8-                   	mov rax, sob_void
  3485 000028AE [0000000000000000] 
  3486                                  
  3487 000028B6 4889C7                  	mov rdi, rax
  3488 000028B9 E830D10000              	call print_sexpr_if_not_void
  3489                                  
  3490 000028BE 48B8-                   	mov rax, L_constants + 23
  3490 000028C0 [1700000000000000] 
  3491 000028C8 50                      	push rax
  3492 000028C9 6A01                    	push 1
  3493 000028CB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3494 000028D0 E808D10000              	call malloc
  3495 000028D5 50                      	push rax
  3496 000028D6 BF00000000              	mov rdi, 8 * 0	; new rib
  3497 000028DB E8FDD00000              	call malloc
  3498 000028E0 50                      	push rax
  3499 000028E1 BF08000000              	mov rdi, 8 * 1	; extended env
  3500 000028E6 E8F2D00000              	call malloc
  3501 000028EB 488B7D10                	mov rdi, ENV
  3502 000028EF BE00000000              	mov rsi, 0
  3503 000028F4 BA01000000              	mov rdx, 1
  3504                                  .L_lambda_simple_env_loop_00bc:	; ext_env[i + 1] <-- env[i]
  3505 000028F9 4883FE00                	cmp rsi, 0
  3506 000028FD 7410                    	je .L_lambda_simple_env_end_00bc
  3507 000028FF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3508 00002903 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3509 00002907 48FFC6                  	inc rsi
  3510 0000290A 48FFC2                  	inc rdx
  3511 0000290D EBEA                    	jmp .L_lambda_simple_env_loop_00bc
  3512                                  .L_lambda_simple_env_end_00bc:
  3513 0000290F 5B                      	pop rbx
  3514 00002910 BE00000000              	mov rsi, 0
  3515                                  .L_lambda_simple_params_loop_00bc:	; copy params
  3516 00002915 4883FE00                	cmp rsi, 0
  3517 00002919 740E                    	je .L_lambda_simple_params_end_00bc
  3518 0000291B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3519 00002920 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3520 00002924 48FFC6                  	inc rsi
  3521 00002927 EBEC                    	jmp .L_lambda_simple_params_loop_00bc
  3522                                  .L_lambda_simple_params_end_00bc:
  3523 00002929 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3524 0000292C 4889C3                  	mov rbx, rax
  3525 0000292F 58                      	pop rax
  3526 00002930 C60005                  	mov byte [rax], T_closure
  3527 00002933 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3528 00002937 48C74009[44290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bc
  3529 0000293F E965030000              	jmp .L_lambda_simple_end_00bc
  3530                                  .L_lambda_simple_code_00bc:	; lambda-simple body
  3531 00002944 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3532 0000294A 740B                    	je .L_lambda_simple_arity_check_ok_00bc
  3533 0000294C FF742410                	push qword [rsp + 8 * 2]
  3534 00002950 6A01                    	push 1
  3535 00002952 E93FD00000              	jmp L_error_incorrect_arity_simple
  3536                                  .L_lambda_simple_arity_check_ok_00bc:
  3537 00002957 C8000000                	enter 0, 0
  3538 0000295B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3539 0000295F 4889C2                  	mov rdx, rax
  3540 00002962 BF08000000              	mov rdi, 8
  3541 00002967 E871D00000              	call malloc
  3542 0000296C 488910                  	mov qword[rax], rdx
  3543 0000296F 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  3544 00002973 48B8-                   	mov rax, sob_void
  3544 00002975 [0000000000000000] 
  3545                                  
  3546 0000297D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3547 00002982 E856D00000              	call malloc
  3548 00002987 50                      	push rax
  3549 00002988 BF08000000              	mov rdi, 8 * 1	; new rib
  3550 0000298D E84BD00000              	call malloc
  3551 00002992 50                      	push rax
  3552 00002993 BF10000000              	mov rdi, 8 * 2	; extended env
  3553 00002998 E840D00000              	call malloc
  3554 0000299D 488B7D10                	mov rdi, ENV
  3555 000029A1 BE00000000              	mov rsi, 0
  3556 000029A6 BA01000000              	mov rdx, 1
  3557                                  .L_lambda_simple_env_loop_00bd:	; ext_env[i + 1] <-- env[i]
  3558 000029AB 4883FE01                	cmp rsi, 1
  3559 000029AF 7410                    	je .L_lambda_simple_env_end_00bd
  3560 000029B1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3561 000029B5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3562 000029B9 48FFC6                  	inc rsi
  3563 000029BC 48FFC2                  	inc rdx
  3564 000029BF EBEA                    	jmp .L_lambda_simple_env_loop_00bd
  3565                                  .L_lambda_simple_env_end_00bd:
  3566 000029C1 5B                      	pop rbx
  3567 000029C2 BE00000000              	mov rsi, 0
  3568                                  .L_lambda_simple_params_loop_00bd:	; copy params
  3569 000029C7 4883FE01                	cmp rsi, 1
  3570 000029CB 740E                    	je .L_lambda_simple_params_end_00bd
  3571 000029CD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3572 000029D2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3573 000029D6 48FFC6                  	inc rsi
  3574 000029D9 EBEC                    	jmp .L_lambda_simple_params_loop_00bd
  3575                                  .L_lambda_simple_params_end_00bd:
  3576 000029DB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3577 000029DE 4889C3                  	mov rbx, rax
  3578 000029E1 58                      	pop rax
  3579 000029E2 C60005                  	mov byte [rax], T_closure
  3580 000029E5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3581 000029E9 48C74009[F6290000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bd
  3582 000029F1 E9F4000000              	jmp .L_lambda_simple_end_00bd
  3583                                  .L_lambda_simple_code_00bd:	; lambda-simple body
  3584 000029F6 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3585 000029FC 740B                    	je .L_lambda_simple_arity_check_ok_00bd
  3586 000029FE FF742410                	push qword [rsp + 8 * 2]
  3587 00002A02 6A02                    	push 2
  3588 00002A04 E98DCF0000              	jmp L_error_incorrect_arity_simple
  3589                                  .L_lambda_simple_arity_check_ok_00bd:
  3590 00002A09 C8000000                	enter 0, 0
  3591 00002A0D 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3592 00002A11 50                      	push rax
  3593 00002A12 6A01                    	push 1
  3594 00002A14 488B0425[00000000]      	mov rax, qword [free_var_0]
  3595                                  	assert_closure(rax)
    42 00002A1C 803805              <1>  cmp byte [%1], %2
    43 00002A1F 0F85ACE70000        <1>  jne L_error_incorrect_type
  3596 00002A25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3597 00002A28 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3598 00002A2B 483D[02000000]          	cmp rax, sob_boolean_false
  3599 00002A31 7409                              	je .L_if_else_0062
  3600 00002A33 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3601 00002A37 E9AA000000              	jmp .L_if_end_0062
  3602                                            .L_if_else_0062:
  3603 00002A3C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  3604 00002A40 50                      	push rax
  3605 00002A41 6A01                    	push 1
  3606 00002A43 488B0425[88000000]      	mov rax, qword [free_var_17]
  3607                                  	assert_closure(rax)
    42 00002A4B 803805              <1>  cmp byte [%1], %2
    43 00002A4E 0F857DE70000        <1>  jne L_error_incorrect_type
  3608 00002A54 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3609 00002A57 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3610 00002A5A 50                      	push rax
  3611 00002A5B 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3612 00002A5F 50                      	push rax
  3613 00002A60 6A01                    	push 1
  3614 00002A62 488B0425[80000000]      	mov rax, qword [free_var_16]
  3615                                  	assert_closure(rax)
    42 00002A6A 803805              <1>  cmp byte [%1], %2
    43 00002A6D 0F855EE70000        <1>  jne L_error_incorrect_type
  3616 00002A73 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3617 00002A76 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3618 00002A79 50                      	push rax
  3619 00002A7A 6A02                    	push 2
  3620 00002A7C 488B4510                	mov rax, qword [rbp + 8 * 2]
  3621 00002A80 488B00                  	mov rax, qword [rax + 8 * 0]
  3622 00002A83 488B00                  	mov rax, qword [rax + 8 * 0]
  3623 00002A86 488B00                  	mov rax, qword [rax]
  3624                                  	assert_closure(rax)
    42 00002A89 803805              <1>  cmp byte [%1], %2
    43 00002A8C 0F853FE70000        <1>  jne L_error_incorrect_type
  3625 00002A92 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3626 00002A95 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3627 00002A98 50                      	push rax
  3628 00002A99 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3629 00002A9D 50                      	push rax
  3630 00002A9E 6A02                    	push 2
  3631 00002AA0 488B0425[68000000]      	mov rax, qword [free_var_13]
  3632                                  	assert_closure(rax)
    42 00002AA8 803805              <1>  cmp byte [%1], %2
    43 00002AAB 0F8520E70000        <1>  jne L_error_incorrect_type
  3633 00002AB1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3634 00002AB4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3635 00002AB7 FF7500                  	push qword [rbp] ; same the old rbp
  3636 00002ABA BA05000000              	mov rdx, 2 + 3
  3637 00002ABF 488B4D00                	mov rcx, [rbp]
  3638 00002AC3 4889EF                  	mov rdi, rbp
  3639                                  .L_tc_recycle_frame_loop_00d5:
  3640 00002AC6 4883FA00                	cmp rdx, 0
  3641 00002ACA 7413                    	je .L_tc_recycle_frame_done_00d5
  3642 00002ACC 4883E908                	sub rcx, 8
  3643 00002AD0 4883EF08                	sub rdi, 8
  3644 00002AD4 488B37                  	mov rsi, [rdi]
  3645 00002AD7 488931                  	mov qword [rcx], rsi
  3646 00002ADA 48FFCA                  	dec rdx
  3647 00002ADD EBE7                    	jmp .L_tc_recycle_frame_loop_00d5
  3648                                  .L_tc_recycle_frame_done_00d5:
  3649 00002ADF 5D                      	pop rbp ; restore the old rbp
  3650 00002AE0 4889CC                  	mov rsp, rcx
  3651 00002AE3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3652                                  .L_if_end_0062:
  3653 00002AE6 C9                      	leave
  3654 00002AE7 C22000                  	ret 8 * (2 + 2)
  3655                                  .L_lambda_simple_end_00bd:	; new closure is in rax
  3656 00002AEA 50                      	push rax
  3657 00002AEB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3658 00002AEF 8F00                    	pop qword [rax]
  3659 00002AF1 48B8-                   	mov rax, sob_void
  3659 00002AF3 [0000000000000000] 
  3660                                  
  3661 00002AFB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3662 00002B00 E8D8CE0000              	call malloc
  3663 00002B05 50                      	push rax
  3664 00002B06 BF08000000              	mov rdi, 8 * 1	; new rib
  3665 00002B0B E8CDCE0000              	call malloc
  3666 00002B10 50                      	push rax
  3667 00002B11 BF10000000              	mov rdi, 8 * 2	; extended env
  3668 00002B16 E8C2CE0000              	call malloc
  3669 00002B1B 488B7D10                	mov rdi, ENV
  3670 00002B1F BE00000000              	mov rsi, 0
  3671 00002B24 BA01000000              	mov rdx, 1
  3672                                  .L_lambda_opt_env_loop_0019:	; ext_env[i + 1] <-- env[i]
  3673 00002B29 4883FE01                	cmp rsi, 1
  3674 00002B2D 7410                    	je .L_lambda_opt_env_end_0019
  3675 00002B2F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3676 00002B33 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3677 00002B37 48FFC6                  	inc rsi
  3678 00002B3A 48FFC2                  	inc rdx
  3679 00002B3D EBEA                    	jmp .L_lambda_opt_env_loop_0019
  3680                                  .L_lambda_opt_env_end_0019:
  3681 00002B3F 5B                      	pop rbx
  3682 00002B40 BE00000000              	mov rsi, 0
  3683                                  .L_lambda_opt_params_loop_0019:	; copy params
  3684 00002B45 4883FE01                	cmp rsi, 1
  3685 00002B49 740E                    	je .L_lambda_opt_params_end_0019
  3686 00002B4B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3687 00002B50 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3688 00002B54 48FFC6                  	inc rsi
  3689 00002B57 EBEC                    	jmp .L_lambda_opt_params_loop_0019
  3690                                  .L_lambda_opt_params_end_0019:
  3691 00002B59 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3692 00002B5C 4889C3                  	mov rbx, rax
  3693 00002B5F 58                      	pop rax
  3694 00002B60 C60005                  	mov byte [rax], T_closure
  3695 00002B63 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3696 00002B67 48C74009[742B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0019
  3697 00002B6F E931010000              	jmp .L_lambda_opt_end_0019
  3698                                  .L_lambda_opt_code_0019:	; lambda-opt body
  3699 00002B74 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3700 00002B7A 740D                    	je .L_lambda_opt_arity_check_exact_0019
  3701 00002B7C 7F43                    	jg .L_lambda_opt_arity_check_more_0019
  3702 00002B7E FF742410                	push qword [rsp + 8 * 2]
  3703 00002B82 6A01                    	push 1
  3704 00002B84 E921CE0000              	jmp L_error_incorrect_arity_opt
  3705                                  .L_lambda_opt_arity_check_exact_0019:
  3706 00002B89 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  3707 00002B92 BA04000000              	mov rdx, 4
  3708 00002B97 FF3424                  	push qword [rsp]
  3709 00002B9A BE01000000              	mov rsi, 1
  3710                                  .L_lambda_opt_stack_shrink_loop_0049:
  3711 00002B9F 4839D6                  	cmp rsi, rdx
  3712 00002BA2 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0049
  3713 00002BA4 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  3714 00002BA9 488B0B                  	mov rcx, [rbx]
  3715 00002BAC 48894BF8                	mov qword [rbx - 8], rcx
  3716 00002BB0 48FFC6                  	inc rsi
  3717 00002BB3 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0049
  3718                                  .L_lambda_opt_stack_shrink_loop_exit_0049:
  3719 00002BB5 48C703[01000000]        	mov qword [rbx], sob_nil
  3720 00002BBC E985000000              	jmp .L_lambda_opt_stack_adjusted_0019
  3721                                  .L_lambda_opt_arity_check_more_0019:
  3722 00002BC1 488B542410              	mov rdx, qword [rsp + 8 * 2]
  3723 00002BC6 4883EA01                	sub rdx, 1
  3724 00002BCA 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  3725 00002BD3 BE00000000              	mov rsi, 0
  3726 00002BD8 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  3727 00002BDD 48B9-                   	mov rcx, sob_nil
  3727 00002BDF [0100000000000000] 
  3728                                  .L_lambda_opt_stack_shrink_loop_004a:
  3729 00002BE7 4839D6                  	cmp rsi, rdx
  3730 00002BEA 7427                    je .L_lambda_opt_stack_shrink_loop_exit_004a
  3731 00002BEC BF11000000              	mov rdi, 17 ; 1+8+8
  3732 00002BF1 E8E7CD0000              	call malloc
  3733 00002BF6 48894809                	mov SOB_PAIR_CDR(rax), rcx
  3734 00002BFA 48F7DE                  	neg rsi
  3735 00002BFD 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  3736 00002C01 48F7DE                  	neg rsi
  3737 00002C04 48894801                	mov SOB_PAIR_CAR(rax), rcx
  3738 00002C08 C60021                  	mov byte [rax], T_pair
  3739 00002C0B 4889C1                  	mov rcx, rax
  3740 00002C0E 48FFC6                  	inc rsi
  3741 00002C11 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_004a
  3742                                  .L_lambda_opt_stack_shrink_loop_exit_004a:
  3743 00002C13 48890B                  	mov qword [rbx], rcx
  3744 00002C16 4883EB08                	sub rbx, 8
  3745 00002C1A 4889E7                  	mov rdi, rsp
  3746 00002C1D 4883C718                	add rdi, 24
  3747 00002C21 BE04000000              	mov rsi, 4
  3748                                  .L_lambda_opt_stack_shrink_loop_004b:
  3749 00002C26 4883FE00                	cmp rsi,0
  3750 00002C2A 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_004b
  3751 00002C2C 488B0F                  	mov rcx, qword [rdi]
  3752 00002C2F 48890B                  	mov [rbx], rcx
  3753 00002C32 48FFCE                  	dec rsi
  3754 00002C35 4883EB08                	sub rbx, 8
  3755 00002C39 4883EF08                	sub rdi, 8
  3756 00002C3D EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_004b
  3757                                  .L_lambda_opt_stack_shrink_loop_exit_004b:
  3758 00002C3F 4883C308                	add rbx, 8
  3759 00002C43 4889DC                  	mov rsp, rbx
  3760                                  .L_lambda_opt_stack_adjusted_0019:
  3761 00002C46 C8000000                	enter 0, 0
  3762 00002C4A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3763 00002C4E 50                      	push rax
  3764 00002C4F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3765 00002C53 50                      	push rax
  3766 00002C54 6A02                    	push 2
  3767 00002C56 488B4510                	mov rax, qword [rbp + 8 * 2]
  3768 00002C5A 488B00                  	mov rax, qword [rax + 8 * 0]
  3769 00002C5D 488B00                  	mov rax, qword [rax + 8 * 0]
  3770 00002C60 488B00                  	mov rax, qword [rax]
  3771                                  	assert_closure(rax)
    42 00002C63 803805              <1>  cmp byte [%1], %2
    43 00002C66 0F8565E50000        <1>  jne L_error_incorrect_type
  3772 00002C6C FF7001                  	push SOB_CLOSURE_ENV(rax)
  3773 00002C6F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3774 00002C72 FF7500                  	push qword [rbp] ; same the old rbp
  3775 00002C75 BA05000000              	mov rdx, 2 + 3
  3776 00002C7A 488B4D00                	mov rcx, [rbp]
  3777 00002C7E 4889EF                  	mov rdi, rbp
  3778                                  .L_tc_recycle_frame_loop_00d6:
  3779 00002C81 4883FA00                	cmp rdx, 0
  3780 00002C85 7413                    	je .L_tc_recycle_frame_done_00d6
  3781 00002C87 4883E908                	sub rcx, 8
  3782 00002C8B 4883EF08                	sub rdi, 8
  3783 00002C8F 488B37                  	mov rsi, [rdi]
  3784 00002C92 488931                  	mov qword [rcx], rsi
  3785 00002C95 48FFCA                  	dec rdx
  3786 00002C98 EBE7                    	jmp .L_tc_recycle_frame_loop_00d6
  3787                                  .L_tc_recycle_frame_done_00d6:
  3788 00002C9A 5D                      	pop rbp ; restore the old rbp
  3789 00002C9B 4889CC                  	mov rsp, rcx
  3790 00002C9E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3791 00002CA1 C9                      	leave
  3792 00002CA2 C22000                  	ret 8 * (2 + 2)
  3793                                  .L_lambda_opt_end_0019:	; new closure is in rax
  3794 00002CA5 C9                      	leave
  3795 00002CA6 C21800                  	ret 8 * (2 + 1)
  3796                                  .L_lambda_simple_end_00bc:	; new closure is in rax
  3797                                  	assert_closure(rax)
    42 00002CA9 803805              <1>  cmp byte [%1], %2
    43 00002CAC 0F851FE50000        <1>  jne L_error_incorrect_type
  3798 00002CB2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3799 00002CB5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3800 00002CB8 48890425[C0020000]      	mov qword [free_var_88], rax
  3801 00002CC0 48B8-                   	mov rax, sob_void
  3801 00002CC2 [0000000000000000] 
  3802                                  
  3803 00002CCA 4889C7                  	mov rdi, rax
  3804 00002CCD E81CCD0000              	call print_sexpr_if_not_void
  3805                                  
  3806 00002CD2 48B8-                   	mov rax, L_constants + 23
  3806 00002CD4 [1700000000000000] 
  3807 00002CDC 50                      	push rax
  3808 00002CDD 6A01                    	push 1
  3809 00002CDF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3810 00002CE4 E8F4CC0000              	call malloc
  3811 00002CE9 50                      	push rax
  3812 00002CEA BF00000000              	mov rdi, 8 * 0	; new rib
  3813 00002CEF E8E9CC0000              	call malloc
  3814 00002CF4 50                      	push rax
  3815 00002CF5 BF08000000              	mov rdi, 8 * 1	; extended env
  3816 00002CFA E8DECC0000              	call malloc
  3817 00002CFF 488B7D10                	mov rdi, ENV
  3818 00002D03 BE00000000              	mov rsi, 0
  3819 00002D08 BA01000000              	mov rdx, 1
  3820                                  .L_lambda_simple_env_loop_00be:	; ext_env[i + 1] <-- env[i]
  3821 00002D0D 4883FE00                	cmp rsi, 0
  3822 00002D11 7410                    	je .L_lambda_simple_env_end_00be
  3823 00002D13 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3824 00002D17 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3825 00002D1B 48FFC6                  	inc rsi
  3826 00002D1E 48FFC2                  	inc rdx
  3827 00002D21 EBEA                    	jmp .L_lambda_simple_env_loop_00be
  3828                                  .L_lambda_simple_env_end_00be:
  3829 00002D23 5B                      	pop rbx
  3830 00002D24 BE00000000              	mov rsi, 0
  3831                                  .L_lambda_simple_params_loop_00be:	; copy params
  3832 00002D29 4883FE00                	cmp rsi, 0
  3833 00002D2D 740E                    	je .L_lambda_simple_params_end_00be
  3834 00002D2F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3835 00002D34 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3836 00002D38 48FFC6                  	inc rsi
  3837 00002D3B EBEC                    	jmp .L_lambda_simple_params_loop_00be
  3838                                  .L_lambda_simple_params_end_00be:
  3839 00002D3D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3840 00002D40 4889C3                  	mov rbx, rax
  3841 00002D43 58                      	pop rax
  3842 00002D44 C60005                  	mov byte [rax], T_closure
  3843 00002D47 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3844 00002D4B 48C74009[582D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00be
  3845 00002D53 E9B9030000              	jmp .L_lambda_simple_end_00be
  3846                                  .L_lambda_simple_code_00be:	; lambda-simple body
  3847 00002D58 48837C241001            	cmp qword [rsp + 8 * 2], 1
  3848 00002D5E 740B                    	je .L_lambda_simple_arity_check_ok_00be
  3849 00002D60 FF742410                	push qword [rsp + 8 * 2]
  3850 00002D64 6A01                    	push 1
  3851 00002D66 E92BCC0000              	jmp L_error_incorrect_arity_simple
  3852                                  .L_lambda_simple_arity_check_ok_00be:
  3853 00002D6B C8000000                	enter 0, 0
  3854 00002D6F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3855 00002D73 4889C2                  	mov rdx, rax
  3856 00002D76 BF08000000              	mov rdi, 8
  3857 00002D7B E85DCC0000              	call malloc
  3858 00002D80 488910                  	mov qword[rax], rdx
  3859 00002D83 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  3860 00002D87 48B8-                   	mov rax, sob_void
  3860 00002D89 [0000000000000000] 
  3861                                  
  3862 00002D91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3863 00002D96 E842CC0000              	call malloc
  3864 00002D9B 50                      	push rax
  3865 00002D9C BF08000000              	mov rdi, 8 * 1	; new rib
  3866 00002DA1 E837CC0000              	call malloc
  3867 00002DA6 50                      	push rax
  3868 00002DA7 BF10000000              	mov rdi, 8 * 2	; extended env
  3869 00002DAC E82CCC0000              	call malloc
  3870 00002DB1 488B7D10                	mov rdi, ENV
  3871 00002DB5 BE00000000              	mov rsi, 0
  3872 00002DBA BA01000000              	mov rdx, 1
  3873                                  .L_lambda_simple_env_loop_00bf:	; ext_env[i + 1] <-- env[i]
  3874 00002DBF 4883FE01                	cmp rsi, 1
  3875 00002DC3 7410                    	je .L_lambda_simple_env_end_00bf
  3876 00002DC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3877 00002DC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3878 00002DCD 48FFC6                  	inc rsi
  3879 00002DD0 48FFC2                  	inc rdx
  3880 00002DD3 EBEA                    	jmp .L_lambda_simple_env_loop_00bf
  3881                                  .L_lambda_simple_env_end_00bf:
  3882 00002DD5 5B                      	pop rbx
  3883 00002DD6 BE00000000              	mov rsi, 0
  3884                                  .L_lambda_simple_params_loop_00bf:	; copy params
  3885 00002DDB 4883FE01                	cmp rsi, 1
  3886 00002DDF 740E                    	je .L_lambda_simple_params_end_00bf
  3887 00002DE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  3888 00002DE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  3889 00002DEA 48FFC6                  	inc rsi
  3890 00002DED EBEC                    	jmp .L_lambda_simple_params_loop_00bf
  3891                                  .L_lambda_simple_params_end_00bf:
  3892 00002DEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  3893 00002DF2 4889C3                  	mov rbx, rax
  3894 00002DF5 58                      	pop rax
  3895 00002DF6 C60005                  	mov byte [rax], T_closure
  3896 00002DF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  3897 00002DFD 48C74009[0A2E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00bf
  3898 00002E05 E9F5000000              	jmp .L_lambda_simple_end_00bf
  3899                                  .L_lambda_simple_code_00bf:	; lambda-simple body
  3900 00002E0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  3901 00002E10 740B                    	je .L_lambda_simple_arity_check_ok_00bf
  3902 00002E12 FF742410                	push qword [rsp + 8 * 2]
  3903 00002E16 6A02                    	push 2
  3904 00002E18 E979CB0000              	jmp L_error_incorrect_arity_simple
  3905                                  .L_lambda_simple_arity_check_ok_00bf:
  3906 00002E1D C8000000                	enter 0, 0
  3907 00002E21 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3908 00002E25 50                      	push rax
  3909 00002E26 6A01                    	push 1
  3910 00002E28 488B0425[08000000]      	mov rax, qword [free_var_1]
  3911                                  	assert_closure(rax)
    42 00002E30 803805              <1>  cmp byte [%1], %2
    43 00002E33 0F8598E30000        <1>  jne L_error_incorrect_type
  3912 00002E39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3913 00002E3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  3914 00002E3F 483D[02000000]          	cmp rax, sob_boolean_false
  3915 00002E45 0F84AC000000                      	je .L_if_else_0063
  3916 00002E4B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  3917 00002E4F 50                      	push rax
  3918 00002E50 6A01                    	push 1
  3919 00002E52 488B0425[88000000]      	mov rax, qword [free_var_17]
  3920                                  	assert_closure(rax)
    42 00002E5A 803805              <1>  cmp byte [%1], %2
    43 00002E5D 0F856EE30000        <1>  jne L_error_incorrect_type
  3921 00002E63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3922 00002E66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3923 00002E69 50                      	push rax
  3924 00002E6A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  3925 00002E6E 50                      	push rax
  3926 00002E6F 6A01                    	push 1
  3927 00002E71 488B0425[80000000]      	mov rax, qword [free_var_16]
  3928                                  	assert_closure(rax)
    42 00002E79 803805              <1>  cmp byte [%1], %2
    43 00002E7C 0F854FE30000        <1>  jne L_error_incorrect_type
  3929 00002E82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3930 00002E85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3931 00002E88 50                      	push rax
  3932 00002E89 6A02                    	push 2
  3933 00002E8B 488B4510                	mov rax, qword [rbp + 8 * 2]
  3934 00002E8F 488B00                  	mov rax, qword [rax + 8 * 0]
  3935 00002E92 488B00                  	mov rax, qword [rax + 8 * 0]
  3936 00002E95 488B00                  	mov rax, qword [rax]
  3937                                  	assert_closure(rax)
    42 00002E98 803805              <1>  cmp byte [%1], %2
    43 00002E9B 0F8530E30000        <1>  jne L_error_incorrect_type
  3938 00002EA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3939 00002EA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  3940 00002EA7 50                      	push rax
  3941 00002EA8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3942 00002EAC 50                      	push rax
  3943 00002EAD 6A02                    	push 2
  3944 00002EAF 488B0425[68000000]      	mov rax, qword [free_var_13]
  3945                                  	assert_closure(rax)
    42 00002EB7 803805              <1>  cmp byte [%1], %2
    43 00002EBA 0F8511E30000        <1>  jne L_error_incorrect_type
  3946 00002EC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  3947 00002EC3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  3948 00002EC6 FF7500                  	push qword [rbp] ; same the old rbp
  3949 00002EC9 BA05000000              	mov rdx, 2 + 3
  3950 00002ECE 488B4D00                	mov rcx, [rbp]
  3951 00002ED2 4889EF                  	mov rdi, rbp
  3952                                  .L_tc_recycle_frame_loop_00d7:
  3953 00002ED5 4883FA00                	cmp rdx, 0
  3954 00002ED9 7413                    	je .L_tc_recycle_frame_done_00d7
  3955 00002EDB 4883E908                	sub rcx, 8
  3956 00002EDF 4883EF08                	sub rdi, 8
  3957 00002EE3 488B37                  	mov rsi, [rdi]
  3958 00002EE6 488931                  	mov qword [rcx], rsi
  3959 00002EE9 48FFCA                  	dec rdx
  3960 00002EEC EBE7                    	jmp .L_tc_recycle_frame_loop_00d7
  3961                                  .L_tc_recycle_frame_done_00d7:
  3962 00002EEE 5D                      	pop rbp ; restore the old rbp
  3963 00002EEF 4889CC                  	mov rsp, rcx
  3964 00002EF2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  3965 00002EF5 EB04                    	jmp .L_if_end_0063
  3966                                            .L_if_else_0063:
  3967 00002EF7 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  3968                                  .L_if_end_0063:
  3969 00002EFB C9                      	leave
  3970 00002EFC C22000                  	ret 8 * (2 + 2)
  3971                                  .L_lambda_simple_end_00bf:	; new closure is in rax
  3972 00002EFF 50                      	push rax
  3973 00002F00 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  3974 00002F04 8F00                    	pop qword [rax]
  3975 00002F06 48B8-                   	mov rax, sob_void
  3975 00002F08 [0000000000000000] 
  3976                                  
  3977 00002F10 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  3978 00002F15 E8C3CA0000              	call malloc
  3979 00002F1A 50                      	push rax
  3980 00002F1B BF08000000              	mov rdi, 8 * 1	; new rib
  3981 00002F20 E8B8CA0000              	call malloc
  3982 00002F25 50                      	push rax
  3983 00002F26 BF10000000              	mov rdi, 8 * 2	; extended env
  3984 00002F2B E8ADCA0000              	call malloc
  3985 00002F30 488B7D10                	mov rdi, ENV
  3986 00002F34 BE00000000              	mov rsi, 0
  3987 00002F39 BA01000000              	mov rdx, 1
  3988                                  .L_lambda_opt_env_loop_001a:	; ext_env[i + 1] <-- env[i]
  3989 00002F3E 4883FE01                	cmp rsi, 1
  3990 00002F42 7410                    	je .L_lambda_opt_env_end_001a
  3991 00002F44 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  3992 00002F48 48890CD0                	mov qword [rax + 8 * rdx], rcx
  3993 00002F4C 48FFC6                  	inc rsi
  3994 00002F4F 48FFC2                  	inc rdx
  3995 00002F52 EBEA                    	jmp .L_lambda_opt_env_loop_001a
  3996                                  .L_lambda_opt_env_end_001a:
  3997 00002F54 5B                      	pop rbx
  3998 00002F55 BE00000000              	mov rsi, 0
  3999                                  .L_lambda_opt_params_loop_001a:	; copy params
  4000 00002F5A 4883FE01                	cmp rsi, 1
  4001 00002F5E 740E                    	je .L_lambda_opt_params_end_001a
  4002 00002F60 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4003 00002F65 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4004 00002F69 48FFC6                  	inc rsi
  4005 00002F6C EBEC                    	jmp .L_lambda_opt_params_loop_001a
  4006                                  .L_lambda_opt_params_end_001a:
  4007 00002F6E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4008 00002F71 4889C3                  	mov rbx, rax
  4009 00002F74 58                      	pop rax
  4010 00002F75 C60005                  	mov byte [rax], T_closure
  4011 00002F78 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4012 00002F7C 48C74009[892F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001a
  4013 00002F84 E984010000              	jmp .L_lambda_opt_end_001a
  4014                                  .L_lambda_opt_code_001a:	; lambda-opt body
  4015 00002F89 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4016 00002F8F 740D                    	je .L_lambda_opt_arity_check_exact_001a
  4017 00002F91 7F43                    	jg .L_lambda_opt_arity_check_more_001a
  4018 00002F93 FF742410                	push qword [rsp + 8 * 2]
  4019 00002F97 6A01                    	push 1
  4020 00002F99 E90CCA0000              	jmp L_error_incorrect_arity_opt
  4021                                  .L_lambda_opt_arity_check_exact_001a:
  4022 00002F9E 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4023 00002FA7 BA04000000              	mov rdx, 4
  4024 00002FAC FF3424                  	push qword [rsp]
  4025 00002FAF BE01000000              	mov rsi, 1
  4026                                  .L_lambda_opt_stack_shrink_loop_004c:
  4027 00002FB4 4839D6                  	cmp rsi, rdx
  4028 00002FB7 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_004c
  4029 00002FB9 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  4030 00002FBE 488B0B                  	mov rcx, [rbx]
  4031 00002FC1 48894BF8                	mov qword [rbx - 8], rcx
  4032 00002FC5 48FFC6                  	inc rsi
  4033 00002FC8 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_004c
  4034                                  .L_lambda_opt_stack_shrink_loop_exit_004c:
  4035 00002FCA 48C703[01000000]        	mov qword [rbx], sob_nil
  4036 00002FD1 E985000000              	jmp .L_lambda_opt_stack_adjusted_001a
  4037                                  .L_lambda_opt_arity_check_more_001a:
  4038 00002FD6 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4039 00002FDB 4883EA01                	sub rdx, 1
  4040 00002FDF 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4041 00002FE8 BE00000000              	mov rsi, 0
  4042 00002FED 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  4043 00002FF2 48B9-                   	mov rcx, sob_nil
  4043 00002FF4 [0100000000000000] 
  4044                                  .L_lambda_opt_stack_shrink_loop_004d:
  4045 00002FFC 4839D6                  	cmp rsi, rdx
  4046 00002FFF 7427                    je .L_lambda_opt_stack_shrink_loop_exit_004d
  4047 00003001 BF11000000              	mov rdi, 17 ; 1+8+8
  4048 00003006 E8D2C90000              	call malloc
  4049 0000300B 48894809                	mov SOB_PAIR_CDR(rax), rcx
  4050 0000300F 48F7DE                  	neg rsi
  4051 00003012 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  4052 00003016 48F7DE                  	neg rsi
  4053 00003019 48894801                	mov SOB_PAIR_CAR(rax), rcx
  4054 0000301D C60021                  	mov byte [rax], T_pair
  4055 00003020 4889C1                  	mov rcx, rax
  4056 00003023 48FFC6                  	inc rsi
  4057 00003026 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_004d
  4058                                  .L_lambda_opt_stack_shrink_loop_exit_004d:
  4059 00003028 48890B                  	mov qword [rbx], rcx
  4060 0000302B 4883EB08                	sub rbx, 8
  4061 0000302F 4889E7                  	mov rdi, rsp
  4062 00003032 4883C718                	add rdi, 24
  4063 00003036 BE04000000              	mov rsi, 4
  4064                                  .L_lambda_opt_stack_shrink_loop_004e:
  4065 0000303B 4883FE00                	cmp rsi,0
  4066 0000303F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_004e
  4067 00003041 488B0F                  	mov rcx, qword [rdi]
  4068 00003044 48890B                  	mov [rbx], rcx
  4069 00003047 48FFCE                  	dec rsi
  4070 0000304A 4883EB08                	sub rbx, 8
  4071 0000304E 4883EF08                	sub rdi, 8
  4072 00003052 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_004e
  4073                                  .L_lambda_opt_stack_shrink_loop_exit_004e:
  4074 00003054 4883C308                	add rbx, 8
  4075 00003058 4889DC                  	mov rsp, rbx
  4076                                  .L_lambda_opt_stack_adjusted_001a:
  4077 0000305B C8000000                	enter 0, 0
  4078 0000305F 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4079 00003063 50                      	push rax
  4080 00003064 6A01                    	push 1
  4081 00003066 488B0425[88000000]      	mov rax, qword [free_var_17]
  4082                                  	assert_closure(rax)
    42 0000306E 803805              <1>  cmp byte [%1], %2
    43 00003071 0F855AE10000        <1>  jne L_error_incorrect_type
  4083 00003077 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4084 0000307A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4085 0000307D 50                      	push rax
  4086 0000307E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4087 00003082 50                      	push rax
  4088 00003083 6A01                    	push 1
  4089 00003085 488B0425[80000000]      	mov rax, qword [free_var_16]
  4090                                  	assert_closure(rax)
    42 0000308D 803805              <1>  cmp byte [%1], %2
    43 00003090 0F853BE10000        <1>  jne L_error_incorrect_type
  4091 00003096 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4092 00003099 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4093 0000309C 50                      	push rax
  4094 0000309D 6A02                    	push 2
  4095 0000309F 488B4510                	mov rax, qword [rbp + 8 * 2]
  4096 000030A3 488B00                  	mov rax, qword [rax + 8 * 0]
  4097 000030A6 488B00                  	mov rax, qword [rax + 8 * 0]
  4098 000030A9 488B00                  	mov rax, qword [rax]
  4099                                  	assert_closure(rax)
    42 000030AC 803805              <1>  cmp byte [%1], %2
    43 000030AF 0F851CE10000        <1>  jne L_error_incorrect_type
  4100 000030B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4101 000030B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4102 000030BB 50                      	push rax
  4103 000030BC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4104 000030C0 50                      	push rax
  4105 000030C1 6A02                    	push 2
  4106 000030C3 488B0425[E8000000]      	mov rax, qword [free_var_29]
  4107                                  	assert_closure(rax)
    42 000030CB 803805              <1>  cmp byte [%1], %2
    43 000030CE 0F85FDE00000        <1>  jne L_error_incorrect_type
  4108 000030D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4109 000030D7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4110 000030DA FF7500                  	push qword [rbp] ; same the old rbp
  4111 000030DD BA05000000              	mov rdx, 2 + 3
  4112 000030E2 488B4D00                	mov rcx, [rbp]
  4113 000030E6 4889EF                  	mov rdi, rbp
  4114                                  .L_tc_recycle_frame_loop_00d8:
  4115 000030E9 4883FA00                	cmp rdx, 0
  4116 000030ED 7413                    	je .L_tc_recycle_frame_done_00d8
  4117 000030EF 4883E908                	sub rcx, 8
  4118 000030F3 4883EF08                	sub rdi, 8
  4119 000030F7 488B37                  	mov rsi, [rdi]
  4120 000030FA 488931                  	mov qword [rcx], rsi
  4121 000030FD 48FFCA                  	dec rdx
  4122 00003100 EBE7                    	jmp .L_tc_recycle_frame_loop_00d8
  4123                                  .L_tc_recycle_frame_done_00d8:
  4124 00003102 5D                      	pop rbp ; restore the old rbp
  4125 00003103 4889CC                  	mov rsp, rcx
  4126 00003106 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4127 00003109 C9                      	leave
  4128 0000310A C22000                  	ret 8 * (2 + 2)
  4129                                  .L_lambda_opt_end_001a:	; new closure is in rax
  4130 0000310D C9                      	leave
  4131 0000310E C21800                  	ret 8 * (2 + 1)
  4132                                  .L_lambda_simple_end_00be:	; new closure is in rax
  4133                                  	assert_closure(rax)
    42 00003111 803805              <1>  cmp byte [%1], %2
    43 00003114 0F85B7E00000        <1>  jne L_error_incorrect_type
  4134 0000311A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4135 0000311D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4136 00003120 48890425[C8020000]      	mov qword [free_var_89], rax
  4137 00003128 48B8-                   	mov rax, sob_void
  4137 0000312A [0000000000000000] 
  4138                                  
  4139 00003132 4889C7                  	mov rdi, rax
  4140 00003135 E8B4C80000              	call print_sexpr_if_not_void
  4141                                  
  4142 0000313A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4143 0000313F E899C80000              	call malloc
  4144 00003144 50                      	push rax
  4145 00003145 BF00000000              	mov rdi, 8 * 0	; new rib
  4146 0000314A E88EC80000              	call malloc
  4147 0000314F 50                      	push rax
  4148 00003150 BF08000000              	mov rdi, 8 * 1	; extended env
  4149 00003155 E883C80000              	call malloc
  4150 0000315A 488B7D10                	mov rdi, ENV
  4151 0000315E BE00000000              	mov rsi, 0
  4152 00003163 BA01000000              	mov rdx, 1
  4153                                  .L_lambda_opt_env_loop_001b:	; ext_env[i + 1] <-- env[i]
  4154 00003168 4883FE00                	cmp rsi, 0
  4155 0000316C 7410                    	je .L_lambda_opt_env_end_001b
  4156 0000316E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4157 00003172 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4158 00003176 48FFC6                  	inc rsi
  4159 00003179 48FFC2                  	inc rdx
  4160 0000317C EBEA                    	jmp .L_lambda_opt_env_loop_001b
  4161                                  .L_lambda_opt_env_end_001b:
  4162 0000317E 5B                      	pop rbx
  4163 0000317F BE00000000              	mov rsi, 0
  4164                                  .L_lambda_opt_params_loop_001b:	; copy params
  4165 00003184 4883FE00                	cmp rsi, 0
  4166 00003188 740E                    	je .L_lambda_opt_params_end_001b
  4167 0000318A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4168 0000318F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4169 00003193 48FFC6                  	inc rsi
  4170 00003196 EBEC                    	jmp .L_lambda_opt_params_loop_001b
  4171                                  .L_lambda_opt_params_end_001b:
  4172 00003198 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4173 0000319B 4889C3                  	mov rbx, rax
  4174 0000319E 58                      	pop rax
  4175 0000319F C60005                  	mov byte [rax], T_closure
  4176 000031A2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4177 000031A6 48C74009[B3310000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001b
  4178 000031AE E9ED030000              	jmp .L_lambda_opt_end_001b
  4179                                  .L_lambda_opt_code_001b:	; lambda-opt body
  4180 000031B3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4181 000031B9 740D                    	je .L_lambda_opt_arity_check_exact_001b
  4182 000031BB 7F43                    	jg .L_lambda_opt_arity_check_more_001b
  4183 000031BD FF742410                	push qword [rsp + 8 * 2]
  4184 000031C1 6A01                    	push 1
  4185 000031C3 E9E2C70000              	jmp L_error_incorrect_arity_opt
  4186                                  .L_lambda_opt_arity_check_exact_001b:
  4187 000031C8 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4188 000031D1 BA04000000              	mov rdx, 4
  4189 000031D6 FF3424                  	push qword [rsp]
  4190 000031D9 BE01000000              	mov rsi, 1
  4191                                  .L_lambda_opt_stack_shrink_loop_004f:
  4192 000031DE 4839D6                  	cmp rsi, rdx
  4193 000031E1 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_004f
  4194 000031E3 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  4195 000031E8 488B0B                  	mov rcx, [rbx]
  4196 000031EB 48894BF8                	mov qword [rbx - 8], rcx
  4197 000031EF 48FFC6                  	inc rsi
  4198 000031F2 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_004f
  4199                                  .L_lambda_opt_stack_shrink_loop_exit_004f:
  4200 000031F4 48C703[01000000]        	mov qword [rbx], sob_nil
  4201 000031FB E985000000              	jmp .L_lambda_opt_stack_adjusted_001b
  4202                                  .L_lambda_opt_arity_check_more_001b:
  4203 00003200 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4204 00003205 4883EA01                	sub rdx, 1
  4205 00003209 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4206 00003212 BE00000000              	mov rsi, 0
  4207 00003217 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  4208 0000321C 48B9-                   	mov rcx, sob_nil
  4208 0000321E [0100000000000000] 
  4209                                  .L_lambda_opt_stack_shrink_loop_0050:
  4210 00003226 4839D6                  	cmp rsi, rdx
  4211 00003229 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0050
  4212 0000322B BF11000000              	mov rdi, 17 ; 1+8+8
  4213 00003230 E8A8C70000              	call malloc
  4214 00003235 48894809                	mov SOB_PAIR_CDR(rax), rcx
  4215 00003239 48F7DE                  	neg rsi
  4216 0000323C 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  4217 00003240 48F7DE                  	neg rsi
  4218 00003243 48894801                	mov SOB_PAIR_CAR(rax), rcx
  4219 00003247 C60021                  	mov byte [rax], T_pair
  4220 0000324A 4889C1                  	mov rcx, rax
  4221 0000324D 48FFC6                  	inc rsi
  4222 00003250 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0050
  4223                                  .L_lambda_opt_stack_shrink_loop_exit_0050:
  4224 00003252 48890B                  	mov qword [rbx], rcx
  4225 00003255 4883EB08                	sub rbx, 8
  4226 00003259 4889E7                  	mov rdi, rsp
  4227 0000325C 4883C718                	add rdi, 24
  4228 00003260 BE04000000              	mov rsi, 4
  4229                                  .L_lambda_opt_stack_shrink_loop_0051:
  4230 00003265 4883FE00                	cmp rsi,0
  4231 00003269 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0051
  4232 0000326B 488B0F                  	mov rcx, qword [rdi]
  4233 0000326E 48890B                  	mov [rbx], rcx
  4234 00003271 48FFCE                  	dec rsi
  4235 00003274 4883EB08                	sub rbx, 8
  4236 00003278 4883EF08                	sub rdi, 8
  4237 0000327C EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0051
  4238                                  .L_lambda_opt_stack_shrink_loop_exit_0051:
  4239 0000327E 4883C308                	add rbx, 8
  4240 00003282 4889DC                  	mov rsp, rbx
  4241                                  .L_lambda_opt_stack_adjusted_001b:
  4242 00003285 C8000000                	enter 0, 0
  4243 00003289 48B8-                   	mov rax, L_constants + 23
  4243 0000328B [1700000000000000] 
  4244 00003293 50                      	push rax
  4245 00003294 6A01                    	push 1
  4246 00003296 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4247 0000329B E83DC70000              	call malloc
  4248 000032A0 50                      	push rax
  4249 000032A1 BF10000000              	mov rdi, 8 * 2	; new rib
  4250 000032A6 E832C70000              	call malloc
  4251 000032AB 50                      	push rax
  4252 000032AC BF10000000              	mov rdi, 8 * 2	; extended env
  4253 000032B1 E827C70000              	call malloc
  4254 000032B6 488B7D10                	mov rdi, ENV
  4255 000032BA BE00000000              	mov rsi, 0
  4256 000032BF BA01000000              	mov rdx, 1
  4257                                  .L_lambda_simple_env_loop_00c0:	; ext_env[i + 1] <-- env[i]
  4258 000032C4 4883FE01                	cmp rsi, 1
  4259 000032C8 7410                    	je .L_lambda_simple_env_end_00c0
  4260 000032CA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4261 000032CE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4262 000032D2 48FFC6                  	inc rsi
  4263 000032D5 48FFC2                  	inc rdx
  4264 000032D8 EBEA                    	jmp .L_lambda_simple_env_loop_00c0
  4265                                  .L_lambda_simple_env_end_00c0:
  4266 000032DA 5B                      	pop rbx
  4267 000032DB BE00000000              	mov rsi, 0
  4268                                  .L_lambda_simple_params_loop_00c0:	; copy params
  4269 000032E0 4883FE02                	cmp rsi, 2
  4270 000032E4 740E                    	je .L_lambda_simple_params_end_00c0
  4271 000032E6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4272 000032EB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4273 000032EF 48FFC6                  	inc rsi
  4274 000032F2 EBEC                    	jmp .L_lambda_simple_params_loop_00c0
  4275                                  .L_lambda_simple_params_end_00c0:
  4276 000032F4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4277 000032F7 4889C3                  	mov rbx, rax
  4278 000032FA 58                      	pop rax
  4279 000032FB C60005                  	mov byte [rax], T_closure
  4280 000032FE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4281 00003302 48C74009[0F330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c0
  4282 0000330A E94F020000              	jmp .L_lambda_simple_end_00c0
  4283                                  .L_lambda_simple_code_00c0:	; lambda-simple body
  4284 0000330F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4285 00003315 740B                    	je .L_lambda_simple_arity_check_ok_00c0
  4286 00003317 FF742410                	push qword [rsp + 8 * 2]
  4287 0000331B 6A01                    	push 1
  4288 0000331D E974C60000              	jmp L_error_incorrect_arity_simple
  4289                                  .L_lambda_simple_arity_check_ok_00c0:
  4290 00003322 C8000000                	enter 0, 0
  4291 00003326 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4292 0000332A 4889C2                  	mov rdx, rax
  4293 0000332D BF08000000              	mov rdi, 8
  4294 00003332 E8A6C60000              	call malloc
  4295 00003337 488910                  	mov qword[rax], rdx
  4296 0000333A 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4297 0000333E 48B8-                   	mov rax, sob_void
  4297 00003340 [0000000000000000] 
  4298                                  
  4299 00003348 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4300 0000334D E88BC60000              	call malloc
  4301 00003352 50                      	push rax
  4302 00003353 BF08000000              	mov rdi, 8 * 1	; new rib
  4303 00003358 E880C60000              	call malloc
  4304 0000335D 50                      	push rax
  4305 0000335E BF18000000              	mov rdi, 8 * 3	; extended env
  4306 00003363 E875C60000              	call malloc
  4307 00003368 488B7D10                	mov rdi, ENV
  4308 0000336C BE00000000              	mov rsi, 0
  4309 00003371 BA01000000              	mov rdx, 1
  4310                                  .L_lambda_simple_env_loop_00c1:	; ext_env[i + 1] <-- env[i]
  4311 00003376 4883FE02                	cmp rsi, 2
  4312 0000337A 7410                    	je .L_lambda_simple_env_end_00c1
  4313 0000337C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4314 00003380 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4315 00003384 48FFC6                  	inc rsi
  4316 00003387 48FFC2                  	inc rdx
  4317 0000338A EBEA                    	jmp .L_lambda_simple_env_loop_00c1
  4318                                  .L_lambda_simple_env_end_00c1:
  4319 0000338C 5B                      	pop rbx
  4320 0000338D BE00000000              	mov rsi, 0
  4321                                  .L_lambda_simple_params_loop_00c1:	; copy params
  4322 00003392 4883FE01                	cmp rsi, 1
  4323 00003396 740E                    	je .L_lambda_simple_params_end_00c1
  4324 00003398 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4325 0000339D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4326 000033A1 48FFC6                  	inc rsi
  4327 000033A4 EBEC                    	jmp .L_lambda_simple_params_loop_00c1
  4328                                  .L_lambda_simple_params_end_00c1:
  4329 000033A6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4330 000033A9 4889C3                  	mov rbx, rax
  4331 000033AC 58                      	pop rax
  4332 000033AD C60005                  	mov byte [rax], T_closure
  4333 000033B0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4334 000033B4 48C74009[C1330000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c1
  4335 000033BC E935010000              	jmp .L_lambda_simple_end_00c1
  4336                                  .L_lambda_simple_code_00c1:	; lambda-simple body
  4337 000033C1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4338 000033C7 740B                    	je .L_lambda_simple_arity_check_ok_00c1
  4339 000033C9 FF742410                	push qword [rsp + 8 * 2]
  4340 000033CD 6A01                    	push 1
  4341 000033CF E9C2C50000              	jmp L_error_incorrect_arity_simple
  4342                                  .L_lambda_simple_arity_check_ok_00c1:
  4343 000033D4 C8000000                	enter 0, 0
  4344 000033D8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4345 000033DC 50                      	push rax
  4346 000033DD 6A01                    	push 1
  4347 000033DF 488B0425[80000000]      	mov rax, qword [free_var_16]
  4348                                  	assert_closure(rax)
    42 000033E7 803805              <1>  cmp byte [%1], %2
    43 000033EA 0F85E1DD0000        <1>  jne L_error_incorrect_type
  4349 000033F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4350 000033F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4351 000033F6 50                      	push rax
  4352 000033F7 6A01                    	push 1
  4353 000033F9 488B0425[08000000]      	mov rax, qword [free_var_1]
  4354                                  	assert_closure(rax)
    42 00003401 803805              <1>  cmp byte [%1], %2
    43 00003404 0F85C7DD0000        <1>  jne L_error_incorrect_type
  4355 0000340A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4356 0000340D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4357 00003410 483D[02000000]          	cmp rax, sob_boolean_false
  4358 00003416 0F84CC000000                      	je .L_if_else_0064
  4359 0000341C 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  4360 00003420 50                      	push rax
  4361 00003421 488B0425[80000000]      	mov rax, qword [free_var_16]
  4362 00003429 50                      	push rax
  4363 0000342A 6A02                    	push 2
  4364 0000342C 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4365                                  	assert_closure(rax)
    42 00003434 803805              <1>  cmp byte [%1], %2
    43 00003437 0F8594DD0000        <1>  jne L_error_incorrect_type
  4366 0000343D FF7001                  	push SOB_CLOSURE_ENV(rax)
  4367 00003440 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4368 00003443 50                      	push rax
  4369 00003444 488B4510                	mov rax, qword [rbp + 8 * 2]
  4370 00003448 488B4008                	mov rax, qword [rax + 8 * 1]
  4371 0000344C 488B00                  	mov rax, qword [rax + 8 * 0]
  4372 0000344F 50                      	push rax
  4373 00003450 6A02                    	push 2
  4374 00003452 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4375                                  	assert_closure(rax)
    42 0000345A 803805              <1>  cmp byte [%1], %2
    43 0000345D 0F856EDD0000        <1>  jne L_error_incorrect_type
  4376 00003463 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4377 00003466 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4378 00003469 483D[02000000]          	cmp rax, sob_boolean_false
  4379 0000346F 7575                    	jne .L_or_end_000e
  4380 00003471 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4381 00003475 50                      	push rax
  4382 00003476 488B0425[88000000]      	mov rax, qword [free_var_17]
  4383 0000347E 50                      	push rax
  4384 0000347F 6A02                    	push 2
  4385 00003481 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4386                                  	assert_closure(rax)
    42 00003489 803805              <1>  cmp byte [%1], %2
    43 0000348C 0F853FDD0000        <1>  jne L_error_incorrect_type
  4387 00003492 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4388 00003495 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4389 00003498 50                      	push rax
  4390 00003499 6A01                    	push 1
  4391 0000349B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4392 0000349F 488B00                  	mov rax, qword [rax + 8 * 0]
  4393 000034A2 488B00                  	mov rax, qword [rax + 8 * 0]
  4394 000034A5 488B00                  	mov rax, qword [rax]
  4395                                  	assert_closure(rax)
    42 000034A8 803805              <1>  cmp byte [%1], %2
    43 000034AB 0F8520DD0000        <1>  jne L_error_incorrect_type
  4396 000034B1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4397 000034B4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4398 000034B7 FF7500                  	push qword [rbp] ; same the old rbp
  4399 000034BA BA04000000              	mov rdx, 1 + 3
  4400 000034BF 488B4D00                	mov rcx, [rbp]
  4401 000034C3 4889EF                  	mov rdi, rbp
  4402                                  .L_tc_recycle_frame_loop_00da:
  4403 000034C6 4883FA00                	cmp rdx, 0
  4404 000034CA 7413                    	je .L_tc_recycle_frame_done_00da
  4405 000034CC 4883E908                	sub rcx, 8
  4406 000034D0 4883EF08                	sub rdi, 8
  4407 000034D4 488B37                  	mov rsi, [rdi]
  4408 000034D7 488931                  	mov qword [rcx], rsi
  4409 000034DA 48FFCA                  	dec rdx
  4410 000034DD EBE7                    	jmp .L_tc_recycle_frame_loop_00da
  4411                                  .L_tc_recycle_frame_done_00da:
  4412 000034DF 5D                      	pop rbp ; restore the old rbp
  4413 000034E0 4889CC                  	mov rsp, rcx
  4414 000034E3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4415                                  .L_or_end_000e:
  4416 000034E6 EB0A                    	jmp .L_if_end_0064
  4417                                            .L_if_else_0064:
  4418 000034E8 48B8-                             	mov rax, L_constants + 2
  4418 000034EA [0200000000000000] 
  4419                                  .L_if_end_0064:
  4420 000034F2 C9                      	leave
  4421 000034F3 C21800                  	ret 8 * (2 + 1)
  4422                                  .L_lambda_simple_end_00c1:	; new closure is in rax
  4423 000034F6 50                      	push rax
  4424 000034F7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4425 000034FB 8F00                    	pop qword [rax]
  4426 000034FD 48B8-                   	mov rax, sob_void
  4426 000034FF [0000000000000000] 
  4427                                  
  4428 00003507 488B4510                	mov rax, qword [rbp + 8 * 2]
  4429 0000350B 488B00                  	mov rax, qword [rax + 8 * 0]
  4430 0000350E 488B4008                	mov rax, qword [rax + 8 * 1]
  4431 00003512 50                      	push rax
  4432 00003513 6A01                    	push 1
  4433 00003515 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4434 00003519 488B00                  	mov rax, qword [rax]
  4435                                  	assert_closure(rax)
    42 0000351C 803805              <1>  cmp byte [%1], %2
    43 0000351F 0F85ACDC0000        <1>  jne L_error_incorrect_type
  4436 00003525 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4437 00003528 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4438 0000352B FF7500                  	push qword [rbp] ; same the old rbp
  4439 0000352E BA04000000              	mov rdx, 1 + 3
  4440 00003533 488B4D00                	mov rcx, [rbp]
  4441 00003537 4889EF                  	mov rdi, rbp
  4442                                  .L_tc_recycle_frame_loop_00db:
  4443 0000353A 4883FA00                	cmp rdx, 0
  4444 0000353E 7413                    	je .L_tc_recycle_frame_done_00db
  4445 00003540 4883E908                	sub rcx, 8
  4446 00003544 4883EF08                	sub rdi, 8
  4447 00003548 488B37                  	mov rsi, [rdi]
  4448 0000354B 488931                  	mov qword [rcx], rsi
  4449 0000354E 48FFCA                  	dec rdx
  4450 00003551 EBE7                    	jmp .L_tc_recycle_frame_loop_00db
  4451                                  .L_tc_recycle_frame_done_00db:
  4452 00003553 5D                      	pop rbp ; restore the old rbp
  4453 00003554 4889CC                  	mov rsp, rcx
  4454 00003557 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4455 0000355A C9                      	leave
  4456 0000355B C21800                  	ret 8 * (2 + 1)
  4457                                  .L_lambda_simple_end_00c0:	; new closure is in rax
  4458                                  	assert_closure(rax)
    42 0000355E 803805              <1>  cmp byte [%1], %2
    43 00003561 0F856ADC0000        <1>  jne L_error_incorrect_type
  4459 00003567 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4460 0000356A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4461 0000356D FF7500                  	push qword [rbp] ; same the old rbp
  4462 00003570 BA04000000              	mov rdx, 1 + 3
  4463 00003575 488B4D00                	mov rcx, [rbp]
  4464 00003579 4889EF                  	mov rdi, rbp
  4465                                  .L_tc_recycle_frame_loop_00d9:
  4466 0000357C 4883FA00                	cmp rdx, 0
  4467 00003580 7413                    	je .L_tc_recycle_frame_done_00d9
  4468 00003582 4883E908                	sub rcx, 8
  4469 00003586 4883EF08                	sub rdi, 8
  4470 0000358A 488B37                  	mov rsi, [rdi]
  4471 0000358D 488931                  	mov qword [rcx], rsi
  4472 00003590 48FFCA                  	dec rdx
  4473 00003593 EBE7                    	jmp .L_tc_recycle_frame_loop_00d9
  4474                                  .L_tc_recycle_frame_done_00d9:
  4475 00003595 5D                      	pop rbp ; restore the old rbp
  4476 00003596 4889CC                  	mov rsp, rcx
  4477 00003599 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4478 0000359C C9                      	leave
  4479 0000359D C22000                  	ret 8 * (2 + 2)
  4480                                  .L_lambda_opt_end_001b:	; new closure is in rax
  4481 000035A0 48890425[D0020000]      	mov qword [free_var_90], rax
  4482 000035A8 48B8-                   	mov rax, sob_void
  4482 000035AA [0000000000000000] 
  4483                                  
  4484 000035B2 4889C7                  	mov rdi, rax
  4485 000035B5 E834C40000              	call print_sexpr_if_not_void
  4486                                  
  4487 000035BA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4488 000035BF E819C40000              	call malloc
  4489 000035C4 50                      	push rax
  4490 000035C5 BF00000000              	mov rdi, 8 * 0	; new rib
  4491 000035CA E80EC40000              	call malloc
  4492 000035CF 50                      	push rax
  4493 000035D0 BF08000000              	mov rdi, 8 * 1	; extended env
  4494 000035D5 E803C40000              	call malloc
  4495 000035DA 488B7D10                	mov rdi, ENV
  4496 000035DE BE00000000              	mov rsi, 0
  4497 000035E3 BA01000000              	mov rdx, 1
  4498                                  .L_lambda_opt_env_loop_001c:	; ext_env[i + 1] <-- env[i]
  4499 000035E8 4883FE00                	cmp rsi, 0
  4500 000035EC 7410                    	je .L_lambda_opt_env_end_001c
  4501 000035EE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4502 000035F2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4503 000035F6 48FFC6                  	inc rsi
  4504 000035F9 48FFC2                  	inc rdx
  4505 000035FC EBEA                    	jmp .L_lambda_opt_env_loop_001c
  4506                                  .L_lambda_opt_env_end_001c:
  4507 000035FE 5B                      	pop rbx
  4508 000035FF BE00000000              	mov rsi, 0
  4509                                  .L_lambda_opt_params_loop_001c:	; copy params
  4510 00003604 4883FE00                	cmp rsi, 0
  4511 00003608 740E                    	je .L_lambda_opt_params_end_001c
  4512 0000360A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4513 0000360F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4514 00003613 48FFC6                  	inc rsi
  4515 00003616 EBEC                    	jmp .L_lambda_opt_params_loop_001c
  4516                                  .L_lambda_opt_params_end_001c:
  4517 00003618 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4518 0000361B 4889C3                  	mov rbx, rax
  4519 0000361E 58                      	pop rax
  4520 0000361F C60005                  	mov byte [rax], T_closure
  4521 00003622 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4522 00003626 48C74009[33360000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001c
  4523 0000362E E9ED030000              	jmp .L_lambda_opt_end_001c
  4524                                  .L_lambda_opt_code_001c:	; lambda-opt body
  4525 00003633 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4526 00003639 740D                    	je .L_lambda_opt_arity_check_exact_001c
  4527 0000363B 7F43                    	jg .L_lambda_opt_arity_check_more_001c
  4528 0000363D FF742410                	push qword [rsp + 8 * 2]
  4529 00003641 6A01                    	push 1
  4530 00003643 E962C30000              	jmp L_error_incorrect_arity_opt
  4531                                  .L_lambda_opt_arity_check_exact_001c:
  4532 00003648 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4533 00003651 BA04000000              	mov rdx, 4
  4534 00003656 FF3424                  	push qword [rsp]
  4535 00003659 BE01000000              	mov rsi, 1
  4536                                  .L_lambda_opt_stack_shrink_loop_0052:
  4537 0000365E 4839D6                  	cmp rsi, rdx
  4538 00003661 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0052
  4539 00003663 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  4540 00003668 488B0B                  	mov rcx, [rbx]
  4541 0000366B 48894BF8                	mov qword [rbx - 8], rcx
  4542 0000366F 48FFC6                  	inc rsi
  4543 00003672 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0052
  4544                                  .L_lambda_opt_stack_shrink_loop_exit_0052:
  4545 00003674 48C703[01000000]        	mov qword [rbx], sob_nil
  4546 0000367B E985000000              	jmp .L_lambda_opt_stack_adjusted_001c
  4547                                  .L_lambda_opt_arity_check_more_001c:
  4548 00003680 488B542410              	mov rdx, qword [rsp + 8 * 2]
  4549 00003685 4883EA01                	sub rdx, 1
  4550 00003689 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  4551 00003692 BE00000000              	mov rsi, 0
  4552 00003697 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  4553 0000369C 48B9-                   	mov rcx, sob_nil
  4553 0000369E [0100000000000000] 
  4554                                  .L_lambda_opt_stack_shrink_loop_0053:
  4555 000036A6 4839D6                  	cmp rsi, rdx
  4556 000036A9 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0053
  4557 000036AB BF11000000              	mov rdi, 17 ; 1+8+8
  4558 000036B0 E828C30000              	call malloc
  4559 000036B5 48894809                	mov SOB_PAIR_CDR(rax), rcx
  4560 000036B9 48F7DE                  	neg rsi
  4561 000036BC 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  4562 000036C0 48F7DE                  	neg rsi
  4563 000036C3 48894801                	mov SOB_PAIR_CAR(rax), rcx
  4564 000036C7 C60021                  	mov byte [rax], T_pair
  4565 000036CA 4889C1                  	mov rcx, rax
  4566 000036CD 48FFC6                  	inc rsi
  4567 000036D0 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0053
  4568                                  .L_lambda_opt_stack_shrink_loop_exit_0053:
  4569 000036D2 48890B                  	mov qword [rbx], rcx
  4570 000036D5 4883EB08                	sub rbx, 8
  4571 000036D9 4889E7                  	mov rdi, rsp
  4572 000036DC 4883C718                	add rdi, 24
  4573 000036E0 BE04000000              	mov rsi, 4
  4574                                  .L_lambda_opt_stack_shrink_loop_0054:
  4575 000036E5 4883FE00                	cmp rsi,0
  4576 000036E9 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0054
  4577 000036EB 488B0F                  	mov rcx, qword [rdi]
  4578 000036EE 48890B                  	mov [rbx], rcx
  4579 000036F1 48FFCE                  	dec rsi
  4580 000036F4 4883EB08                	sub rbx, 8
  4581 000036F8 4883EF08                	sub rdi, 8
  4582 000036FC EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0054
  4583                                  .L_lambda_opt_stack_shrink_loop_exit_0054:
  4584 000036FE 4883C308                	add rbx, 8
  4585 00003702 4889DC                  	mov rsp, rbx
  4586                                  .L_lambda_opt_stack_adjusted_001c:
  4587 00003705 C8000000                	enter 0, 0
  4588 00003709 48B8-                   	mov rax, L_constants + 23
  4588 0000370B [1700000000000000] 
  4589 00003713 50                      	push rax
  4590 00003714 6A01                    	push 1
  4591 00003716 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4592 0000371B E8BDC20000              	call malloc
  4593 00003720 50                      	push rax
  4594 00003721 BF10000000              	mov rdi, 8 * 2	; new rib
  4595 00003726 E8B2C20000              	call malloc
  4596 0000372B 50                      	push rax
  4597 0000372C BF10000000              	mov rdi, 8 * 2	; extended env
  4598 00003731 E8A7C20000              	call malloc
  4599 00003736 488B7D10                	mov rdi, ENV
  4600 0000373A BE00000000              	mov rsi, 0
  4601 0000373F BA01000000              	mov rdx, 1
  4602                                  .L_lambda_simple_env_loop_00c2:	; ext_env[i + 1] <-- env[i]
  4603 00003744 4883FE01                	cmp rsi, 1
  4604 00003748 7410                    	je .L_lambda_simple_env_end_00c2
  4605 0000374A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4606 0000374E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4607 00003752 48FFC6                  	inc rsi
  4608 00003755 48FFC2                  	inc rdx
  4609 00003758 EBEA                    	jmp .L_lambda_simple_env_loop_00c2
  4610                                  .L_lambda_simple_env_end_00c2:
  4611 0000375A 5B                      	pop rbx
  4612 0000375B BE00000000              	mov rsi, 0
  4613                                  .L_lambda_simple_params_loop_00c2:	; copy params
  4614 00003760 4883FE02                	cmp rsi, 2
  4615 00003764 740E                    	je .L_lambda_simple_params_end_00c2
  4616 00003766 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4617 0000376B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4618 0000376F 48FFC6                  	inc rsi
  4619 00003772 EBEC                    	jmp .L_lambda_simple_params_loop_00c2
  4620                                  .L_lambda_simple_params_end_00c2:
  4621 00003774 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4622 00003777 4889C3                  	mov rbx, rax
  4623 0000377A 58                      	pop rax
  4624 0000377B C60005                  	mov byte [rax], T_closure
  4625 0000377E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4626 00003782 48C74009[8F370000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c2
  4627 0000378A E94F020000              	jmp .L_lambda_simple_end_00c2
  4628                                  .L_lambda_simple_code_00c2:	; lambda-simple body
  4629 0000378F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4630 00003795 740B                    	je .L_lambda_simple_arity_check_ok_00c2
  4631 00003797 FF742410                	push qword [rsp + 8 * 2]
  4632 0000379B 6A01                    	push 1
  4633 0000379D E9F4C10000              	jmp L_error_incorrect_arity_simple
  4634                                  .L_lambda_simple_arity_check_ok_00c2:
  4635 000037A2 C8000000                	enter 0, 0
  4636 000037A6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4637 000037AA 4889C2                  	mov rdx, rax
  4638 000037AD BF08000000              	mov rdi, 8
  4639 000037B2 E826C20000              	call malloc
  4640 000037B7 488910                  	mov qword[rax], rdx
  4641 000037BA 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4642 000037BE 48B8-                   	mov rax, sob_void
  4642 000037C0 [0000000000000000] 
  4643                                  
  4644 000037C8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4645 000037CD E80BC20000              	call malloc
  4646 000037D2 50                      	push rax
  4647 000037D3 BF08000000              	mov rdi, 8 * 1	; new rib
  4648 000037D8 E800C20000              	call malloc
  4649 000037DD 50                      	push rax
  4650 000037DE BF18000000              	mov rdi, 8 * 3	; extended env
  4651 000037E3 E8F5C10000              	call malloc
  4652 000037E8 488B7D10                	mov rdi, ENV
  4653 000037EC BE00000000              	mov rsi, 0
  4654 000037F1 BA01000000              	mov rdx, 1
  4655                                  .L_lambda_simple_env_loop_00c3:	; ext_env[i + 1] <-- env[i]
  4656 000037F6 4883FE02                	cmp rsi, 2
  4657 000037FA 7410                    	je .L_lambda_simple_env_end_00c3
  4658 000037FC 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4659 00003800 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4660 00003804 48FFC6                  	inc rsi
  4661 00003807 48FFC2                  	inc rdx
  4662 0000380A EBEA                    	jmp .L_lambda_simple_env_loop_00c3
  4663                                  .L_lambda_simple_env_end_00c3:
  4664 0000380C 5B                      	pop rbx
  4665 0000380D BE00000000              	mov rsi, 0
  4666                                  .L_lambda_simple_params_loop_00c3:	; copy params
  4667 00003812 4883FE01                	cmp rsi, 1
  4668 00003816 740E                    	je .L_lambda_simple_params_end_00c3
  4669 00003818 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4670 0000381D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4671 00003821 48FFC6                  	inc rsi
  4672 00003824 EBEC                    	jmp .L_lambda_simple_params_loop_00c3
  4673                                  .L_lambda_simple_params_end_00c3:
  4674 00003826 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4675 00003829 4889C3                  	mov rbx, rax
  4676 0000382C 58                      	pop rax
  4677 0000382D C60005                  	mov byte [rax], T_closure
  4678 00003830 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4679 00003834 48C74009[41380000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c3
  4680 0000383C E935010000              	jmp .L_lambda_simple_end_00c3
  4681                                  .L_lambda_simple_code_00c3:	; lambda-simple body
  4682 00003841 48837C241001            	cmp qword [rsp + 8 * 2], 1
  4683 00003847 740B                    	je .L_lambda_simple_arity_check_ok_00c3
  4684 00003849 FF742410                	push qword [rsp + 8 * 2]
  4685 0000384D 6A01                    	push 1
  4686 0000384F E942C10000              	jmp L_error_incorrect_arity_simple
  4687                                  .L_lambda_simple_arity_check_ok_00c3:
  4688 00003854 C8000000                	enter 0, 0
  4689 00003858 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4690 0000385C 50                      	push rax
  4691 0000385D 6A01                    	push 1
  4692 0000385F 488B0425[80000000]      	mov rax, qword [free_var_16]
  4693                                  	assert_closure(rax)
    42 00003867 803805              <1>  cmp byte [%1], %2
    43 0000386A 0F8561D90000        <1>  jne L_error_incorrect_type
  4694 00003870 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4695 00003873 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4696 00003876 50                      	push rax
  4697 00003877 6A01                    	push 1
  4698 00003879 488B0425[00000000]      	mov rax, qword [free_var_0]
  4699                                  	assert_closure(rax)
    42 00003881 803805              <1>  cmp byte [%1], %2
    43 00003884 0F8547D90000        <1>  jne L_error_incorrect_type
  4700 0000388A FF7001                  	push SOB_CLOSURE_ENV(rax)
  4701 0000388D FF5009                  	call SOB_CLOSURE_CODE(rax)
  4702 00003890 483D[02000000]          	cmp rax, sob_boolean_false
  4703 00003896 0F85D6000000            	jne .L_or_end_000f
  4704 0000389C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4705 000038A0 50                      	push rax
  4706 000038A1 488B0425[80000000]      	mov rax, qword [free_var_16]
  4707 000038A9 50                      	push rax
  4708 000038AA 6A02                    	push 2
  4709 000038AC 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4710                                  	assert_closure(rax)
    42 000038B4 803805              <1>  cmp byte [%1], %2
    43 000038B7 0F8514D90000        <1>  jne L_error_incorrect_type
  4711 000038BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  4712 000038C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4713 000038C3 50                      	push rax
  4714 000038C4 488B4510                	mov rax, qword [rbp + 8 * 2]
  4715 000038C8 488B4008                	mov rax, qword [rax + 8 * 1]
  4716 000038CC 488B00                  	mov rax, qword [rax + 8 * 0]
  4717 000038CF 50                      	push rax
  4718 000038D0 6A02                    	push 2
  4719 000038D2 488B0425[C8020000]      	mov rax, qword [free_var_89]
  4720                                  	assert_closure(rax)
    42 000038DA 803805              <1>  cmp byte [%1], %2
    43 000038DD 0F85EED80000        <1>  jne L_error_incorrect_type
  4721 000038E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4722 000038E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4723 000038E9 483D[02000000]          	cmp rax, sob_boolean_false
  4724 000038EF 7477                              	je .L_if_else_0065
  4725 000038F1 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  4726 000038F5 50                      	push rax
  4727 000038F6 488B0425[88000000]      	mov rax, qword [free_var_17]
  4728 000038FE 50                      	push rax
  4729 000038FF 6A02                    	push 2
  4730 00003901 488B0425[D8020000]      	mov rax, qword [free_var_91]
  4731                                  	assert_closure(rax)
    42 00003909 803805              <1>  cmp byte [%1], %2
    43 0000390C 0F85BFD80000        <1>  jne L_error_incorrect_type
  4732 00003912 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4733 00003915 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4734 00003918 50                      	push rax
  4735 00003919 6A01                    	push 1
  4736 0000391B 488B4510                	mov rax, qword [rbp + 8 * 2]
  4737 0000391F 488B00                  	mov rax, qword [rax + 8 * 0]
  4738 00003922 488B00                  	mov rax, qword [rax + 8 * 0]
  4739 00003925 488B00                  	mov rax, qword [rax]
  4740                                  	assert_closure(rax)
    42 00003928 803805              <1>  cmp byte [%1], %2
    43 0000392B 0F85A0D80000        <1>  jne L_error_incorrect_type
  4741 00003931 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4742 00003934 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4743 00003937 FF7500                  	push qword [rbp] ; same the old rbp
  4744 0000393A BA04000000              	mov rdx, 1 + 3
  4745 0000393F 488B4D00                	mov rcx, [rbp]
  4746 00003943 4889EF                  	mov rdi, rbp
  4747                                  .L_tc_recycle_frame_loop_00dd:
  4748 00003946 4883FA00                	cmp rdx, 0
  4749 0000394A 7413                    	je .L_tc_recycle_frame_done_00dd
  4750 0000394C 4883E908                	sub rcx, 8
  4751 00003950 4883EF08                	sub rdi, 8
  4752 00003954 488B37                  	mov rsi, [rdi]
  4753 00003957 488931                  	mov qword [rcx], rsi
  4754 0000395A 48FFCA                  	dec rdx
  4755 0000395D EBE7                    	jmp .L_tc_recycle_frame_loop_00dd
  4756                                  .L_tc_recycle_frame_done_00dd:
  4757 0000395F 5D                      	pop rbp ; restore the old rbp
  4758 00003960 4889CC                  	mov rsp, rcx
  4759 00003963 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4760 00003966 EB0A                    	jmp .L_if_end_0065
  4761                                            .L_if_else_0065:
  4762 00003968 48B8-                             	mov rax, L_constants + 2
  4762 0000396A [0200000000000000] 
  4763                                  .L_if_end_0065:
  4764                                  .L_or_end_000f:
  4765 00003972 C9                      	leave
  4766 00003973 C21800                  	ret 8 * (2 + 1)
  4767                                  .L_lambda_simple_end_00c3:	; new closure is in rax
  4768 00003976 50                      	push rax
  4769 00003977 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4770 0000397B 8F00                    	pop qword [rax]
  4771 0000397D 48B8-                   	mov rax, sob_void
  4771 0000397F [0000000000000000] 
  4772                                  
  4773 00003987 488B4510                	mov rax, qword [rbp + 8 * 2]
  4774 0000398B 488B00                  	mov rax, qword [rax + 8 * 0]
  4775 0000398E 488B4008                	mov rax, qword [rax + 8 * 1]
  4776 00003992 50                      	push rax
  4777 00003993 6A01                    	push 1
  4778 00003995 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4779 00003999 488B00                  	mov rax, qword [rax]
  4780                                  	assert_closure(rax)
    42 0000399C 803805              <1>  cmp byte [%1], %2
    43 0000399F 0F852CD80000        <1>  jne L_error_incorrect_type
  4781 000039A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4782 000039A8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4783 000039AB FF7500                  	push qword [rbp] ; same the old rbp
  4784 000039AE BA04000000              	mov rdx, 1 + 3
  4785 000039B3 488B4D00                	mov rcx, [rbp]
  4786 000039B7 4889EF                  	mov rdi, rbp
  4787                                  .L_tc_recycle_frame_loop_00de:
  4788 000039BA 4883FA00                	cmp rdx, 0
  4789 000039BE 7413                    	je .L_tc_recycle_frame_done_00de
  4790 000039C0 4883E908                	sub rcx, 8
  4791 000039C4 4883EF08                	sub rdi, 8
  4792 000039C8 488B37                  	mov rsi, [rdi]
  4793 000039CB 488931                  	mov qword [rcx], rsi
  4794 000039CE 48FFCA                  	dec rdx
  4795 000039D1 EBE7                    	jmp .L_tc_recycle_frame_loop_00de
  4796                                  .L_tc_recycle_frame_done_00de:
  4797 000039D3 5D                      	pop rbp ; restore the old rbp
  4798 000039D4 4889CC                  	mov rsp, rcx
  4799 000039D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4800 000039DA C9                      	leave
  4801 000039DB C21800                  	ret 8 * (2 + 1)
  4802                                  .L_lambda_simple_end_00c2:	; new closure is in rax
  4803                                  	assert_closure(rax)
    42 000039DE 803805              <1>  cmp byte [%1], %2
    43 000039E1 0F85EAD70000        <1>  jne L_error_incorrect_type
  4804 000039E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4805 000039EA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4806 000039ED FF7500                  	push qword [rbp] ; same the old rbp
  4807 000039F0 BA04000000              	mov rdx, 1 + 3
  4808 000039F5 488B4D00                	mov rcx, [rbp]
  4809 000039F9 4889EF                  	mov rdi, rbp
  4810                                  .L_tc_recycle_frame_loop_00dc:
  4811 000039FC 4883FA00                	cmp rdx, 0
  4812 00003A00 7413                    	je .L_tc_recycle_frame_done_00dc
  4813 00003A02 4883E908                	sub rcx, 8
  4814 00003A06 4883EF08                	sub rdi, 8
  4815 00003A0A 488B37                  	mov rsi, [rdi]
  4816 00003A0D 488931                  	mov qword [rcx], rsi
  4817 00003A10 48FFCA                  	dec rdx
  4818 00003A13 EBE7                    	jmp .L_tc_recycle_frame_loop_00dc
  4819                                  .L_tc_recycle_frame_done_00dc:
  4820 00003A15 5D                      	pop rbp ; restore the old rbp
  4821 00003A16 4889CC                  	mov rsp, rcx
  4822 00003A19 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  4823 00003A1C C9                      	leave
  4824 00003A1D C22000                  	ret 8 * (2 + 2)
  4825                                  .L_lambda_opt_end_001c:	; new closure is in rax
  4826 00003A20 48890425[E0020000]      	mov qword [free_var_92], rax
  4827 00003A28 48B8-                   	mov rax, sob_void
  4827 00003A2A [0000000000000000] 
  4828                                  
  4829 00003A32 4889C7                  	mov rdi, rax
  4830 00003A35 E8B4BF0000              	call print_sexpr_if_not_void
  4831                                  
  4832 00003A3A 48B8-                   	mov rax, L_constants + 23
  4832 00003A3C [1700000000000000] 
  4833 00003A44 50                      	push rax
  4834 00003A45 48B8-                   	mov rax, L_constants + 23
  4834 00003A47 [1700000000000000] 
  4835 00003A4F 50                      	push rax
  4836 00003A50 6A02                    	push 2
  4837 00003A52 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4838 00003A57 E881BF0000              	call malloc
  4839 00003A5C 50                      	push rax
  4840 00003A5D BF00000000              	mov rdi, 8 * 0	; new rib
  4841 00003A62 E876BF0000              	call malloc
  4842 00003A67 50                      	push rax
  4843 00003A68 BF08000000              	mov rdi, 8 * 1	; extended env
  4844 00003A6D E86BBF0000              	call malloc
  4845 00003A72 488B7D10                	mov rdi, ENV
  4846 00003A76 BE00000000              	mov rsi, 0
  4847 00003A7B BA01000000              	mov rdx, 1
  4848                                  .L_lambda_simple_env_loop_00c4:	; ext_env[i + 1] <-- env[i]
  4849 00003A80 4883FE00                	cmp rsi, 0
  4850 00003A84 7410                    	je .L_lambda_simple_env_end_00c4
  4851 00003A86 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4852 00003A8A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4853 00003A8E 48FFC6                  	inc rsi
  4854 00003A91 48FFC2                  	inc rdx
  4855 00003A94 EBEA                    	jmp .L_lambda_simple_env_loop_00c4
  4856                                  .L_lambda_simple_env_end_00c4:
  4857 00003A96 5B                      	pop rbx
  4858 00003A97 BE00000000              	mov rsi, 0
  4859                                  .L_lambda_simple_params_loop_00c4:	; copy params
  4860 00003A9C 4883FE00                	cmp rsi, 0
  4861 00003AA0 740E                    	je .L_lambda_simple_params_end_00c4
  4862 00003AA2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4863 00003AA7 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4864 00003AAB 48FFC6                  	inc rsi
  4865 00003AAE EBEC                    	jmp .L_lambda_simple_params_loop_00c4
  4866                                  .L_lambda_simple_params_end_00c4:
  4867 00003AB0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4868 00003AB3 4889C3                  	mov rbx, rax
  4869 00003AB6 58                      	pop rax
  4870 00003AB7 C60005                  	mov byte [rax], T_closure
  4871 00003ABA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4872 00003ABE 48C74009[CB3A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c4
  4873 00003AC6 E9B0050000              	jmp .L_lambda_simple_end_00c4
  4874                                  .L_lambda_simple_code_00c4:	; lambda-simple body
  4875 00003ACB 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4876 00003AD1 740B                    	je .L_lambda_simple_arity_check_ok_00c4
  4877 00003AD3 FF742410                	push qword [rsp + 8 * 2]
  4878 00003AD7 6A02                    	push 2
  4879 00003AD9 E9B8BE0000              	jmp L_error_incorrect_arity_simple
  4880                                  .L_lambda_simple_arity_check_ok_00c4:
  4881 00003ADE C8000000                	enter 0, 0
  4882 00003AE2 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4883 00003AE6 4889C2                  	mov rdx, rax
  4884 00003AE9 BF08000000              	mov rdi, 8
  4885 00003AEE E8EABE0000              	call malloc
  4886 00003AF3 488910                  	mov qword[rax], rdx
  4887 00003AF6 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  4888 00003AFA 48B8-                   	mov rax, sob_void
  4888 00003AFC [0000000000000000] 
  4889                                  
  4890 00003B04 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4891 00003B08 4889C2                  	mov rdx, rax
  4892 00003B0B BF08000000              	mov rdi, 8
  4893 00003B10 E8C8BE0000              	call malloc
  4894 00003B15 488910                  	mov qword[rax], rdx
  4895 00003B18 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  4896 00003B1C 48B8-                   	mov rax, sob_void
  4896 00003B1E [0000000000000000] 
  4897                                  
  4898 00003B26 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  4899 00003B2B E8ADBE0000              	call malloc
  4900 00003B30 50                      	push rax
  4901 00003B31 BF10000000              	mov rdi, 8 * 2	; new rib
  4902 00003B36 E8A2BE0000              	call malloc
  4903 00003B3B 50                      	push rax
  4904 00003B3C BF10000000              	mov rdi, 8 * 2	; extended env
  4905 00003B41 E897BE0000              	call malloc
  4906 00003B46 488B7D10                	mov rdi, ENV
  4907 00003B4A BE00000000              	mov rsi, 0
  4908 00003B4F BA01000000              	mov rdx, 1
  4909                                  .L_lambda_simple_env_loop_00c5:	; ext_env[i + 1] <-- env[i]
  4910 00003B54 4883FE01                	cmp rsi, 1
  4911 00003B58 7410                    	je .L_lambda_simple_env_end_00c5
  4912 00003B5A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  4913 00003B5E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  4914 00003B62 48FFC6                  	inc rsi
  4915 00003B65 48FFC2                  	inc rdx
  4916 00003B68 EBEA                    	jmp .L_lambda_simple_env_loop_00c5
  4917                                  .L_lambda_simple_env_end_00c5:
  4918 00003B6A 5B                      	pop rbx
  4919 00003B6B BE00000000              	mov rsi, 0
  4920                                  .L_lambda_simple_params_loop_00c5:	; copy params
  4921 00003B70 4883FE02                	cmp rsi, 2
  4922 00003B74 740E                    	je .L_lambda_simple_params_end_00c5
  4923 00003B76 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  4924 00003B7B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  4925 00003B7F 48FFC6                  	inc rsi
  4926 00003B82 EBEC                    	jmp .L_lambda_simple_params_loop_00c5
  4927                                  .L_lambda_simple_params_end_00c5:
  4928 00003B84 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  4929 00003B87 4889C3                  	mov rbx, rax
  4930 00003B8A 58                      	pop rax
  4931 00003B8B C60005                  	mov byte [rax], T_closure
  4932 00003B8E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  4933 00003B92 48C74009[9F3B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c5
  4934 00003B9A E910010000              	jmp .L_lambda_simple_end_00c5
  4935                                  .L_lambda_simple_code_00c5:	; lambda-simple body
  4936 00003B9F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  4937 00003BA5 740B                    	je .L_lambda_simple_arity_check_ok_00c5
  4938 00003BA7 FF742410                	push qword [rsp + 8 * 2]
  4939 00003BAB 6A02                    	push 2
  4940 00003BAD E9E4BD0000              	jmp L_error_incorrect_arity_simple
  4941                                  .L_lambda_simple_arity_check_ok_00c5:
  4942 00003BB2 C8000000                	enter 0, 0
  4943 00003BB6 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4944 00003BBA 50                      	push rax
  4945 00003BBB 6A01                    	push 1
  4946 00003BBD 488B0425[00000000]      	mov rax, qword [free_var_0]
  4947                                  	assert_closure(rax)
    42 00003BC5 803805              <1>  cmp byte [%1], %2
    43 00003BC8 0F8503D60000        <1>  jne L_error_incorrect_type
  4948 00003BCE FF7001                  	push SOB_CLOSURE_ENV(rax)
  4949 00003BD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4950 00003BD4 483D[02000000]          	cmp rax, sob_boolean_false
  4951 00003BDA 740F                              	je .L_if_else_0066
  4952 00003BDC 48B8-                             	mov rax, L_constants + 1
  4952 00003BDE [0100000000000000] 
  4953 00003BE6 E9C0000000              	jmp .L_if_end_0066
  4954                                            .L_if_else_0066:
  4955 00003BEB 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  4956 00003BEF 50                      	push rax
  4957 00003BF0 6A01                    	push 1
  4958 00003BF2 488B0425[88000000]      	mov rax, qword [free_var_17]
  4959                                  	assert_closure(rax)
    42 00003BFA 803805              <1>  cmp byte [%1], %2
    43 00003BFD 0F85CED50000        <1>  jne L_error_incorrect_type
  4960 00003C03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4961 00003C06 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4962 00003C09 50                      	push rax
  4963 00003C0A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4964 00003C0E 50                      	push rax
  4965 00003C0F 6A02                    	push 2
  4966 00003C11 488B4510                	mov rax, qword [rbp + 8 * 2]
  4967 00003C15 488B00                  	mov rax, qword [rax + 8 * 0]
  4968 00003C18 488B00                  	mov rax, qword [rax + 8 * 0]
  4969 00003C1B 488B00                  	mov rax, qword [rax]
  4970                                  	assert_closure(rax)
    42 00003C1E 803805              <1>  cmp byte [%1], %2
    43 00003C21 0F85AAD50000        <1>  jne L_error_incorrect_type
  4971 00003C27 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4972 00003C2A FF5009                  	call SOB_CLOSURE_CODE(rax)
  4973 00003C2D 50                      	push rax
  4974 00003C2E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  4975 00003C32 50                      	push rax
  4976 00003C33 6A01                    	push 1
  4977 00003C35 488B0425[80000000]      	mov rax, qword [free_var_16]
  4978                                  	assert_closure(rax)
    42 00003C3D 803805              <1>  cmp byte [%1], %2
    43 00003C40 0F858BD50000        <1>  jne L_error_incorrect_type
  4979 00003C46 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4980 00003C49 FF5009                  	call SOB_CLOSURE_CODE(rax)
  4981 00003C4C 50                      	push rax
  4982 00003C4D 6A01                    	push 1
  4983 00003C4F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  4984                                  	assert_closure(rax)
    42 00003C53 803805              <1>  cmp byte [%1], %2
    43 00003C56 0F8575D50000        <1>  jne L_error_incorrect_type
  4985 00003C5C FF7001                  	push SOB_CLOSURE_ENV(rax)
  4986 00003C5F FF5009                  	call SOB_CLOSURE_CODE(rax)
  4987 00003C62 50                      	push rax
  4988 00003C63 6A02                    	push 2
  4989 00003C65 488B0425[68000000]      	mov rax, qword [free_var_13]
  4990                                  	assert_closure(rax)
    42 00003C6D 803805              <1>  cmp byte [%1], %2
    43 00003C70 0F855BD50000        <1>  jne L_error_incorrect_type
  4991 00003C76 FF7001                  	push SOB_CLOSURE_ENV(rax)
  4992 00003C79 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  4993 00003C7C FF7500                  	push qword [rbp] ; same the old rbp
  4994 00003C7F BA05000000              	mov rdx, 2 + 3
  4995 00003C84 488B4D00                	mov rcx, [rbp]
  4996 00003C88 4889EF                  	mov rdi, rbp
  4997                                  .L_tc_recycle_frame_loop_00df:
  4998 00003C8B 4883FA00                	cmp rdx, 0
  4999 00003C8F 7413                    	je .L_tc_recycle_frame_done_00df
  5000 00003C91 4883E908                	sub rcx, 8
  5001 00003C95 4883EF08                	sub rdi, 8
  5002 00003C99 488B37                  	mov rsi, [rdi]
  5003 00003C9C 488931                  	mov qword [rcx], rsi
  5004 00003C9F 48FFCA                  	dec rdx
  5005 00003CA2 EBE7                    	jmp .L_tc_recycle_frame_loop_00df
  5006                                  .L_tc_recycle_frame_done_00df:
  5007 00003CA4 5D                      	pop rbp ; restore the old rbp
  5008 00003CA5 4889CC                  	mov rsp, rcx
  5009 00003CA8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5010                                  .L_if_end_0066:
  5011 00003CAB C9                      	leave
  5012 00003CAC C22000                  	ret 8 * (2 + 2)
  5013                                  .L_lambda_simple_end_00c5:	; new closure is in rax
  5014 00003CAF 50                      	push rax
  5015 00003CB0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5016 00003CB4 8F00                    	pop qword [rax]
  5017 00003CB6 48B8-                   	mov rax, sob_void
  5017 00003CB8 [0000000000000000] 
  5018                                  
  5019 00003CC0 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5020 00003CC5 E813BD0000              	call malloc
  5021 00003CCA 50                      	push rax
  5022 00003CCB BF10000000              	mov rdi, 8 * 2	; new rib
  5023 00003CD0 E808BD0000              	call malloc
  5024 00003CD5 50                      	push rax
  5025 00003CD6 BF10000000              	mov rdi, 8 * 2	; extended env
  5026 00003CDB E8FDBC0000              	call malloc
  5027 00003CE0 488B7D10                	mov rdi, ENV
  5028 00003CE4 BE00000000              	mov rsi, 0
  5029 00003CE9 BA01000000              	mov rdx, 1
  5030                                  .L_lambda_simple_env_loop_00c6:	; ext_env[i + 1] <-- env[i]
  5031 00003CEE 4883FE01                	cmp rsi, 1
  5032 00003CF2 7410                    	je .L_lambda_simple_env_end_00c6
  5033 00003CF4 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5034 00003CF8 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5035 00003CFC 48FFC6                  	inc rsi
  5036 00003CFF 48FFC2                  	inc rdx
  5037 00003D02 EBEA                    	jmp .L_lambda_simple_env_loop_00c6
  5038                                  .L_lambda_simple_env_end_00c6:
  5039 00003D04 5B                      	pop rbx
  5040 00003D05 BE00000000              	mov rsi, 0
  5041                                  .L_lambda_simple_params_loop_00c6:	; copy params
  5042 00003D0A 4883FE02                	cmp rsi, 2
  5043 00003D0E 740E                    	je .L_lambda_simple_params_end_00c6
  5044 00003D10 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5045 00003D15 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5046 00003D19 48FFC6                  	inc rsi
  5047 00003D1C EBEC                    	jmp .L_lambda_simple_params_loop_00c6
  5048                                  .L_lambda_simple_params_end_00c6:
  5049 00003D1E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5050 00003D21 4889C3                  	mov rbx, rax
  5051 00003D24 58                      	pop rax
  5052 00003D25 C60005                  	mov byte [rax], T_closure
  5053 00003D28 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5054 00003D2C 48C74009[393D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c6
  5055 00003D34 E950010000              	jmp .L_lambda_simple_end_00c6
  5056                                  .L_lambda_simple_code_00c6:	; lambda-simple body
  5057 00003D39 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5058 00003D3F 740B                    	je .L_lambda_simple_arity_check_ok_00c6
  5059 00003D41 FF742410                	push qword [rsp + 8 * 2]
  5060 00003D45 6A02                    	push 2
  5061 00003D47 E94ABC0000              	jmp L_error_incorrect_arity_simple
  5062                                  .L_lambda_simple_arity_check_ok_00c6:
  5063 00003D4C C8000000                	enter 0, 0
  5064 00003D50 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5065 00003D54 50                      	push rax
  5066 00003D55 6A01                    	push 1
  5067 00003D57 488B0425[80000000]      	mov rax, qword [free_var_16]
  5068                                  	assert_closure(rax)
    42 00003D5F 803805              <1>  cmp byte [%1], %2
    43 00003D62 0F8569D40000        <1>  jne L_error_incorrect_type
  5069 00003D68 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5070 00003D6B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5071 00003D6E 50                      	push rax
  5072 00003D6F 6A01                    	push 1
  5073 00003D71 488B0425[00000000]      	mov rax, qword [free_var_0]
  5074                                  	assert_closure(rax)
    42 00003D79 803805              <1>  cmp byte [%1], %2
    43 00003D7C 0F854FD40000        <1>  jne L_error_incorrect_type
  5075 00003D82 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5076 00003D85 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5077 00003D88 483D[02000000]          	cmp rax, sob_boolean_false
  5078 00003D8E 740F                              	je .L_if_else_0067
  5079 00003D90 48B8-                             	mov rax, L_constants + 1
  5079 00003D92 [0100000000000000] 
  5080 00003D9A E9E6000000              	jmp .L_if_end_0067
  5081                                            .L_if_else_0067:
  5082 00003D9F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5083 00003DA3 50                      	push rax
  5084 00003DA4 488B0425[88000000]      	mov rax, qword [free_var_17]
  5085 00003DAC 50                      	push rax
  5086 00003DAD 6A02                    	push 2
  5087 00003DAF 488B4510                	mov rax, qword [rbp + 8 * 2]
  5088 00003DB3 488B00                  	mov rax, qword [rax + 8 * 0]
  5089 00003DB6 488B00                  	mov rax, qword [rax + 8 * 0]
  5090 00003DB9 488B00                  	mov rax, qword [rax]
  5091                                  	assert_closure(rax)
    42 00003DBC 803805              <1>  cmp byte [%1], %2
    43 00003DBF 0F850CD40000        <1>  jne L_error_incorrect_type
  5092 00003DC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5093 00003DC8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5094 00003DCB 50                      	push rax
  5095 00003DCC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5096 00003DD0 50                      	push rax
  5097 00003DD1 6A02                    	push 2
  5098 00003DD3 488B4510                	mov rax, qword [rbp + 8 * 2]
  5099 00003DD7 488B00                  	mov rax, qword [rax + 8 * 0]
  5100 00003DDA 488B4008                	mov rax, qword [rax + 8 * 1]
  5101 00003DDE 488B00                  	mov rax, qword [rax]
  5102                                  	assert_closure(rax)
    42 00003DE1 803805              <1>  cmp byte [%1], %2
    43 00003DE4 0F85E7D30000        <1>  jne L_error_incorrect_type
  5103 00003DEA FF7001                  	push SOB_CLOSURE_ENV(rax)
  5104 00003DED FF5009                  	call SOB_CLOSURE_CODE(rax)
  5105 00003DF0 50                      	push rax
  5106 00003DF1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5107 00003DF5 50                      	push rax
  5108 00003DF6 488B0425[80000000]      	mov rax, qword [free_var_16]
  5109 00003DFE 50                      	push rax
  5110 00003DFF 6A02                    	push 2
  5111 00003E01 488B4510                	mov rax, qword [rbp + 8 * 2]
  5112 00003E05 488B00                  	mov rax, qword [rax + 8 * 0]
  5113 00003E08 488B00                  	mov rax, qword [rax + 8 * 0]
  5114 00003E0B 488B00                  	mov rax, qword [rax]
  5115                                  	assert_closure(rax)
    42 00003E0E 803805              <1>  cmp byte [%1], %2
    43 00003E11 0F85BAD30000        <1>  jne L_error_incorrect_type
  5116 00003E17 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5117 00003E1A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5118 00003E1D 50                      	push rax
  5119 00003E1E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5120 00003E22 50                      	push rax
  5121 00003E23 6A02                    	push 2
  5122 00003E25 488B0425[C8020000]      	mov rax, qword [free_var_89]
  5123                                  	assert_closure(rax)
    42 00003E2D 803805              <1>  cmp byte [%1], %2
    43 00003E30 0F859BD30000        <1>  jne L_error_incorrect_type
  5124 00003E36 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5125 00003E39 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5126 00003E3C 50                      	push rax
  5127 00003E3D 6A02                    	push 2
  5128 00003E3F 488B0425[68000000]      	mov rax, qword [free_var_13]
  5129                                  	assert_closure(rax)
    42 00003E47 803805              <1>  cmp byte [%1], %2
    43 00003E4A 0F8581D30000        <1>  jne L_error_incorrect_type
  5130 00003E50 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5131 00003E53 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5132 00003E56 FF7500                  	push qword [rbp] ; same the old rbp
  5133 00003E59 BA05000000              	mov rdx, 2 + 3
  5134 00003E5E 488B4D00                	mov rcx, [rbp]
  5135 00003E62 4889EF                  	mov rdi, rbp
  5136                                  .L_tc_recycle_frame_loop_00e0:
  5137 00003E65 4883FA00                	cmp rdx, 0
  5138 00003E69 7413                    	je .L_tc_recycle_frame_done_00e0
  5139 00003E6B 4883E908                	sub rcx, 8
  5140 00003E6F 4883EF08                	sub rdi, 8
  5141 00003E73 488B37                  	mov rsi, [rdi]
  5142 00003E76 488931                  	mov qword [rcx], rsi
  5143 00003E79 48FFCA                  	dec rdx
  5144 00003E7C EBE7                    	jmp .L_tc_recycle_frame_loop_00e0
  5145                                  .L_tc_recycle_frame_done_00e0:
  5146 00003E7E 5D                      	pop rbp ; restore the old rbp
  5147 00003E7F 4889CC                  	mov rsp, rcx
  5148 00003E82 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5149                                  .L_if_end_0067:
  5150 00003E85 C9                      	leave
  5151 00003E86 C22000                  	ret 8 * (2 + 2)
  5152                                  .L_lambda_simple_end_00c6:	; new closure is in rax
  5153 00003E89 50                      	push rax
  5154 00003E8A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5155 00003E8E 8F00                    	pop qword [rax]
  5156 00003E90 48B8-                   	mov rax, sob_void
  5156 00003E92 [0000000000000000] 
  5157                                  
  5158 00003E9A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5159 00003E9F E839BB0000              	call malloc
  5160 00003EA4 50                      	push rax
  5161 00003EA5 BF10000000              	mov rdi, 8 * 2	; new rib
  5162 00003EAA E82EBB0000              	call malloc
  5163 00003EAF 50                      	push rax
  5164 00003EB0 BF10000000              	mov rdi, 8 * 2	; extended env
  5165 00003EB5 E823BB0000              	call malloc
  5166 00003EBA 488B7D10                	mov rdi, ENV
  5167 00003EBE BE00000000              	mov rsi, 0
  5168 00003EC3 BA01000000              	mov rdx, 1
  5169                                  .L_lambda_opt_env_loop_001d:	; ext_env[i + 1] <-- env[i]
  5170 00003EC8 4883FE01                	cmp rsi, 1
  5171 00003ECC 7410                    	je .L_lambda_opt_env_end_001d
  5172 00003ECE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5173 00003ED2 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5174 00003ED6 48FFC6                  	inc rsi
  5175 00003ED9 48FFC2                  	inc rdx
  5176 00003EDC EBEA                    	jmp .L_lambda_opt_env_loop_001d
  5177                                  .L_lambda_opt_env_end_001d:
  5178 00003EDE 5B                      	pop rbx
  5179 00003EDF BE00000000              	mov rsi, 0
  5180                                  .L_lambda_opt_params_loop_001d:	; copy params
  5181 00003EE4 4883FE02                	cmp rsi, 2
  5182 00003EE8 740E                    	je .L_lambda_opt_params_end_001d
  5183 00003EEA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5184 00003EEF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5185 00003EF3 48FFC6                  	inc rsi
  5186 00003EF6 EBEC                    	jmp .L_lambda_opt_params_loop_001d
  5187                                  .L_lambda_opt_params_end_001d:
  5188 00003EF8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5189 00003EFB 4889C3                  	mov rbx, rax
  5190 00003EFE 58                      	pop rax
  5191 00003EFF C60005                  	mov byte [rax], T_closure
  5192 00003F02 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5193 00003F06 48C74009[133F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001d
  5194 00003F0E E964010000              	jmp .L_lambda_opt_end_001d
  5195                                  .L_lambda_opt_code_001d:	; lambda-opt body
  5196 00003F13 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5197 00003F19 740D                    	je .L_lambda_opt_arity_check_exact_001d
  5198 00003F1B 7F43                    	jg .L_lambda_opt_arity_check_more_001d
  5199 00003F1D FF742410                	push qword [rsp + 8 * 2]
  5200 00003F21 6A01                    	push 1
  5201 00003F23 E982BA0000              	jmp L_error_incorrect_arity_opt
  5202                                  .L_lambda_opt_arity_check_exact_001d:
  5203 00003F28 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5204 00003F31 BA04000000              	mov rdx, 4
  5205 00003F36 FF3424                  	push qword [rsp]
  5206 00003F39 BE01000000              	mov rsi, 1
  5207                                  .L_lambda_opt_stack_shrink_loop_0055:
  5208 00003F3E 4839D6                  	cmp rsi, rdx
  5209 00003F41 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0055
  5210 00003F43 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  5211 00003F48 488B0B                  	mov rcx, [rbx]
  5212 00003F4B 48894BF8                	mov qword [rbx - 8], rcx
  5213 00003F4F 48FFC6                  	inc rsi
  5214 00003F52 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0055
  5215                                  .L_lambda_opt_stack_shrink_loop_exit_0055:
  5216 00003F54 48C703[01000000]        	mov qword [rbx], sob_nil
  5217 00003F5B E985000000              	jmp .L_lambda_opt_stack_adjusted_001d
  5218                                  .L_lambda_opt_arity_check_more_001d:
  5219 00003F60 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5220 00003F65 4883EA01                	sub rdx, 1
  5221 00003F69 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  5222 00003F72 BE00000000              	mov rsi, 0
  5223 00003F77 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  5224 00003F7C 48B9-                   	mov rcx, sob_nil
  5224 00003F7E [0100000000000000] 
  5225                                  .L_lambda_opt_stack_shrink_loop_0056:
  5226 00003F86 4839D6                  	cmp rsi, rdx
  5227 00003F89 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0056
  5228 00003F8B BF11000000              	mov rdi, 17 ; 1+8+8
  5229 00003F90 E848BA0000              	call malloc
  5230 00003F95 48894809                	mov SOB_PAIR_CDR(rax), rcx
  5231 00003F99 48F7DE                  	neg rsi
  5232 00003F9C 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  5233 00003FA0 48F7DE                  	neg rsi
  5234 00003FA3 48894801                	mov SOB_PAIR_CAR(rax), rcx
  5235 00003FA7 C60021                  	mov byte [rax], T_pair
  5236 00003FAA 4889C1                  	mov rcx, rax
  5237 00003FAD 48FFC6                  	inc rsi
  5238 00003FB0 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0056
  5239                                  .L_lambda_opt_stack_shrink_loop_exit_0056:
  5240 00003FB2 48890B                  	mov qword [rbx], rcx
  5241 00003FB5 4883EB08                	sub rbx, 8
  5242 00003FB9 4889E7                  	mov rdi, rsp
  5243 00003FBC 4883C718                	add rdi, 24
  5244 00003FC0 BE04000000              	mov rsi, 4
  5245                                  .L_lambda_opt_stack_shrink_loop_0057:
  5246 00003FC5 4883FE00                	cmp rsi,0
  5247 00003FC9 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0057
  5248 00003FCB 488B0F                  	mov rcx, qword [rdi]
  5249 00003FCE 48890B                  	mov [rbx], rcx
  5250 00003FD1 48FFCE                  	dec rsi
  5251 00003FD4 4883EB08                	sub rbx, 8
  5252 00003FD8 4883EF08                	sub rdi, 8
  5253 00003FDC EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0057
  5254                                  .L_lambda_opt_stack_shrink_loop_exit_0057:
  5255 00003FDE 4883C308                	add rbx, 8
  5256 00003FE2 4889DC                  	mov rsp, rbx
  5257                                  .L_lambda_opt_stack_adjusted_001d:
  5258 00003FE5 C8000000                	enter 0, 0
  5259 00003FE9 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5260 00003FED 50                      	push rax
  5261 00003FEE 6A01                    	push 1
  5262 00003FF0 488B0425[00000000]      	mov rax, qword [free_var_0]
  5263                                  	assert_closure(rax)
    42 00003FF8 803805              <1>  cmp byte [%1], %2
    43 00003FFB 0F85D0D10000        <1>  jne L_error_incorrect_type
  5264 00004001 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5265 00004004 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5266 00004007 483D[02000000]          	cmp rax, sob_boolean_false
  5267 0000400D 740C                              	je .L_if_else_0068
  5268 0000400F 48B8-                             	mov rax, L_constants + 1
  5268 00004011 [0100000000000000] 
  5269 00004019 EB58                    	jmp .L_if_end_0068
  5270                                            .L_if_else_0068:
  5271 0000401B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5272 0000401F 50                      	push rax
  5273 00004020 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5274 00004024 50                      	push rax
  5275 00004025 6A02                    	push 2
  5276 00004027 488B4510                	mov rax, qword [rbp + 8 * 2]
  5277 0000402B 488B00                  	mov rax, qword [rax + 8 * 0]
  5278 0000402E 488B4008                	mov rax, qword [rax + 8 * 1]
  5279 00004032 488B00                  	mov rax, qword [rax]
  5280                                  	assert_closure(rax)
    42 00004035 803805              <1>  cmp byte [%1], %2
    43 00004038 0F8593D10000        <1>  jne L_error_incorrect_type
  5281 0000403E FF7001                  	push SOB_CLOSURE_ENV(rax)
  5282 00004041 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5283 00004044 FF7500                  	push qword [rbp] ; same the old rbp
  5284 00004047 BA05000000              	mov rdx, 2 + 3
  5285 0000404C 488B4D00                	mov rcx, [rbp]
  5286 00004050 4889EF                  	mov rdi, rbp
  5287                                  .L_tc_recycle_frame_loop_00e1:
  5288 00004053 4883FA00                	cmp rdx, 0
  5289 00004057 7413                    	je .L_tc_recycle_frame_done_00e1
  5290 00004059 4883E908                	sub rcx, 8
  5291 0000405D 4883EF08                	sub rdi, 8
  5292 00004061 488B37                  	mov rsi, [rdi]
  5293 00004064 488931                  	mov qword [rcx], rsi
  5294 00004067 48FFCA                  	dec rdx
  5295 0000406A EBE7                    	jmp .L_tc_recycle_frame_loop_00e1
  5296                                  .L_tc_recycle_frame_done_00e1:
  5297 0000406C 5D                      	pop rbp ; restore the old rbp
  5298 0000406D 4889CC                  	mov rsp, rcx
  5299 00004070 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5300                                  .L_if_end_0068:
  5301 00004073 C9                      	leave
  5302 00004074 C22000                  	ret 8 * (2 + 2)
  5303                                  .L_lambda_opt_end_001d:	; new closure is in rax
  5304 00004077 C9                      	leave
  5305 00004078 C22000                  	ret 8 * (2 + 2)
  5306                                  .L_lambda_simple_end_00c4:	; new closure is in rax
  5307                                  	assert_closure(rax)
    42 0000407B 803805              <1>  cmp byte [%1], %2
    43 0000407E 0F854DD10000        <1>  jne L_error_incorrect_type
  5308 00004084 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5309 00004087 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5310 0000408A 48890425[D8020000]      	mov qword [free_var_91], rax
  5311 00004092 48B8-                   	mov rax, sob_void
  5311 00004094 [0000000000000000] 
  5312                                  
  5313 0000409C 4889C7                  	mov rdi, rax
  5314 0000409F E84AB90000              	call print_sexpr_if_not_void
  5315                                  
  5316 000040A4 48B8-                   	mov rax, L_constants + 23
  5316 000040A6 [1700000000000000] 
  5317 000040AE 50                      	push rax
  5318 000040AF 6A01                    	push 1
  5319 000040B1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5320 000040B6 E822B90000              	call malloc
  5321 000040BB 50                      	push rax
  5322 000040BC BF00000000              	mov rdi, 8 * 0	; new rib
  5323 000040C1 E817B90000              	call malloc
  5324 000040C6 50                      	push rax
  5325 000040C7 BF08000000              	mov rdi, 8 * 1	; extended env
  5326 000040CC E80CB90000              	call malloc
  5327 000040D1 488B7D10                	mov rdi, ENV
  5328 000040D5 BE00000000              	mov rsi, 0
  5329 000040DA BA01000000              	mov rdx, 1
  5330                                  .L_lambda_simple_env_loop_00c7:	; ext_env[i + 1] <-- env[i]
  5331 000040DF 4883FE00                	cmp rsi, 0
  5332 000040E3 7410                    	je .L_lambda_simple_env_end_00c7
  5333 000040E5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5334 000040E9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5335 000040ED 48FFC6                  	inc rsi
  5336 000040F0 48FFC2                  	inc rdx
  5337 000040F3 EBEA                    	jmp .L_lambda_simple_env_loop_00c7
  5338                                  .L_lambda_simple_env_end_00c7:
  5339 000040F5 5B                      	pop rbx
  5340 000040F6 BE00000000              	mov rsi, 0
  5341                                  .L_lambda_simple_params_loop_00c7:	; copy params
  5342 000040FB 4883FE00                	cmp rsi, 0
  5343 000040FF 740E                    	je .L_lambda_simple_params_end_00c7
  5344 00004101 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5345 00004106 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5346 0000410A 48FFC6                  	inc rsi
  5347 0000410D EBEC                    	jmp .L_lambda_simple_params_loop_00c7
  5348                                  .L_lambda_simple_params_end_00c7:
  5349 0000410F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5350 00004112 4889C3                  	mov rbx, rax
  5351 00004115 58                      	pop rax
  5352 00004116 C60005                  	mov byte [rax], T_closure
  5353 00004119 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5354 0000411D 48C74009[2A410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c7
  5355 00004125 E9A9020000              	jmp .L_lambda_simple_end_00c7
  5356                                  .L_lambda_simple_code_00c7:	; lambda-simple body
  5357 0000412A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5358 00004130 740B                    	je .L_lambda_simple_arity_check_ok_00c7
  5359 00004132 FF742410                	push qword [rsp + 8 * 2]
  5360 00004136 6A01                    	push 1
  5361 00004138 E959B80000              	jmp L_error_incorrect_arity_simple
  5362                                  .L_lambda_simple_arity_check_ok_00c7:
  5363 0000413D C8000000                	enter 0, 0
  5364 00004141 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5365 00004145 4889C2                  	mov rdx, rax
  5366 00004148 BF08000000              	mov rdi, 8
  5367 0000414D E88BB80000              	call malloc
  5368 00004152 488910                  	mov qword[rax], rdx
  5369 00004155 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5370 00004159 48B8-                   	mov rax, sob_void
  5370 0000415B [0000000000000000] 
  5371                                  
  5372 00004163 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5373 00004168 E870B80000              	call malloc
  5374 0000416D 50                      	push rax
  5375 0000416E BF08000000              	mov rdi, 8 * 1	; new rib
  5376 00004173 E865B80000              	call malloc
  5377 00004178 50                      	push rax
  5378 00004179 BF10000000              	mov rdi, 8 * 2	; extended env
  5379 0000417E E85AB80000              	call malloc
  5380 00004183 488B7D10                	mov rdi, ENV
  5381 00004187 BE00000000              	mov rsi, 0
  5382 0000418C BA01000000              	mov rdx, 1
  5383                                  .L_lambda_simple_env_loop_00c8:	; ext_env[i + 1] <-- env[i]
  5384 00004191 4883FE01                	cmp rsi, 1
  5385 00004195 7410                    	je .L_lambda_simple_env_end_00c8
  5386 00004197 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5387 0000419B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5388 0000419F 48FFC6                  	inc rsi
  5389 000041A2 48FFC2                  	inc rdx
  5390 000041A5 EBEA                    	jmp .L_lambda_simple_env_loop_00c8
  5391                                  .L_lambda_simple_env_end_00c8:
  5392 000041A7 5B                      	pop rbx
  5393 000041A8 BE00000000              	mov rsi, 0
  5394                                  .L_lambda_simple_params_loop_00c8:	; copy params
  5395 000041AD 4883FE01                	cmp rsi, 1
  5396 000041B1 740E                    	je .L_lambda_simple_params_end_00c8
  5397 000041B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5398 000041B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5399 000041BC 48FFC6                  	inc rsi
  5400 000041BF EBEC                    	jmp .L_lambda_simple_params_loop_00c8
  5401                                  .L_lambda_simple_params_end_00c8:
  5402 000041C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5403 000041C4 4889C3                  	mov rbx, rax
  5404 000041C7 58                      	pop rax
  5405 000041C8 C60005                  	mov byte [rax], T_closure
  5406 000041CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5407 000041CF 48C74009[DC410000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c8
  5408 000041D7 E9F4000000              	jmp .L_lambda_simple_end_00c8
  5409                                  .L_lambda_simple_code_00c8:	; lambda-simple body
  5410 000041DC 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5411 000041E2 740B                    	je .L_lambda_simple_arity_check_ok_00c8
  5412 000041E4 FF742410                	push qword [rsp + 8 * 2]
  5413 000041E8 6A02                    	push 2
  5414 000041EA E9A7B70000              	jmp L_error_incorrect_arity_simple
  5415                                  .L_lambda_simple_arity_check_ok_00c8:
  5416 000041EF C8000000                	enter 0, 0
  5417 000041F3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5418 000041F7 50                      	push rax
  5419 000041F8 6A01                    	push 1
  5420 000041FA 488B0425[00000000]      	mov rax, qword [free_var_0]
  5421                                  	assert_closure(rax)
    42 00004202 803805              <1>  cmp byte [%1], %2
    43 00004205 0F85C6CF0000        <1>  jne L_error_incorrect_type
  5422 0000420B FF7001                  	push SOB_CLOSURE_ENV(rax)
  5423 0000420E FF5009                  	call SOB_CLOSURE_CODE(rax)
  5424 00004211 483D[02000000]          	cmp rax, sob_boolean_false
  5425 00004217 7409                              	je .L_if_else_0069
  5426 00004219 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5427 0000421D E9AA000000              	jmp .L_if_end_0069
  5428                                            .L_if_else_0069:
  5429 00004222 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5430 00004226 50                      	push rax
  5431 00004227 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5432 0000422B 50                      	push rax
  5433 0000422C 6A01                    	push 1
  5434 0000422E 488B0425[80000000]      	mov rax, qword [free_var_16]
  5435                                  	assert_closure(rax)
    42 00004236 803805              <1>  cmp byte [%1], %2
    43 00004239 0F8592CF0000        <1>  jne L_error_incorrect_type
  5436 0000423F FF7001                  	push SOB_CLOSURE_ENV(rax)
  5437 00004242 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5438 00004245 50                      	push rax
  5439 00004246 6A02                    	push 2
  5440 00004248 488B0425[68000000]      	mov rax, qword [free_var_13]
  5441                                  	assert_closure(rax)
    42 00004250 803805              <1>  cmp byte [%1], %2
    43 00004253 0F8578CF0000        <1>  jne L_error_incorrect_type
  5442 00004259 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5443 0000425C FF5009                  	call SOB_CLOSURE_CODE(rax)
  5444 0000425F 50                      	push rax
  5445 00004260 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5446 00004264 50                      	push rax
  5447 00004265 6A01                    	push 1
  5448 00004267 488B0425[88000000]      	mov rax, qword [free_var_17]
  5449                                  	assert_closure(rax)
    42 0000426F 803805              <1>  cmp byte [%1], %2
    43 00004272 0F8559CF0000        <1>  jne L_error_incorrect_type
  5450 00004278 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5451 0000427B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5452 0000427E 50                      	push rax
  5453 0000427F 6A02                    	push 2
  5454 00004281 488B4510                	mov rax, qword [rbp + 8 * 2]
  5455 00004285 488B00                  	mov rax, qword [rax + 8 * 0]
  5456 00004288 488B00                  	mov rax, qword [rax + 8 * 0]
  5457 0000428B 488B00                  	mov rax, qword [rax]
  5458                                  	assert_closure(rax)
    42 0000428E 803805              <1>  cmp byte [%1], %2
    43 00004291 0F853ACF0000        <1>  jne L_error_incorrect_type
  5459 00004297 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5460 0000429A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5461 0000429D FF7500                  	push qword [rbp] ; same the old rbp
  5462 000042A0 BA05000000              	mov rdx, 2 + 3
  5463 000042A5 488B4D00                	mov rcx, [rbp]
  5464 000042A9 4889EF                  	mov rdi, rbp
  5465                                  .L_tc_recycle_frame_loop_00e2:
  5466 000042AC 4883FA00                	cmp rdx, 0
  5467 000042B0 7413                    	je .L_tc_recycle_frame_done_00e2
  5468 000042B2 4883E908                	sub rcx, 8
  5469 000042B6 4883EF08                	sub rdi, 8
  5470 000042BA 488B37                  	mov rsi, [rdi]
  5471 000042BD 488931                  	mov qword [rcx], rsi
  5472 000042C0 48FFCA                  	dec rdx
  5473 000042C3 EBE7                    	jmp .L_tc_recycle_frame_loop_00e2
  5474                                  .L_tc_recycle_frame_done_00e2:
  5475 000042C5 5D                      	pop rbp ; restore the old rbp
  5476 000042C6 4889CC                  	mov rsp, rcx
  5477 000042C9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5478                                  .L_if_end_0069:
  5479 000042CC C9                      	leave
  5480 000042CD C22000                  	ret 8 * (2 + 2)
  5481                                  .L_lambda_simple_end_00c8:	; new closure is in rax
  5482 000042D0 50                      	push rax
  5483 000042D1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5484 000042D5 8F00                    	pop qword [rax]
  5485 000042D7 48B8-                   	mov rax, sob_void
  5485 000042D9 [0000000000000000] 
  5486                                  
  5487 000042E1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5488 000042E6 E8F2B60000              	call malloc
  5489 000042EB 50                      	push rax
  5490 000042EC BF08000000              	mov rdi, 8 * 1	; new rib
  5491 000042F1 E8E7B60000              	call malloc
  5492 000042F6 50                      	push rax
  5493 000042F7 BF10000000              	mov rdi, 8 * 2	; extended env
  5494 000042FC E8DCB60000              	call malloc
  5495 00004301 488B7D10                	mov rdi, ENV
  5496 00004305 BE00000000              	mov rsi, 0
  5497 0000430A BA01000000              	mov rdx, 1
  5498                                  .L_lambda_simple_env_loop_00c9:	; ext_env[i + 1] <-- env[i]
  5499 0000430F 4883FE01                	cmp rsi, 1
  5500 00004313 7410                    	je .L_lambda_simple_env_end_00c9
  5501 00004315 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5502 00004319 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5503 0000431D 48FFC6                  	inc rsi
  5504 00004320 48FFC2                  	inc rdx
  5505 00004323 EBEA                    	jmp .L_lambda_simple_env_loop_00c9
  5506                                  .L_lambda_simple_env_end_00c9:
  5507 00004325 5B                      	pop rbx
  5508 00004326 BE00000000              	mov rsi, 0
  5509                                  .L_lambda_simple_params_loop_00c9:	; copy params
  5510 0000432B 4883FE01                	cmp rsi, 1
  5511 0000432F 740E                    	je .L_lambda_simple_params_end_00c9
  5512 00004331 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5513 00004336 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5514 0000433A 48FFC6                  	inc rsi
  5515 0000433D EBEC                    	jmp .L_lambda_simple_params_loop_00c9
  5516                                  .L_lambda_simple_params_end_00c9:
  5517 0000433F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5518 00004342 4889C3                  	mov rbx, rax
  5519 00004345 58                      	pop rax
  5520 00004346 C60005                  	mov byte [rax], T_closure
  5521 00004349 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5522 0000434D 48C74009[57430000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00c9
  5523 00004355 EB78                    	jmp .L_lambda_simple_end_00c9
  5524                                  .L_lambda_simple_code_00c9:	; lambda-simple body
  5525 00004357 48837C241001            	cmp qword [rsp + 8 * 2], 1
  5526 0000435D 740B                    	je .L_lambda_simple_arity_check_ok_00c9
  5527 0000435F FF742410                	push qword [rsp + 8 * 2]
  5528 00004363 6A01                    	push 1
  5529 00004365 E92CB60000              	jmp L_error_incorrect_arity_simple
  5530                                  .L_lambda_simple_arity_check_ok_00c9:
  5531 0000436A C8000000                	enter 0, 0
  5532 0000436E 48B8-                   	mov rax, L_constants + 1
  5532 00004370 [0100000000000000] 
  5533 00004378 50                      	push rax
  5534 00004379 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5535 0000437D 50                      	push rax
  5536 0000437E 6A02                    	push 2
  5537 00004380 488B4510                	mov rax, qword [rbp + 8 * 2]
  5538 00004384 488B00                  	mov rax, qword [rax + 8 * 0]
  5539 00004387 488B00                  	mov rax, qword [rax + 8 * 0]
  5540 0000438A 488B00                  	mov rax, qword [rax]
  5541                                  	assert_closure(rax)
    42 0000438D 803805              <1>  cmp byte [%1], %2
    43 00004390 0F853BCE0000        <1>  jne L_error_incorrect_type
  5542 00004396 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5543 00004399 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5544 0000439C FF7500                  	push qword [rbp] ; same the old rbp
  5545 0000439F BA05000000              	mov rdx, 2 + 3
  5546 000043A4 488B4D00                	mov rcx, [rbp]
  5547 000043A8 4889EF                  	mov rdi, rbp
  5548                                  .L_tc_recycle_frame_loop_00e3:
  5549 000043AB 4883FA00                	cmp rdx, 0
  5550 000043AF 7413                    	je .L_tc_recycle_frame_done_00e3
  5551 000043B1 4883E908                	sub rcx, 8
  5552 000043B5 4883EF08                	sub rdi, 8
  5553 000043B9 488B37                  	mov rsi, [rdi]
  5554 000043BC 488931                  	mov qword [rcx], rsi
  5555 000043BF 48FFCA                  	dec rdx
  5556 000043C2 EBE7                    	jmp .L_tc_recycle_frame_loop_00e3
  5557                                  .L_tc_recycle_frame_done_00e3:
  5558 000043C4 5D                      	pop rbp ; restore the old rbp
  5559 000043C5 4889CC                  	mov rsp, rcx
  5560 000043C8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5561 000043CB C9                      	leave
  5562 000043CC C21800                  	ret 8 * (2 + 1)
  5563                                  .L_lambda_simple_end_00c9:	; new closure is in rax
  5564 000043CF C9                      	leave
  5565 000043D0 C21800                  	ret 8 * (2 + 1)
  5566                                  .L_lambda_simple_end_00c7:	; new closure is in rax
  5567                                  	assert_closure(rax)
    42 000043D3 803805              <1>  cmp byte [%1], %2
    43 000043D6 0F85F5CD0000        <1>  jne L_error_incorrect_type
  5568 000043DC FF7001                  	push SOB_CLOSURE_ENV(rax)
  5569 000043DF FF5009                  	call SOB_CLOSURE_CODE(rax)
  5570 000043E2 48890425[E8020000]      	mov qword [free_var_93], rax
  5571 000043EA 48B8-                   	mov rax, sob_void
  5571 000043EC [0000000000000000] 
  5572                                  
  5573 000043F4 4889C7                  	mov rdi, rax
  5574 000043F7 E8F2B50000              	call print_sexpr_if_not_void
  5575                                  
  5576 000043FC 48B8-                   	mov rax, L_constants + 23
  5576 000043FE [1700000000000000] 
  5577 00004406 50                      	push rax
  5578 00004407 48B8-                   	mov rax, L_constants + 23
  5578 00004409 [1700000000000000] 
  5579 00004411 50                      	push rax
  5580 00004412 6A02                    	push 2
  5581 00004414 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5582 00004419 E8BFB50000              	call malloc
  5583 0000441E 50                      	push rax
  5584 0000441F BF00000000              	mov rdi, 8 * 0	; new rib
  5585 00004424 E8B4B50000              	call malloc
  5586 00004429 50                      	push rax
  5587 0000442A BF08000000              	mov rdi, 8 * 1	; extended env
  5588 0000442F E8A9B50000              	call malloc
  5589 00004434 488B7D10                	mov rdi, ENV
  5590 00004438 BE00000000              	mov rsi, 0
  5591 0000443D BA01000000              	mov rdx, 1
  5592                                  .L_lambda_simple_env_loop_00ca:	; ext_env[i + 1] <-- env[i]
  5593 00004442 4883FE00                	cmp rsi, 0
  5594 00004446 7410                    	je .L_lambda_simple_env_end_00ca
  5595 00004448 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5596 0000444C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5597 00004450 48FFC6                  	inc rsi
  5598 00004453 48FFC2                  	inc rdx
  5599 00004456 EBEA                    	jmp .L_lambda_simple_env_loop_00ca
  5600                                  .L_lambda_simple_env_end_00ca:
  5601 00004458 5B                      	pop rbx
  5602 00004459 BE00000000              	mov rsi, 0
  5603                                  .L_lambda_simple_params_loop_00ca:	; copy params
  5604 0000445E 4883FE00                	cmp rsi, 0
  5605 00004462 740E                    	je .L_lambda_simple_params_end_00ca
  5606 00004464 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5607 00004469 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5608 0000446D 48FFC6                  	inc rsi
  5609 00004470 EBEC                    	jmp .L_lambda_simple_params_loop_00ca
  5610                                  .L_lambda_simple_params_end_00ca:
  5611 00004472 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5612 00004475 4889C3                  	mov rbx, rax
  5613 00004478 58                      	pop rax
  5614 00004479 C60005                  	mov byte [rax], T_closure
  5615 0000447C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5616 00004480 48C74009[8D440000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ca
  5617 00004488 E975050000              	jmp .L_lambda_simple_end_00ca
  5618                                  .L_lambda_simple_code_00ca:	; lambda-simple body
  5619 0000448D 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5620 00004493 740B                    	je .L_lambda_simple_arity_check_ok_00ca
  5621 00004495 FF742410                	push qword [rsp + 8 * 2]
  5622 00004499 6A02                    	push 2
  5623 0000449B E9F6B40000              	jmp L_error_incorrect_arity_simple
  5624                                  .L_lambda_simple_arity_check_ok_00ca:
  5625 000044A0 C8000000                	enter 0, 0
  5626 000044A4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5627 000044A8 4889C2                  	mov rdx, rax
  5628 000044AB BF08000000              	mov rdi, 8
  5629 000044B0 E828B50000              	call malloc
  5630 000044B5 488910                  	mov qword[rax], rdx
  5631 000044B8 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  5632 000044BC 48B8-                   	mov rax, sob_void
  5632 000044BE [0000000000000000] 
  5633                                  
  5634 000044C6 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5635 000044CA 4889C2                  	mov rdx, rax
  5636 000044CD BF08000000              	mov rdi, 8
  5637 000044D2 E806B50000              	call malloc
  5638 000044D7 488910                  	mov qword[rax], rdx
  5639 000044DA 48894528                	mov qword [rbp + 8 * (4 + 1)], rax
  5640 000044DE 48B8-                   	mov rax, sob_void
  5640 000044E0 [0000000000000000] 
  5641                                  
  5642 000044E8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5643 000044ED E8EBB40000              	call malloc
  5644 000044F2 50                      	push rax
  5645 000044F3 BF10000000              	mov rdi, 8 * 2	; new rib
  5646 000044F8 E8E0B40000              	call malloc
  5647 000044FD 50                      	push rax
  5648 000044FE BF10000000              	mov rdi, 8 * 2	; extended env
  5649 00004503 E8D5B40000              	call malloc
  5650 00004508 488B7D10                	mov rdi, ENV
  5651 0000450C BE00000000              	mov rsi, 0
  5652 00004511 BA01000000              	mov rdx, 1
  5653                                  .L_lambda_simple_env_loop_00cb:	; ext_env[i + 1] <-- env[i]
  5654 00004516 4883FE01                	cmp rsi, 1
  5655 0000451A 7410                    	je .L_lambda_simple_env_end_00cb
  5656 0000451C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5657 00004520 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5658 00004524 48FFC6                  	inc rsi
  5659 00004527 48FFC2                  	inc rdx
  5660 0000452A EBEA                    	jmp .L_lambda_simple_env_loop_00cb
  5661                                  .L_lambda_simple_env_end_00cb:
  5662 0000452C 5B                      	pop rbx
  5663 0000452D BE00000000              	mov rsi, 0
  5664                                  .L_lambda_simple_params_loop_00cb:	; copy params
  5665 00004532 4883FE02                	cmp rsi, 2
  5666 00004536 740E                    	je .L_lambda_simple_params_end_00cb
  5667 00004538 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5668 0000453D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5669 00004541 48FFC6                  	inc rsi
  5670 00004544 EBEC                    	jmp .L_lambda_simple_params_loop_00cb
  5671                                  .L_lambda_simple_params_end_00cb:
  5672 00004546 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5673 00004549 4889C3                  	mov rbx, rax
  5674 0000454C 58                      	pop rax
  5675 0000454D C60005                  	mov byte [rax], T_closure
  5676 00004550 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5677 00004554 48C74009[61450000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cb
  5678 0000455C E9FA000000              	jmp .L_lambda_simple_end_00cb
  5679                                  .L_lambda_simple_code_00cb:	; lambda-simple body
  5680 00004561 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5681 00004567 740B                    	je .L_lambda_simple_arity_check_ok_00cb
  5682 00004569 FF742410                	push qword [rsp + 8 * 2]
  5683 0000456D 6A02                    	push 2
  5684 0000456F E922B40000              	jmp L_error_incorrect_arity_simple
  5685                                  .L_lambda_simple_arity_check_ok_00cb:
  5686 00004574 C8000000                	enter 0, 0
  5687 00004578 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5688 0000457C 50                      	push rax
  5689 0000457D 6A01                    	push 1
  5690 0000457F 488B0425[00000000]      	mov rax, qword [free_var_0]
  5691                                  	assert_closure(rax)
    42 00004587 803805              <1>  cmp byte [%1], %2
    43 0000458A 0F8541CC0000        <1>  jne L_error_incorrect_type
  5692 00004590 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5693 00004593 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5694 00004596 483D[02000000]          	cmp rax, sob_boolean_false
  5695 0000459C 7409                              	je .L_if_else_006a
  5696 0000459E 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  5697 000045A2 E9B0000000              	jmp .L_if_end_006a
  5698                                            .L_if_else_006a:
  5699 000045A7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5700 000045AB 50                      	push rax
  5701 000045AC 6A01                    	push 1
  5702 000045AE 488B0425[88000000]      	mov rax, qword [free_var_17]
  5703                                  	assert_closure(rax)
    42 000045B6 803805              <1>  cmp byte [%1], %2
    43 000045B9 0F8512CC0000        <1>  jne L_error_incorrect_type
  5704 000045BF FF7001                  	push SOB_CLOSURE_ENV(rax)
  5705 000045C2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5706 000045C5 50                      	push rax
  5707 000045C6 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5708 000045CA 50                      	push rax
  5709 000045CB 6A01                    	push 1
  5710 000045CD 488B0425[80000000]      	mov rax, qword [free_var_16]
  5711                                  	assert_closure(rax)
    42 000045D5 803805              <1>  cmp byte [%1], %2
    43 000045D8 0F85F3CB0000        <1>  jne L_error_incorrect_type
  5712 000045DE FF7001                  	push SOB_CLOSURE_ENV(rax)
  5713 000045E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5714 000045E4 50                      	push rax
  5715 000045E5 6A02                    	push 2
  5716 000045E7 488B4510                	mov rax, qword [rbp + 8 * 2]
  5717 000045EB 488B00                  	mov rax, qword [rax + 8 * 0]
  5718 000045EE 488B00                  	mov rax, qword [rax + 8 * 0]
  5719 000045F1 488B00                  	mov rax, qword [rax]
  5720                                  	assert_closure(rax)
    42 000045F4 803805              <1>  cmp byte [%1], %2
    43 000045F7 0F85D4CB0000        <1>  jne L_error_incorrect_type
  5721 000045FD FF7001                  	push SOB_CLOSURE_ENV(rax)
  5722 00004600 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5723 00004603 50                      	push rax
  5724 00004604 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5725 00004608 50                      	push rax
  5726 00004609 6A02                    	push 2
  5727 0000460B 488B4510                	mov rax, qword [rbp + 8 * 2]
  5728 0000460F 488B00                  	mov rax, qword [rax + 8 * 0]
  5729 00004612 488B4008                	mov rax, qword [rax + 8 * 1]
  5730 00004616 488B00                  	mov rax, qword [rax]
  5731                                  	assert_closure(rax)
    42 00004619 803805              <1>  cmp byte [%1], %2
    43 0000461C 0F85AFCB0000        <1>  jne L_error_incorrect_type
  5732 00004622 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5733 00004625 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5734 00004628 FF7500                  	push qword [rbp] ; same the old rbp
  5735 0000462B BA05000000              	mov rdx, 2 + 3
  5736 00004630 488B4D00                	mov rcx, [rbp]
  5737 00004634 4889EF                  	mov rdi, rbp
  5738                                  .L_tc_recycle_frame_loop_00e4:
  5739 00004637 4883FA00                	cmp rdx, 0
  5740 0000463B 7413                    	je .L_tc_recycle_frame_done_00e4
  5741 0000463D 4883E908                	sub rcx, 8
  5742 00004641 4883EF08                	sub rdi, 8
  5743 00004645 488B37                  	mov rsi, [rdi]
  5744 00004648 488931                  	mov qword [rcx], rsi
  5745 0000464B 48FFCA                  	dec rdx
  5746 0000464E EBE7                    	jmp .L_tc_recycle_frame_loop_00e4
  5747                                  .L_tc_recycle_frame_done_00e4:
  5748 00004650 5D                      	pop rbp ; restore the old rbp
  5749 00004651 4889CC                  	mov rsp, rcx
  5750 00004654 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5751                                  .L_if_end_006a:
  5752 00004657 C9                      	leave
  5753 00004658 C22000                  	ret 8 * (2 + 2)
  5754                                  .L_lambda_simple_end_00cb:	; new closure is in rax
  5755 0000465B 50                      	push rax
  5756 0000465C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5757 00004660 8F00                    	pop qword [rax]
  5758 00004662 48B8-                   	mov rax, sob_void
  5758 00004664 [0000000000000000] 
  5759                                  
  5760 0000466C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5761 00004671 E867B30000              	call malloc
  5762 00004676 50                      	push rax
  5763 00004677 BF10000000              	mov rdi, 8 * 2	; new rib
  5764 0000467C E85CB30000              	call malloc
  5765 00004681 50                      	push rax
  5766 00004682 BF10000000              	mov rdi, 8 * 2	; extended env
  5767 00004687 E851B30000              	call malloc
  5768 0000468C 488B7D10                	mov rdi, ENV
  5769 00004690 BE00000000              	mov rsi, 0
  5770 00004695 BA01000000              	mov rdx, 1
  5771                                  .L_lambda_simple_env_loop_00cc:	; ext_env[i + 1] <-- env[i]
  5772 0000469A 4883FE01                	cmp rsi, 1
  5773 0000469E 7410                    	je .L_lambda_simple_env_end_00cc
  5774 000046A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5775 000046A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5776 000046A8 48FFC6                  	inc rsi
  5777 000046AB 48FFC2                  	inc rdx
  5778 000046AE EBEA                    	jmp .L_lambda_simple_env_loop_00cc
  5779                                  .L_lambda_simple_env_end_00cc:
  5780 000046B0 5B                      	pop rbx
  5781 000046B1 BE00000000              	mov rsi, 0
  5782                                  .L_lambda_simple_params_loop_00cc:	; copy params
  5783 000046B6 4883FE02                	cmp rsi, 2
  5784 000046BA 740E                    	je .L_lambda_simple_params_end_00cc
  5785 000046BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5786 000046C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5787 000046C5 48FFC6                  	inc rsi
  5788 000046C8 EBEC                    	jmp .L_lambda_simple_params_loop_00cc
  5789                                  .L_lambda_simple_params_end_00cc:
  5790 000046CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5791 000046CD 4889C3                  	mov rbx, rax
  5792 000046D0 58                      	pop rax
  5793 000046D1 C60005                  	mov byte [rax], T_closure
  5794 000046D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5795 000046D8 48C74009[E5460000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cc
  5796 000046E0 E9F5000000              	jmp .L_lambda_simple_end_00cc
  5797                                  .L_lambda_simple_code_00cc:	; lambda-simple body
  5798 000046E5 48837C241002            	cmp qword [rsp + 8 * 2], 2
  5799 000046EB 740B                    	je .L_lambda_simple_arity_check_ok_00cc
  5800 000046ED FF742410                	push qword [rsp + 8 * 2]
  5801 000046F1 6A02                    	push 2
  5802 000046F3 E99EB20000              	jmp L_error_incorrect_arity_simple
  5803                                  .L_lambda_simple_arity_check_ok_00cc:
  5804 000046F8 C8000000                	enter 0, 0
  5805 000046FC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5806 00004700 50                      	push rax
  5807 00004701 6A01                    	push 1
  5808 00004703 488B0425[00000000]      	mov rax, qword [free_var_0]
  5809                                  	assert_closure(rax)
    42 0000470B 803805              <1>  cmp byte [%1], %2
    43 0000470E 0F85BDCA0000        <1>  jne L_error_incorrect_type
  5810 00004714 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5811 00004717 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5812 0000471A 483D[02000000]          	cmp rax, sob_boolean_false
  5813 00004720 7409                              	je .L_if_else_006b
  5814 00004722 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5815 00004726 E9AB000000              	jmp .L_if_end_006b
  5816                                            .L_if_else_006b:
  5817 0000472B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  5818 0000472F 50                      	push rax
  5819 00004730 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5820 00004734 50                      	push rax
  5821 00004735 6A01                    	push 1
  5822 00004737 488B0425[88000000]      	mov rax, qword [free_var_17]
  5823                                  	assert_closure(rax)
    42 0000473F 803805              <1>  cmp byte [%1], %2
    43 00004742 0F8589CA0000        <1>  jne L_error_incorrect_type
  5824 00004748 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5825 0000474B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5826 0000474E 50                      	push rax
  5827 0000474F 6A02                    	push 2
  5828 00004751 488B4510                	mov rax, qword [rbp + 8 * 2]
  5829 00004755 488B00                  	mov rax, qword [rax + 8 * 0]
  5830 00004758 488B4008                	mov rax, qword [rax + 8 * 1]
  5831 0000475C 488B00                  	mov rax, qword [rax]
  5832                                  	assert_closure(rax)
    42 0000475F 803805              <1>  cmp byte [%1], %2
    43 00004762 0F8569CA0000        <1>  jne L_error_incorrect_type
  5833 00004768 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5834 0000476B FF5009                  	call SOB_CLOSURE_CODE(rax)
  5835 0000476E 50                      	push rax
  5836 0000476F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5837 00004773 50                      	push rax
  5838 00004774 6A01                    	push 1
  5839 00004776 488B0425[80000000]      	mov rax, qword [free_var_16]
  5840                                  	assert_closure(rax)
    42 0000477E 803805              <1>  cmp byte [%1], %2
    43 00004781 0F854ACA0000        <1>  jne L_error_incorrect_type
  5841 00004787 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5842 0000478A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5843 0000478D 50                      	push rax
  5844 0000478E 6A02                    	push 2
  5845 00004790 488B0425[68000000]      	mov rax, qword [free_var_13]
  5846                                  	assert_closure(rax)
    42 00004798 803805              <1>  cmp byte [%1], %2
    43 0000479B 0F8530CA0000        <1>  jne L_error_incorrect_type
  5847 000047A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5848 000047A4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  5849 000047A7 FF7500                  	push qword [rbp] ; same the old rbp
  5850 000047AA BA05000000              	mov rdx, 2 + 3
  5851 000047AF 488B4D00                	mov rcx, [rbp]
  5852 000047B3 4889EF                  	mov rdi, rbp
  5853                                  .L_tc_recycle_frame_loop_00e5:
  5854 000047B6 4883FA00                	cmp rdx, 0
  5855 000047BA 7413                    	je .L_tc_recycle_frame_done_00e5
  5856 000047BC 4883E908                	sub rcx, 8
  5857 000047C0 4883EF08                	sub rdi, 8
  5858 000047C4 488B37                  	mov rsi, [rdi]
  5859 000047C7 488931                  	mov qword [rcx], rsi
  5860 000047CA 48FFCA                  	dec rdx
  5861 000047CD EBE7                    	jmp .L_tc_recycle_frame_loop_00e5
  5862                                  .L_tc_recycle_frame_done_00e5:
  5863 000047CF 5D                      	pop rbp ; restore the old rbp
  5864 000047D0 4889CC                  	mov rsp, rcx
  5865 000047D3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  5866                                  .L_if_end_006b:
  5867 000047D6 C9                      	leave
  5868 000047D7 C22000                  	ret 8 * (2 + 2)
  5869                                  .L_lambda_simple_end_00cc:	; new closure is in rax
  5870 000047DA 50                      	push rax
  5871 000047DB 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  5872 000047DF 8F00                    	pop qword [rax]
  5873 000047E1 48B8-                   	mov rax, sob_void
  5873 000047E3 [0000000000000000] 
  5874                                  
  5875 000047EB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  5876 000047F0 E8E8B10000              	call malloc
  5877 000047F5 50                      	push rax
  5878 000047F6 BF10000000              	mov rdi, 8 * 2	; new rib
  5879 000047FB E8DDB10000              	call malloc
  5880 00004800 50                      	push rax
  5881 00004801 BF10000000              	mov rdi, 8 * 2	; extended env
  5882 00004806 E8D2B10000              	call malloc
  5883 0000480B 488B7D10                	mov rdi, ENV
  5884 0000480F BE00000000              	mov rsi, 0
  5885 00004814 BA01000000              	mov rdx, 1
  5886                                  .L_lambda_opt_env_loop_001e:	; ext_env[i + 1] <-- env[i]
  5887 00004819 4883FE01                	cmp rsi, 1
  5888 0000481D 7410                    	je .L_lambda_opt_env_end_001e
  5889 0000481F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  5890 00004823 48890CD0                	mov qword [rax + 8 * rdx], rcx
  5891 00004827 48FFC6                  	inc rsi
  5892 0000482A 48FFC2                  	inc rdx
  5893 0000482D EBEA                    	jmp .L_lambda_opt_env_loop_001e
  5894                                  .L_lambda_opt_env_end_001e:
  5895 0000482F 5B                      	pop rbx
  5896 00004830 BE00000000              	mov rsi, 0
  5897                                  .L_lambda_opt_params_loop_001e:	; copy params
  5898 00004835 4883FE02                	cmp rsi, 2
  5899 00004839 740E                    	je .L_lambda_opt_params_end_001e
  5900 0000483B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  5901 00004840 488914F3                	mov qword [rbx + 8 * rsi], rdx
  5902 00004844 48FFC6                  	inc rsi
  5903 00004847 EBEC                    	jmp .L_lambda_opt_params_loop_001e
  5904                                  .L_lambda_opt_params_end_001e:
  5905 00004849 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  5906 0000484C 4889C3                  	mov rbx, rax
  5907 0000484F 58                      	pop rax
  5908 00004850 C60005                  	mov byte [rax], T_closure
  5909 00004853 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  5910 00004857 48C74009[64480000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001e
  5911 0000485F E99A010000              	jmp .L_lambda_opt_end_001e
  5912                                  .L_lambda_opt_code_001e:	; lambda-opt body
  5913 00004864 48837C241000            	cmp qword [rsp + 8 * 2], 0
  5914 0000486A 740D                    	je .L_lambda_opt_arity_check_exact_001e
  5915 0000486C 7F43                    	jg .L_lambda_opt_arity_check_more_001e
  5916 0000486E FF742410                	push qword [rsp + 8 * 2]
  5917 00004872 6A00                    	push 0
  5918 00004874 E931B10000              	jmp L_error_incorrect_arity_opt
  5919                                  .L_lambda_opt_arity_check_exact_001e:
  5920 00004879 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  5921 00004882 BA03000000              	mov rdx, 3
  5922 00004887 FF3424                  	push qword [rsp]
  5923 0000488A BE01000000              	mov rsi, 1
  5924                                  .L_lambda_opt_stack_shrink_loop_0058:
  5925 0000488F 4839D6                  	cmp rsi, rdx
  5926 00004892 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0058
  5927 00004894 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  5928 00004899 488B0B                  	mov rcx, [rbx]
  5929 0000489C 48894BF8                	mov qword [rbx - 8], rcx
  5930 000048A0 48FFC6                  	inc rsi
  5931 000048A3 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0058
  5932                                  .L_lambda_opt_stack_shrink_loop_exit_0058:
  5933 000048A5 48C703[01000000]        	mov qword [rbx], sob_nil
  5934 000048AC E985000000              	jmp .L_lambda_opt_stack_adjusted_001e
  5935                                  .L_lambda_opt_arity_check_more_001e:
  5936 000048B1 488B542410              	mov rdx, qword [rsp + 8 * 2]
  5937 000048B6 4883EA00                	sub rdx, 0
  5938 000048BA 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  5939 000048C3 BE00000000              	mov rsi, 0
  5940 000048C8 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  5941 000048CD 48B9-                   	mov rcx, sob_nil
  5941 000048CF [0100000000000000] 
  5942                                  .L_lambda_opt_stack_shrink_loop_0059:
  5943 000048D7 4839D6                  	cmp rsi, rdx
  5944 000048DA 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0059
  5945 000048DC BF11000000              	mov rdi, 17 ; 1+8+8
  5946 000048E1 E8F7B00000              	call malloc
  5947 000048E6 48894809                	mov SOB_PAIR_CDR(rax), rcx
  5948 000048EA 48F7DE                  	neg rsi
  5949 000048ED 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  5950 000048F1 48F7DE                  	neg rsi
  5951 000048F4 48894801                	mov SOB_PAIR_CAR(rax), rcx
  5952 000048F8 C60021                  	mov byte [rax], T_pair
  5953 000048FB 4889C1                  	mov rcx, rax
  5954 000048FE 48FFC6                  	inc rsi
  5955 00004901 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0059
  5956                                  .L_lambda_opt_stack_shrink_loop_exit_0059:
  5957 00004903 48890B                  	mov qword [rbx], rcx
  5958 00004906 4883EB08                	sub rbx, 8
  5959 0000490A 4889E7                  	mov rdi, rsp
  5960 0000490D 4883C710                	add rdi, 16
  5961 00004911 BE03000000              	mov rsi, 3
  5962                                  .L_lambda_opt_stack_shrink_loop_005a:
  5963 00004916 4883FE00                	cmp rsi,0
  5964 0000491A 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_005a
  5965 0000491C 488B0F                  	mov rcx, qword [rdi]
  5966 0000491F 48890B                  	mov [rbx], rcx
  5967 00004922 48FFCE                  	dec rsi
  5968 00004925 4883EB08                	sub rbx, 8
  5969 00004929 4883EF08                	sub rdi, 8
  5970 0000492D EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_005a
  5971                                  .L_lambda_opt_stack_shrink_loop_exit_005a:
  5972 0000492F 4883C308                	add rbx, 8
  5973 00004933 4889DC                  	mov rsp, rbx
  5974                                  .L_lambda_opt_stack_adjusted_001e:
  5975 00004936 C8000000                	enter 0, 0
  5976 0000493A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5977 0000493E 50                      	push rax
  5978 0000493F 6A01                    	push 1
  5979 00004941 488B0425[00000000]      	mov rax, qword [free_var_0]
  5980                                  	assert_closure(rax)
    42 00004949 803805              <1>  cmp byte [%1], %2
    43 0000494C 0F857FC80000        <1>  jne L_error_incorrect_type
  5981 00004952 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5982 00004955 FF5009                  	call SOB_CLOSURE_CODE(rax)
  5983 00004958 483D[02000000]          	cmp rax, sob_boolean_false
  5984 0000495E 740F                              	je .L_if_else_006c
  5985 00004960 48B8-                             	mov rax, L_constants + 1
  5985 00004962 [0100000000000000] 
  5986 0000496A E98B000000              	jmp .L_if_end_006c
  5987                                            .L_if_else_006c:
  5988 0000496F 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  5989 00004973 50                      	push rax
  5990 00004974 6A01                    	push 1
  5991 00004976 488B0425[88000000]      	mov rax, qword [free_var_17]
  5992                                  	assert_closure(rax)
    42 0000497E 803805              <1>  cmp byte [%1], %2
    43 00004981 0F854AC80000        <1>  jne L_error_incorrect_type
  5993 00004987 FF7001                  	push SOB_CLOSURE_ENV(rax)
  5994 0000498A FF5009                  	call SOB_CLOSURE_CODE(rax)
  5995 0000498D 50                      	push rax
  5996 0000498E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  5997 00004992 50                      	push rax
  5998 00004993 6A01                    	push 1
  5999 00004995 488B0425[80000000]      	mov rax, qword [free_var_16]
  6000                                  	assert_closure(rax)
    42 0000499D 803805              <1>  cmp byte [%1], %2
    43 000049A0 0F852BC80000        <1>  jne L_error_incorrect_type
  6001 000049A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6002 000049A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6003 000049AC 50                      	push rax
  6004 000049AD 6A02                    	push 2
  6005 000049AF 488B4510                	mov rax, qword [rbp + 8 * 2]
  6006 000049B3 488B00                  	mov rax, qword [rax + 8 * 0]
  6007 000049B6 488B00                  	mov rax, qword [rax + 8 * 0]
  6008 000049B9 488B00                  	mov rax, qword [rax]
  6009                                  	assert_closure(rax)
    42 000049BC 803805              <1>  cmp byte [%1], %2
    43 000049BF 0F850CC80000        <1>  jne L_error_incorrect_type
  6010 000049C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6011 000049C8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6012 000049CB FF7500                  	push qword [rbp] ; same the old rbp
  6013 000049CE BA05000000              	mov rdx, 2 + 3
  6014 000049D3 488B4D00                	mov rcx, [rbp]
  6015 000049D7 4889EF                  	mov rdi, rbp
  6016                                  .L_tc_recycle_frame_loop_00e6:
  6017 000049DA 4883FA00                	cmp rdx, 0
  6018 000049DE 7413                    	je .L_tc_recycle_frame_done_00e6
  6019 000049E0 4883E908                	sub rcx, 8
  6020 000049E4 4883EF08                	sub rdi, 8
  6021 000049E8 488B37                  	mov rsi, [rdi]
  6022 000049EB 488931                  	mov qword [rcx], rsi
  6023 000049EE 48FFCA                  	dec rdx
  6024 000049F1 EBE7                    	jmp .L_tc_recycle_frame_loop_00e6
  6025                                  .L_tc_recycle_frame_done_00e6:
  6026 000049F3 5D                      	pop rbp ; restore the old rbp
  6027 000049F4 4889CC                  	mov rsp, rcx
  6028 000049F7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6029                                  .L_if_end_006c:
  6030 000049FA C9                      	leave
  6031 000049FB C21800                  	ret 8 * (2 + 1)
  6032                                  .L_lambda_opt_end_001e:	; new closure is in rax
  6033 000049FE C9                      	leave
  6034 000049FF C22000                  	ret 8 * (2 + 2)
  6035                                  .L_lambda_simple_end_00ca:	; new closure is in rax
  6036                                  	assert_closure(rax)
    42 00004A02 803805              <1>  cmp byte [%1], %2
    43 00004A05 0F85C6C70000        <1>  jne L_error_incorrect_type
  6037 00004A0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6038 00004A0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6039 00004A11 48890425[F0020000]      	mov qword [free_var_94], rax
  6040 00004A19 48B8-                   	mov rax, sob_void
  6040 00004A1B [0000000000000000] 
  6041                                  
  6042 00004A23 4889C7                  	mov rdi, rax
  6043 00004A26 E8C3AF0000              	call print_sexpr_if_not_void
  6044                                  
  6045 00004A2B 48B8-                   	mov rax, L_constants + 23
  6045 00004A2D [1700000000000000] 
  6046 00004A35 50                      	push rax
  6047 00004A36 6A01                    	push 1
  6048 00004A38 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6049 00004A3D E89BAF0000              	call malloc
  6050 00004A42 50                      	push rax
  6051 00004A43 BF00000000              	mov rdi, 8 * 0	; new rib
  6052 00004A48 E890AF0000              	call malloc
  6053 00004A4D 50                      	push rax
  6054 00004A4E BF08000000              	mov rdi, 8 * 1	; extended env
  6055 00004A53 E885AF0000              	call malloc
  6056 00004A58 488B7D10                	mov rdi, ENV
  6057 00004A5C BE00000000              	mov rsi, 0
  6058 00004A61 BA01000000              	mov rdx, 1
  6059                                  .L_lambda_simple_env_loop_00cd:	; ext_env[i + 1] <-- env[i]
  6060 00004A66 4883FE00                	cmp rsi, 0
  6061 00004A6A 7410                    	je .L_lambda_simple_env_end_00cd
  6062 00004A6C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6063 00004A70 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6064 00004A74 48FFC6                  	inc rsi
  6065 00004A77 48FFC2                  	inc rdx
  6066 00004A7A EBEA                    	jmp .L_lambda_simple_env_loop_00cd
  6067                                  .L_lambda_simple_env_end_00cd:
  6068 00004A7C 5B                      	pop rbx
  6069 00004A7D BE00000000              	mov rsi, 0
  6070                                  .L_lambda_simple_params_loop_00cd:	; copy params
  6071 00004A82 4883FE00                	cmp rsi, 0
  6072 00004A86 740E                    	je .L_lambda_simple_params_end_00cd
  6073 00004A88 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6074 00004A8D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6075 00004A91 48FFC6                  	inc rsi
  6076 00004A94 EBEC                    	jmp .L_lambda_simple_params_loop_00cd
  6077                                  .L_lambda_simple_params_end_00cd:
  6078 00004A96 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6079 00004A99 4889C3                  	mov rbx, rax
  6080 00004A9C 58                      	pop rax
  6081 00004A9D C60005                  	mov byte [rax], T_closure
  6082 00004AA0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6083 00004AA4 48C74009[B14A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cd
  6084 00004AAC E98F030000              	jmp .L_lambda_simple_end_00cd
  6085                                  .L_lambda_simple_code_00cd:	; lambda-simple body
  6086 00004AB1 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6087 00004AB7 740B                    	je .L_lambda_simple_arity_check_ok_00cd
  6088 00004AB9 FF742410                	push qword [rsp + 8 * 2]
  6089 00004ABD 6A01                    	push 1
  6090 00004ABF E9D2AE0000              	jmp L_error_incorrect_arity_simple
  6091                                  .L_lambda_simple_arity_check_ok_00cd:
  6092 00004AC4 C8000000                	enter 0, 0
  6093 00004AC8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6094 00004ACC 4889C2                  	mov rdx, rax
  6095 00004ACF BF08000000              	mov rdi, 8
  6096 00004AD4 E804AF0000              	call malloc
  6097 00004AD9 488910                  	mov qword[rax], rdx
  6098 00004ADC 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6099 00004AE0 48B8-                   	mov rax, sob_void
  6099 00004AE2 [0000000000000000] 
  6100                                  
  6101 00004AEA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6102 00004AEF E8E9AE0000              	call malloc
  6103 00004AF4 50                      	push rax
  6104 00004AF5 BF08000000              	mov rdi, 8 * 1	; new rib
  6105 00004AFA E8DEAE0000              	call malloc
  6106 00004AFF 50                      	push rax
  6107 00004B00 BF10000000              	mov rdi, 8 * 2	; extended env
  6108 00004B05 E8D3AE0000              	call malloc
  6109 00004B0A 488B7D10                	mov rdi, ENV
  6110 00004B0E BE00000000              	mov rsi, 0
  6111 00004B13 BA01000000              	mov rdx, 1
  6112                                  .L_lambda_simple_env_loop_00ce:	; ext_env[i + 1] <-- env[i]
  6113 00004B18 4883FE01                	cmp rsi, 1
  6114 00004B1C 7410                    	je .L_lambda_simple_env_end_00ce
  6115 00004B1E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6116 00004B22 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6117 00004B26 48FFC6                  	inc rsi
  6118 00004B29 48FFC2                  	inc rdx
  6119 00004B2C EBEA                    	jmp .L_lambda_simple_env_loop_00ce
  6120                                  .L_lambda_simple_env_end_00ce:
  6121 00004B2E 5B                      	pop rbx
  6122 00004B2F BE00000000              	mov rsi, 0
  6123                                  .L_lambda_simple_params_loop_00ce:	; copy params
  6124 00004B34 4883FE01                	cmp rsi, 1
  6125 00004B38 740E                    	je .L_lambda_simple_params_end_00ce
  6126 00004B3A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6127 00004B3F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6128 00004B43 48FFC6                  	inc rsi
  6129 00004B46 EBEC                    	jmp .L_lambda_simple_params_loop_00ce
  6130                                  .L_lambda_simple_params_end_00ce:
  6131 00004B48 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6132 00004B4B 4889C3                  	mov rbx, rax
  6133 00004B4E 58                      	pop rax
  6134 00004B4F C60005                  	mov byte [rax], T_closure
  6135 00004B52 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6136 00004B56 48C74009[634B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ce
  6137 00004B5E E919010000              	jmp .L_lambda_simple_end_00ce
  6138                                  .L_lambda_simple_code_00ce:	; lambda-simple body
  6139 00004B63 48837C241003            	cmp qword [rsp + 8 * 2], 3
  6140 00004B69 740B                    	je .L_lambda_simple_arity_check_ok_00ce
  6141 00004B6B FF742410                	push qword [rsp + 8 * 2]
  6142 00004B6F 6A03                    	push 3
  6143 00004B71 E920AE0000              	jmp L_error_incorrect_arity_simple
  6144                                  .L_lambda_simple_arity_check_ok_00ce:
  6145 00004B76 C8000000                	enter 0, 0
  6146 00004B7A 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6147 00004B7E 50                      	push rax
  6148 00004B7F 488B0425[00000000]      	mov rax, qword [free_var_0]
  6149 00004B87 50                      	push rax
  6150 00004B88 6A02                    	push 2
  6151 00004B8A 488B0425[D0020000]      	mov rax, qword [free_var_90]
  6152                                  	assert_closure(rax)
    42 00004B92 803805              <1>  cmp byte [%1], %2
    43 00004B95 0F8536C60000        <1>  jne L_error_incorrect_type
  6153 00004B9B FF7001                  	push SOB_CLOSURE_ENV(rax)
  6154 00004B9E FF5009                  	call SOB_CLOSURE_CODE(rax)
  6155 00004BA1 483D[02000000]          	cmp rax, sob_boolean_false
  6156 00004BA7 7409                              	je .L_if_else_006d
  6157 00004BA9 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6158 00004BAD E9C6000000              	jmp .L_if_end_006d
  6159                                            .L_if_else_006d:
  6160 00004BB2 488B4530                          	mov rax, qword [rbp + 8 * (4 + 2)]
  6161 00004BB6 50                      	push rax
  6162 00004BB7 488B0425[88000000]      	mov rax, qword [free_var_17]
  6163 00004BBF 50                      	push rax
  6164 00004BC0 6A02                    	push 2
  6165 00004BC2 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6166                                  	assert_closure(rax)
    42 00004BCA 803805              <1>  cmp byte [%1], %2
    43 00004BCD 0F85FEC50000        <1>  jne L_error_incorrect_type
  6167 00004BD3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6168 00004BD6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6169 00004BD9 50                      	push rax
  6170 00004BDA 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6171 00004BDE 50                      	push rax
  6172 00004BDF 488B0425[80000000]      	mov rax, qword [free_var_16]
  6173 00004BE7 50                      	push rax
  6174 00004BE8 6A02                    	push 2
  6175 00004BEA 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6176                                  	assert_closure(rax)
    42 00004BF2 803805              <1>  cmp byte [%1], %2
    43 00004BF5 0F85D6C50000        <1>  jne L_error_incorrect_type
  6177 00004BFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  6178 00004BFE FF5009                  	call SOB_CLOSURE_CODE(rax)
  6179 00004C01 50                      	push rax
  6180 00004C02 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6181 00004C06 50                      	push rax
  6182 00004C07 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6183 00004C0B 50                      	push rax
  6184 00004C0C 6A03                    	push 3
  6185 00004C0E 488B0425[C8020000]      	mov rax, qword [free_var_89]
  6186                                  	assert_closure(rax)
    42 00004C16 803805              <1>  cmp byte [%1], %2
    43 00004C19 0F85B2C50000        <1>  jne L_error_incorrect_type
  6187 00004C1F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6188 00004C22 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6189 00004C25 50                      	push rax
  6190 00004C26 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6191 00004C2A 50                      	push rax
  6192 00004C2B 6A03                    	push 3
  6193 00004C2D 488B4510                	mov rax, qword [rbp + 8 * 2]
  6194 00004C31 488B00                  	mov rax, qword [rax + 8 * 0]
  6195 00004C34 488B00                  	mov rax, qword [rax + 8 * 0]
  6196 00004C37 488B00                  	mov rax, qword [rax]
  6197                                  	assert_closure(rax)
    42 00004C3A 803805              <1>  cmp byte [%1], %2
    43 00004C3D 0F858EC50000        <1>  jne L_error_incorrect_type
  6198 00004C43 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6199 00004C46 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6200 00004C49 FF7500                  	push qword [rbp] ; same the old rbp
  6201 00004C4C BA06000000              	mov rdx, 3 + 3
  6202 00004C51 488B4D00                	mov rcx, [rbp]
  6203 00004C55 4889EF                  	mov rdi, rbp
  6204                                  .L_tc_recycle_frame_loop_00e7:
  6205 00004C58 4883FA00                	cmp rdx, 0
  6206 00004C5C 7413                    	je .L_tc_recycle_frame_done_00e7
  6207 00004C5E 4883E908                	sub rcx, 8
  6208 00004C62 4883EF08                	sub rdi, 8
  6209 00004C66 488B37                  	mov rsi, [rdi]
  6210 00004C69 488931                  	mov qword [rcx], rsi
  6211 00004C6C 48FFCA                  	dec rdx
  6212 00004C6F EBE7                    	jmp .L_tc_recycle_frame_loop_00e7
  6213                                  .L_tc_recycle_frame_done_00e7:
  6214 00004C71 5D                      	pop rbp ; restore the old rbp
  6215 00004C72 4889CC                  	mov rsp, rcx
  6216 00004C75 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6217                                  .L_if_end_006d:
  6218 00004C78 C9                      	leave
  6219 00004C79 C22800                  	ret 8 * (2 + 3)
  6220                                  .L_lambda_simple_end_00ce:	; new closure is in rax
  6221 00004C7C 50                      	push rax
  6222 00004C7D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6223 00004C81 8F00                    	pop qword [rax]
  6224 00004C83 48B8-                   	mov rax, sob_void
  6224 00004C85 [0000000000000000] 
  6225                                  
  6226 00004C8D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6227 00004C92 E846AD0000              	call malloc
  6228 00004C97 50                      	push rax
  6229 00004C98 BF08000000              	mov rdi, 8 * 1	; new rib
  6230 00004C9D E83BAD0000              	call malloc
  6231 00004CA2 50                      	push rax
  6232 00004CA3 BF10000000              	mov rdi, 8 * 2	; extended env
  6233 00004CA8 E830AD0000              	call malloc
  6234 00004CAD 488B7D10                	mov rdi, ENV
  6235 00004CB1 BE00000000              	mov rsi, 0
  6236 00004CB6 BA01000000              	mov rdx, 1
  6237                                  .L_lambda_opt_env_loop_001f:	; ext_env[i + 1] <-- env[i]
  6238 00004CBB 4883FE01                	cmp rsi, 1
  6239 00004CBF 7410                    	je .L_lambda_opt_env_end_001f
  6240 00004CC1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6241 00004CC5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6242 00004CC9 48FFC6                  	inc rsi
  6243 00004CCC 48FFC2                  	inc rdx
  6244 00004CCF EBEA                    	jmp .L_lambda_opt_env_loop_001f
  6245                                  .L_lambda_opt_env_end_001f:
  6246 00004CD1 5B                      	pop rbx
  6247 00004CD2 BE00000000              	mov rsi, 0
  6248                                  .L_lambda_opt_params_loop_001f:	; copy params
  6249 00004CD7 4883FE01                	cmp rsi, 1
  6250 00004CDB 740E                    	je .L_lambda_opt_params_end_001f
  6251 00004CDD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6252 00004CE2 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6253 00004CE6 48FFC6                  	inc rsi
  6254 00004CE9 EBEC                    	jmp .L_lambda_opt_params_loop_001f
  6255                                  .L_lambda_opt_params_end_001f:
  6256 00004CEB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6257 00004CEE 4889C3                  	mov rbx, rax
  6258 00004CF1 58                      	pop rax
  6259 00004CF2 C60005                  	mov byte [rax], T_closure
  6260 00004CF5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6261 00004CF9 48C74009[064D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_001f
  6262 00004D01 E936010000              	jmp .L_lambda_opt_end_001f
  6263                                  .L_lambda_opt_code_001f:	; lambda-opt body
  6264 00004D06 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6265 00004D0C 740D                    	je .L_lambda_opt_arity_check_exact_001f
  6266 00004D0E 7F43                    	jg .L_lambda_opt_arity_check_more_001f
  6267 00004D10 FF742410                	push qword [rsp + 8 * 2]
  6268 00004D14 6A02                    	push 2
  6269 00004D16 E98FAC0000              	jmp L_error_incorrect_arity_opt
  6270                                  .L_lambda_opt_arity_check_exact_001f:
  6271 00004D1B 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6272 00004D24 BA05000000              	mov rdx, 5
  6273 00004D29 FF3424                  	push qword [rsp]
  6274 00004D2C BE01000000              	mov rsi, 1
  6275                                  .L_lambda_opt_stack_shrink_loop_005b:
  6276 00004D31 4839D6                  	cmp rsi, rdx
  6277 00004D34 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_005b
  6278 00004D36 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  6279 00004D3B 488B0B                  	mov rcx, [rbx]
  6280 00004D3E 48894BF8                	mov qword [rbx - 8], rcx
  6281 00004D42 48FFC6                  	inc rsi
  6282 00004D45 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_005b
  6283                                  .L_lambda_opt_stack_shrink_loop_exit_005b:
  6284 00004D47 48C703[01000000]        	mov qword [rbx], sob_nil
  6285 00004D4E E985000000              	jmp .L_lambda_opt_stack_adjusted_001f
  6286                                  .L_lambda_opt_arity_check_more_001f:
  6287 00004D53 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6288 00004D58 4883EA02                	sub rdx, 2
  6289 00004D5C 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6290 00004D65 BE00000000              	mov rsi, 0
  6291 00004D6A 488D5CD420              	lea rbx, [rsp + 2 * 8 + 2 * 8 + rdx * 8]
  6292 00004D6F 48B9-                   	mov rcx, sob_nil
  6292 00004D71 [0100000000000000] 
  6293                                  .L_lambda_opt_stack_shrink_loop_005c:
  6294 00004D79 4839D6                  	cmp rsi, rdx
  6295 00004D7C 7427                    je .L_lambda_opt_stack_shrink_loop_exit_005c
  6296 00004D7E BF11000000              	mov rdi, 17 ; 1+8+8
  6297 00004D83 E855AC0000              	call malloc
  6298 00004D88 48894809                	mov SOB_PAIR_CDR(rax), rcx
  6299 00004D8C 48F7DE                  	neg rsi
  6300 00004D8F 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  6301 00004D93 48F7DE                  	neg rsi
  6302 00004D96 48894801                	mov SOB_PAIR_CAR(rax), rcx
  6303 00004D9A C60021                  	mov byte [rax], T_pair
  6304 00004D9D 4889C1                  	mov rcx, rax
  6305 00004DA0 48FFC6                  	inc rsi
  6306 00004DA3 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_005c
  6307                                  .L_lambda_opt_stack_shrink_loop_exit_005c:
  6308 00004DA5 48890B                  	mov qword [rbx], rcx
  6309 00004DA8 4883EB08                	sub rbx, 8
  6310 00004DAC 4889E7                  	mov rdi, rsp
  6311 00004DAF 4883C720                	add rdi, 32
  6312 00004DB3 BE05000000              	mov rsi, 5
  6313                                  .L_lambda_opt_stack_shrink_loop_005d:
  6314 00004DB8 4883FE00                	cmp rsi,0
  6315 00004DBC 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_005d
  6316 00004DBE 488B0F                  	mov rcx, qword [rdi]
  6317 00004DC1 48890B                  	mov [rbx], rcx
  6318 00004DC4 48FFCE                  	dec rsi
  6319 00004DC7 4883EB08                	sub rbx, 8
  6320 00004DCB 4883EF08                	sub rdi, 8
  6321 00004DCF EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_005d
  6322                                  .L_lambda_opt_stack_shrink_loop_exit_005d:
  6323 00004DD1 4883C308                	add rbx, 8
  6324 00004DD5 4889DC                  	mov rsp, rbx
  6325                                  .L_lambda_opt_stack_adjusted_001f:
  6326 00004DD8 C8000000                	enter 0, 0
  6327 00004DDC 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6328 00004DE0 50                      	push rax
  6329 00004DE1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6330 00004DE5 50                      	push rax
  6331 00004DE6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6332 00004DEA 50                      	push rax
  6333 00004DEB 6A03                    	push 3
  6334 00004DED 488B4510                	mov rax, qword [rbp + 8 * 2]
  6335 00004DF1 488B00                  	mov rax, qword [rax + 8 * 0]
  6336 00004DF4 488B00                  	mov rax, qword [rax + 8 * 0]
  6337 00004DF7 488B00                  	mov rax, qword [rax]
  6338                                  	assert_closure(rax)
    42 00004DFA 803805              <1>  cmp byte [%1], %2
    43 00004DFD 0F85CEC30000        <1>  jne L_error_incorrect_type
  6339 00004E03 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6340 00004E06 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6341 00004E09 FF7500                  	push qword [rbp] ; same the old rbp
  6342 00004E0C BA06000000              	mov rdx, 3 + 3
  6343 00004E11 488B4D00                	mov rcx, [rbp]
  6344 00004E15 4889EF                  	mov rdi, rbp
  6345                                  .L_tc_recycle_frame_loop_00e8:
  6346 00004E18 4883FA00                	cmp rdx, 0
  6347 00004E1C 7413                    	je .L_tc_recycle_frame_done_00e8
  6348 00004E1E 4883E908                	sub rcx, 8
  6349 00004E22 4883EF08                	sub rdi, 8
  6350 00004E26 488B37                  	mov rsi, [rdi]
  6351 00004E29 488931                  	mov qword [rcx], rsi
  6352 00004E2C 48FFCA                  	dec rdx
  6353 00004E2F EBE7                    	jmp .L_tc_recycle_frame_loop_00e8
  6354                                  .L_tc_recycle_frame_done_00e8:
  6355 00004E31 5D                      	pop rbp ; restore the old rbp
  6356 00004E32 4889CC                  	mov rsp, rcx
  6357 00004E35 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6358 00004E38 C9                      	leave
  6359 00004E39 C22800                  	ret 8 * (2 + 3)
  6360                                  .L_lambda_opt_end_001f:	; new closure is in rax
  6361 00004E3C C9                      	leave
  6362 00004E3D C21800                  	ret 8 * (2 + 1)
  6363                                  .L_lambda_simple_end_00cd:	; new closure is in rax
  6364                                  	assert_closure(rax)
    42 00004E40 803805              <1>  cmp byte [%1], %2
    43 00004E43 0F8588C30000        <1>  jne L_error_incorrect_type
  6365 00004E49 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6366 00004E4C FF5009                  	call SOB_CLOSURE_CODE(rax)
  6367 00004E4F 48890425[F8020000]      	mov qword [free_var_95], rax
  6368 00004E57 48B8-                   	mov rax, sob_void
  6368 00004E59 [0000000000000000] 
  6369                                  
  6370 00004E61 4889C7                  	mov rdi, rax
  6371 00004E64 E885AB0000              	call print_sexpr_if_not_void
  6372                                  
  6373 00004E69 48B8-                   	mov rax, L_constants + 23
  6373 00004E6B [1700000000000000] 
  6374 00004E73 50                      	push rax
  6375 00004E74 6A01                    	push 1
  6376 00004E76 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6377 00004E7B E85DAB0000              	call malloc
  6378 00004E80 50                      	push rax
  6379 00004E81 BF00000000              	mov rdi, 8 * 0	; new rib
  6380 00004E86 E852AB0000              	call malloc
  6381 00004E8B 50                      	push rax
  6382 00004E8C BF08000000              	mov rdi, 8 * 1	; extended env
  6383 00004E91 E847AB0000              	call malloc
  6384 00004E96 488B7D10                	mov rdi, ENV
  6385 00004E9A BE00000000              	mov rsi, 0
  6386 00004E9F BA01000000              	mov rdx, 1
  6387                                  .L_lambda_simple_env_loop_00cf:	; ext_env[i + 1] <-- env[i]
  6388 00004EA4 4883FE00                	cmp rsi, 0
  6389 00004EA8 7410                    	je .L_lambda_simple_env_end_00cf
  6390 00004EAA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6391 00004EAE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6392 00004EB2 48FFC6                  	inc rsi
  6393 00004EB5 48FFC2                  	inc rdx
  6394 00004EB8 EBEA                    	jmp .L_lambda_simple_env_loop_00cf
  6395                                  .L_lambda_simple_env_end_00cf:
  6396 00004EBA 5B                      	pop rbx
  6397 00004EBB BE00000000              	mov rsi, 0
  6398                                  .L_lambda_simple_params_loop_00cf:	; copy params
  6399 00004EC0 4883FE00                	cmp rsi, 0
  6400 00004EC4 740E                    	je .L_lambda_simple_params_end_00cf
  6401 00004EC6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6402 00004ECB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6403 00004ECF 48FFC6                  	inc rsi
  6404 00004ED2 EBEC                    	jmp .L_lambda_simple_params_loop_00cf
  6405                                  .L_lambda_simple_params_end_00cf:
  6406 00004ED4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6407 00004ED7 4889C3                  	mov rbx, rax
  6408 00004EDA 58                      	pop rax
  6409 00004EDB C60005                  	mov byte [rax], T_closure
  6410 00004EDE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6411 00004EE2 48C74009[EF4E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00cf
  6412 00004EEA E9CE030000              	jmp .L_lambda_simple_end_00cf
  6413                                  .L_lambda_simple_code_00cf:	; lambda-simple body
  6414 00004EEF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6415 00004EF5 740B                    	je .L_lambda_simple_arity_check_ok_00cf
  6416 00004EF7 FF742410                	push qword [rsp + 8 * 2]
  6417 00004EFB 6A01                    	push 1
  6418 00004EFD E994AA0000              	jmp L_error_incorrect_arity_simple
  6419                                  .L_lambda_simple_arity_check_ok_00cf:
  6420 00004F02 C8000000                	enter 0, 0
  6421 00004F06 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6422 00004F0A 4889C2                  	mov rdx, rax
  6423 00004F0D BF08000000              	mov rdi, 8
  6424 00004F12 E8C6AA0000              	call malloc
  6425 00004F17 488910                  	mov qword[rax], rdx
  6426 00004F1A 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
  6427 00004F1E 48B8-                   	mov rax, sob_void
  6427 00004F20 [0000000000000000] 
  6428                                  
  6429 00004F28 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6430 00004F2D E8ABAA0000              	call malloc
  6431 00004F32 50                      	push rax
  6432 00004F33 BF08000000              	mov rdi, 8 * 1	; new rib
  6433 00004F38 E8A0AA0000              	call malloc
  6434 00004F3D 50                      	push rax
  6435 00004F3E BF10000000              	mov rdi, 8 * 2	; extended env
  6436 00004F43 E895AA0000              	call malloc
  6437 00004F48 488B7D10                	mov rdi, ENV
  6438 00004F4C BE00000000              	mov rsi, 0
  6439 00004F51 BA01000000              	mov rdx, 1
  6440                                  .L_lambda_simple_env_loop_00d0:	; ext_env[i + 1] <-- env[i]
  6441 00004F56 4883FE01                	cmp rsi, 1
  6442 00004F5A 7410                    	je .L_lambda_simple_env_end_00d0
  6443 00004F5C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6444 00004F60 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6445 00004F64 48FFC6                  	inc rsi
  6446 00004F67 48FFC2                  	inc rdx
  6447 00004F6A EBEA                    	jmp .L_lambda_simple_env_loop_00d0
  6448                                  .L_lambda_simple_env_end_00d0:
  6449 00004F6C 5B                      	pop rbx
  6450 00004F6D BE00000000              	mov rsi, 0
  6451                                  .L_lambda_simple_params_loop_00d0:	; copy params
  6452 00004F72 4883FE01                	cmp rsi, 1
  6453 00004F76 740E                    	je .L_lambda_simple_params_end_00d0
  6454 00004F78 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6455 00004F7D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6456 00004F81 48FFC6                  	inc rsi
  6457 00004F84 EBEC                    	jmp .L_lambda_simple_params_loop_00d0
  6458                                  .L_lambda_simple_params_end_00d0:
  6459 00004F86 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6460 00004F89 4889C3                  	mov rbx, rax
  6461 00004F8C 58                      	pop rax
  6462 00004F8D C60005                  	mov byte [rax], T_closure
  6463 00004F90 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6464 00004F94 48C74009[A14F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d0
  6465 00004F9C E958010000              	jmp .L_lambda_simple_end_00d0
  6466                                  .L_lambda_simple_code_00d0:	; lambda-simple body
  6467 00004FA1 48837C241003            	cmp qword [rsp + 8 * 2], 3
  6468 00004FA7 740B                    	je .L_lambda_simple_arity_check_ok_00d0
  6469 00004FA9 FF742410                	push qword [rsp + 8 * 2]
  6470 00004FAD 6A03                    	push 3
  6471 00004FAF E9E2A90000              	jmp L_error_incorrect_arity_simple
  6472                                  .L_lambda_simple_arity_check_ok_00d0:
  6473 00004FB4 C8000000                	enter 0, 0
  6474 00004FB8 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6475 00004FBC 50                      	push rax
  6476 00004FBD 488B0425[00000000]      	mov rax, qword [free_var_0]
  6477 00004FC5 50                      	push rax
  6478 00004FC6 6A02                    	push 2
  6479 00004FC8 488B0425[D0020000]      	mov rax, qword [free_var_90]
  6480                                  	assert_closure(rax)
    42 00004FD0 803805              <1>  cmp byte [%1], %2
    43 00004FD3 0F85F8C10000        <1>  jne L_error_incorrect_type
  6481 00004FD9 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6482 00004FDC FF5009                  	call SOB_CLOSURE_CODE(rax)
  6483 00004FDF 483D[02000000]          	cmp rax, sob_boolean_false
  6484 00004FE5 7409                              	je .L_if_else_006e
  6485 00004FE7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6486 00004FEB E905010000              	jmp .L_if_end_006e
  6487                                            .L_if_else_006e:
  6488 00004FF0 48B8-                             	mov rax, L_constants + 1
  6488 00004FF2 [0100000000000000] 
  6489 00004FFA 50                      	push rax
  6490 00004FFB 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6491 00004FFF 50                      	push rax
  6492 00005000 488B0425[88000000]      	mov rax, qword [free_var_17]
  6493 00005008 50                      	push rax
  6494 00005009 6A02                    	push 2
  6495 0000500B 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6496                                  	assert_closure(rax)
    42 00005013 803805              <1>  cmp byte [%1], %2
    43 00005016 0F85B5C10000        <1>  jne L_error_incorrect_type
  6497 0000501C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6498 0000501F FF5009                  	call SOB_CLOSURE_CODE(rax)
  6499 00005022 50                      	push rax
  6500 00005023 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6501 00005027 50                      	push rax
  6502 00005028 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6503 0000502C 50                      	push rax
  6504 0000502D 6A03                    	push 3
  6505 0000502F 488B4510                	mov rax, qword [rbp + 8 * 2]
  6506 00005033 488B00                  	mov rax, qword [rax + 8 * 0]
  6507 00005036 488B00                  	mov rax, qword [rax + 8 * 0]
  6508 00005039 488B00                  	mov rax, qword [rax]
  6509                                  	assert_closure(rax)
    42 0000503C 803805              <1>  cmp byte [%1], %2
    43 0000503F 0F858CC10000        <1>  jne L_error_incorrect_type
  6510 00005045 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6511 00005048 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6512 0000504B 50                      	push rax
  6513 0000504C 6A02                    	push 2
  6514 0000504E 488B0425[68000000]      	mov rax, qword [free_var_13]
  6515                                  	assert_closure(rax)
    42 00005056 803805              <1>  cmp byte [%1], %2
    43 00005059 0F8572C10000        <1>  jne L_error_incorrect_type
  6516 0000505F FF7001                  	push SOB_CLOSURE_ENV(rax)
  6517 00005062 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6518 00005065 50                      	push rax
  6519 00005066 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6520 0000506A 50                      	push rax
  6521 0000506B 488B0425[80000000]      	mov rax, qword [free_var_16]
  6522 00005073 50                      	push rax
  6523 00005074 6A02                    	push 2
  6524 00005076 488B0425[D8020000]      	mov rax, qword [free_var_91]
  6525                                  	assert_closure(rax)
    42 0000507E 803805              <1>  cmp byte [%1], %2
    43 00005081 0F854AC10000        <1>  jne L_error_incorrect_type
  6526 00005087 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6527 0000508A FF5009                  	call SOB_CLOSURE_CODE(rax)
  6528 0000508D 50                      	push rax
  6529 0000508E 6A02                    	push 2
  6530 00005090 488B0425[F0020000]      	mov rax, qword [free_var_94]
  6531                                  	assert_closure(rax)
    42 00005098 803805              <1>  cmp byte [%1], %2
    43 0000509B 0F8530C10000        <1>  jne L_error_incorrect_type
  6532 000050A1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6533 000050A4 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6534 000050A7 50                      	push rax
  6535 000050A8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6536 000050AC 50                      	push rax
  6537 000050AD 6A02                    	push 2
  6538 000050AF 488B0425[C8020000]      	mov rax, qword [free_var_89]
  6539                                  	assert_closure(rax)
    42 000050B7 803805              <1>  cmp byte [%1], %2
    43 000050BA 0F8511C10000        <1>  jne L_error_incorrect_type
  6540 000050C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6541 000050C3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6542 000050C6 FF7500                  	push qword [rbp] ; same the old rbp
  6543 000050C9 BA05000000              	mov rdx, 2 + 3
  6544 000050CE 488B4D00                	mov rcx, [rbp]
  6545 000050D2 4889EF                  	mov rdi, rbp
  6546                                  .L_tc_recycle_frame_loop_00e9:
  6547 000050D5 4883FA00                	cmp rdx, 0
  6548 000050D9 7413                    	je .L_tc_recycle_frame_done_00e9
  6549 000050DB 4883E908                	sub rcx, 8
  6550 000050DF 4883EF08                	sub rdi, 8
  6551 000050E3 488B37                  	mov rsi, [rdi]
  6552 000050E6 488931                  	mov qword [rcx], rsi
  6553 000050E9 48FFCA                  	dec rdx
  6554 000050EC EBE7                    	jmp .L_tc_recycle_frame_loop_00e9
  6555                                  .L_tc_recycle_frame_done_00e9:
  6556 000050EE 5D                      	pop rbp ; restore the old rbp
  6557 000050EF 4889CC                  	mov rsp, rcx
  6558 000050F2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6559                                  .L_if_end_006e:
  6560 000050F5 C9                      	leave
  6561 000050F6 C22800                  	ret 8 * (2 + 3)
  6562                                  .L_lambda_simple_end_00d0:	; new closure is in rax
  6563 000050F9 50                      	push rax
  6564 000050FA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6565 000050FE 8F00                    	pop qword [rax]
  6566 00005100 48B8-                   	mov rax, sob_void
  6566 00005102 [0000000000000000] 
  6567                                  
  6568 0000510A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6569 0000510F E8C9A80000              	call malloc
  6570 00005114 50                      	push rax
  6571 00005115 BF08000000              	mov rdi, 8 * 1	; new rib
  6572 0000511A E8BEA80000              	call malloc
  6573 0000511F 50                      	push rax
  6574 00005120 BF10000000              	mov rdi, 8 * 2	; extended env
  6575 00005125 E8B3A80000              	call malloc
  6576 0000512A 488B7D10                	mov rdi, ENV
  6577 0000512E BE00000000              	mov rsi, 0
  6578 00005133 BA01000000              	mov rdx, 1
  6579                                  .L_lambda_opt_env_loop_0020:	; ext_env[i + 1] <-- env[i]
  6580 00005138 4883FE01                	cmp rsi, 1
  6581 0000513C 7410                    	je .L_lambda_opt_env_end_0020
  6582 0000513E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6583 00005142 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6584 00005146 48FFC6                  	inc rsi
  6585 00005149 48FFC2                  	inc rdx
  6586 0000514C EBEA                    	jmp .L_lambda_opt_env_loop_0020
  6587                                  .L_lambda_opt_env_end_0020:
  6588 0000514E 5B                      	pop rbx
  6589 0000514F BE00000000              	mov rsi, 0
  6590                                  .L_lambda_opt_params_loop_0020:	; copy params
  6591 00005154 4883FE01                	cmp rsi, 1
  6592 00005158 740E                    	je .L_lambda_opt_params_end_0020
  6593 0000515A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6594 0000515F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6595 00005163 48FFC6                  	inc rsi
  6596 00005166 EBEC                    	jmp .L_lambda_opt_params_loop_0020
  6597                                  .L_lambda_opt_params_end_0020:
  6598 00005168 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6599 0000516B 4889C3                  	mov rbx, rax
  6600 0000516E 58                      	pop rax
  6601 0000516F C60005                  	mov byte [rax], T_closure
  6602 00005172 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6603 00005176 48C74009[83510000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0020
  6604 0000517E E936010000              	jmp .L_lambda_opt_end_0020
  6605                                  .L_lambda_opt_code_0020:	; lambda-opt body
  6606 00005183 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6607 00005189 740D                    	je .L_lambda_opt_arity_check_exact_0020
  6608 0000518B 7F43                    	jg .L_lambda_opt_arity_check_more_0020
  6609 0000518D FF742410                	push qword [rsp + 8 * 2]
  6610 00005191 6A02                    	push 2
  6611 00005193 E912A80000              	jmp L_error_incorrect_arity_opt
  6612                                  .L_lambda_opt_arity_check_exact_0020:
  6613 00005198 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6614 000051A1 BA05000000              	mov rdx, 5
  6615 000051A6 FF3424                  	push qword [rsp]
  6616 000051A9 BE01000000              	mov rsi, 1
  6617                                  .L_lambda_opt_stack_shrink_loop_005e:
  6618 000051AE 4839D6                  	cmp rsi, rdx
  6619 000051B1 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_005e
  6620 000051B3 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  6621 000051B8 488B0B                  	mov rcx, [rbx]
  6622 000051BB 48894BF8                	mov qword [rbx - 8], rcx
  6623 000051BF 48FFC6                  	inc rsi
  6624 000051C2 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_005e
  6625                                  .L_lambda_opt_stack_shrink_loop_exit_005e:
  6626 000051C4 48C703[01000000]        	mov qword [rbx], sob_nil
  6627 000051CB E985000000              	jmp .L_lambda_opt_stack_adjusted_0020
  6628                                  .L_lambda_opt_arity_check_more_0020:
  6629 000051D0 488B542410              	mov rdx, qword [rsp + 8 * 2]
  6630 000051D5 4883EA02                	sub rdx, 2
  6631 000051D9 48C744241003000000      	mov qword [rsp + 8 * 2], 3
  6632 000051E2 BE00000000              	mov rsi, 0
  6633 000051E7 488D5CD420              	lea rbx, [rsp + 2 * 8 + 2 * 8 + rdx * 8]
  6634 000051EC 48B9-                   	mov rcx, sob_nil
  6634 000051EE [0100000000000000] 
  6635                                  .L_lambda_opt_stack_shrink_loop_005f:
  6636 000051F6 4839D6                  	cmp rsi, rdx
  6637 000051F9 7427                    je .L_lambda_opt_stack_shrink_loop_exit_005f
  6638 000051FB BF11000000              	mov rdi, 17 ; 1+8+8
  6639 00005200 E8D8A70000              	call malloc
  6640 00005205 48894809                	mov SOB_PAIR_CDR(rax), rcx
  6641 00005209 48F7DE                  	neg rsi
  6642 0000520C 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  6643 00005210 48F7DE                  	neg rsi
  6644 00005213 48894801                	mov SOB_PAIR_CAR(rax), rcx
  6645 00005217 C60021                  	mov byte [rax], T_pair
  6646 0000521A 4889C1                  	mov rcx, rax
  6647 0000521D 48FFC6                  	inc rsi
  6648 00005220 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_005f
  6649                                  .L_lambda_opt_stack_shrink_loop_exit_005f:
  6650 00005222 48890B                  	mov qword [rbx], rcx
  6651 00005225 4883EB08                	sub rbx, 8
  6652 00005229 4889E7                  	mov rdi, rsp
  6653 0000522C 4883C720                	add rdi, 32
  6654 00005230 BE05000000              	mov rsi, 5
  6655                                  .L_lambda_opt_stack_shrink_loop_0060:
  6656 00005235 4883FE00                	cmp rsi,0
  6657 00005239 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0060
  6658 0000523B 488B0F                  	mov rcx, qword [rdi]
  6659 0000523E 48890B                  	mov [rbx], rcx
  6660 00005241 48FFCE                  	dec rsi
  6661 00005244 4883EB08                	sub rbx, 8
  6662 00005248 4883EF08                	sub rdi, 8
  6663 0000524C EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0060
  6664                                  .L_lambda_opt_stack_shrink_loop_exit_0060:
  6665 0000524E 4883C308                	add rbx, 8
  6666 00005252 4889DC                  	mov rsp, rbx
  6667                                  .L_lambda_opt_stack_adjusted_0020:
  6668 00005255 C8000000                	enter 0, 0
  6669 00005259 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
  6670 0000525D 50                      	push rax
  6671 0000525E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  6672 00005262 50                      	push rax
  6673 00005263 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6674 00005267 50                      	push rax
  6675 00005268 6A03                    	push 3
  6676 0000526A 488B4510                	mov rax, qword [rbp + 8 * 2]
  6677 0000526E 488B00                  	mov rax, qword [rax + 8 * 0]
  6678 00005271 488B00                  	mov rax, qword [rax + 8 * 0]
  6679 00005274 488B00                  	mov rax, qword [rax]
  6680                                  	assert_closure(rax)
    42 00005277 803805              <1>  cmp byte [%1], %2
    43 0000527A 0F8551BF0000        <1>  jne L_error_incorrect_type
  6681 00005280 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6682 00005283 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6683 00005286 FF7500                  	push qword [rbp] ; same the old rbp
  6684 00005289 BA06000000              	mov rdx, 3 + 3
  6685 0000528E 488B4D00                	mov rcx, [rbp]
  6686 00005292 4889EF                  	mov rdi, rbp
  6687                                  .L_tc_recycle_frame_loop_00ea:
  6688 00005295 4883FA00                	cmp rdx, 0
  6689 00005299 7413                    	je .L_tc_recycle_frame_done_00ea
  6690 0000529B 4883E908                	sub rcx, 8
  6691 0000529F 4883EF08                	sub rdi, 8
  6692 000052A3 488B37                  	mov rsi, [rdi]
  6693 000052A6 488931                  	mov qword [rcx], rsi
  6694 000052A9 48FFCA                  	dec rdx
  6695 000052AC EBE7                    	jmp .L_tc_recycle_frame_loop_00ea
  6696                                  .L_tc_recycle_frame_done_00ea:
  6697 000052AE 5D                      	pop rbp ; restore the old rbp
  6698 000052AF 4889CC                  	mov rsp, rcx
  6699 000052B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6700 000052B5 C9                      	leave
  6701 000052B6 C22800                  	ret 8 * (2 + 3)
  6702                                  .L_lambda_opt_end_0020:	; new closure is in rax
  6703 000052B9 C9                      	leave
  6704 000052BA C21800                  	ret 8 * (2 + 1)
  6705                                  .L_lambda_simple_end_00cf:	; new closure is in rax
  6706                                  	assert_closure(rax)
    42 000052BD 803805              <1>  cmp byte [%1], %2
    43 000052C0 0F850BBF0000        <1>  jne L_error_incorrect_type
  6707 000052C6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6708 000052C9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6709 000052CC 48890425[00030000]      	mov qword [free_var_96], rax
  6710 000052D4 48B8-                   	mov rax, sob_void
  6710 000052D6 [0000000000000000] 
  6711                                  
  6712 000052DE 4889C7                  	mov rdi, rax
  6713 000052E1 E808A70000              	call print_sexpr_if_not_void
  6714                                  
  6715 000052E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6716 000052EB E8EDA60000              	call malloc
  6717 000052F0 50                      	push rax
  6718 000052F1 BF00000000              	mov rdi, 8 * 0	; new rib
  6719 000052F6 E8E2A60000              	call malloc
  6720 000052FB 50                      	push rax
  6721 000052FC BF08000000              	mov rdi, 8 * 1	; extended env
  6722 00005301 E8D7A60000              	call malloc
  6723 00005306 488B7D10                	mov rdi, ENV
  6724 0000530A BE00000000              	mov rsi, 0
  6725 0000530F BA01000000              	mov rdx, 1
  6726                                  .L_lambda_simple_env_loop_00d4:	; ext_env[i + 1] <-- env[i]
  6727 00005314 4883FE00                	cmp rsi, 0
  6728 00005318 7410                    	je .L_lambda_simple_env_end_00d4
  6729 0000531A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6730 0000531E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6731 00005322 48FFC6                  	inc rsi
  6732 00005325 48FFC2                  	inc rdx
  6733 00005328 EBEA                    	jmp .L_lambda_simple_env_loop_00d4
  6734                                  .L_lambda_simple_env_end_00d4:
  6735 0000532A 5B                      	pop rbx
  6736 0000532B BE00000000              	mov rsi, 0
  6737                                  .L_lambda_simple_params_loop_00d4:	; copy params
  6738 00005330 4883FE00                	cmp rsi, 0
  6739 00005334 740E                    	je .L_lambda_simple_params_end_00d4
  6740 00005336 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6741 0000533B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6742 0000533F 48FFC6                  	inc rsi
  6743 00005342 EBEC                    	jmp .L_lambda_simple_params_loop_00d4
  6744                                  .L_lambda_simple_params_end_00d4:
  6745 00005344 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6746 00005347 4889C3                  	mov rbx, rax
  6747 0000534A 58                      	pop rax
  6748 0000534B C60005                  	mov byte [rax], T_closure
  6749 0000534E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6750 00005352 48C74009[5C530000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d4
  6751 0000535A EB79                    	jmp .L_lambda_simple_end_00d4
  6752                                  .L_lambda_simple_code_00d4:	; lambda-simple body
  6753 0000535C 48837C241000            	cmp qword [rsp + 8 * 2], 0
  6754 00005362 740B                    	je .L_lambda_simple_arity_check_ok_00d4
  6755 00005364 FF742410                	push qword [rsp + 8 * 2]
  6756 00005368 6A00                    	push 0
  6757 0000536A E927A60000              	jmp L_error_incorrect_arity_simple
  6758                                  .L_lambda_simple_arity_check_ok_00d4:
  6759 0000536F C8000000                	enter 0, 0
  6760 00005373 48B8-                   	mov rax, L_constants + 68
  6760 00005375 [4400000000000000] 
  6761 0000537D 50                      	push rax
  6762 0000537E 48B8-                   	mov rax, L_constants + 59
  6762 00005380 [3B00000000000000] 
  6763 00005388 50                      	push rax
  6764 00005389 6A02                    	push 2
  6765 0000538B 488B0425[30010000]      	mov rax, qword [free_var_38]
  6766                                  	assert_closure(rax)
    42 00005393 803805              <1>  cmp byte [%1], %2
    43 00005396 0F8535BE0000        <1>  jne L_error_incorrect_type
  6767 0000539C FF7001                  	push SOB_CLOSURE_ENV(rax)
  6768 0000539F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6769 000053A2 FF7500                  	push qword [rbp] ; same the old rbp
  6770 000053A5 BA05000000              	mov rdx, 2 + 3
  6771 000053AA 488B4D00                	mov rcx, [rbp]
  6772 000053AE 4889EF                  	mov rdi, rbp
  6773                                  .L_tc_recycle_frame_loop_00f4:
  6774 000053B1 4883FA00                	cmp rdx, 0
  6775 000053B5 7413                    	je .L_tc_recycle_frame_done_00f4
  6776 000053B7 4883E908                	sub rcx, 8
  6777 000053BB 4883EF08                	sub rdi, 8
  6778 000053BF 488B37                  	mov rsi, [rdi]
  6779 000053C2 488931                  	mov qword [rcx], rsi
  6780 000053C5 48FFCA                  	dec rdx
  6781 000053C8 EBE7                    	jmp .L_tc_recycle_frame_loop_00f4
  6782                                  .L_tc_recycle_frame_done_00f4:
  6783 000053CA 5D                      	pop rbp ; restore the old rbp
  6784 000053CB 4889CC                  	mov rsp, rcx
  6785 000053CE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6786 000053D1 C9                      	leave
  6787 000053D2 C21000                  	ret 8 * (2 + 0)
  6788                                  .L_lambda_simple_end_00d4:	; new closure is in rax
  6789 000053D5 50                      	push rax
  6790 000053D6 6A01                    	push 1
  6791 000053D8 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6792 000053DD E8FBA50000              	call malloc
  6793 000053E2 50                      	push rax
  6794 000053E3 BF00000000              	mov rdi, 8 * 0	; new rib
  6795 000053E8 E8F0A50000              	call malloc
  6796 000053ED 50                      	push rax
  6797 000053EE BF08000000              	mov rdi, 8 * 1	; extended env
  6798 000053F3 E8E5A50000              	call malloc
  6799 000053F8 488B7D10                	mov rdi, ENV
  6800 000053FC BE00000000              	mov rsi, 0
  6801 00005401 BA01000000              	mov rdx, 1
  6802                                  .L_lambda_simple_env_loop_00d1:	; ext_env[i + 1] <-- env[i]
  6803 00005406 4883FE00                	cmp rsi, 0
  6804 0000540A 7410                    	je .L_lambda_simple_env_end_00d1
  6805 0000540C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6806 00005410 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6807 00005414 48FFC6                  	inc rsi
  6808 00005417 48FFC2                  	inc rdx
  6809 0000541A EBEA                    	jmp .L_lambda_simple_env_loop_00d1
  6810                                  .L_lambda_simple_env_end_00d1:
  6811 0000541C 5B                      	pop rbx
  6812 0000541D BE00000000              	mov rsi, 0
  6813                                  .L_lambda_simple_params_loop_00d1:	; copy params
  6814 00005422 4883FE00                	cmp rsi, 0
  6815 00005426 740E                    	je .L_lambda_simple_params_end_00d1
  6816 00005428 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6817 0000542D 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6818 00005431 48FFC6                  	inc rsi
  6819 00005434 EBEC                    	jmp .L_lambda_simple_params_loop_00d1
  6820                                  .L_lambda_simple_params_end_00d1:
  6821 00005436 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6822 00005439 4889C3                  	mov rbx, rax
  6823 0000543C 58                      	pop rax
  6824 0000543D C60005                  	mov byte [rax], T_closure
  6825 00005440 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6826 00005444 48C74009[51540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d1
  6827 0000544C E995060000              	jmp .L_lambda_simple_end_00d1
  6828                                  .L_lambda_simple_code_00d1:	; lambda-simple body
  6829 00005451 48837C241001            	cmp qword [rsp + 8 * 2], 1
  6830 00005457 740B                    	je .L_lambda_simple_arity_check_ok_00d1
  6831 00005459 FF742410                	push qword [rsp + 8 * 2]
  6832 0000545D 6A01                    	push 1
  6833 0000545F E932A50000              	jmp L_error_incorrect_arity_simple
  6834                                  .L_lambda_simple_arity_check_ok_00d1:
  6835 00005464 C8000000                	enter 0, 0
  6836 00005468 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  6837 0000546D E86BA50000              	call malloc
  6838 00005472 50                      	push rax
  6839 00005473 BF08000000              	mov rdi, 8 * 1	; new rib
  6840 00005478 E860A50000              	call malloc
  6841 0000547D 50                      	push rax
  6842 0000547E BF10000000              	mov rdi, 8 * 2	; extended env
  6843 00005483 E855A50000              	call malloc
  6844 00005488 488B7D10                	mov rdi, ENV
  6845 0000548C BE00000000              	mov rsi, 0
  6846 00005491 BA01000000              	mov rdx, 1
  6847                                  .L_lambda_simple_env_loop_00d3:	; ext_env[i + 1] <-- env[i]
  6848 00005496 4883FE01                	cmp rsi, 1
  6849 0000549A 7410                    	je .L_lambda_simple_env_end_00d3
  6850 0000549C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  6851 000054A0 48890CD0                	mov qword [rax + 8 * rdx], rcx
  6852 000054A4 48FFC6                  	inc rsi
  6853 000054A7 48FFC2                  	inc rdx
  6854 000054AA EBEA                    	jmp .L_lambda_simple_env_loop_00d3
  6855                                  .L_lambda_simple_env_end_00d3:
  6856 000054AC 5B                      	pop rbx
  6857 000054AD BE00000000              	mov rsi, 0
  6858                                  .L_lambda_simple_params_loop_00d3:	; copy params
  6859 000054B2 4883FE01                	cmp rsi, 1
  6860 000054B6 740E                    	je .L_lambda_simple_params_end_00d3
  6861 000054B8 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  6862 000054BD 488914F3                	mov qword [rbx + 8 * rsi], rdx
  6863 000054C1 48FFC6                  	inc rsi
  6864 000054C4 EBEC                    	jmp .L_lambda_simple_params_loop_00d3
  6865                                  .L_lambda_simple_params_end_00d3:
  6866 000054C6 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  6867 000054C9 4889C3                  	mov rbx, rax
  6868 000054CC 58                      	pop rax
  6869 000054CD C60005                  	mov byte [rax], T_closure
  6870 000054D0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  6871 000054D4 48C74009[E1540000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d3
  6872 000054DC E976030000              	jmp .L_lambda_simple_end_00d3
  6873                                  .L_lambda_simple_code_00d3:	; lambda-simple body
  6874 000054E1 48837C241002            	cmp qword [rsp + 8 * 2], 2
  6875 000054E7 740B                    	je .L_lambda_simple_arity_check_ok_00d3
  6876 000054E9 FF742410                	push qword [rsp + 8 * 2]
  6877 000054ED 6A02                    	push 2
  6878 000054EF E9A2A40000              	jmp L_error_incorrect_arity_simple
  6879                                  .L_lambda_simple_arity_check_ok_00d3:
  6880 000054F4 C8000000                	enter 0, 0
  6881 000054F8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6882 000054FC 50                      	push rax
  6883 000054FD 6A01                    	push 1
  6884 000054FF 488B0425[48000000]      	mov rax, qword [free_var_9]
  6885                                  	assert_closure(rax)
    42 00005507 803805              <1>  cmp byte [%1], %2
    43 0000550A 0F85C1BC0000        <1>  jne L_error_incorrect_type
  6886 00005510 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6887 00005513 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6888 00005516 483D[02000000]          	cmp rax, sob_boolean_false
  6889 0000551C 0F8460010000                      	je .L_if_else_0074
  6890 00005522 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6891 00005526 50                      	push rax
  6892 00005527 6A01                    	push 1
  6893 00005529 488B0425[48000000]      	mov rax, qword [free_var_9]
  6894                                  	assert_closure(rax)
    42 00005531 803805              <1>  cmp byte [%1], %2
    43 00005534 0F8597BC0000        <1>  jne L_error_incorrect_type
  6895 0000553A FF7001                  	push SOB_CLOSURE_ENV(rax)
  6896 0000553D FF5009                  	call SOB_CLOSURE_CODE(rax)
  6897 00005540 483D[02000000]          	cmp rax, sob_boolean_false
  6898 00005546 7457                              	je .L_if_else_0070
  6899 00005548 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6900 0000554C 50                      	push rax
  6901 0000554D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6902 00005551 50                      	push rax
  6903 00005552 6A02                    	push 2
  6904 00005554 488B0425[10010000]      	mov rax, qword [free_var_34]
  6905                                  	assert_closure(rax)
    42 0000555C 803805              <1>  cmp byte [%1], %2
    43 0000555F 0F856CBC0000        <1>  jne L_error_incorrect_type
  6906 00005565 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6907 00005568 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6908 0000556B FF7500                  	push qword [rbp] ; same the old rbp
  6909 0000556E BA05000000              	mov rdx, 2 + 3
  6910 00005573 488B4D00                	mov rcx, [rbp]
  6911 00005577 4889EF                  	mov rdi, rbp
  6912                                  .L_tc_recycle_frame_loop_00ed:
  6913 0000557A 4883FA00                	cmp rdx, 0
  6914 0000557E 7413                    	je .L_tc_recycle_frame_done_00ed
  6915 00005580 4883E908                	sub rcx, 8
  6916 00005584 4883EF08                	sub rdi, 8
  6917 00005588 488B37                  	mov rsi, [rdi]
  6918 0000558B 488931                  	mov qword [rcx], rsi
  6919 0000558E 48FFCA                  	dec rdx
  6920 00005591 EBE7                    	jmp .L_tc_recycle_frame_loop_00ed
  6921                                  .L_tc_recycle_frame_done_00ed:
  6922 00005593 5D                      	pop rbp ; restore the old rbp
  6923 00005594 4889CC                  	mov rsp, rcx
  6924 00005597 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6925 0000559A E9DE000000              	jmp .L_if_end_0070
  6926                                            .L_if_else_0070:
  6927 0000559F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6928 000055A3 50                      	push rax
  6929 000055A4 6A01                    	push 1
  6930 000055A6 488B0425[40000000]      	mov rax, qword [free_var_8]
  6931                                  	assert_closure(rax)
    42 000055AE 803805              <1>  cmp byte [%1], %2
    43 000055B1 0F851ABC0000        <1>  jne L_error_incorrect_type
  6932 000055B7 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6933 000055BA FF5009                  	call SOB_CLOSURE_CODE(rax)
  6934 000055BD 483D[02000000]          	cmp rax, sob_boolean_false
  6935 000055C3 746E                              	je .L_if_else_006f
  6936 000055C5 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  6937 000055C9 50                      	push rax
  6938 000055CA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  6939 000055CE 50                      	push rax
  6940 000055CF 6A01                    	push 1
  6941 000055D1 488B0425[B8000000]      	mov rax, qword [free_var_23]
  6942                                  	assert_closure(rax)
    42 000055D9 803805              <1>  cmp byte [%1], %2
    43 000055DC 0F85EFBB0000        <1>  jne L_error_incorrect_type
  6943 000055E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6944 000055E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  6945 000055E8 50                      	push rax
  6946 000055E9 6A02                    	push 2
  6947 000055EB 488B0425[F0000000]      	mov rax, qword [free_var_30]
  6948                                  	assert_closure(rax)
    42 000055F3 803805              <1>  cmp byte [%1], %2
    43 000055F6 0F85D5BB0000        <1>  jne L_error_incorrect_type
  6949 000055FC FF7001                  	push SOB_CLOSURE_ENV(rax)
  6950 000055FF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6951 00005602 FF7500                  	push qword [rbp] ; same the old rbp
  6952 00005605 BA05000000              	mov rdx, 2 + 3
  6953 0000560A 488B4D00                	mov rcx, [rbp]
  6954 0000560E 4889EF                  	mov rdi, rbp
  6955                                  .L_tc_recycle_frame_loop_00ee:
  6956 00005611 4883FA00                	cmp rdx, 0
  6957 00005615 7413                    	je .L_tc_recycle_frame_done_00ee
  6958 00005617 4883E908                	sub rcx, 8
  6959 0000561B 4883EF08                	sub rdi, 8
  6960 0000561F 488B37                  	mov rsi, [rdi]
  6961 00005622 488931                  	mov qword [rcx], rsi
  6962 00005625 48FFCA                  	dec rdx
  6963 00005628 EBE7                    	jmp .L_tc_recycle_frame_loop_00ee
  6964                                  .L_tc_recycle_frame_done_00ee:
  6965 0000562A 5D                      	pop rbp ; restore the old rbp
  6966 0000562B 4889CC                  	mov rsp, rcx
  6967 0000562E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6968 00005631 EB4A                    	jmp .L_if_end_006f
  6969                                            .L_if_else_006f:
  6970 00005633 6A00                              	push 0
  6971 00005635 488B4510                	mov rax, qword [rbp + 8 * 2]
  6972 00005639 488B00                  	mov rax, qword [rax + 8 * 0]
  6973 0000563C 488B00                  	mov rax, qword [rax + 8 * 0]
  6974                                  	assert_closure(rax)
    42 0000563F 803805              <1>  cmp byte [%1], %2
    43 00005642 0F8589BB0000        <1>  jne L_error_incorrect_type
  6975 00005648 FF7001                  	push SOB_CLOSURE_ENV(rax)
  6976 0000564B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  6977 0000564E FF7500                  	push qword [rbp] ; same the old rbp
  6978 00005651 BA03000000              	mov rdx, 0 + 3
  6979 00005656 488B4D00                	mov rcx, [rbp]
  6980 0000565A 4889EF                  	mov rdi, rbp
  6981                                  .L_tc_recycle_frame_loop_00ef:
  6982 0000565D 4883FA00                	cmp rdx, 0
  6983 00005661 7413                    	je .L_tc_recycle_frame_done_00ef
  6984 00005663 4883E908                	sub rcx, 8
  6985 00005667 4883EF08                	sub rdi, 8
  6986 0000566B 488B37                  	mov rsi, [rdi]
  6987 0000566E 488931                  	mov qword [rcx], rsi
  6988 00005671 48FFCA                  	dec rdx
  6989 00005674 EBE7                    	jmp .L_tc_recycle_frame_loop_00ef
  6990                                  .L_tc_recycle_frame_done_00ef:
  6991 00005676 5D                      	pop rbp ; restore the old rbp
  6992 00005677 4889CC                  	mov rsp, rcx
  6993 0000567A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  6994                                  .L_if_end_006f:
  6995                                  .L_if_end_0070:
  6996 0000567D E9D1010000              	jmp .L_if_end_0074
  6997                                            .L_if_else_0074:
  6998 00005682 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  6999 00005686 50                      	push rax
  7000 00005687 6A01                    	push 1
  7001 00005689 488B0425[40000000]      	mov rax, qword [free_var_8]
  7002                                  	assert_closure(rax)
    42 00005691 803805              <1>  cmp byte [%1], %2
    43 00005694 0F8537BB0000        <1>  jne L_error_incorrect_type
  7003 0000569A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7004 0000569D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7005 000056A0 483D[02000000]          	cmp rax, sob_boolean_false
  7006 000056A6 0F845D010000                      	je .L_if_else_0073
  7007 000056AC 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7008 000056B0 50                      	push rax
  7009 000056B1 6A01                    	push 1
  7010 000056B3 488B0425[48000000]      	mov rax, qword [free_var_9]
  7011                                  	assert_closure(rax)
    42 000056BB 803805              <1>  cmp byte [%1], %2
    43 000056BE 0F850DBB0000        <1>  jne L_error_incorrect_type
  7012 000056C4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7013 000056C7 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7014 000056CA 483D[02000000]          	cmp rax, sob_boolean_false
  7015 000056D0 7471                              	je .L_if_else_0072
  7016 000056D2 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7017 000056D6 50                      	push rax
  7018 000056D7 6A01                    	push 1
  7019 000056D9 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7020                                  	assert_closure(rax)
    42 000056E1 803805              <1>  cmp byte [%1], %2
    43 000056E4 0F85E7BA0000        <1>  jne L_error_incorrect_type
  7021 000056EA FF7001                  	push SOB_CLOSURE_ENV(rax)
  7022 000056ED FF5009                  	call SOB_CLOSURE_CODE(rax)
  7023 000056F0 50                      	push rax
  7024 000056F1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7025 000056F5 50                      	push rax
  7026 000056F6 6A02                    	push 2
  7027 000056F8 488B0425[F0000000]      	mov rax, qword [free_var_30]
  7028                                  	assert_closure(rax)
    42 00005700 803805              <1>  cmp byte [%1], %2
    43 00005703 0F85C8BA0000        <1>  jne L_error_incorrect_type
  7029 00005709 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7030 0000570C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7031 0000570F FF7500                  	push qword [rbp] ; same the old rbp
  7032 00005712 BA05000000              	mov rdx, 2 + 3
  7033 00005717 488B4D00                	mov rcx, [rbp]
  7034 0000571B 4889EF                  	mov rdi, rbp
  7035                                  .L_tc_recycle_frame_loop_00f0:
  7036 0000571E 4883FA00                	cmp rdx, 0
  7037 00005722 7413                    	je .L_tc_recycle_frame_done_00f0
  7038 00005724 4883E908                	sub rcx, 8
  7039 00005728 4883EF08                	sub rdi, 8
  7040 0000572C 488B37                  	mov rsi, [rdi]
  7041 0000572F 488931                  	mov qword [rcx], rsi
  7042 00005732 48FFCA                  	dec rdx
  7043 00005735 EBE7                    	jmp .L_tc_recycle_frame_loop_00f0
  7044                                  .L_tc_recycle_frame_done_00f0:
  7045 00005737 5D                      	pop rbp ; restore the old rbp
  7046 00005738 4889CC                  	mov rsp, rcx
  7047 0000573B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7048 0000573E E9C4000000              	jmp .L_if_end_0072
  7049                                            .L_if_else_0072:
  7050 00005743 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7051 00005747 50                      	push rax
  7052 00005748 6A01                    	push 1
  7053 0000574A 488B0425[40000000]      	mov rax, qword [free_var_8]
  7054                                  	assert_closure(rax)
    42 00005752 803805              <1>  cmp byte [%1], %2
    43 00005755 0F8576BA0000        <1>  jne L_error_incorrect_type
  7055 0000575B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7056 0000575E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7057 00005761 483D[02000000]          	cmp rax, sob_boolean_false
  7058 00005767 7454                              	je .L_if_else_0071
  7059 00005769 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7060 0000576D 50                      	push rax
  7061 0000576E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7062 00005772 50                      	push rax
  7063 00005773 6A02                    	push 2
  7064 00005775 488B0425[F0000000]      	mov rax, qword [free_var_30]
  7065                                  	assert_closure(rax)
    42 0000577D 803805              <1>  cmp byte [%1], %2
    43 00005780 0F854BBA0000        <1>  jne L_error_incorrect_type
  7066 00005786 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7067 00005789 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7068 0000578C FF7500                  	push qword [rbp] ; same the old rbp
  7069 0000578F BA05000000              	mov rdx, 2 + 3
  7070 00005794 488B4D00                	mov rcx, [rbp]
  7071 00005798 4889EF                  	mov rdi, rbp
  7072                                  .L_tc_recycle_frame_loop_00f1:
  7073 0000579B 4883FA00                	cmp rdx, 0
  7074 0000579F 7413                    	je .L_tc_recycle_frame_done_00f1
  7075 000057A1 4883E908                	sub rcx, 8
  7076 000057A5 4883EF08                	sub rdi, 8
  7077 000057A9 488B37                  	mov rsi, [rdi]
  7078 000057AC 488931                  	mov qword [rcx], rsi
  7079 000057AF 48FFCA                  	dec rdx
  7080 000057B2 EBE7                    	jmp .L_tc_recycle_frame_loop_00f1
  7081                                  .L_tc_recycle_frame_done_00f1:
  7082 000057B4 5D                      	pop rbp ; restore the old rbp
  7083 000057B5 4889CC                  	mov rsp, rcx
  7084 000057B8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7085 000057BB EB4A                    	jmp .L_if_end_0071
  7086                                            .L_if_else_0071:
  7087 000057BD 6A00                              	push 0
  7088 000057BF 488B4510                	mov rax, qword [rbp + 8 * 2]
  7089 000057C3 488B00                  	mov rax, qword [rax + 8 * 0]
  7090 000057C6 488B00                  	mov rax, qword [rax + 8 * 0]
  7091                                  	assert_closure(rax)
    42 000057C9 803805              <1>  cmp byte [%1], %2
    43 000057CC 0F85FFB90000        <1>  jne L_error_incorrect_type
  7092 000057D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7093 000057D5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7094 000057D8 FF7500                  	push qword [rbp] ; same the old rbp
  7095 000057DB BA03000000              	mov rdx, 0 + 3
  7096 000057E0 488B4D00                	mov rcx, [rbp]
  7097 000057E4 4889EF                  	mov rdi, rbp
  7098                                  .L_tc_recycle_frame_loop_00f2:
  7099 000057E7 4883FA00                	cmp rdx, 0
  7100 000057EB 7413                    	je .L_tc_recycle_frame_done_00f2
  7101 000057ED 4883E908                	sub rcx, 8
  7102 000057F1 4883EF08                	sub rdi, 8
  7103 000057F5 488B37                  	mov rsi, [rdi]
  7104 000057F8 488931                  	mov qword [rcx], rsi
  7105 000057FB 48FFCA                  	dec rdx
  7106 000057FE EBE7                    	jmp .L_tc_recycle_frame_loop_00f2
  7107                                  .L_tc_recycle_frame_done_00f2:
  7108 00005800 5D                      	pop rbp ; restore the old rbp
  7109 00005801 4889CC                  	mov rsp, rcx
  7110 00005804 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7111                                  .L_if_end_0071:
  7112                                  .L_if_end_0072:
  7113 00005807 EB4A                    	jmp .L_if_end_0073
  7114                                            .L_if_else_0073:
  7115 00005809 6A00                              	push 0
  7116 0000580B 488B4510                	mov rax, qword [rbp + 8 * 2]
  7117 0000580F 488B00                  	mov rax, qword [rax + 8 * 0]
  7118 00005812 488B00                  	mov rax, qword [rax + 8 * 0]
  7119                                  	assert_closure(rax)
    42 00005815 803805              <1>  cmp byte [%1], %2
    43 00005818 0F85B3B90000        <1>  jne L_error_incorrect_type
  7120 0000581E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7121 00005821 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7122 00005824 FF7500                  	push qword [rbp] ; same the old rbp
  7123 00005827 BA03000000              	mov rdx, 0 + 3
  7124 0000582C 488B4D00                	mov rcx, [rbp]
  7125 00005830 4889EF                  	mov rdi, rbp
  7126                                  .L_tc_recycle_frame_loop_00f3:
  7127 00005833 4883FA00                	cmp rdx, 0
  7128 00005837 7413                    	je .L_tc_recycle_frame_done_00f3
  7129 00005839 4883E908                	sub rcx, 8
  7130 0000583D 4883EF08                	sub rdi, 8
  7131 00005841 488B37                  	mov rsi, [rdi]
  7132 00005844 488931                  	mov qword [rcx], rsi
  7133 00005847 48FFCA                  	dec rdx
  7134 0000584A EBE7                    	jmp .L_tc_recycle_frame_loop_00f3
  7135                                  .L_tc_recycle_frame_done_00f3:
  7136 0000584C 5D                      	pop rbp ; restore the old rbp
  7137 0000584D 4889CC                  	mov rsp, rcx
  7138 00005850 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7139                                  .L_if_end_0073:
  7140                                  .L_if_end_0074:
  7141 00005853 C9                      	leave
  7142 00005854 C22000                  	ret 8 * (2 + 2)
  7143                                  .L_lambda_simple_end_00d3:	; new closure is in rax
  7144 00005857 50                      	push rax
  7145 00005858 6A01                    	push 1
  7146 0000585A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7147 0000585F E879A10000              	call malloc
  7148 00005864 50                      	push rax
  7149 00005865 BF08000000              	mov rdi, 8 * 1	; new rib
  7150 0000586A E86EA10000              	call malloc
  7151 0000586F 50                      	push rax
  7152 00005870 BF10000000              	mov rdi, 8 * 2	; extended env
  7153 00005875 E863A10000              	call malloc
  7154 0000587A 488B7D10                	mov rdi, ENV
  7155 0000587E BE00000000              	mov rsi, 0
  7156 00005883 BA01000000              	mov rdx, 1
  7157                                  .L_lambda_simple_env_loop_00d2:	; ext_env[i + 1] <-- env[i]
  7158 00005888 4883FE01                	cmp rsi, 1
  7159 0000588C 7410                    	je .L_lambda_simple_env_end_00d2
  7160 0000588E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7161 00005892 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7162 00005896 48FFC6                  	inc rsi
  7163 00005899 48FFC2                  	inc rdx
  7164 0000589C EBEA                    	jmp .L_lambda_simple_env_loop_00d2
  7165                                  .L_lambda_simple_env_end_00d2:
  7166 0000589E 5B                      	pop rbx
  7167 0000589F BE00000000              	mov rsi, 0
  7168                                  .L_lambda_simple_params_loop_00d2:	; copy params
  7169 000058A4 4883FE01                	cmp rsi, 1
  7170 000058A8 740E                    	je .L_lambda_simple_params_end_00d2
  7171 000058AA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7172 000058AF 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7173 000058B3 48FFC6                  	inc rsi
  7174 000058B6 EBEC                    	jmp .L_lambda_simple_params_loop_00d2
  7175                                  .L_lambda_simple_params_end_00d2:
  7176 000058B8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7177 000058BB 4889C3                  	mov rbx, rax
  7178 000058BE 58                      	pop rax
  7179 000058BF C60005                  	mov byte [rax], T_closure
  7180 000058C2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7181 000058C6 48C74009[D3580000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d2
  7182 000058CE E9D1010000              	jmp .L_lambda_simple_end_00d2
  7183                                  .L_lambda_simple_code_00d2:	; lambda-simple body
  7184 000058D3 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7185 000058D9 740B                    	je .L_lambda_simple_arity_check_ok_00d2
  7186 000058DB FF742410                	push qword [rsp + 8 * 2]
  7187 000058DF 6A01                    	push 1
  7188 000058E1 E9B0A00000              	jmp L_error_incorrect_arity_simple
  7189                                  .L_lambda_simple_arity_check_ok_00d2:
  7190 000058E6 C8000000                	enter 0, 0
  7191 000058EA BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7192 000058EF E8E9A00000              	call malloc
  7193 000058F4 50                      	push rax
  7194 000058F5 BF08000000              	mov rdi, 8 * 1	; new rib
  7195 000058FA E8DEA00000              	call malloc
  7196 000058FF 50                      	push rax
  7197 00005900 BF18000000              	mov rdi, 8 * 3	; extended env
  7198 00005905 E8D3A00000              	call malloc
  7199 0000590A 488B7D10                	mov rdi, ENV
  7200 0000590E BE00000000              	mov rsi, 0
  7201 00005913 BA01000000              	mov rdx, 1
  7202                                  .L_lambda_opt_env_loop_0021:	; ext_env[i + 1] <-- env[i]
  7203 00005918 4883FE02                	cmp rsi, 2
  7204 0000591C 7410                    	je .L_lambda_opt_env_end_0021
  7205 0000591E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7206 00005922 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7207 00005926 48FFC6                  	inc rsi
  7208 00005929 48FFC2                  	inc rdx
  7209 0000592C EBEA                    	jmp .L_lambda_opt_env_loop_0021
  7210                                  .L_lambda_opt_env_end_0021:
  7211 0000592E 5B                      	pop rbx
  7212 0000592F BE00000000              	mov rsi, 0
  7213                                  .L_lambda_opt_params_loop_0021:	; copy params
  7214 00005934 4883FE01                	cmp rsi, 1
  7215 00005938 740E                    	je .L_lambda_opt_params_end_0021
  7216 0000593A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7217 0000593F 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7218 00005943 48FFC6                  	inc rsi
  7219 00005946 EBEC                    	jmp .L_lambda_opt_params_loop_0021
  7220                                  .L_lambda_opt_params_end_0021:
  7221 00005948 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7222 0000594B 4889C3                  	mov rbx, rax
  7223 0000594E 58                      	pop rax
  7224 0000594F C60005                  	mov byte [rax], T_closure
  7225 00005952 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7226 00005956 48C74009[63590000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0021
  7227 0000595E E93D010000              	jmp .L_lambda_opt_end_0021
  7228                                  .L_lambda_opt_code_0021:	; lambda-opt body
  7229 00005963 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7230 00005969 740D                    	je .L_lambda_opt_arity_check_exact_0021
  7231 0000596B 7F43                    	jg .L_lambda_opt_arity_check_more_0021
  7232 0000596D FF742410                	push qword [rsp + 8 * 2]
  7233 00005971 6A00                    	push 0
  7234 00005973 E932A00000              	jmp L_error_incorrect_arity_opt
  7235                                  .L_lambda_opt_arity_check_exact_0021:
  7236 00005978 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  7237 00005981 BA03000000              	mov rdx, 3
  7238 00005986 FF3424                  	push qword [rsp]
  7239 00005989 BE01000000              	mov rsi, 1
  7240                                  .L_lambda_opt_stack_shrink_loop_0061:
  7241 0000598E 4839D6                  	cmp rsi, rdx
  7242 00005991 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0061
  7243 00005993 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  7244 00005998 488B0B                  	mov rcx, [rbx]
  7245 0000599B 48894BF8                	mov qword [rbx - 8], rcx
  7246 0000599F 48FFC6                  	inc rsi
  7247 000059A2 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0061
  7248                                  .L_lambda_opt_stack_shrink_loop_exit_0061:
  7249 000059A4 48C703[01000000]        	mov qword [rbx], sob_nil
  7250 000059AB E985000000              	jmp .L_lambda_opt_stack_adjusted_0021
  7251                                  .L_lambda_opt_arity_check_more_0021:
  7252 000059B0 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7253 000059B5 4883EA00                	sub rdx, 0
  7254 000059B9 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  7255 000059C2 BE00000000              	mov rsi, 0
  7256 000059C7 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  7257 000059CC 48B9-                   	mov rcx, sob_nil
  7257 000059CE [0100000000000000] 
  7258                                  .L_lambda_opt_stack_shrink_loop_0062:
  7259 000059D6 4839D6                  	cmp rsi, rdx
  7260 000059D9 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0062
  7261 000059DB BF11000000              	mov rdi, 17 ; 1+8+8
  7262 000059E0 E8F89F0000              	call malloc
  7263 000059E5 48894809                	mov SOB_PAIR_CDR(rax), rcx
  7264 000059E9 48F7DE                  	neg rsi
  7265 000059EC 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  7266 000059F0 48F7DE                  	neg rsi
  7267 000059F3 48894801                	mov SOB_PAIR_CAR(rax), rcx
  7268 000059F7 C60021                  	mov byte [rax], T_pair
  7269 000059FA 4889C1                  	mov rcx, rax
  7270 000059FD 48FFC6                  	inc rsi
  7271 00005A00 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0062
  7272                                  .L_lambda_opt_stack_shrink_loop_exit_0062:
  7273 00005A02 48890B                  	mov qword [rbx], rcx
  7274 00005A05 4883EB08                	sub rbx, 8
  7275 00005A09 4889E7                  	mov rdi, rsp
  7276 00005A0C 4883C710                	add rdi, 16
  7277 00005A10 BE03000000              	mov rsi, 3
  7278                                  .L_lambda_opt_stack_shrink_loop_0063:
  7279 00005A15 4883FE00                	cmp rsi,0
  7280 00005A19 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0063
  7281 00005A1B 488B0F                  	mov rcx, qword [rdi]
  7282 00005A1E 48890B                  	mov [rbx], rcx
  7283 00005A21 48FFCE                  	dec rsi
  7284 00005A24 4883EB08                	sub rbx, 8
  7285 00005A28 4883EF08                	sub rdi, 8
  7286 00005A2C EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0063
  7287                                  .L_lambda_opt_stack_shrink_loop_exit_0063:
  7288 00005A2E 4883C308                	add rbx, 8
  7289 00005A32 4889DC                  	mov rsp, rbx
  7290                                  .L_lambda_opt_stack_adjusted_0021:
  7291 00005A35 C8000000                	enter 0, 0
  7292 00005A39 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7293 00005A3D 50                      	push rax
  7294 00005A3E 48B8-                   	mov rax, L_constants + 32
  7294 00005A40 [2000000000000000] 
  7295 00005A48 50                      	push rax
  7296 00005A49 488B4510                	mov rax, qword [rbp + 8 * 2]
  7297 00005A4D 488B00                  	mov rax, qword [rax + 8 * 0]
  7298 00005A50 488B00                  	mov rax, qword [rax + 8 * 0]
  7299 00005A53 50                      	push rax
  7300 00005A54 6A03                    	push 3
  7301 00005A56 488B0425[F8020000]      	mov rax, qword [free_var_95]
  7302                                  	assert_closure(rax)
    42 00005A5E 803805              <1>  cmp byte [%1], %2
    43 00005A61 0F856AB70000        <1>  jne L_error_incorrect_type
  7303 00005A67 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7304 00005A6A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7305 00005A6D FF7500                  	push qword [rbp] ; same the old rbp
  7306 00005A70 BA06000000              	mov rdx, 3 + 3
  7307 00005A75 488B4D00                	mov rcx, [rbp]
  7308 00005A79 4889EF                  	mov rdi, rbp
  7309                                  .L_tc_recycle_frame_loop_00ec:
  7310 00005A7C 4883FA00                	cmp rdx, 0
  7311 00005A80 7413                    	je .L_tc_recycle_frame_done_00ec
  7312 00005A82 4883E908                	sub rcx, 8
  7313 00005A86 4883EF08                	sub rdi, 8
  7314 00005A8A 488B37                  	mov rsi, [rdi]
  7315 00005A8D 488931                  	mov qword [rcx], rsi
  7316 00005A90 48FFCA                  	dec rdx
  7317 00005A93 EBE7                    	jmp .L_tc_recycle_frame_loop_00ec
  7318                                  .L_tc_recycle_frame_done_00ec:
  7319 00005A95 5D                      	pop rbp ; restore the old rbp
  7320 00005A96 4889CC                  	mov rsp, rcx
  7321 00005A99 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7322 00005A9C C9                      	leave
  7323 00005A9D C21800                  	ret 8 * (2 + 1)
  7324                                  .L_lambda_opt_end_0021:	; new closure is in rax
  7325 00005AA0 C9                      	leave
  7326 00005AA1 C21800                  	ret 8 * (2 + 1)
  7327                                  .L_lambda_simple_end_00d2:	; new closure is in rax
  7328                                  	assert_closure(rax)
    42 00005AA4 803805              <1>  cmp byte [%1], %2
    43 00005AA7 0F8524B70000        <1>  jne L_error_incorrect_type
  7329 00005AAD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7330 00005AB0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7331 00005AB3 FF7500                  	push qword [rbp] ; same the old rbp
  7332 00005AB6 BA04000000              	mov rdx, 1 + 3
  7333 00005ABB 488B4D00                	mov rcx, [rbp]
  7334 00005ABF 4889EF                  	mov rdi, rbp
  7335                                  .L_tc_recycle_frame_loop_00eb:
  7336 00005AC2 4883FA00                	cmp rdx, 0
  7337 00005AC6 7413                    	je .L_tc_recycle_frame_done_00eb
  7338 00005AC8 4883E908                	sub rcx, 8
  7339 00005ACC 4883EF08                	sub rdi, 8
  7340 00005AD0 488B37                  	mov rsi, [rdi]
  7341 00005AD3 488931                  	mov qword [rcx], rsi
  7342 00005AD6 48FFCA                  	dec rdx
  7343 00005AD9 EBE7                    	jmp .L_tc_recycle_frame_loop_00eb
  7344                                  .L_tc_recycle_frame_done_00eb:
  7345 00005ADB 5D                      	pop rbp ; restore the old rbp
  7346 00005ADC 4889CC                  	mov rsp, rcx
  7347 00005ADF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7348 00005AE2 C9                      	leave
  7349 00005AE3 C21800                  	ret 8 * (2 + 1)
  7350                                  .L_lambda_simple_end_00d1:	; new closure is in rax
  7351                                  	assert_closure(rax)
    42 00005AE6 803805              <1>  cmp byte [%1], %2
    43 00005AE9 0F85E2B60000        <1>  jne L_error_incorrect_type
  7352 00005AEF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7353 00005AF2 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7354 00005AF5 48890425[08030000]      	mov qword [free_var_97], rax
  7355 00005AFD 48B8-                   	mov rax, sob_void
  7355 00005AFF [0000000000000000] 
  7356                                  
  7357 00005B07 4889C7                  	mov rdi, rax
  7358 00005B0A E8DF9E0000              	call print_sexpr_if_not_void
  7359                                  
  7360 00005B0F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7361 00005B14 E8C49E0000              	call malloc
  7362 00005B19 50                      	push rax
  7363 00005B1A BF00000000              	mov rdi, 8 * 0	; new rib
  7364 00005B1F E8B99E0000              	call malloc
  7365 00005B24 50                      	push rax
  7366 00005B25 BF08000000              	mov rdi, 8 * 1	; extended env
  7367 00005B2A E8AE9E0000              	call malloc
  7368 00005B2F 488B7D10                	mov rdi, ENV
  7369 00005B33 BE00000000              	mov rsi, 0
  7370 00005B38 BA01000000              	mov rdx, 1
  7371                                  .L_lambda_simple_env_loop_00d9:	; ext_env[i + 1] <-- env[i]
  7372 00005B3D 4883FE00                	cmp rsi, 0
  7373 00005B41 7410                    	je .L_lambda_simple_env_end_00d9
  7374 00005B43 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7375 00005B47 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7376 00005B4B 48FFC6                  	inc rsi
  7377 00005B4E 48FFC2                  	inc rdx
  7378 00005B51 EBEA                    	jmp .L_lambda_simple_env_loop_00d9
  7379                                  .L_lambda_simple_env_end_00d9:
  7380 00005B53 5B                      	pop rbx
  7381 00005B54 BE00000000              	mov rsi, 0
  7382                                  .L_lambda_simple_params_loop_00d9:	; copy params
  7383 00005B59 4883FE00                	cmp rsi, 0
  7384 00005B5D 740E                    	je .L_lambda_simple_params_end_00d9
  7385 00005B5F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7386 00005B64 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7387 00005B68 48FFC6                  	inc rsi
  7388 00005B6B EBEC                    	jmp .L_lambda_simple_params_loop_00d9
  7389                                  .L_lambda_simple_params_end_00d9:
  7390 00005B6D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7391 00005B70 4889C3                  	mov rbx, rax
  7392 00005B73 58                      	pop rax
  7393 00005B74 C60005                  	mov byte [rax], T_closure
  7394 00005B77 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7395 00005B7B 48C74009[855B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d9
  7396 00005B83 EB79                    	jmp .L_lambda_simple_end_00d9
  7397                                  .L_lambda_simple_code_00d9:	; lambda-simple body
  7398 00005B85 48837C241000            	cmp qword [rsp + 8 * 2], 0
  7399 00005B8B 740B                    	je .L_lambda_simple_arity_check_ok_00d9
  7400 00005B8D FF742410                	push qword [rsp + 8 * 2]
  7401 00005B91 6A00                    	push 0
  7402 00005B93 E9FE9D0000              	jmp L_error_incorrect_arity_simple
  7403                                  .L_lambda_simple_arity_check_ok_00d9:
  7404 00005B98 C8000000                	enter 0, 0
  7405 00005B9C 48B8-                   	mov rax, L_constants + 68
  7405 00005B9E [4400000000000000] 
  7406 00005BA6 50                      	push rax
  7407 00005BA7 48B8-                   	mov rax, L_constants + 119
  7407 00005BA9 [7700000000000000] 
  7408 00005BB1 50                      	push rax
  7409 00005BB2 6A02                    	push 2
  7410 00005BB4 488B0425[30010000]      	mov rax, qword [free_var_38]
  7411                                  	assert_closure(rax)
    42 00005BBC 803805              <1>  cmp byte [%1], %2
    43 00005BBF 0F850CB60000        <1>  jne L_error_incorrect_type
  7412 00005BC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7413 00005BC8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7414 00005BCB FF7500                  	push qword [rbp] ; same the old rbp
  7415 00005BCE BA05000000              	mov rdx, 2 + 3
  7416 00005BD3 488B4D00                	mov rcx, [rbp]
  7417 00005BD7 4889EF                  	mov rdi, rbp
  7418                                  .L_tc_recycle_frame_loop_0100:
  7419 00005BDA 4883FA00                	cmp rdx, 0
  7420 00005BDE 7413                    	je .L_tc_recycle_frame_done_0100
  7421 00005BE0 4883E908                	sub rcx, 8
  7422 00005BE4 4883EF08                	sub rdi, 8
  7423 00005BE8 488B37                  	mov rsi, [rdi]
  7424 00005BEB 488931                  	mov qword [rcx], rsi
  7425 00005BEE 48FFCA                  	dec rdx
  7426 00005BF1 EBE7                    	jmp .L_tc_recycle_frame_loop_0100
  7427                                  .L_tc_recycle_frame_done_0100:
  7428 00005BF3 5D                      	pop rbp ; restore the old rbp
  7429 00005BF4 4889CC                  	mov rsp, rcx
  7430 00005BF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7431 00005BFA C9                      	leave
  7432 00005BFB C21000                  	ret 8 * (2 + 0)
  7433                                  .L_lambda_simple_end_00d9:	; new closure is in rax
  7434 00005BFE 50                      	push rax
  7435 00005BFF 6A01                    	push 1
  7436 00005C01 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7437 00005C06 E8D29D0000              	call malloc
  7438 00005C0B 50                      	push rax
  7439 00005C0C BF00000000              	mov rdi, 8 * 0	; new rib
  7440 00005C11 E8C79D0000              	call malloc
  7441 00005C16 50                      	push rax
  7442 00005C17 BF08000000              	mov rdi, 8 * 1	; extended env
  7443 00005C1C E8BC9D0000              	call malloc
  7444 00005C21 488B7D10                	mov rdi, ENV
  7445 00005C25 BE00000000              	mov rsi, 0
  7446 00005C2A BA01000000              	mov rdx, 1
  7447                                  .L_lambda_simple_env_loop_00d5:	; ext_env[i + 1] <-- env[i]
  7448 00005C2F 4883FE00                	cmp rsi, 0
  7449 00005C33 7410                    	je .L_lambda_simple_env_end_00d5
  7450 00005C35 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7451 00005C39 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7452 00005C3D 48FFC6                  	inc rsi
  7453 00005C40 48FFC2                  	inc rdx
  7454 00005C43 EBEA                    	jmp .L_lambda_simple_env_loop_00d5
  7455                                  .L_lambda_simple_env_end_00d5:
  7456 00005C45 5B                      	pop rbx
  7457 00005C46 BE00000000              	mov rsi, 0
  7458                                  .L_lambda_simple_params_loop_00d5:	; copy params
  7459 00005C4B 4883FE00                	cmp rsi, 0
  7460 00005C4F 740E                    	je .L_lambda_simple_params_end_00d5
  7461 00005C51 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7462 00005C56 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7463 00005C5A 48FFC6                  	inc rsi
  7464 00005C5D EBEC                    	jmp .L_lambda_simple_params_loop_00d5
  7465                                  .L_lambda_simple_params_end_00d5:
  7466 00005C5F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7467 00005C62 4889C3                  	mov rbx, rax
  7468 00005C65 58                      	pop rax
  7469 00005C66 C60005                  	mov byte [rax], T_closure
  7470 00005C69 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7471 00005C6D 48C74009[7A5C0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d5
  7472 00005C75 E916080000              	jmp .L_lambda_simple_end_00d5
  7473                                  .L_lambda_simple_code_00d5:	; lambda-simple body
  7474 00005C7A 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7475 00005C80 740B                    	je .L_lambda_simple_arity_check_ok_00d5
  7476 00005C82 FF742410                	push qword [rsp + 8 * 2]
  7477 00005C86 6A01                    	push 1
  7478 00005C88 E9099D0000              	jmp L_error_incorrect_arity_simple
  7479                                  .L_lambda_simple_arity_check_ok_00d5:
  7480 00005C8D C8000000                	enter 0, 0
  7481 00005C91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7482 00005C96 E8429D0000              	call malloc
  7483 00005C9B 50                      	push rax
  7484 00005C9C BF08000000              	mov rdi, 8 * 1	; new rib
  7485 00005CA1 E8379D0000              	call malloc
  7486 00005CA6 50                      	push rax
  7487 00005CA7 BF10000000              	mov rdi, 8 * 2	; extended env
  7488 00005CAC E82C9D0000              	call malloc
  7489 00005CB1 488B7D10                	mov rdi, ENV
  7490 00005CB5 BE00000000              	mov rsi, 0
  7491 00005CBA BA01000000              	mov rdx, 1
  7492                                  .L_lambda_simple_env_loop_00d8:	; ext_env[i + 1] <-- env[i]
  7493 00005CBF 4883FE01                	cmp rsi, 1
  7494 00005CC3 7410                    	je .L_lambda_simple_env_end_00d8
  7495 00005CC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7496 00005CC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7497 00005CCD 48FFC6                  	inc rsi
  7498 00005CD0 48FFC2                  	inc rdx
  7499 00005CD3 EBEA                    	jmp .L_lambda_simple_env_loop_00d8
  7500                                  .L_lambda_simple_env_end_00d8:
  7501 00005CD5 5B                      	pop rbx
  7502 00005CD6 BE00000000              	mov rsi, 0
  7503                                  .L_lambda_simple_params_loop_00d8:	; copy params
  7504 00005CDB 4883FE01                	cmp rsi, 1
  7505 00005CDF 740E                    	je .L_lambda_simple_params_end_00d8
  7506 00005CE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7507 00005CE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7508 00005CEA 48FFC6                  	inc rsi
  7509 00005CED EBEC                    	jmp .L_lambda_simple_params_loop_00d8
  7510                                  .L_lambda_simple_params_end_00d8:
  7511 00005CEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7512 00005CF2 4889C3                  	mov rbx, rax
  7513 00005CF5 58                      	pop rax
  7514 00005CF6 C60005                  	mov byte [rax], T_closure
  7515 00005CF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7516 00005CFD 48C74009[0A5D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d8
  7517 00005D05 E976030000              	jmp .L_lambda_simple_end_00d8
  7518                                  .L_lambda_simple_code_00d8:	; lambda-simple body
  7519 00005D0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
  7520 00005D10 740B                    	je .L_lambda_simple_arity_check_ok_00d8
  7521 00005D12 FF742410                	push qword [rsp + 8 * 2]
  7522 00005D16 6A02                    	push 2
  7523 00005D18 E9799C0000              	jmp L_error_incorrect_arity_simple
  7524                                  .L_lambda_simple_arity_check_ok_00d8:
  7525 00005D1D C8000000                	enter 0, 0
  7526 00005D21 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7527 00005D25 50                      	push rax
  7528 00005D26 6A01                    	push 1
  7529 00005D28 488B0425[48000000]      	mov rax, qword [free_var_9]
  7530                                  	assert_closure(rax)
    42 00005D30 803805              <1>  cmp byte [%1], %2
    43 00005D33 0F8598B40000        <1>  jne L_error_incorrect_type
  7531 00005D39 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7532 00005D3C FF5009                  	call SOB_CLOSURE_CODE(rax)
  7533 00005D3F 483D[02000000]          	cmp rax, sob_boolean_false
  7534 00005D45 0F8460010000                      	je .L_if_else_007b
  7535 00005D4B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7536 00005D4F 50                      	push rax
  7537 00005D50 6A01                    	push 1
  7538 00005D52 488B0425[48000000]      	mov rax, qword [free_var_9]
  7539                                  	assert_closure(rax)
    42 00005D5A 803805              <1>  cmp byte [%1], %2
    43 00005D5D 0F856EB40000        <1>  jne L_error_incorrect_type
  7540 00005D63 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7541 00005D66 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7542 00005D69 483D[02000000]          	cmp rax, sob_boolean_false
  7543 00005D6F 7457                              	je .L_if_else_0077
  7544 00005D71 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7545 00005D75 50                      	push rax
  7546 00005D76 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7547 00005D7A 50                      	push rax
  7548 00005D7B 6A02                    	push 2
  7549 00005D7D 488B0425[18010000]      	mov rax, qword [free_var_35]
  7550                                  	assert_closure(rax)
    42 00005D85 803805              <1>  cmp byte [%1], %2
    43 00005D88 0F8543B40000        <1>  jne L_error_incorrect_type
  7551 00005D8E FF7001                  	push SOB_CLOSURE_ENV(rax)
  7552 00005D91 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7553 00005D94 FF7500                  	push qword [rbp] ; same the old rbp
  7554 00005D97 BA05000000              	mov rdx, 2 + 3
  7555 00005D9C 488B4D00                	mov rcx, [rbp]
  7556 00005DA0 4889EF                  	mov rdi, rbp
  7557                                  .L_tc_recycle_frame_loop_00f9:
  7558 00005DA3 4883FA00                	cmp rdx, 0
  7559 00005DA7 7413                    	je .L_tc_recycle_frame_done_00f9
  7560 00005DA9 4883E908                	sub rcx, 8
  7561 00005DAD 4883EF08                	sub rdi, 8
  7562 00005DB1 488B37                  	mov rsi, [rdi]
  7563 00005DB4 488931                  	mov qword [rcx], rsi
  7564 00005DB7 48FFCA                  	dec rdx
  7565 00005DBA EBE7                    	jmp .L_tc_recycle_frame_loop_00f9
  7566                                  .L_tc_recycle_frame_done_00f9:
  7567 00005DBC 5D                      	pop rbp ; restore the old rbp
  7568 00005DBD 4889CC                  	mov rsp, rcx
  7569 00005DC0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7570 00005DC3 E9DE000000              	jmp .L_if_end_0077
  7571                                            .L_if_else_0077:
  7572 00005DC8 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7573 00005DCC 50                      	push rax
  7574 00005DCD 6A01                    	push 1
  7575 00005DCF 488B0425[40000000]      	mov rax, qword [free_var_8]
  7576                                  	assert_closure(rax)
    42 00005DD7 803805              <1>  cmp byte [%1], %2
    43 00005DDA 0F85F1B30000        <1>  jne L_error_incorrect_type
  7577 00005DE0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7578 00005DE3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7579 00005DE6 483D[02000000]          	cmp rax, sob_boolean_false
  7580 00005DEC 746E                              	je .L_if_else_0076
  7581 00005DEE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7582 00005DF2 50                      	push rax
  7583 00005DF3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7584 00005DF7 50                      	push rax
  7585 00005DF8 6A01                    	push 1
  7586 00005DFA 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7587                                  	assert_closure(rax)
    42 00005E02 803805              <1>  cmp byte [%1], %2
    43 00005E05 0F85C6B30000        <1>  jne L_error_incorrect_type
  7588 00005E0B FF7001                  	push SOB_CLOSURE_ENV(rax)
  7589 00005E0E FF5009                  	call SOB_CLOSURE_CODE(rax)
  7590 00005E11 50                      	push rax
  7591 00005E12 6A02                    	push 2
  7592 00005E14 488B0425[F8000000]      	mov rax, qword [free_var_31]
  7593                                  	assert_closure(rax)
    42 00005E1C 803805              <1>  cmp byte [%1], %2
    43 00005E1F 0F85ACB30000        <1>  jne L_error_incorrect_type
  7594 00005E25 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7595 00005E28 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7596 00005E2B FF7500                  	push qword [rbp] ; same the old rbp
  7597 00005E2E BA05000000              	mov rdx, 2 + 3
  7598 00005E33 488B4D00                	mov rcx, [rbp]
  7599 00005E37 4889EF                  	mov rdi, rbp
  7600                                  .L_tc_recycle_frame_loop_00fa:
  7601 00005E3A 4883FA00                	cmp rdx, 0
  7602 00005E3E 7413                    	je .L_tc_recycle_frame_done_00fa
  7603 00005E40 4883E908                	sub rcx, 8
  7604 00005E44 4883EF08                	sub rdi, 8
  7605 00005E48 488B37                  	mov rsi, [rdi]
  7606 00005E4B 488931                  	mov qword [rcx], rsi
  7607 00005E4E 48FFCA                  	dec rdx
  7608 00005E51 EBE7                    	jmp .L_tc_recycle_frame_loop_00fa
  7609                                  .L_tc_recycle_frame_done_00fa:
  7610 00005E53 5D                      	pop rbp ; restore the old rbp
  7611 00005E54 4889CC                  	mov rsp, rcx
  7612 00005E57 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7613 00005E5A EB4A                    	jmp .L_if_end_0076
  7614                                            .L_if_else_0076:
  7615 00005E5C 6A00                              	push 0
  7616 00005E5E 488B4510                	mov rax, qword [rbp + 8 * 2]
  7617 00005E62 488B00                  	mov rax, qword [rax + 8 * 0]
  7618 00005E65 488B00                  	mov rax, qword [rax + 8 * 0]
  7619                                  	assert_closure(rax)
    42 00005E68 803805              <1>  cmp byte [%1], %2
    43 00005E6B 0F8560B30000        <1>  jne L_error_incorrect_type
  7620 00005E71 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7621 00005E74 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7622 00005E77 FF7500                  	push qword [rbp] ; same the old rbp
  7623 00005E7A BA03000000              	mov rdx, 0 + 3
  7624 00005E7F 488B4D00                	mov rcx, [rbp]
  7625 00005E83 4889EF                  	mov rdi, rbp
  7626                                  .L_tc_recycle_frame_loop_00fb:
  7627 00005E86 4883FA00                	cmp rdx, 0
  7628 00005E8A 7413                    	je .L_tc_recycle_frame_done_00fb
  7629 00005E8C 4883E908                	sub rcx, 8
  7630 00005E90 4883EF08                	sub rdi, 8
  7631 00005E94 488B37                  	mov rsi, [rdi]
  7632 00005E97 488931                  	mov qword [rcx], rsi
  7633 00005E9A 48FFCA                  	dec rdx
  7634 00005E9D EBE7                    	jmp .L_tc_recycle_frame_loop_00fb
  7635                                  .L_tc_recycle_frame_done_00fb:
  7636 00005E9F 5D                      	pop rbp ; restore the old rbp
  7637 00005EA0 4889CC                  	mov rsp, rcx
  7638 00005EA3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7639                                  .L_if_end_0076:
  7640                                  .L_if_end_0077:
  7641 00005EA6 E9D1010000              	jmp .L_if_end_007b
  7642                                            .L_if_else_007b:
  7643 00005EAB 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  7644 00005EAF 50                      	push rax
  7645 00005EB0 6A01                    	push 1
  7646 00005EB2 488B0425[40000000]      	mov rax, qword [free_var_8]
  7647                                  	assert_closure(rax)
    42 00005EBA 803805              <1>  cmp byte [%1], %2
    43 00005EBD 0F850EB30000        <1>  jne L_error_incorrect_type
  7648 00005EC3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7649 00005EC6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7650 00005EC9 483D[02000000]          	cmp rax, sob_boolean_false
  7651 00005ECF 0F845D010000                      	je .L_if_else_007a
  7652 00005ED5 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7653 00005ED9 50                      	push rax
  7654 00005EDA 6A01                    	push 1
  7655 00005EDC 488B0425[48000000]      	mov rax, qword [free_var_9]
  7656                                  	assert_closure(rax)
    42 00005EE4 803805              <1>  cmp byte [%1], %2
    43 00005EE7 0F85E4B20000        <1>  jne L_error_incorrect_type
  7657 00005EED FF7001                  	push SOB_CLOSURE_ENV(rax)
  7658 00005EF0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7659 00005EF3 483D[02000000]          	cmp rax, sob_boolean_false
  7660 00005EF9 7471                              	je .L_if_else_0079
  7661 00005EFB 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7662 00005EFF 50                      	push rax
  7663 00005F00 6A01                    	push 1
  7664 00005F02 488B0425[B8000000]      	mov rax, qword [free_var_23]
  7665                                  	assert_closure(rax)
    42 00005F0A 803805              <1>  cmp byte [%1], %2
    43 00005F0D 0F85BEB20000        <1>  jne L_error_incorrect_type
  7666 00005F13 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7667 00005F16 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7668 00005F19 50                      	push rax
  7669 00005F1A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7670 00005F1E 50                      	push rax
  7671 00005F1F 6A02                    	push 2
  7672 00005F21 488B0425[F8000000]      	mov rax, qword [free_var_31]
  7673                                  	assert_closure(rax)
    42 00005F29 803805              <1>  cmp byte [%1], %2
    43 00005F2C 0F859FB20000        <1>  jne L_error_incorrect_type
  7674 00005F32 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7675 00005F35 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7676 00005F38 FF7500                  	push qword [rbp] ; same the old rbp
  7677 00005F3B BA05000000              	mov rdx, 2 + 3
  7678 00005F40 488B4D00                	mov rcx, [rbp]
  7679 00005F44 4889EF                  	mov rdi, rbp
  7680                                  .L_tc_recycle_frame_loop_00fc:
  7681 00005F47 4883FA00                	cmp rdx, 0
  7682 00005F4B 7413                    	je .L_tc_recycle_frame_done_00fc
  7683 00005F4D 4883E908                	sub rcx, 8
  7684 00005F51 4883EF08                	sub rdi, 8
  7685 00005F55 488B37                  	mov rsi, [rdi]
  7686 00005F58 488931                  	mov qword [rcx], rsi
  7687 00005F5B 48FFCA                  	dec rdx
  7688 00005F5E EBE7                    	jmp .L_tc_recycle_frame_loop_00fc
  7689                                  .L_tc_recycle_frame_done_00fc:
  7690 00005F60 5D                      	pop rbp ; restore the old rbp
  7691 00005F61 4889CC                  	mov rsp, rcx
  7692 00005F64 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7693 00005F67 E9C4000000              	jmp .L_if_end_0079
  7694                                            .L_if_else_0079:
  7695 00005F6C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7696 00005F70 50                      	push rax
  7697 00005F71 6A01                    	push 1
  7698 00005F73 488B0425[40000000]      	mov rax, qword [free_var_8]
  7699                                  	assert_closure(rax)
    42 00005F7B 803805              <1>  cmp byte [%1], %2
    43 00005F7E 0F854DB20000        <1>  jne L_error_incorrect_type
  7700 00005F84 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7701 00005F87 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7702 00005F8A 483D[02000000]          	cmp rax, sob_boolean_false
  7703 00005F90 7454                              	je .L_if_else_0078
  7704 00005F92 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7705 00005F96 50                      	push rax
  7706 00005F97 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  7707 00005F9B 50                      	push rax
  7708 00005F9C 6A02                    	push 2
  7709 00005F9E 488B0425[F8000000]      	mov rax, qword [free_var_31]
  7710                                  	assert_closure(rax)
    42 00005FA6 803805              <1>  cmp byte [%1], %2
    43 00005FA9 0F8522B20000        <1>  jne L_error_incorrect_type
  7711 00005FAF FF7001                  	push SOB_CLOSURE_ENV(rax)
  7712 00005FB2 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7713 00005FB5 FF7500                  	push qword [rbp] ; same the old rbp
  7714 00005FB8 BA05000000              	mov rdx, 2 + 3
  7715 00005FBD 488B4D00                	mov rcx, [rbp]
  7716 00005FC1 4889EF                  	mov rdi, rbp
  7717                                  .L_tc_recycle_frame_loop_00fd:
  7718 00005FC4 4883FA00                	cmp rdx, 0
  7719 00005FC8 7413                    	je .L_tc_recycle_frame_done_00fd
  7720 00005FCA 4883E908                	sub rcx, 8
  7721 00005FCE 4883EF08                	sub rdi, 8
  7722 00005FD2 488B37                  	mov rsi, [rdi]
  7723 00005FD5 488931                  	mov qword [rcx], rsi
  7724 00005FD8 48FFCA                  	dec rdx
  7725 00005FDB EBE7                    	jmp .L_tc_recycle_frame_loop_00fd
  7726                                  .L_tc_recycle_frame_done_00fd:
  7727 00005FDD 5D                      	pop rbp ; restore the old rbp
  7728 00005FDE 4889CC                  	mov rsp, rcx
  7729 00005FE1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7730 00005FE4 EB4A                    	jmp .L_if_end_0078
  7731                                            .L_if_else_0078:
  7732 00005FE6 6A00                              	push 0
  7733 00005FE8 488B4510                	mov rax, qword [rbp + 8 * 2]
  7734 00005FEC 488B00                  	mov rax, qword [rax + 8 * 0]
  7735 00005FEF 488B00                  	mov rax, qword [rax + 8 * 0]
  7736                                  	assert_closure(rax)
    42 00005FF2 803805              <1>  cmp byte [%1], %2
    43 00005FF5 0F85D6B10000        <1>  jne L_error_incorrect_type
  7737 00005FFB FF7001                  	push SOB_CLOSURE_ENV(rax)
  7738 00005FFE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7739 00006001 FF7500                  	push qword [rbp] ; same the old rbp
  7740 00006004 BA03000000              	mov rdx, 0 + 3
  7741 00006009 488B4D00                	mov rcx, [rbp]
  7742 0000600D 4889EF                  	mov rdi, rbp
  7743                                  .L_tc_recycle_frame_loop_00fe:
  7744 00006010 4883FA00                	cmp rdx, 0
  7745 00006014 7413                    	je .L_tc_recycle_frame_done_00fe
  7746 00006016 4883E908                	sub rcx, 8
  7747 0000601A 4883EF08                	sub rdi, 8
  7748 0000601E 488B37                  	mov rsi, [rdi]
  7749 00006021 488931                  	mov qword [rcx], rsi
  7750 00006024 48FFCA                  	dec rdx
  7751 00006027 EBE7                    	jmp .L_tc_recycle_frame_loop_00fe
  7752                                  .L_tc_recycle_frame_done_00fe:
  7753 00006029 5D                      	pop rbp ; restore the old rbp
  7754 0000602A 4889CC                  	mov rsp, rcx
  7755 0000602D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7756                                  .L_if_end_0078:
  7757                                  .L_if_end_0079:
  7758 00006030 EB4A                    	jmp .L_if_end_007a
  7759                                            .L_if_else_007a:
  7760 00006032 6A00                              	push 0
  7761 00006034 488B4510                	mov rax, qword [rbp + 8 * 2]
  7762 00006038 488B00                  	mov rax, qword [rax + 8 * 0]
  7763 0000603B 488B00                  	mov rax, qword [rax + 8 * 0]
  7764                                  	assert_closure(rax)
    42 0000603E 803805              <1>  cmp byte [%1], %2
    43 00006041 0F858AB10000        <1>  jne L_error_incorrect_type
  7765 00006047 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7766 0000604A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7767 0000604D FF7500                  	push qword [rbp] ; same the old rbp
  7768 00006050 BA03000000              	mov rdx, 0 + 3
  7769 00006055 488B4D00                	mov rcx, [rbp]
  7770 00006059 4889EF                  	mov rdi, rbp
  7771                                  .L_tc_recycle_frame_loop_00ff:
  7772 0000605C 4883FA00                	cmp rdx, 0
  7773 00006060 7413                    	je .L_tc_recycle_frame_done_00ff
  7774 00006062 4883E908                	sub rcx, 8
  7775 00006066 4883EF08                	sub rdi, 8
  7776 0000606A 488B37                  	mov rsi, [rdi]
  7777 0000606D 488931                  	mov qword [rcx], rsi
  7778 00006070 48FFCA                  	dec rdx
  7779 00006073 EBE7                    	jmp .L_tc_recycle_frame_loop_00ff
  7780                                  .L_tc_recycle_frame_done_00ff:
  7781 00006075 5D                      	pop rbp ; restore the old rbp
  7782 00006076 4889CC                  	mov rsp, rcx
  7783 00006079 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7784                                  .L_if_end_007a:
  7785                                  .L_if_end_007b:
  7786 0000607C C9                      	leave
  7787 0000607D C22000                  	ret 8 * (2 + 2)
  7788                                  .L_lambda_simple_end_00d8:	; new closure is in rax
  7789 00006080 50                      	push rax
  7790 00006081 6A01                    	push 1
  7791 00006083 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7792 00006088 E850990000              	call malloc
  7793 0000608D 50                      	push rax
  7794 0000608E BF08000000              	mov rdi, 8 * 1	; new rib
  7795 00006093 E845990000              	call malloc
  7796 00006098 50                      	push rax
  7797 00006099 BF10000000              	mov rdi, 8 * 2	; extended env
  7798 0000609E E83A990000              	call malloc
  7799 000060A3 488B7D10                	mov rdi, ENV
  7800 000060A7 BE00000000              	mov rsi, 0
  7801 000060AC BA01000000              	mov rdx, 1
  7802                                  .L_lambda_simple_env_loop_00d6:	; ext_env[i + 1] <-- env[i]
  7803 000060B1 4883FE01                	cmp rsi, 1
  7804 000060B5 7410                    	je .L_lambda_simple_env_end_00d6
  7805 000060B7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7806 000060BB 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7807 000060BF 48FFC6                  	inc rsi
  7808 000060C2 48FFC2                  	inc rdx
  7809 000060C5 EBEA                    	jmp .L_lambda_simple_env_loop_00d6
  7810                                  .L_lambda_simple_env_end_00d6:
  7811 000060C7 5B                      	pop rbx
  7812 000060C8 BE00000000              	mov rsi, 0
  7813                                  .L_lambda_simple_params_loop_00d6:	; copy params
  7814 000060CD 4883FE01                	cmp rsi, 1
  7815 000060D1 740E                    	je .L_lambda_simple_params_end_00d6
  7816 000060D3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7817 000060D8 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7818 000060DC 48FFC6                  	inc rsi
  7819 000060DF EBEC                    	jmp .L_lambda_simple_params_loop_00d6
  7820                                  .L_lambda_simple_params_end_00d6:
  7821 000060E1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7822 000060E4 4889C3                  	mov rbx, rax
  7823 000060E7 58                      	pop rax
  7824 000060E8 C60005                  	mov byte [rax], T_closure
  7825 000060EB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7826 000060EF 48C74009[FC600000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d6
  7827 000060F7 E952030000              	jmp .L_lambda_simple_end_00d6
  7828                                  .L_lambda_simple_code_00d6:	; lambda-simple body
  7829 000060FC 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7830 00006102 740B                    	je .L_lambda_simple_arity_check_ok_00d6
  7831 00006104 FF742410                	push qword [rsp + 8 * 2]
  7832 00006108 6A01                    	push 1
  7833 0000610A E987980000              	jmp L_error_incorrect_arity_simple
  7834                                  .L_lambda_simple_arity_check_ok_00d6:
  7835 0000610F C8000000                	enter 0, 0
  7836 00006113 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7837 00006118 E8C0980000              	call malloc
  7838 0000611D 50                      	push rax
  7839 0000611E BF08000000              	mov rdi, 8 * 1	; new rib
  7840 00006123 E8B5980000              	call malloc
  7841 00006128 50                      	push rax
  7842 00006129 BF18000000              	mov rdi, 8 * 3	; extended env
  7843 0000612E E8AA980000              	call malloc
  7844 00006133 488B7D10                	mov rdi, ENV
  7845 00006137 BE00000000              	mov rsi, 0
  7846 0000613C BA01000000              	mov rdx, 1
  7847                                  .L_lambda_opt_env_loop_0022:	; ext_env[i + 1] <-- env[i]
  7848 00006141 4883FE02                	cmp rsi, 2
  7849 00006145 7410                    	je .L_lambda_opt_env_end_0022
  7850 00006147 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  7851 0000614B 48890CD0                	mov qword [rax + 8 * rdx], rcx
  7852 0000614F 48FFC6                  	inc rsi
  7853 00006152 48FFC2                  	inc rdx
  7854 00006155 EBEA                    	jmp .L_lambda_opt_env_loop_0022
  7855                                  .L_lambda_opt_env_end_0022:
  7856 00006157 5B                      	pop rbx
  7857 00006158 BE00000000              	mov rsi, 0
  7858                                  .L_lambda_opt_params_loop_0022:	; copy params
  7859 0000615D 4883FE01                	cmp rsi, 1
  7860 00006161 740E                    	je .L_lambda_opt_params_end_0022
  7861 00006163 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  7862 00006168 488914F3                	mov qword [rbx + 8 * rsi], rdx
  7863 0000616C 48FFC6                  	inc rsi
  7864 0000616F EBEC                    	jmp .L_lambda_opt_params_loop_0022
  7865                                  .L_lambda_opt_params_end_0022:
  7866 00006171 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  7867 00006174 4889C3                  	mov rbx, rax
  7868 00006177 58                      	pop rax
  7869 00006178 C60005                  	mov byte [rax], T_closure
  7870 0000617B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  7871 0000617F 48C74009[8C610000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0022
  7872 00006187 E9BE020000              	jmp .L_lambda_opt_end_0022
  7873                                  .L_lambda_opt_code_0022:	; lambda-opt body
  7874 0000618C 48837C241001            	cmp qword [rsp + 8 * 2], 1
  7875 00006192 740D                    	je .L_lambda_opt_arity_check_exact_0022
  7876 00006194 7F43                    	jg .L_lambda_opt_arity_check_more_0022
  7877 00006196 FF742410                	push qword [rsp + 8 * 2]
  7878 0000619A 6A01                    	push 1
  7879 0000619C E909980000              	jmp L_error_incorrect_arity_opt
  7880                                  .L_lambda_opt_arity_check_exact_0022:
  7881 000061A1 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  7882 000061AA BA04000000              	mov rdx, 4
  7883 000061AF FF3424                  	push qword [rsp]
  7884 000061B2 BE01000000              	mov rsi, 1
  7885                                  .L_lambda_opt_stack_shrink_loop_0064:
  7886 000061B7 4839D6                  	cmp rsi, rdx
  7887 000061BA 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0064
  7888 000061BC 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  7889 000061C1 488B0B                  	mov rcx, [rbx]
  7890 000061C4 48894BF8                	mov qword [rbx - 8], rcx
  7891 000061C8 48FFC6                  	inc rsi
  7892 000061CB EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0064
  7893                                  .L_lambda_opt_stack_shrink_loop_exit_0064:
  7894 000061CD 48C703[01000000]        	mov qword [rbx], sob_nil
  7895 000061D4 E985000000              	jmp .L_lambda_opt_stack_adjusted_0022
  7896                                  .L_lambda_opt_arity_check_more_0022:
  7897 000061D9 488B542410              	mov rdx, qword [rsp + 8 * 2]
  7898 000061DE 4883EA01                	sub rdx, 1
  7899 000061E2 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  7900 000061EB BE00000000              	mov rsi, 0
  7901 000061F0 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  7902 000061F5 48B9-                   	mov rcx, sob_nil
  7902 000061F7 [0100000000000000] 
  7903                                  .L_lambda_opt_stack_shrink_loop_0065:
  7904 000061FF 4839D6                  	cmp rsi, rdx
  7905 00006202 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0065
  7906 00006204 BF11000000              	mov rdi, 17 ; 1+8+8
  7907 00006209 E8CF970000              	call malloc
  7908 0000620E 48894809                	mov SOB_PAIR_CDR(rax), rcx
  7909 00006212 48F7DE                  	neg rsi
  7910 00006215 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  7911 00006219 48F7DE                  	neg rsi
  7912 0000621C 48894801                	mov SOB_PAIR_CAR(rax), rcx
  7913 00006220 C60021                  	mov byte [rax], T_pair
  7914 00006223 4889C1                  	mov rcx, rax
  7915 00006226 48FFC6                  	inc rsi
  7916 00006229 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0065
  7917                                  .L_lambda_opt_stack_shrink_loop_exit_0065:
  7918 0000622B 48890B                  	mov qword [rbx], rcx
  7919 0000622E 4883EB08                	sub rbx, 8
  7920 00006232 4889E7                  	mov rdi, rsp
  7921 00006235 4883C718                	add rdi, 24
  7922 00006239 BE04000000              	mov rsi, 4
  7923                                  .L_lambda_opt_stack_shrink_loop_0066:
  7924 0000623E 4883FE00                	cmp rsi,0
  7925 00006242 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0066
  7926 00006244 488B0F                  	mov rcx, qword [rdi]
  7927 00006247 48890B                  	mov [rbx], rcx
  7928 0000624A 48FFCE                  	dec rsi
  7929 0000624D 4883EB08                	sub rbx, 8
  7930 00006251 4883EF08                	sub rdi, 8
  7931 00006255 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0066
  7932                                  .L_lambda_opt_stack_shrink_loop_exit_0066:
  7933 00006257 4883C308                	add rbx, 8
  7934 0000625B 4889DC                  	mov rsp, rbx
  7935                                  .L_lambda_opt_stack_adjusted_0022:
  7936 0000625E C8000000                	enter 0, 0
  7937 00006262 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  7938 00006266 50                      	push rax
  7939 00006267 6A01                    	push 1
  7940 00006269 488B0425[00000000]      	mov rax, qword [free_var_0]
  7941                                  	assert_closure(rax)
    42 00006271 803805              <1>  cmp byte [%1], %2
    43 00006274 0F8557AF0000        <1>  jne L_error_incorrect_type
  7942 0000627A FF7001                  	push SOB_CLOSURE_ENV(rax)
  7943 0000627D FF5009                  	call SOB_CLOSURE_CODE(rax)
  7944 00006280 483D[02000000]          	cmp rax, sob_boolean_false
  7945 00006286 745F                              	je .L_if_else_0075
  7946 00006288 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  7947 0000628C 50                      	push rax
  7948 0000628D 48B8-                   	mov rax, L_constants + 32
  7948 0000628F [2000000000000000] 
  7949 00006297 50                      	push rax
  7950 00006298 6A02                    	push 2
  7951 0000629A 488B4510                	mov rax, qword [rbp + 8 * 2]
  7952 0000629E 488B00                  	mov rax, qword [rax + 8 * 0]
  7953 000062A1 488B00                  	mov rax, qword [rax + 8 * 0]
  7954                                  	assert_closure(rax)
    42 000062A4 803805              <1>  cmp byte [%1], %2
    43 000062A7 0F8524AF0000        <1>  jne L_error_incorrect_type
  7955 000062AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  7956 000062B0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  7957 000062B3 FF7500                  	push qword [rbp] ; same the old rbp
  7958 000062B6 BA05000000              	mov rdx, 2 + 3
  7959 000062BB 488B4D00                	mov rcx, [rbp]
  7960 000062BF 4889EF                  	mov rdi, rbp
  7961                                  .L_tc_recycle_frame_loop_00f6:
  7962 000062C2 4883FA00                	cmp rdx, 0
  7963 000062C6 7413                    	je .L_tc_recycle_frame_done_00f6
  7964 000062C8 4883E908                	sub rcx, 8
  7965 000062CC 4883EF08                	sub rdi, 8
  7966 000062D0 488B37                  	mov rsi, [rdi]
  7967 000062D3 488931                  	mov qword [rcx], rsi
  7968 000062D6 48FFCA                  	dec rdx
  7969 000062D9 EBE7                    	jmp .L_tc_recycle_frame_loop_00f6
  7970                                  .L_tc_recycle_frame_done_00f6:
  7971 000062DB 5D                      	pop rbp ; restore the old rbp
  7972 000062DC 4889CC                  	mov rsp, rcx
  7973 000062DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  7974 000062E2 E95F010000              	jmp .L_if_end_0075
  7975                                            .L_if_else_0075:
  7976 000062E7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  7977 000062EB 50                      	push rax
  7978 000062EC 48B8-                   	mov rax, L_constants + 32
  7978 000062EE [2000000000000000] 
  7979 000062F6 50                      	push rax
  7980 000062F7 488B0425[08030000]      	mov rax, qword [free_var_97]
  7981 000062FF 50                      	push rax
  7982 00006300 6A03                    	push 3
  7983 00006302 488B0425[F8020000]      	mov rax, qword [free_var_95]
  7984                                  	assert_closure(rax)
    42 0000630A 803805              <1>  cmp byte [%1], %2
    43 0000630D 0F85BEAE0000        <1>  jne L_error_incorrect_type
  7985 00006313 FF7001                  	push SOB_CLOSURE_ENV(rax)
  7986 00006316 FF5009                  	call SOB_CLOSURE_CODE(rax)
  7987 00006319 50                      	push rax
  7988 0000631A 6A01                    	push 1
  7989 0000631C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  7990 00006321 E8B7960000              	call malloc
  7991 00006326 50                      	push rax
  7992 00006327 BF10000000              	mov rdi, 8 * 2	; new rib
  7993 0000632C E8AC960000              	call malloc
  7994 00006331 50                      	push rax
  7995 00006332 BF20000000              	mov rdi, 8 * 4	; extended env
  7996 00006337 E8A1960000              	call malloc
  7997 0000633C 488B7D10                	mov rdi, ENV
  7998 00006340 BE00000000              	mov rsi, 0
  7999 00006345 BA01000000              	mov rdx, 1
  8000                                  .L_lambda_simple_env_loop_00d7:	; ext_env[i + 1] <-- env[i]
  8001 0000634A 4883FE03                	cmp rsi, 3
  8002 0000634E 7410                    	je .L_lambda_simple_env_end_00d7
  8003 00006350 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8004 00006354 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8005 00006358 48FFC6                  	inc rsi
  8006 0000635B 48FFC2                  	inc rdx
  8007 0000635E EBEA                    	jmp .L_lambda_simple_env_loop_00d7
  8008                                  .L_lambda_simple_env_end_00d7:
  8009 00006360 5B                      	pop rbx
  8010 00006361 BE00000000              	mov rsi, 0
  8011                                  .L_lambda_simple_params_loop_00d7:	; copy params
  8012 00006366 4883FE02                	cmp rsi, 2
  8013 0000636A 740E                    	je .L_lambda_simple_params_end_00d7
  8014 0000636C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8015 00006371 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8016 00006375 48FFC6                  	inc rsi
  8017 00006378 EBEC                    	jmp .L_lambda_simple_params_loop_00d7
  8018                                  .L_lambda_simple_params_end_00d7:
  8019 0000637A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8020 0000637D 4889C3                  	mov rbx, rax
  8021 00006380 58                      	pop rax
  8022 00006381 C60005                  	mov byte [rax], T_closure
  8023 00006384 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8024 00006388 48C74009[92630000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00d7
  8025 00006390 EB76                    	jmp .L_lambda_simple_end_00d7
  8026                                  .L_lambda_simple_code_00d7:	; lambda-simple body
  8027 00006392 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8028 00006398 740B                    	je .L_lambda_simple_arity_check_ok_00d7
  8029 0000639A FF742410                	push qword [rsp + 8 * 2]
  8030 0000639E 6A01                    	push 1
  8031 000063A0 E9F1950000              	jmp L_error_incorrect_arity_simple
  8032                                  .L_lambda_simple_arity_check_ok_00d7:
  8033 000063A5 C8000000                	enter 0, 0
  8034 000063A9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8035 000063AD 50                      	push rax
  8036 000063AE 488B4510                	mov rax, qword [rbp + 8 * 2]
  8037 000063B2 488B00                  	mov rax, qword [rax + 8 * 0]
  8038 000063B5 488B00                  	mov rax, qword [rax + 8 * 0]
  8039 000063B8 50                      	push rax
  8040 000063B9 6A02                    	push 2
  8041 000063BB 488B4510                	mov rax, qword [rbp + 8 * 2]
  8042 000063BF 488B4008                	mov rax, qword [rax + 8 * 1]
  8043 000063C3 488B00                  	mov rax, qword [rax + 8 * 0]
  8044                                  	assert_closure(rax)
    42 000063C6 803805              <1>  cmp byte [%1], %2
    43 000063C9 0F8502AE0000        <1>  jne L_error_incorrect_type
  8045 000063CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8046 000063D2 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8047 000063D5 FF7500                  	push qword [rbp] ; same the old rbp
  8048 000063D8 BA05000000              	mov rdx, 2 + 3
  8049 000063DD 488B4D00                	mov rcx, [rbp]
  8050 000063E1 4889EF                  	mov rdi, rbp
  8051                                  .L_tc_recycle_frame_loop_00f8:
  8052 000063E4 4883FA00                	cmp rdx, 0
  8053 000063E8 7413                    	je .L_tc_recycle_frame_done_00f8
  8054 000063EA 4883E908                	sub rcx, 8
  8055 000063EE 4883EF08                	sub rdi, 8
  8056 000063F2 488B37                  	mov rsi, [rdi]
  8057 000063F5 488931                  	mov qword [rcx], rsi
  8058 000063F8 48FFCA                  	dec rdx
  8059 000063FB EBE7                    	jmp .L_tc_recycle_frame_loop_00f8
  8060                                  .L_tc_recycle_frame_done_00f8:
  8061 000063FD 5D                      	pop rbp ; restore the old rbp
  8062 000063FE 4889CC                  	mov rsp, rcx
  8063 00006401 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8064 00006404 C9                      	leave
  8065 00006405 C21800                  	ret 8 * (2 + 1)
  8066                                  .L_lambda_simple_end_00d7:	; new closure is in rax
  8067                                  	assert_closure(rax)
    42 00006408 803805              <1>  cmp byte [%1], %2
    43 0000640B 0F85C0AD0000        <1>  jne L_error_incorrect_type
  8068 00006411 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8069 00006414 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8070 00006417 FF7500                  	push qword [rbp] ; same the old rbp
  8071 0000641A BA04000000              	mov rdx, 1 + 3
  8072 0000641F 488B4D00                	mov rcx, [rbp]
  8073 00006423 4889EF                  	mov rdi, rbp
  8074                                  .L_tc_recycle_frame_loop_00f7:
  8075 00006426 4883FA00                	cmp rdx, 0
  8076 0000642A 7413                    	je .L_tc_recycle_frame_done_00f7
  8077 0000642C 4883E908                	sub rcx, 8
  8078 00006430 4883EF08                	sub rdi, 8
  8079 00006434 488B37                  	mov rsi, [rdi]
  8080 00006437 488931                  	mov qword [rcx], rsi
  8081 0000643A 48FFCA                  	dec rdx
  8082 0000643D EBE7                    	jmp .L_tc_recycle_frame_loop_00f7
  8083                                  .L_tc_recycle_frame_done_00f7:
  8084 0000643F 5D                      	pop rbp ; restore the old rbp
  8085 00006440 4889CC                  	mov rsp, rcx
  8086 00006443 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8087                                  .L_if_end_0075:
  8088 00006446 C9                      	leave
  8089 00006447 C22000                  	ret 8 * (2 + 2)
  8090                                  .L_lambda_opt_end_0022:	; new closure is in rax
  8091 0000644A C9                      	leave
  8092 0000644B C21800                  	ret 8 * (2 + 1)
  8093                                  .L_lambda_simple_end_00d6:	; new closure is in rax
  8094                                  	assert_closure(rax)
    42 0000644E 803805              <1>  cmp byte [%1], %2
    43 00006451 0F857AAD0000        <1>  jne L_error_incorrect_type
  8095 00006457 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8096 0000645A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8097 0000645D FF7500                  	push qword [rbp] ; same the old rbp
  8098 00006460 BA04000000              	mov rdx, 1 + 3
  8099 00006465 488B4D00                	mov rcx, [rbp]
  8100 00006469 4889EF                  	mov rdi, rbp
  8101                                  .L_tc_recycle_frame_loop_00f5:
  8102 0000646C 4883FA00                	cmp rdx, 0
  8103 00006470 7413                    	je .L_tc_recycle_frame_done_00f5
  8104 00006472 4883E908                	sub rcx, 8
  8105 00006476 4883EF08                	sub rdi, 8
  8106 0000647A 488B37                  	mov rsi, [rdi]
  8107 0000647D 488931                  	mov qword [rcx], rsi
  8108 00006480 48FFCA                  	dec rdx
  8109 00006483 EBE7                    	jmp .L_tc_recycle_frame_loop_00f5
  8110                                  .L_tc_recycle_frame_done_00f5:
  8111 00006485 5D                      	pop rbp ; restore the old rbp
  8112 00006486 4889CC                  	mov rsp, rcx
  8113 00006489 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8114 0000648C C9                      	leave
  8115 0000648D C21800                  	ret 8 * (2 + 1)
  8116                                  .L_lambda_simple_end_00d5:	; new closure is in rax
  8117                                  	assert_closure(rax)
    42 00006490 803805              <1>  cmp byte [%1], %2
    43 00006493 0F8538AD0000        <1>  jne L_error_incorrect_type
  8118 00006499 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8119 0000649C FF5009                  	call SOB_CLOSURE_CODE(rax)
  8120 0000649F 48890425[10030000]      	mov qword [free_var_98], rax
  8121 000064A7 48B8-                   	mov rax, sob_void
  8121 000064A9 [0000000000000000] 
  8122                                  
  8123 000064B1 4889C7                  	mov rdi, rax
  8124 000064B4 E835950000              	call print_sexpr_if_not_void
  8125                                  
  8126 000064B9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8127 000064BE E81A950000              	call malloc
  8128 000064C3 50                      	push rax
  8129 000064C4 BF00000000              	mov rdi, 8 * 0	; new rib
  8130 000064C9 E80F950000              	call malloc
  8131 000064CE 50                      	push rax
  8132 000064CF BF08000000              	mov rdi, 8 * 1	; extended env
  8133 000064D4 E804950000              	call malloc
  8134 000064D9 488B7D10                	mov rdi, ENV
  8135 000064DD BE00000000              	mov rsi, 0
  8136 000064E2 BA01000000              	mov rdx, 1
  8137                                  .L_lambda_simple_env_loop_00dd:	; ext_env[i + 1] <-- env[i]
  8138 000064E7 4883FE00                	cmp rsi, 0
  8139 000064EB 7410                    	je .L_lambda_simple_env_end_00dd
  8140 000064ED 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8141 000064F1 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8142 000064F5 48FFC6                  	inc rsi
  8143 000064F8 48FFC2                  	inc rdx
  8144 000064FB EBEA                    	jmp .L_lambda_simple_env_loop_00dd
  8145                                  .L_lambda_simple_env_end_00dd:
  8146 000064FD 5B                      	pop rbx
  8147 000064FE BE00000000              	mov rsi, 0
  8148                                  .L_lambda_simple_params_loop_00dd:	; copy params
  8149 00006503 4883FE00                	cmp rsi, 0
  8150 00006507 740E                    	je .L_lambda_simple_params_end_00dd
  8151 00006509 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8152 0000650E 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8153 00006512 48FFC6                  	inc rsi
  8154 00006515 EBEC                    	jmp .L_lambda_simple_params_loop_00dd
  8155                                  .L_lambda_simple_params_end_00dd:
  8156 00006517 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8157 0000651A 4889C3                  	mov rbx, rax
  8158 0000651D 58                      	pop rax
  8159 0000651E C60005                  	mov byte [rax], T_closure
  8160 00006521 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8161 00006525 48C74009[2F650000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dd
  8162 0000652D EB79                    	jmp .L_lambda_simple_end_00dd
  8163                                  .L_lambda_simple_code_00dd:	; lambda-simple body
  8164 0000652F 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8165 00006535 740B                    	je .L_lambda_simple_arity_check_ok_00dd
  8166 00006537 FF742410                	push qword [rsp + 8 * 2]
  8167 0000653B 6A00                    	push 0
  8168 0000653D E954940000              	jmp L_error_incorrect_arity_simple
  8169                                  .L_lambda_simple_arity_check_ok_00dd:
  8170 00006542 C8000000                	enter 0, 0
  8171 00006546 48B8-                   	mov rax, L_constants + 68
  8171 00006548 [4400000000000000] 
  8172 00006550 50                      	push rax
  8173 00006551 48B8-                   	mov rax, L_constants + 155
  8173 00006553 [9B00000000000000] 
  8174 0000655B 50                      	push rax
  8175 0000655C 6A02                    	push 2
  8176 0000655E 488B0425[30010000]      	mov rax, qword [free_var_38]
  8177                                  	assert_closure(rax)
    42 00006566 803805              <1>  cmp byte [%1], %2
    43 00006569 0F8562AC0000        <1>  jne L_error_incorrect_type
  8178 0000656F FF7001                  	push SOB_CLOSURE_ENV(rax)
  8179 00006572 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8180 00006575 FF7500                  	push qword [rbp] ; same the old rbp
  8181 00006578 BA05000000              	mov rdx, 2 + 3
  8182 0000657D 488B4D00                	mov rcx, [rbp]
  8183 00006581 4889EF                  	mov rdi, rbp
  8184                                  .L_tc_recycle_frame_loop_010a:
  8185 00006584 4883FA00                	cmp rdx, 0
  8186 00006588 7413                    	je .L_tc_recycle_frame_done_010a
  8187 0000658A 4883E908                	sub rcx, 8
  8188 0000658E 4883EF08                	sub rdi, 8
  8189 00006592 488B37                  	mov rsi, [rdi]
  8190 00006595 488931                  	mov qword [rcx], rsi
  8191 00006598 48FFCA                  	dec rdx
  8192 0000659B EBE7                    	jmp .L_tc_recycle_frame_loop_010a
  8193                                  .L_tc_recycle_frame_done_010a:
  8194 0000659D 5D                      	pop rbp ; restore the old rbp
  8195 0000659E 4889CC                  	mov rsp, rcx
  8196 000065A1 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8197 000065A4 C9                      	leave
  8198 000065A5 C21000                  	ret 8 * (2 + 0)
  8199                                  .L_lambda_simple_end_00dd:	; new closure is in rax
  8200 000065A8 50                      	push rax
  8201 000065A9 6A01                    	push 1
  8202 000065AB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8203 000065B0 E828940000              	call malloc
  8204 000065B5 50                      	push rax
  8205 000065B6 BF00000000              	mov rdi, 8 * 0	; new rib
  8206 000065BB E81D940000              	call malloc
  8207 000065C0 50                      	push rax
  8208 000065C1 BF08000000              	mov rdi, 8 * 1	; extended env
  8209 000065C6 E812940000              	call malloc
  8210 000065CB 488B7D10                	mov rdi, ENV
  8211 000065CF BE00000000              	mov rsi, 0
  8212 000065D4 BA01000000              	mov rdx, 1
  8213                                  .L_lambda_simple_env_loop_00da:	; ext_env[i + 1] <-- env[i]
  8214 000065D9 4883FE00                	cmp rsi, 0
  8215 000065DD 7410                    	je .L_lambda_simple_env_end_00da
  8216 000065DF 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8217 000065E3 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8218 000065E7 48FFC6                  	inc rsi
  8219 000065EA 48FFC2                  	inc rdx
  8220 000065ED EBEA                    	jmp .L_lambda_simple_env_loop_00da
  8221                                  .L_lambda_simple_env_end_00da:
  8222 000065EF 5B                      	pop rbx
  8223 000065F0 BE00000000              	mov rsi, 0
  8224                                  .L_lambda_simple_params_loop_00da:	; copy params
  8225 000065F5 4883FE00                	cmp rsi, 0
  8226 000065F9 740E                    	je .L_lambda_simple_params_end_00da
  8227 000065FB 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8228 00006600 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8229 00006604 48FFC6                  	inc rsi
  8230 00006607 EBEC                    	jmp .L_lambda_simple_params_loop_00da
  8231                                  .L_lambda_simple_params_end_00da:
  8232 00006609 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8233 0000660C 4889C3                  	mov rbx, rax
  8234 0000660F 58                      	pop rax
  8235 00006610 C60005                  	mov byte [rax], T_closure
  8236 00006613 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8237 00006617 48C74009[24660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00da
  8238 0000661F E995060000              	jmp .L_lambda_simple_end_00da
  8239                                  .L_lambda_simple_code_00da:	; lambda-simple body
  8240 00006624 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8241 0000662A 740B                    	je .L_lambda_simple_arity_check_ok_00da
  8242 0000662C FF742410                	push qword [rsp + 8 * 2]
  8243 00006630 6A01                    	push 1
  8244 00006632 E95F930000              	jmp L_error_incorrect_arity_simple
  8245                                  .L_lambda_simple_arity_check_ok_00da:
  8246 00006637 C8000000                	enter 0, 0
  8247 0000663B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8248 00006640 E898930000              	call malloc
  8249 00006645 50                      	push rax
  8250 00006646 BF08000000              	mov rdi, 8 * 1	; new rib
  8251 0000664B E88D930000              	call malloc
  8252 00006650 50                      	push rax
  8253 00006651 BF10000000              	mov rdi, 8 * 2	; extended env
  8254 00006656 E882930000              	call malloc
  8255 0000665B 488B7D10                	mov rdi, ENV
  8256 0000665F BE00000000              	mov rsi, 0
  8257 00006664 BA01000000              	mov rdx, 1
  8258                                  .L_lambda_simple_env_loop_00dc:	; ext_env[i + 1] <-- env[i]
  8259 00006669 4883FE01                	cmp rsi, 1
  8260 0000666D 7410                    	je .L_lambda_simple_env_end_00dc
  8261 0000666F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8262 00006673 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8263 00006677 48FFC6                  	inc rsi
  8264 0000667A 48FFC2                  	inc rdx
  8265 0000667D EBEA                    	jmp .L_lambda_simple_env_loop_00dc
  8266                                  .L_lambda_simple_env_end_00dc:
  8267 0000667F 5B                      	pop rbx
  8268 00006680 BE00000000              	mov rsi, 0
  8269                                  .L_lambda_simple_params_loop_00dc:	; copy params
  8270 00006685 4883FE01                	cmp rsi, 1
  8271 00006689 740E                    	je .L_lambda_simple_params_end_00dc
  8272 0000668B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8273 00006690 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8274 00006694 48FFC6                  	inc rsi
  8275 00006697 EBEC                    	jmp .L_lambda_simple_params_loop_00dc
  8276                                  .L_lambda_simple_params_end_00dc:
  8277 00006699 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8278 0000669C 4889C3                  	mov rbx, rax
  8279 0000669F 58                      	pop rax
  8280 000066A0 C60005                  	mov byte [rax], T_closure
  8281 000066A3 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8282 000066A7 48C74009[B4660000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00dc
  8283 000066AF E976030000              	jmp .L_lambda_simple_end_00dc
  8284                                  .L_lambda_simple_code_00dc:	; lambda-simple body
  8285 000066B4 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8286 000066BA 740B                    	je .L_lambda_simple_arity_check_ok_00dc
  8287 000066BC FF742410                	push qword [rsp + 8 * 2]
  8288 000066C0 6A02                    	push 2
  8289 000066C2 E9CF920000              	jmp L_error_incorrect_arity_simple
  8290                                  .L_lambda_simple_arity_check_ok_00dc:
  8291 000066C7 C8000000                	enter 0, 0
  8292 000066CB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8293 000066CF 50                      	push rax
  8294 000066D0 6A01                    	push 1
  8295 000066D2 488B0425[48000000]      	mov rax, qword [free_var_9]
  8296                                  	assert_closure(rax)
    42 000066DA 803805              <1>  cmp byte [%1], %2
    43 000066DD 0F85EEAA0000        <1>  jne L_error_incorrect_type
  8297 000066E3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8298 000066E6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8299 000066E9 483D[02000000]          	cmp rax, sob_boolean_false
  8300 000066EF 0F8460010000                      	je .L_if_else_0081
  8301 000066F5 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8302 000066F9 50                      	push rax
  8303 000066FA 6A01                    	push 1
  8304 000066FC 488B0425[48000000]      	mov rax, qword [free_var_9]
  8305                                  	assert_closure(rax)
    42 00006704 803805              <1>  cmp byte [%1], %2
    43 00006707 0F85C4AA0000        <1>  jne L_error_incorrect_type
  8306 0000670D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8307 00006710 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8308 00006713 483D[02000000]          	cmp rax, sob_boolean_false
  8309 00006719 7457                              	je .L_if_else_007d
  8310 0000671B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8311 0000671F 50                      	push rax
  8312 00006720 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8313 00006724 50                      	push rax
  8314 00006725 6A02                    	push 2
  8315 00006727 488B0425[20010000]      	mov rax, qword [free_var_36]
  8316                                  	assert_closure(rax)
    42 0000672F 803805              <1>  cmp byte [%1], %2
    43 00006732 0F8599AA0000        <1>  jne L_error_incorrect_type
  8317 00006738 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8318 0000673B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8319 0000673E FF7500                  	push qword [rbp] ; same the old rbp
  8320 00006741 BA05000000              	mov rdx, 2 + 3
  8321 00006746 488B4D00                	mov rcx, [rbp]
  8322 0000674A 4889EF                  	mov rdi, rbp
  8323                                  .L_tc_recycle_frame_loop_0103:
  8324 0000674D 4883FA00                	cmp rdx, 0
  8325 00006751 7413                    	je .L_tc_recycle_frame_done_0103
  8326 00006753 4883E908                	sub rcx, 8
  8327 00006757 4883EF08                	sub rdi, 8
  8328 0000675B 488B37                  	mov rsi, [rdi]
  8329 0000675E 488931                  	mov qword [rcx], rsi
  8330 00006761 48FFCA                  	dec rdx
  8331 00006764 EBE7                    	jmp .L_tc_recycle_frame_loop_0103
  8332                                  .L_tc_recycle_frame_done_0103:
  8333 00006766 5D                      	pop rbp ; restore the old rbp
  8334 00006767 4889CC                  	mov rsp, rcx
  8335 0000676A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8336 0000676D E9DE000000              	jmp .L_if_end_007d
  8337                                            .L_if_else_007d:
  8338 00006772 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8339 00006776 50                      	push rax
  8340 00006777 6A01                    	push 1
  8341 00006779 488B0425[40000000]      	mov rax, qword [free_var_8]
  8342                                  	assert_closure(rax)
    42 00006781 803805              <1>  cmp byte [%1], %2
    43 00006784 0F8547AA0000        <1>  jne L_error_incorrect_type
  8343 0000678A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8344 0000678D FF5009                  	call SOB_CLOSURE_CODE(rax)
  8345 00006790 483D[02000000]          	cmp rax, sob_boolean_false
  8346 00006796 746E                              	je .L_if_else_007c
  8347 00006798 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8348 0000679C 50                      	push rax
  8349 0000679D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8350 000067A1 50                      	push rax
  8351 000067A2 6A01                    	push 1
  8352 000067A4 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8353                                  	assert_closure(rax)
    42 000067AC 803805              <1>  cmp byte [%1], %2
    43 000067AF 0F851CAA0000        <1>  jne L_error_incorrect_type
  8354 000067B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8355 000067B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8356 000067BB 50                      	push rax
  8357 000067BC 6A02                    	push 2
  8358 000067BE 488B0425[00010000]      	mov rax, qword [free_var_32]
  8359                                  	assert_closure(rax)
    42 000067C6 803805              <1>  cmp byte [%1], %2
    43 000067C9 0F8502AA0000        <1>  jne L_error_incorrect_type
  8360 000067CF FF7001                  	push SOB_CLOSURE_ENV(rax)
  8361 000067D2 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8362 000067D5 FF7500                  	push qword [rbp] ; same the old rbp
  8363 000067D8 BA05000000              	mov rdx, 2 + 3
  8364 000067DD 488B4D00                	mov rcx, [rbp]
  8365 000067E1 4889EF                  	mov rdi, rbp
  8366                                  .L_tc_recycle_frame_loop_0104:
  8367 000067E4 4883FA00                	cmp rdx, 0
  8368 000067E8 7413                    	je .L_tc_recycle_frame_done_0104
  8369 000067EA 4883E908                	sub rcx, 8
  8370 000067EE 4883EF08                	sub rdi, 8
  8371 000067F2 488B37                  	mov rsi, [rdi]
  8372 000067F5 488931                  	mov qword [rcx], rsi
  8373 000067F8 48FFCA                  	dec rdx
  8374 000067FB EBE7                    	jmp .L_tc_recycle_frame_loop_0104
  8375                                  .L_tc_recycle_frame_done_0104:
  8376 000067FD 5D                      	pop rbp ; restore the old rbp
  8377 000067FE 4889CC                  	mov rsp, rcx
  8378 00006801 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8379 00006804 EB4A                    	jmp .L_if_end_007c
  8380                                            .L_if_else_007c:
  8381 00006806 6A00                              	push 0
  8382 00006808 488B4510                	mov rax, qword [rbp + 8 * 2]
  8383 0000680C 488B00                  	mov rax, qword [rax + 8 * 0]
  8384 0000680F 488B00                  	mov rax, qword [rax + 8 * 0]
  8385                                  	assert_closure(rax)
    42 00006812 803805              <1>  cmp byte [%1], %2
    43 00006815 0F85B6A90000        <1>  jne L_error_incorrect_type
  8386 0000681B FF7001                  	push SOB_CLOSURE_ENV(rax)
  8387 0000681E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8388 00006821 FF7500                  	push qword [rbp] ; same the old rbp
  8389 00006824 BA03000000              	mov rdx, 0 + 3
  8390 00006829 488B4D00                	mov rcx, [rbp]
  8391 0000682D 4889EF                  	mov rdi, rbp
  8392                                  .L_tc_recycle_frame_loop_0105:
  8393 00006830 4883FA00                	cmp rdx, 0
  8394 00006834 7413                    	je .L_tc_recycle_frame_done_0105
  8395 00006836 4883E908                	sub rcx, 8
  8396 0000683A 4883EF08                	sub rdi, 8
  8397 0000683E 488B37                  	mov rsi, [rdi]
  8398 00006841 488931                  	mov qword [rcx], rsi
  8399 00006844 48FFCA                  	dec rdx
  8400 00006847 EBE7                    	jmp .L_tc_recycle_frame_loop_0105
  8401                                  .L_tc_recycle_frame_done_0105:
  8402 00006849 5D                      	pop rbp ; restore the old rbp
  8403 0000684A 4889CC                  	mov rsp, rcx
  8404 0000684D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8405                                  .L_if_end_007c:
  8406                                  .L_if_end_007d:
  8407 00006850 E9D1010000              	jmp .L_if_end_0081
  8408                                            .L_if_else_0081:
  8409 00006855 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  8410 00006859 50                      	push rax
  8411 0000685A 6A01                    	push 1
  8412 0000685C 488B0425[40000000]      	mov rax, qword [free_var_8]
  8413                                  	assert_closure(rax)
    42 00006864 803805              <1>  cmp byte [%1], %2
    43 00006867 0F8564A90000        <1>  jne L_error_incorrect_type
  8414 0000686D FF7001                  	push SOB_CLOSURE_ENV(rax)
  8415 00006870 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8416 00006873 483D[02000000]          	cmp rax, sob_boolean_false
  8417 00006879 0F845D010000                      	je .L_if_else_0080
  8418 0000687F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8419 00006883 50                      	push rax
  8420 00006884 6A01                    	push 1
  8421 00006886 488B0425[48000000]      	mov rax, qword [free_var_9]
  8422                                  	assert_closure(rax)
    42 0000688E 803805              <1>  cmp byte [%1], %2
    43 00006891 0F853AA90000        <1>  jne L_error_incorrect_type
  8423 00006897 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8424 0000689A FF5009                  	call SOB_CLOSURE_CODE(rax)
  8425 0000689D 483D[02000000]          	cmp rax, sob_boolean_false
  8426 000068A3 7471                              	je .L_if_else_007f
  8427 000068A5 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8428 000068A9 50                      	push rax
  8429 000068AA 6A01                    	push 1
  8430 000068AC 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8431                                  	assert_closure(rax)
    42 000068B4 803805              <1>  cmp byte [%1], %2
    43 000068B7 0F8514A90000        <1>  jne L_error_incorrect_type
  8432 000068BD FF7001                  	push SOB_CLOSURE_ENV(rax)
  8433 000068C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8434 000068C3 50                      	push rax
  8435 000068C4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8436 000068C8 50                      	push rax
  8437 000068C9 6A02                    	push 2
  8438 000068CB 488B0425[00010000]      	mov rax, qword [free_var_32]
  8439                                  	assert_closure(rax)
    42 000068D3 803805              <1>  cmp byte [%1], %2
    43 000068D6 0F85F5A80000        <1>  jne L_error_incorrect_type
  8440 000068DC FF7001                  	push SOB_CLOSURE_ENV(rax)
  8441 000068DF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8442 000068E2 FF7500                  	push qword [rbp] ; same the old rbp
  8443 000068E5 BA05000000              	mov rdx, 2 + 3
  8444 000068EA 488B4D00                	mov rcx, [rbp]
  8445 000068EE 4889EF                  	mov rdi, rbp
  8446                                  .L_tc_recycle_frame_loop_0106:
  8447 000068F1 4883FA00                	cmp rdx, 0
  8448 000068F5 7413                    	je .L_tc_recycle_frame_done_0106
  8449 000068F7 4883E908                	sub rcx, 8
  8450 000068FB 4883EF08                	sub rdi, 8
  8451 000068FF 488B37                  	mov rsi, [rdi]
  8452 00006902 488931                  	mov qword [rcx], rsi
  8453 00006905 48FFCA                  	dec rdx
  8454 00006908 EBE7                    	jmp .L_tc_recycle_frame_loop_0106
  8455                                  .L_tc_recycle_frame_done_0106:
  8456 0000690A 5D                      	pop rbp ; restore the old rbp
  8457 0000690B 4889CC                  	mov rsp, rcx
  8458 0000690E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8459 00006911 E9C4000000              	jmp .L_if_end_007f
  8460                                            .L_if_else_007f:
  8461 00006916 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8462 0000691A 50                      	push rax
  8463 0000691B 6A01                    	push 1
  8464 0000691D 488B0425[40000000]      	mov rax, qword [free_var_8]
  8465                                  	assert_closure(rax)
    42 00006925 803805              <1>  cmp byte [%1], %2
    43 00006928 0F85A3A80000        <1>  jne L_error_incorrect_type
  8466 0000692E FF7001                  	push SOB_CLOSURE_ENV(rax)
  8467 00006931 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8468 00006934 483D[02000000]          	cmp rax, sob_boolean_false
  8469 0000693A 7454                              	je .L_if_else_007e
  8470 0000693C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8471 00006940 50                      	push rax
  8472 00006941 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8473 00006945 50                      	push rax
  8474 00006946 6A02                    	push 2
  8475 00006948 488B0425[00010000]      	mov rax, qword [free_var_32]
  8476                                  	assert_closure(rax)
    42 00006950 803805              <1>  cmp byte [%1], %2
    43 00006953 0F8578A80000        <1>  jne L_error_incorrect_type
  8477 00006959 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8478 0000695C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8479 0000695F FF7500                  	push qword [rbp] ; same the old rbp
  8480 00006962 BA05000000              	mov rdx, 2 + 3
  8481 00006967 488B4D00                	mov rcx, [rbp]
  8482 0000696B 4889EF                  	mov rdi, rbp
  8483                                  .L_tc_recycle_frame_loop_0107:
  8484 0000696E 4883FA00                	cmp rdx, 0
  8485 00006972 7413                    	je .L_tc_recycle_frame_done_0107
  8486 00006974 4883E908                	sub rcx, 8
  8487 00006978 4883EF08                	sub rdi, 8
  8488 0000697C 488B37                  	mov rsi, [rdi]
  8489 0000697F 488931                  	mov qword [rcx], rsi
  8490 00006982 48FFCA                  	dec rdx
  8491 00006985 EBE7                    	jmp .L_tc_recycle_frame_loop_0107
  8492                                  .L_tc_recycle_frame_done_0107:
  8493 00006987 5D                      	pop rbp ; restore the old rbp
  8494 00006988 4889CC                  	mov rsp, rcx
  8495 0000698B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8496 0000698E EB4A                    	jmp .L_if_end_007e
  8497                                            .L_if_else_007e:
  8498 00006990 6A00                              	push 0
  8499 00006992 488B4510                	mov rax, qword [rbp + 8 * 2]
  8500 00006996 488B00                  	mov rax, qword [rax + 8 * 0]
  8501 00006999 488B00                  	mov rax, qword [rax + 8 * 0]
  8502                                  	assert_closure(rax)
    42 0000699C 803805              <1>  cmp byte [%1], %2
    43 0000699F 0F852CA80000        <1>  jne L_error_incorrect_type
  8503 000069A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8504 000069A8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8505 000069AB FF7500                  	push qword [rbp] ; same the old rbp
  8506 000069AE BA03000000              	mov rdx, 0 + 3
  8507 000069B3 488B4D00                	mov rcx, [rbp]
  8508 000069B7 4889EF                  	mov rdi, rbp
  8509                                  .L_tc_recycle_frame_loop_0108:
  8510 000069BA 4883FA00                	cmp rdx, 0
  8511 000069BE 7413                    	je .L_tc_recycle_frame_done_0108
  8512 000069C0 4883E908                	sub rcx, 8
  8513 000069C4 4883EF08                	sub rdi, 8
  8514 000069C8 488B37                  	mov rsi, [rdi]
  8515 000069CB 488931                  	mov qword [rcx], rsi
  8516 000069CE 48FFCA                  	dec rdx
  8517 000069D1 EBE7                    	jmp .L_tc_recycle_frame_loop_0108
  8518                                  .L_tc_recycle_frame_done_0108:
  8519 000069D3 5D                      	pop rbp ; restore the old rbp
  8520 000069D4 4889CC                  	mov rsp, rcx
  8521 000069D7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8522                                  .L_if_end_007e:
  8523                                  .L_if_end_007f:
  8524 000069DA EB4A                    	jmp .L_if_end_0080
  8525                                            .L_if_else_0080:
  8526 000069DC 6A00                              	push 0
  8527 000069DE 488B4510                	mov rax, qword [rbp + 8 * 2]
  8528 000069E2 488B00                  	mov rax, qword [rax + 8 * 0]
  8529 000069E5 488B00                  	mov rax, qword [rax + 8 * 0]
  8530                                  	assert_closure(rax)
    42 000069E8 803805              <1>  cmp byte [%1], %2
    43 000069EB 0F85E0A70000        <1>  jne L_error_incorrect_type
  8531 000069F1 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8532 000069F4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8533 000069F7 FF7500                  	push qword [rbp] ; same the old rbp
  8534 000069FA BA03000000              	mov rdx, 0 + 3
  8535 000069FF 488B4D00                	mov rcx, [rbp]
  8536 00006A03 4889EF                  	mov rdi, rbp
  8537                                  .L_tc_recycle_frame_loop_0109:
  8538 00006A06 4883FA00                	cmp rdx, 0
  8539 00006A0A 7413                    	je .L_tc_recycle_frame_done_0109
  8540 00006A0C 4883E908                	sub rcx, 8
  8541 00006A10 4883EF08                	sub rdi, 8
  8542 00006A14 488B37                  	mov rsi, [rdi]
  8543 00006A17 488931                  	mov qword [rcx], rsi
  8544 00006A1A 48FFCA                  	dec rdx
  8545 00006A1D EBE7                    	jmp .L_tc_recycle_frame_loop_0109
  8546                                  .L_tc_recycle_frame_done_0109:
  8547 00006A1F 5D                      	pop rbp ; restore the old rbp
  8548 00006A20 4889CC                  	mov rsp, rcx
  8549 00006A23 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8550                                  .L_if_end_0080:
  8551                                  .L_if_end_0081:
  8552 00006A26 C9                      	leave
  8553 00006A27 C22000                  	ret 8 * (2 + 2)
  8554                                  .L_lambda_simple_end_00dc:	; new closure is in rax
  8555 00006A2A 50                      	push rax
  8556 00006A2B 6A01                    	push 1
  8557 00006A2D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8558 00006A32 E8A68F0000              	call malloc
  8559 00006A37 50                      	push rax
  8560 00006A38 BF08000000              	mov rdi, 8 * 1	; new rib
  8561 00006A3D E89B8F0000              	call malloc
  8562 00006A42 50                      	push rax
  8563 00006A43 BF10000000              	mov rdi, 8 * 2	; extended env
  8564 00006A48 E8908F0000              	call malloc
  8565 00006A4D 488B7D10                	mov rdi, ENV
  8566 00006A51 BE00000000              	mov rsi, 0
  8567 00006A56 BA01000000              	mov rdx, 1
  8568                                  .L_lambda_simple_env_loop_00db:	; ext_env[i + 1] <-- env[i]
  8569 00006A5B 4883FE01                	cmp rsi, 1
  8570 00006A5F 7410                    	je .L_lambda_simple_env_end_00db
  8571 00006A61 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8572 00006A65 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8573 00006A69 48FFC6                  	inc rsi
  8574 00006A6C 48FFC2                  	inc rdx
  8575 00006A6F EBEA                    	jmp .L_lambda_simple_env_loop_00db
  8576                                  .L_lambda_simple_env_end_00db:
  8577 00006A71 5B                      	pop rbx
  8578 00006A72 BE00000000              	mov rsi, 0
  8579                                  .L_lambda_simple_params_loop_00db:	; copy params
  8580 00006A77 4883FE01                	cmp rsi, 1
  8581 00006A7B 740E                    	je .L_lambda_simple_params_end_00db
  8582 00006A7D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8583 00006A82 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8584 00006A86 48FFC6                  	inc rsi
  8585 00006A89 EBEC                    	jmp .L_lambda_simple_params_loop_00db
  8586                                  .L_lambda_simple_params_end_00db:
  8587 00006A8B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8588 00006A8E 4889C3                  	mov rbx, rax
  8589 00006A91 58                      	pop rax
  8590 00006A92 C60005                  	mov byte [rax], T_closure
  8591 00006A95 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8592 00006A99 48C74009[A66A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00db
  8593 00006AA1 E9D1010000              	jmp .L_lambda_simple_end_00db
  8594                                  .L_lambda_simple_code_00db:	; lambda-simple body
  8595 00006AA6 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8596 00006AAC 740B                    	je .L_lambda_simple_arity_check_ok_00db
  8597 00006AAE FF742410                	push qword [rsp + 8 * 2]
  8598 00006AB2 6A01                    	push 1
  8599 00006AB4 E9DD8E0000              	jmp L_error_incorrect_arity_simple
  8600                                  .L_lambda_simple_arity_check_ok_00db:
  8601 00006AB9 C8000000                	enter 0, 0
  8602 00006ABD BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8603 00006AC2 E8168F0000              	call malloc
  8604 00006AC7 50                      	push rax
  8605 00006AC8 BF08000000              	mov rdi, 8 * 1	; new rib
  8606 00006ACD E80B8F0000              	call malloc
  8607 00006AD2 50                      	push rax
  8608 00006AD3 BF18000000              	mov rdi, 8 * 3	; extended env
  8609 00006AD8 E8008F0000              	call malloc
  8610 00006ADD 488B7D10                	mov rdi, ENV
  8611 00006AE1 BE00000000              	mov rsi, 0
  8612 00006AE6 BA01000000              	mov rdx, 1
  8613                                  .L_lambda_opt_env_loop_0023:	; ext_env[i + 1] <-- env[i]
  8614 00006AEB 4883FE02                	cmp rsi, 2
  8615 00006AEF 7410                    	je .L_lambda_opt_env_end_0023
  8616 00006AF1 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8617 00006AF5 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8618 00006AF9 48FFC6                  	inc rsi
  8619 00006AFC 48FFC2                  	inc rdx
  8620 00006AFF EBEA                    	jmp .L_lambda_opt_env_loop_0023
  8621                                  .L_lambda_opt_env_end_0023:
  8622 00006B01 5B                      	pop rbx
  8623 00006B02 BE00000000              	mov rsi, 0
  8624                                  .L_lambda_opt_params_loop_0023:	; copy params
  8625 00006B07 4883FE01                	cmp rsi, 1
  8626 00006B0B 740E                    	je .L_lambda_opt_params_end_0023
  8627 00006B0D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8628 00006B12 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8629 00006B16 48FFC6                  	inc rsi
  8630 00006B19 EBEC                    	jmp .L_lambda_opt_params_loop_0023
  8631                                  .L_lambda_opt_params_end_0023:
  8632 00006B1B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8633 00006B1E 4889C3                  	mov rbx, rax
  8634 00006B21 58                      	pop rax
  8635 00006B22 C60005                  	mov byte [rax], T_closure
  8636 00006B25 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8637 00006B29 48C74009[366B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0023
  8638 00006B31 E93D010000              	jmp .L_lambda_opt_end_0023
  8639                                  .L_lambda_opt_code_0023:	; lambda-opt body
  8640 00006B36 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8641 00006B3C 740D                    	je .L_lambda_opt_arity_check_exact_0023
  8642 00006B3E 7F43                    	jg .L_lambda_opt_arity_check_more_0023
  8643 00006B40 FF742410                	push qword [rsp + 8 * 2]
  8644 00006B44 6A00                    	push 0
  8645 00006B46 E95F8E0000              	jmp L_error_incorrect_arity_opt
  8646                                  .L_lambda_opt_arity_check_exact_0023:
  8647 00006B4B 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  8648 00006B54 BA03000000              	mov rdx, 3
  8649 00006B59 FF3424                  	push qword [rsp]
  8650 00006B5C BE01000000              	mov rsi, 1
  8651                                  .L_lambda_opt_stack_shrink_loop_0067:
  8652 00006B61 4839D6                  	cmp rsi, rdx
  8653 00006B64 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0067
  8654 00006B66 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  8655 00006B6B 488B0B                  	mov rcx, [rbx]
  8656 00006B6E 48894BF8                	mov qword [rbx - 8], rcx
  8657 00006B72 48FFC6                  	inc rsi
  8658 00006B75 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0067
  8659                                  .L_lambda_opt_stack_shrink_loop_exit_0067:
  8660 00006B77 48C703[01000000]        	mov qword [rbx], sob_nil
  8661 00006B7E E985000000              	jmp .L_lambda_opt_stack_adjusted_0023
  8662                                  .L_lambda_opt_arity_check_more_0023:
  8663 00006B83 488B542410              	mov rdx, qword [rsp + 8 * 2]
  8664 00006B88 4883EA00                	sub rdx, 0
  8665 00006B8C 48C744241001000000      	mov qword [rsp + 8 * 2], 1
  8666 00006B95 BE00000000              	mov rsi, 0
  8667 00006B9A 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
  8668 00006B9F 48B9-                   	mov rcx, sob_nil
  8668 00006BA1 [0100000000000000] 
  8669                                  .L_lambda_opt_stack_shrink_loop_0068:
  8670 00006BA9 4839D6                  	cmp rsi, rdx
  8671 00006BAC 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0068
  8672 00006BAE BF11000000              	mov rdi, 17 ; 1+8+8
  8673 00006BB3 E8258E0000              	call malloc
  8674 00006BB8 48894809                	mov SOB_PAIR_CDR(rax), rcx
  8675 00006BBC 48F7DE                  	neg rsi
  8676 00006BBF 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  8677 00006BC3 48F7DE                  	neg rsi
  8678 00006BC6 48894801                	mov SOB_PAIR_CAR(rax), rcx
  8679 00006BCA C60021                  	mov byte [rax], T_pair
  8680 00006BCD 4889C1                  	mov rcx, rax
  8681 00006BD0 48FFC6                  	inc rsi
  8682 00006BD3 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0068
  8683                                  .L_lambda_opt_stack_shrink_loop_exit_0068:
  8684 00006BD5 48890B                  	mov qword [rbx], rcx
  8685 00006BD8 4883EB08                	sub rbx, 8
  8686 00006BDC 4889E7                  	mov rdi, rsp
  8687 00006BDF 4883C710                	add rdi, 16
  8688 00006BE3 BE03000000              	mov rsi, 3
  8689                                  .L_lambda_opt_stack_shrink_loop_0069:
  8690 00006BE8 4883FE00                	cmp rsi,0
  8691 00006BEC 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0069
  8692 00006BEE 488B0F                  	mov rcx, qword [rdi]
  8693 00006BF1 48890B                  	mov [rbx], rcx
  8694 00006BF4 48FFCE                  	dec rsi
  8695 00006BF7 4883EB08                	sub rbx, 8
  8696 00006BFB 4883EF08                	sub rdi, 8
  8697 00006BFF EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0069
  8698                                  .L_lambda_opt_stack_shrink_loop_exit_0069:
  8699 00006C01 4883C308                	add rbx, 8
  8700 00006C05 4889DC                  	mov rsp, rbx
  8701                                  .L_lambda_opt_stack_adjusted_0023:
  8702 00006C08 C8000000                	enter 0, 0
  8703 00006C0C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8704 00006C10 50                      	push rax
  8705 00006C11 48B8-                   	mov rax, L_constants + 128
  8705 00006C13 [8000000000000000] 
  8706 00006C1B 50                      	push rax
  8707 00006C1C 488B4510                	mov rax, qword [rbp + 8 * 2]
  8708 00006C20 488B00                  	mov rax, qword [rax + 8 * 0]
  8709 00006C23 488B00                  	mov rax, qword [rax + 8 * 0]
  8710 00006C26 50                      	push rax
  8711 00006C27 6A03                    	push 3
  8712 00006C29 488B0425[F8020000]      	mov rax, qword [free_var_95]
  8713                                  	assert_closure(rax)
    42 00006C31 803805              <1>  cmp byte [%1], %2
    43 00006C34 0F8597A50000        <1>  jne L_error_incorrect_type
  8714 00006C3A FF7001                  	push SOB_CLOSURE_ENV(rax)
  8715 00006C3D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8716 00006C40 FF7500                  	push qword [rbp] ; same the old rbp
  8717 00006C43 BA06000000              	mov rdx, 3 + 3
  8718 00006C48 488B4D00                	mov rcx, [rbp]
  8719 00006C4C 4889EF                  	mov rdi, rbp
  8720                                  .L_tc_recycle_frame_loop_0102:
  8721 00006C4F 4883FA00                	cmp rdx, 0
  8722 00006C53 7413                    	je .L_tc_recycle_frame_done_0102
  8723 00006C55 4883E908                	sub rcx, 8
  8724 00006C59 4883EF08                	sub rdi, 8
  8725 00006C5D 488B37                  	mov rsi, [rdi]
  8726 00006C60 488931                  	mov qword [rcx], rsi
  8727 00006C63 48FFCA                  	dec rdx
  8728 00006C66 EBE7                    	jmp .L_tc_recycle_frame_loop_0102
  8729                                  .L_tc_recycle_frame_done_0102:
  8730 00006C68 5D                      	pop rbp ; restore the old rbp
  8731 00006C69 4889CC                  	mov rsp, rcx
  8732 00006C6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8733 00006C6F C9                      	leave
  8734 00006C70 C21800                  	ret 8 * (2 + 1)
  8735                                  .L_lambda_opt_end_0023:	; new closure is in rax
  8736 00006C73 C9                      	leave
  8737 00006C74 C21800                  	ret 8 * (2 + 1)
  8738                                  .L_lambda_simple_end_00db:	; new closure is in rax
  8739                                  	assert_closure(rax)
    42 00006C77 803805              <1>  cmp byte [%1], %2
    43 00006C7A 0F8551A50000        <1>  jne L_error_incorrect_type
  8740 00006C80 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8741 00006C83 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8742 00006C86 FF7500                  	push qword [rbp] ; same the old rbp
  8743 00006C89 BA04000000              	mov rdx, 1 + 3
  8744 00006C8E 488B4D00                	mov rcx, [rbp]
  8745 00006C92 4889EF                  	mov rdi, rbp
  8746                                  .L_tc_recycle_frame_loop_0101:
  8747 00006C95 4883FA00                	cmp rdx, 0
  8748 00006C99 7413                    	je .L_tc_recycle_frame_done_0101
  8749 00006C9B 4883E908                	sub rcx, 8
  8750 00006C9F 4883EF08                	sub rdi, 8
  8751 00006CA3 488B37                  	mov rsi, [rdi]
  8752 00006CA6 488931                  	mov qword [rcx], rsi
  8753 00006CA9 48FFCA                  	dec rdx
  8754 00006CAC EBE7                    	jmp .L_tc_recycle_frame_loop_0101
  8755                                  .L_tc_recycle_frame_done_0101:
  8756 00006CAE 5D                      	pop rbp ; restore the old rbp
  8757 00006CAF 4889CC                  	mov rsp, rcx
  8758 00006CB2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8759 00006CB5 C9                      	leave
  8760 00006CB6 C21800                  	ret 8 * (2 + 1)
  8761                                  .L_lambda_simple_end_00da:	; new closure is in rax
  8762                                  	assert_closure(rax)
    42 00006CB9 803805              <1>  cmp byte [%1], %2
    43 00006CBC 0F850FA50000        <1>  jne L_error_incorrect_type
  8763 00006CC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8764 00006CC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8765 00006CC8 48890425[18030000]      	mov qword [free_var_99], rax
  8766 00006CD0 48B8-                   	mov rax, sob_void
  8766 00006CD2 [0000000000000000] 
  8767                                  
  8768 00006CDA 4889C7                  	mov rdi, rax
  8769 00006CDD E80C8D0000              	call print_sexpr_if_not_void
  8770                                  
  8771 00006CE2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8772 00006CE7 E8F18C0000              	call malloc
  8773 00006CEC 50                      	push rax
  8774 00006CED BF00000000              	mov rdi, 8 * 0	; new rib
  8775 00006CF2 E8E68C0000              	call malloc
  8776 00006CF7 50                      	push rax
  8777 00006CF8 BF08000000              	mov rdi, 8 * 1	; extended env
  8778 00006CFD E8DB8C0000              	call malloc
  8779 00006D02 488B7D10                	mov rdi, ENV
  8780 00006D06 BE00000000              	mov rsi, 0
  8781 00006D0B BA01000000              	mov rdx, 1
  8782                                  .L_lambda_simple_env_loop_00e2:	; ext_env[i + 1] <-- env[i]
  8783 00006D10 4883FE00                	cmp rsi, 0
  8784 00006D14 7410                    	je .L_lambda_simple_env_end_00e2
  8785 00006D16 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8786 00006D1A 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8787 00006D1E 48FFC6                  	inc rsi
  8788 00006D21 48FFC2                  	inc rdx
  8789 00006D24 EBEA                    	jmp .L_lambda_simple_env_loop_00e2
  8790                                  .L_lambda_simple_env_end_00e2:
  8791 00006D26 5B                      	pop rbx
  8792 00006D27 BE00000000              	mov rsi, 0
  8793                                  .L_lambda_simple_params_loop_00e2:	; copy params
  8794 00006D2C 4883FE00                	cmp rsi, 0
  8795 00006D30 740E                    	je .L_lambda_simple_params_end_00e2
  8796 00006D32 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8797 00006D37 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8798 00006D3B 48FFC6                  	inc rsi
  8799 00006D3E EBEC                    	jmp .L_lambda_simple_params_loop_00e2
  8800                                  .L_lambda_simple_params_end_00e2:
  8801 00006D40 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8802 00006D43 4889C3                  	mov rbx, rax
  8803 00006D46 58                      	pop rax
  8804 00006D47 C60005                  	mov byte [rax], T_closure
  8805 00006D4A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8806 00006D4E 48C74009[586D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e2
  8807 00006D56 EB79                    	jmp .L_lambda_simple_end_00e2
  8808                                  .L_lambda_simple_code_00e2:	; lambda-simple body
  8809 00006D58 48837C241000            	cmp qword [rsp + 8 * 2], 0
  8810 00006D5E 740B                    	je .L_lambda_simple_arity_check_ok_00e2
  8811 00006D60 FF742410                	push qword [rsp + 8 * 2]
  8812 00006D64 6A00                    	push 0
  8813 00006D66 E92B8C0000              	jmp L_error_incorrect_arity_simple
  8814                                  .L_lambda_simple_arity_check_ok_00e2:
  8815 00006D6B C8000000                	enter 0, 0
  8816 00006D6F 48B8-                   	mov rax, L_constants + 68
  8816 00006D71 [4400000000000000] 
  8817 00006D79 50                      	push rax
  8818 00006D7A 48B8-                   	mov rax, L_constants + 174
  8818 00006D7C [AE00000000000000] 
  8819 00006D84 50                      	push rax
  8820 00006D85 6A02                    	push 2
  8821 00006D87 488B0425[30010000]      	mov rax, qword [free_var_38]
  8822                                  	assert_closure(rax)
    42 00006D8F 803805              <1>  cmp byte [%1], %2
    43 00006D92 0F8539A40000        <1>  jne L_error_incorrect_type
  8823 00006D98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8824 00006D9B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8825 00006D9E FF7500                  	push qword [rbp] ; same the old rbp
  8826 00006DA1 BA05000000              	mov rdx, 2 + 3
  8827 00006DA6 488B4D00                	mov rcx, [rbp]
  8828 00006DAA 4889EF                  	mov rdi, rbp
  8829                                  .L_tc_recycle_frame_loop_0116:
  8830 00006DAD 4883FA00                	cmp rdx, 0
  8831 00006DB1 7413                    	je .L_tc_recycle_frame_done_0116
  8832 00006DB3 4883E908                	sub rcx, 8
  8833 00006DB7 4883EF08                	sub rdi, 8
  8834 00006DBB 488B37                  	mov rsi, [rdi]
  8835 00006DBE 488931                  	mov qword [rcx], rsi
  8836 00006DC1 48FFCA                  	dec rdx
  8837 00006DC4 EBE7                    	jmp .L_tc_recycle_frame_loop_0116
  8838                                  .L_tc_recycle_frame_done_0116:
  8839 00006DC6 5D                      	pop rbp ; restore the old rbp
  8840 00006DC7 4889CC                  	mov rsp, rcx
  8841 00006DCA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8842 00006DCD C9                      	leave
  8843 00006DCE C21000                  	ret 8 * (2 + 0)
  8844                                  .L_lambda_simple_end_00e2:	; new closure is in rax
  8845 00006DD1 50                      	push rax
  8846 00006DD2 6A01                    	push 1
  8847 00006DD4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8848 00006DD9 E8FF8B0000              	call malloc
  8849 00006DDE 50                      	push rax
  8850 00006DDF BF00000000              	mov rdi, 8 * 0	; new rib
  8851 00006DE4 E8F48B0000              	call malloc
  8852 00006DE9 50                      	push rax
  8853 00006DEA BF08000000              	mov rdi, 8 * 1	; extended env
  8854 00006DEF E8E98B0000              	call malloc
  8855 00006DF4 488B7D10                	mov rdi, ENV
  8856 00006DF8 BE00000000              	mov rsi, 0
  8857 00006DFD BA01000000              	mov rdx, 1
  8858                                  .L_lambda_simple_env_loop_00de:	; ext_env[i + 1] <-- env[i]
  8859 00006E02 4883FE00                	cmp rsi, 0
  8860 00006E06 7410                    	je .L_lambda_simple_env_end_00de
  8861 00006E08 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8862 00006E0C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8863 00006E10 48FFC6                  	inc rsi
  8864 00006E13 48FFC2                  	inc rdx
  8865 00006E16 EBEA                    	jmp .L_lambda_simple_env_loop_00de
  8866                                  .L_lambda_simple_env_end_00de:
  8867 00006E18 5B                      	pop rbx
  8868 00006E19 BE00000000              	mov rsi, 0
  8869                                  .L_lambda_simple_params_loop_00de:	; copy params
  8870 00006E1E 4883FE00                	cmp rsi, 0
  8871 00006E22 740E                    	je .L_lambda_simple_params_end_00de
  8872 00006E24 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8873 00006E29 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8874 00006E2D 48FFC6                  	inc rsi
  8875 00006E30 EBEC                    	jmp .L_lambda_simple_params_loop_00de
  8876                                  .L_lambda_simple_params_end_00de:
  8877 00006E32 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8878 00006E35 4889C3                  	mov rbx, rax
  8879 00006E38 58                      	pop rax
  8880 00006E39 C60005                  	mov byte [rax], T_closure
  8881 00006E3C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8882 00006E40 48C74009[4D6E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00de
  8883 00006E48 E916080000              	jmp .L_lambda_simple_end_00de
  8884                                  .L_lambda_simple_code_00de:	; lambda-simple body
  8885 00006E4D 48837C241001            	cmp qword [rsp + 8 * 2], 1
  8886 00006E53 740B                    	je .L_lambda_simple_arity_check_ok_00de
  8887 00006E55 FF742410                	push qword [rsp + 8 * 2]
  8888 00006E59 6A01                    	push 1
  8889 00006E5B E9368B0000              	jmp L_error_incorrect_arity_simple
  8890                                  .L_lambda_simple_arity_check_ok_00de:
  8891 00006E60 C8000000                	enter 0, 0
  8892 00006E64 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  8893 00006E69 E86F8B0000              	call malloc
  8894 00006E6E 50                      	push rax
  8895 00006E6F BF08000000              	mov rdi, 8 * 1	; new rib
  8896 00006E74 E8648B0000              	call malloc
  8897 00006E79 50                      	push rax
  8898 00006E7A BF10000000              	mov rdi, 8 * 2	; extended env
  8899 00006E7F E8598B0000              	call malloc
  8900 00006E84 488B7D10                	mov rdi, ENV
  8901 00006E88 BE00000000              	mov rsi, 0
  8902 00006E8D BA01000000              	mov rdx, 1
  8903                                  .L_lambda_simple_env_loop_00e1:	; ext_env[i + 1] <-- env[i]
  8904 00006E92 4883FE01                	cmp rsi, 1
  8905 00006E96 7410                    	je .L_lambda_simple_env_end_00e1
  8906 00006E98 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  8907 00006E9C 48890CD0                	mov qword [rax + 8 * rdx], rcx
  8908 00006EA0 48FFC6                  	inc rsi
  8909 00006EA3 48FFC2                  	inc rdx
  8910 00006EA6 EBEA                    	jmp .L_lambda_simple_env_loop_00e1
  8911                                  .L_lambda_simple_env_end_00e1:
  8912 00006EA8 5B                      	pop rbx
  8913 00006EA9 BE00000000              	mov rsi, 0
  8914                                  .L_lambda_simple_params_loop_00e1:	; copy params
  8915 00006EAE 4883FE01                	cmp rsi, 1
  8916 00006EB2 740E                    	je .L_lambda_simple_params_end_00e1
  8917 00006EB4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  8918 00006EB9 488914F3                	mov qword [rbx + 8 * rsi], rdx
  8919 00006EBD 48FFC6                  	inc rsi
  8920 00006EC0 EBEC                    	jmp .L_lambda_simple_params_loop_00e1
  8921                                  .L_lambda_simple_params_end_00e1:
  8922 00006EC2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  8923 00006EC5 4889C3                  	mov rbx, rax
  8924 00006EC8 58                      	pop rax
  8925 00006EC9 C60005                  	mov byte [rax], T_closure
  8926 00006ECC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  8927 00006ED0 48C74009[DD6E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e1
  8928 00006ED8 E976030000              	jmp .L_lambda_simple_end_00e1
  8929                                  .L_lambda_simple_code_00e1:	; lambda-simple body
  8930 00006EDD 48837C241002            	cmp qword [rsp + 8 * 2], 2
  8931 00006EE3 740B                    	je .L_lambda_simple_arity_check_ok_00e1
  8932 00006EE5 FF742410                	push qword [rsp + 8 * 2]
  8933 00006EE9 6A02                    	push 2
  8934 00006EEB E9A68A0000              	jmp L_error_incorrect_arity_simple
  8935                                  .L_lambda_simple_arity_check_ok_00e1:
  8936 00006EF0 C8000000                	enter 0, 0
  8937 00006EF4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8938 00006EF8 50                      	push rax
  8939 00006EF9 6A01                    	push 1
  8940 00006EFB 488B0425[48000000]      	mov rax, qword [free_var_9]
  8941                                  	assert_closure(rax)
    42 00006F03 803805              <1>  cmp byte [%1], %2
    43 00006F06 0F85C5A20000        <1>  jne L_error_incorrect_type
  8942 00006F0C FF7001                  	push SOB_CLOSURE_ENV(rax)
  8943 00006F0F FF5009                  	call SOB_CLOSURE_CODE(rax)
  8944 00006F12 483D[02000000]          	cmp rax, sob_boolean_false
  8945 00006F18 0F8460010000                      	je .L_if_else_0088
  8946 00006F1E 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8947 00006F22 50                      	push rax
  8948 00006F23 6A01                    	push 1
  8949 00006F25 488B0425[48000000]      	mov rax, qword [free_var_9]
  8950                                  	assert_closure(rax)
    42 00006F2D 803805              <1>  cmp byte [%1], %2
    43 00006F30 0F859BA20000        <1>  jne L_error_incorrect_type
  8951 00006F36 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8952 00006F39 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8953 00006F3C 483D[02000000]          	cmp rax, sob_boolean_false
  8954 00006F42 7457                              	je .L_if_else_0084
  8955 00006F44 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8956 00006F48 50                      	push rax
  8957 00006F49 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8958 00006F4D 50                      	push rax
  8959 00006F4E 6A02                    	push 2
  8960 00006F50 488B0425[28010000]      	mov rax, qword [free_var_37]
  8961                                  	assert_closure(rax)
    42 00006F58 803805              <1>  cmp byte [%1], %2
    43 00006F5B 0F8570A20000        <1>  jne L_error_incorrect_type
  8962 00006F61 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8963 00006F64 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  8964 00006F67 FF7500                  	push qword [rbp] ; same the old rbp
  8965 00006F6A BA05000000              	mov rdx, 2 + 3
  8966 00006F6F 488B4D00                	mov rcx, [rbp]
  8967 00006F73 4889EF                  	mov rdi, rbp
  8968                                  .L_tc_recycle_frame_loop_010f:
  8969 00006F76 4883FA00                	cmp rdx, 0
  8970 00006F7A 7413                    	je .L_tc_recycle_frame_done_010f
  8971 00006F7C 4883E908                	sub rcx, 8
  8972 00006F80 4883EF08                	sub rdi, 8
  8973 00006F84 488B37                  	mov rsi, [rdi]
  8974 00006F87 488931                  	mov qword [rcx], rsi
  8975 00006F8A 48FFCA                  	dec rdx
  8976 00006F8D EBE7                    	jmp .L_tc_recycle_frame_loop_010f
  8977                                  .L_tc_recycle_frame_done_010f:
  8978 00006F8F 5D                      	pop rbp ; restore the old rbp
  8979 00006F90 4889CC                  	mov rsp, rcx
  8980 00006F93 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  8981 00006F96 E9DE000000              	jmp .L_if_end_0084
  8982                                            .L_if_else_0084:
  8983 00006F9B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8984 00006F9F 50                      	push rax
  8985 00006FA0 6A01                    	push 1
  8986 00006FA2 488B0425[40000000]      	mov rax, qword [free_var_8]
  8987                                  	assert_closure(rax)
    42 00006FAA 803805              <1>  cmp byte [%1], %2
    43 00006FAD 0F851EA20000        <1>  jne L_error_incorrect_type
  8988 00006FB3 FF7001                  	push SOB_CLOSURE_ENV(rax)
  8989 00006FB6 FF5009                  	call SOB_CLOSURE_CODE(rax)
  8990 00006FB9 483D[02000000]          	cmp rax, sob_boolean_false
  8991 00006FBF 746E                              	je .L_if_else_0083
  8992 00006FC1 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  8993 00006FC5 50                      	push rax
  8994 00006FC6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  8995 00006FCA 50                      	push rax
  8996 00006FCB 6A01                    	push 1
  8997 00006FCD 488B0425[B8000000]      	mov rax, qword [free_var_23]
  8998                                  	assert_closure(rax)
    42 00006FD5 803805              <1>  cmp byte [%1], %2
    43 00006FD8 0F85F3A10000        <1>  jne L_error_incorrect_type
  8999 00006FDE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9000 00006FE1 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9001 00006FE4 50                      	push rax
  9002 00006FE5 6A02                    	push 2
  9003 00006FE7 488B0425[08010000]      	mov rax, qword [free_var_33]
  9004                                  	assert_closure(rax)
    42 00006FEF 803805              <1>  cmp byte [%1], %2
    43 00006FF2 0F85D9A10000        <1>  jne L_error_incorrect_type
  9005 00006FF8 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9006 00006FFB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9007 00006FFE FF7500                  	push qword [rbp] ; same the old rbp
  9008 00007001 BA05000000              	mov rdx, 2 + 3
  9009 00007006 488B4D00                	mov rcx, [rbp]
  9010 0000700A 4889EF                  	mov rdi, rbp
  9011                                  .L_tc_recycle_frame_loop_0110:
  9012 0000700D 4883FA00                	cmp rdx, 0
  9013 00007011 7413                    	je .L_tc_recycle_frame_done_0110
  9014 00007013 4883E908                	sub rcx, 8
  9015 00007017 4883EF08                	sub rdi, 8
  9016 0000701B 488B37                  	mov rsi, [rdi]
  9017 0000701E 488931                  	mov qword [rcx], rsi
  9018 00007021 48FFCA                  	dec rdx
  9019 00007024 EBE7                    	jmp .L_tc_recycle_frame_loop_0110
  9020                                  .L_tc_recycle_frame_done_0110:
  9021 00007026 5D                      	pop rbp ; restore the old rbp
  9022 00007027 4889CC                  	mov rsp, rcx
  9023 0000702A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9024 0000702D EB4A                    	jmp .L_if_end_0083
  9025                                            .L_if_else_0083:
  9026 0000702F 6A00                              	push 0
  9027 00007031 488B4510                	mov rax, qword [rbp + 8 * 2]
  9028 00007035 488B00                  	mov rax, qword [rax + 8 * 0]
  9029 00007038 488B00                  	mov rax, qword [rax + 8 * 0]
  9030                                  	assert_closure(rax)
    42 0000703B 803805              <1>  cmp byte [%1], %2
    43 0000703E 0F858DA10000        <1>  jne L_error_incorrect_type
  9031 00007044 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9032 00007047 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9033 0000704A FF7500                  	push qword [rbp] ; same the old rbp
  9034 0000704D BA03000000              	mov rdx, 0 + 3
  9035 00007052 488B4D00                	mov rcx, [rbp]
  9036 00007056 4889EF                  	mov rdi, rbp
  9037                                  .L_tc_recycle_frame_loop_0111:
  9038 00007059 4883FA00                	cmp rdx, 0
  9039 0000705D 7413                    	je .L_tc_recycle_frame_done_0111
  9040 0000705F 4883E908                	sub rcx, 8
  9041 00007063 4883EF08                	sub rdi, 8
  9042 00007067 488B37                  	mov rsi, [rdi]
  9043 0000706A 488931                  	mov qword [rcx], rsi
  9044 0000706D 48FFCA                  	dec rdx
  9045 00007070 EBE7                    	jmp .L_tc_recycle_frame_loop_0111
  9046                                  .L_tc_recycle_frame_done_0111:
  9047 00007072 5D                      	pop rbp ; restore the old rbp
  9048 00007073 4889CC                  	mov rsp, rcx
  9049 00007076 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9050                                  .L_if_end_0083:
  9051                                  .L_if_end_0084:
  9052 00007079 E9D1010000              	jmp .L_if_end_0088
  9053                                            .L_if_else_0088:
  9054 0000707E 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  9055 00007082 50                      	push rax
  9056 00007083 6A01                    	push 1
  9057 00007085 488B0425[40000000]      	mov rax, qword [free_var_8]
  9058                                  	assert_closure(rax)
    42 0000708D 803805              <1>  cmp byte [%1], %2
    43 00007090 0F853BA10000        <1>  jne L_error_incorrect_type
  9059 00007096 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9060 00007099 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9061 0000709C 483D[02000000]          	cmp rax, sob_boolean_false
  9062 000070A2 0F845D010000                      	je .L_if_else_0087
  9063 000070A8 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9064 000070AC 50                      	push rax
  9065 000070AD 6A01                    	push 1
  9066 000070AF 488B0425[48000000]      	mov rax, qword [free_var_9]
  9067                                  	assert_closure(rax)
    42 000070B7 803805              <1>  cmp byte [%1], %2
    43 000070BA 0F8511A10000        <1>  jne L_error_incorrect_type
  9068 000070C0 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9069 000070C3 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9070 000070C6 483D[02000000]          	cmp rax, sob_boolean_false
  9071 000070CC 7471                              	je .L_if_else_0086
  9072 000070CE 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9073 000070D2 50                      	push rax
  9074 000070D3 6A01                    	push 1
  9075 000070D5 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9076                                  	assert_closure(rax)
    42 000070DD 803805              <1>  cmp byte [%1], %2
    43 000070E0 0F85EBA00000        <1>  jne L_error_incorrect_type
  9077 000070E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9078 000070E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9079 000070EC 50                      	push rax
  9080 000070ED 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9081 000070F1 50                      	push rax
  9082 000070F2 6A02                    	push 2
  9083 000070F4 488B0425[08010000]      	mov rax, qword [free_var_33]
  9084                                  	assert_closure(rax)
    42 000070FC 803805              <1>  cmp byte [%1], %2
    43 000070FF 0F85CCA00000        <1>  jne L_error_incorrect_type
  9085 00007105 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9086 00007108 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9087 0000710B FF7500                  	push qword [rbp] ; same the old rbp
  9088 0000710E BA05000000              	mov rdx, 2 + 3
  9089 00007113 488B4D00                	mov rcx, [rbp]
  9090 00007117 4889EF                  	mov rdi, rbp
  9091                                  .L_tc_recycle_frame_loop_0112:
  9092 0000711A 4883FA00                	cmp rdx, 0
  9093 0000711E 7413                    	je .L_tc_recycle_frame_done_0112
  9094 00007120 4883E908                	sub rcx, 8
  9095 00007124 4883EF08                	sub rdi, 8
  9096 00007128 488B37                  	mov rsi, [rdi]
  9097 0000712B 488931                  	mov qword [rcx], rsi
  9098 0000712E 48FFCA                  	dec rdx
  9099 00007131 EBE7                    	jmp .L_tc_recycle_frame_loop_0112
  9100                                  .L_tc_recycle_frame_done_0112:
  9101 00007133 5D                      	pop rbp ; restore the old rbp
  9102 00007134 4889CC                  	mov rsp, rcx
  9103 00007137 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9104 0000713A E9C4000000              	jmp .L_if_end_0086
  9105                                            .L_if_else_0086:
  9106 0000713F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9107 00007143 50                      	push rax
  9108 00007144 6A01                    	push 1
  9109 00007146 488B0425[40000000]      	mov rax, qword [free_var_8]
  9110                                  	assert_closure(rax)
    42 0000714E 803805              <1>  cmp byte [%1], %2
    43 00007151 0F857AA00000        <1>  jne L_error_incorrect_type
  9111 00007157 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9112 0000715A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9113 0000715D 483D[02000000]          	cmp rax, sob_boolean_false
  9114 00007163 7454                              	je .L_if_else_0085
  9115 00007165 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9116 00007169 50                      	push rax
  9117 0000716A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9118 0000716E 50                      	push rax
  9119 0000716F 6A02                    	push 2
  9120 00007171 488B0425[08010000]      	mov rax, qword [free_var_33]
  9121                                  	assert_closure(rax)
    42 00007179 803805              <1>  cmp byte [%1], %2
    43 0000717C 0F854FA00000        <1>  jne L_error_incorrect_type
  9122 00007182 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9123 00007185 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9124 00007188 FF7500                  	push qword [rbp] ; same the old rbp
  9125 0000718B BA05000000              	mov rdx, 2 + 3
  9126 00007190 488B4D00                	mov rcx, [rbp]
  9127 00007194 4889EF                  	mov rdi, rbp
  9128                                  .L_tc_recycle_frame_loop_0113:
  9129 00007197 4883FA00                	cmp rdx, 0
  9130 0000719B 7413                    	je .L_tc_recycle_frame_done_0113
  9131 0000719D 4883E908                	sub rcx, 8
  9132 000071A1 4883EF08                	sub rdi, 8
  9133 000071A5 488B37                  	mov rsi, [rdi]
  9134 000071A8 488931                  	mov qword [rcx], rsi
  9135 000071AB 48FFCA                  	dec rdx
  9136 000071AE EBE7                    	jmp .L_tc_recycle_frame_loop_0113
  9137                                  .L_tc_recycle_frame_done_0113:
  9138 000071B0 5D                      	pop rbp ; restore the old rbp
  9139 000071B1 4889CC                  	mov rsp, rcx
  9140 000071B4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9141 000071B7 EB4A                    	jmp .L_if_end_0085
  9142                                            .L_if_else_0085:
  9143 000071B9 6A00                              	push 0
  9144 000071BB 488B4510                	mov rax, qword [rbp + 8 * 2]
  9145 000071BF 488B00                  	mov rax, qword [rax + 8 * 0]
  9146 000071C2 488B00                  	mov rax, qword [rax + 8 * 0]
  9147                                  	assert_closure(rax)
    42 000071C5 803805              <1>  cmp byte [%1], %2
    43 000071C8 0F8503A00000        <1>  jne L_error_incorrect_type
  9148 000071CE FF7001                  	push SOB_CLOSURE_ENV(rax)
  9149 000071D1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9150 000071D4 FF7500                  	push qword [rbp] ; same the old rbp
  9151 000071D7 BA03000000              	mov rdx, 0 + 3
  9152 000071DC 488B4D00                	mov rcx, [rbp]
  9153 000071E0 4889EF                  	mov rdi, rbp
  9154                                  .L_tc_recycle_frame_loop_0114:
  9155 000071E3 4883FA00                	cmp rdx, 0
  9156 000071E7 7413                    	je .L_tc_recycle_frame_done_0114
  9157 000071E9 4883E908                	sub rcx, 8
  9158 000071ED 4883EF08                	sub rdi, 8
  9159 000071F1 488B37                  	mov rsi, [rdi]
  9160 000071F4 488931                  	mov qword [rcx], rsi
  9161 000071F7 48FFCA                  	dec rdx
  9162 000071FA EBE7                    	jmp .L_tc_recycle_frame_loop_0114
  9163                                  .L_tc_recycle_frame_done_0114:
  9164 000071FC 5D                      	pop rbp ; restore the old rbp
  9165 000071FD 4889CC                  	mov rsp, rcx
  9166 00007200 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9167                                  .L_if_end_0085:
  9168                                  .L_if_end_0086:
  9169 00007203 EB4A                    	jmp .L_if_end_0087
  9170                                            .L_if_else_0087:
  9171 00007205 6A00                              	push 0
  9172 00007207 488B4510                	mov rax, qword [rbp + 8 * 2]
  9173 0000720B 488B00                  	mov rax, qword [rax + 8 * 0]
  9174 0000720E 488B00                  	mov rax, qword [rax + 8 * 0]
  9175                                  	assert_closure(rax)
    42 00007211 803805              <1>  cmp byte [%1], %2
    43 00007214 0F85B79F0000        <1>  jne L_error_incorrect_type
  9176 0000721A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9177 0000721D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9178 00007220 FF7500                  	push qword [rbp] ; same the old rbp
  9179 00007223 BA03000000              	mov rdx, 0 + 3
  9180 00007228 488B4D00                	mov rcx, [rbp]
  9181 0000722C 4889EF                  	mov rdi, rbp
  9182                                  .L_tc_recycle_frame_loop_0115:
  9183 0000722F 4883FA00                	cmp rdx, 0
  9184 00007233 7413                    	je .L_tc_recycle_frame_done_0115
  9185 00007235 4883E908                	sub rcx, 8
  9186 00007239 4883EF08                	sub rdi, 8
  9187 0000723D 488B37                  	mov rsi, [rdi]
  9188 00007240 488931                  	mov qword [rcx], rsi
  9189 00007243 48FFCA                  	dec rdx
  9190 00007246 EBE7                    	jmp .L_tc_recycle_frame_loop_0115
  9191                                  .L_tc_recycle_frame_done_0115:
  9192 00007248 5D                      	pop rbp ; restore the old rbp
  9193 00007249 4889CC                  	mov rsp, rcx
  9194 0000724C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9195                                  .L_if_end_0087:
  9196                                  .L_if_end_0088:
  9197 0000724F C9                      	leave
  9198 00007250 C22000                  	ret 8 * (2 + 2)
  9199                                  .L_lambda_simple_end_00e1:	; new closure is in rax
  9200 00007253 50                      	push rax
  9201 00007254 6A01                    	push 1
  9202 00007256 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9203 0000725B E87D870000              	call malloc
  9204 00007260 50                      	push rax
  9205 00007261 BF08000000              	mov rdi, 8 * 1	; new rib
  9206 00007266 E872870000              	call malloc
  9207 0000726B 50                      	push rax
  9208 0000726C BF10000000              	mov rdi, 8 * 2	; extended env
  9209 00007271 E867870000              	call malloc
  9210 00007276 488B7D10                	mov rdi, ENV
  9211 0000727A BE00000000              	mov rsi, 0
  9212 0000727F BA01000000              	mov rdx, 1
  9213                                  .L_lambda_simple_env_loop_00df:	; ext_env[i + 1] <-- env[i]
  9214 00007284 4883FE01                	cmp rsi, 1
  9215 00007288 7410                    	je .L_lambda_simple_env_end_00df
  9216 0000728A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9217 0000728E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9218 00007292 48FFC6                  	inc rsi
  9219 00007295 48FFC2                  	inc rdx
  9220 00007298 EBEA                    	jmp .L_lambda_simple_env_loop_00df
  9221                                  .L_lambda_simple_env_end_00df:
  9222 0000729A 5B                      	pop rbx
  9223 0000729B BE00000000              	mov rsi, 0
  9224                                  .L_lambda_simple_params_loop_00df:	; copy params
  9225 000072A0 4883FE01                	cmp rsi, 1
  9226 000072A4 740E                    	je .L_lambda_simple_params_end_00df
  9227 000072A6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9228 000072AB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9229 000072AF 48FFC6                  	inc rsi
  9230 000072B2 EBEC                    	jmp .L_lambda_simple_params_loop_00df
  9231                                  .L_lambda_simple_params_end_00df:
  9232 000072B4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9233 000072B7 4889C3                  	mov rbx, rax
  9234 000072BA 58                      	pop rax
  9235 000072BB C60005                  	mov byte [rax], T_closure
  9236 000072BE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9237 000072C2 48C74009[CF720000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00df
  9238 000072CA E952030000              	jmp .L_lambda_simple_end_00df
  9239                                  .L_lambda_simple_code_00df:	; lambda-simple body
  9240 000072CF 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9241 000072D5 740B                    	je .L_lambda_simple_arity_check_ok_00df
  9242 000072D7 FF742410                	push qword [rsp + 8 * 2]
  9243 000072DB 6A01                    	push 1
  9244 000072DD E9B4860000              	jmp L_error_incorrect_arity_simple
  9245                                  .L_lambda_simple_arity_check_ok_00df:
  9246 000072E2 C8000000                	enter 0, 0
  9247 000072E6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9248 000072EB E8ED860000              	call malloc
  9249 000072F0 50                      	push rax
  9250 000072F1 BF08000000              	mov rdi, 8 * 1	; new rib
  9251 000072F6 E8E2860000              	call malloc
  9252 000072FB 50                      	push rax
  9253 000072FC BF18000000              	mov rdi, 8 * 3	; extended env
  9254 00007301 E8D7860000              	call malloc
  9255 00007306 488B7D10                	mov rdi, ENV
  9256 0000730A BE00000000              	mov rsi, 0
  9257 0000730F BA01000000              	mov rdx, 1
  9258                                  .L_lambda_opt_env_loop_0024:	; ext_env[i + 1] <-- env[i]
  9259 00007314 4883FE02                	cmp rsi, 2
  9260 00007318 7410                    	je .L_lambda_opt_env_end_0024
  9261 0000731A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9262 0000731E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9263 00007322 48FFC6                  	inc rsi
  9264 00007325 48FFC2                  	inc rdx
  9265 00007328 EBEA                    	jmp .L_lambda_opt_env_loop_0024
  9266                                  .L_lambda_opt_env_end_0024:
  9267 0000732A 5B                      	pop rbx
  9268 0000732B BE00000000              	mov rsi, 0
  9269                                  .L_lambda_opt_params_loop_0024:	; copy params
  9270 00007330 4883FE01                	cmp rsi, 1
  9271 00007334 740E                    	je .L_lambda_opt_params_end_0024
  9272 00007336 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9273 0000733B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9274 0000733F 48FFC6                  	inc rsi
  9275 00007342 EBEC                    	jmp .L_lambda_opt_params_loop_0024
  9276                                  .L_lambda_opt_params_end_0024:
  9277 00007344 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9278 00007347 4889C3                  	mov rbx, rax
  9279 0000734A 58                      	pop rax
  9280 0000734B C60005                  	mov byte [rax], T_closure
  9281 0000734E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9282 00007352 48C74009[5F730000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0024
  9283 0000735A E9BE020000              	jmp .L_lambda_opt_end_0024
  9284                                  .L_lambda_opt_code_0024:	; lambda-opt body
  9285 0000735F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9286 00007365 740D                    	je .L_lambda_opt_arity_check_exact_0024
  9287 00007367 7F43                    	jg .L_lambda_opt_arity_check_more_0024
  9288 00007369 FF742410                	push qword [rsp + 8 * 2]
  9289 0000736D 6A01                    	push 1
  9290 0000736F E936860000              	jmp L_error_incorrect_arity_opt
  9291                                  .L_lambda_opt_arity_check_exact_0024:
  9292 00007374 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  9293 0000737D BA04000000              	mov rdx, 4
  9294 00007382 FF3424                  	push qword [rsp]
  9295 00007385 BE01000000              	mov rsi, 1
  9296                                  .L_lambda_opt_stack_shrink_loop_006a:
  9297 0000738A 4839D6                  	cmp rsi, rdx
  9298 0000738D 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_006a
  9299 0000738F 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
  9300 00007394 488B0B                  	mov rcx, [rbx]
  9301 00007397 48894BF8                	mov qword [rbx - 8], rcx
  9302 0000739B 48FFC6                  	inc rsi
  9303 0000739E EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_006a
  9304                                  .L_lambda_opt_stack_shrink_loop_exit_006a:
  9305 000073A0 48C703[01000000]        	mov qword [rbx], sob_nil
  9306 000073A7 E985000000              	jmp .L_lambda_opt_stack_adjusted_0024
  9307                                  .L_lambda_opt_arity_check_more_0024:
  9308 000073AC 488B542410              	mov rdx, qword [rsp + 8 * 2]
  9309 000073B1 4883EA01                	sub rdx, 1
  9310 000073B5 48C744241002000000      	mov qword [rsp + 8 * 2], 2
  9311 000073BE BE00000000              	mov rsi, 0
  9312 000073C3 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
  9313 000073C8 48B9-                   	mov rcx, sob_nil
  9313 000073CA [0100000000000000] 
  9314                                  .L_lambda_opt_stack_shrink_loop_006b:
  9315 000073D2 4839D6                  	cmp rsi, rdx
  9316 000073D5 7427                    je .L_lambda_opt_stack_shrink_loop_exit_006b
  9317 000073D7 BF11000000              	mov rdi, 17 ; 1+8+8
  9318 000073DC E8FC850000              	call malloc
  9319 000073E1 48894809                	mov SOB_PAIR_CDR(rax), rcx
  9320 000073E5 48F7DE                  	neg rsi
  9321 000073E8 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
  9322 000073EC 48F7DE                  	neg rsi
  9323 000073EF 48894801                	mov SOB_PAIR_CAR(rax), rcx
  9324 000073F3 C60021                  	mov byte [rax], T_pair
  9325 000073F6 4889C1                  	mov rcx, rax
  9326 000073F9 48FFC6                  	inc rsi
  9327 000073FC EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_006b
  9328                                  .L_lambda_opt_stack_shrink_loop_exit_006b:
  9329 000073FE 48890B                  	mov qword [rbx], rcx
  9330 00007401 4883EB08                	sub rbx, 8
  9331 00007405 4889E7                  	mov rdi, rsp
  9332 00007408 4883C718                	add rdi, 24
  9333 0000740C BE04000000              	mov rsi, 4
  9334                                  .L_lambda_opt_stack_shrink_loop_006c:
  9335 00007411 4883FE00                	cmp rsi,0
  9336 00007415 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_006c
  9337 00007417 488B0F                  	mov rcx, qword [rdi]
  9338 0000741A 48890B                  	mov [rbx], rcx
  9339 0000741D 48FFCE                  	dec rsi
  9340 00007420 4883EB08                	sub rbx, 8
  9341 00007424 4883EF08                	sub rdi, 8
  9342 00007428 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_006c
  9343                                  .L_lambda_opt_stack_shrink_loop_exit_006c:
  9344 0000742A 4883C308                	add rbx, 8
  9345 0000742E 4889DC                  	mov rsp, rbx
  9346                                  .L_lambda_opt_stack_adjusted_0024:
  9347 00007431 C8000000                	enter 0, 0
  9348 00007435 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
  9349 00007439 50                      	push rax
  9350 0000743A 6A01                    	push 1
  9351 0000743C 488B0425[00000000]      	mov rax, qword [free_var_0]
  9352                                  	assert_closure(rax)
    42 00007444 803805              <1>  cmp byte [%1], %2
    43 00007447 0F85849D0000        <1>  jne L_error_incorrect_type
  9353 0000744D FF7001                  	push SOB_CLOSURE_ENV(rax)
  9354 00007450 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9355 00007453 483D[02000000]          	cmp rax, sob_boolean_false
  9356 00007459 745F                              	je .L_if_else_0082
  9357 0000745B 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
  9358 0000745F 50                      	push rax
  9359 00007460 48B8-                   	mov rax, L_constants + 128
  9359 00007462 [8000000000000000] 
  9360 0000746A 50                      	push rax
  9361 0000746B 6A02                    	push 2
  9362 0000746D 488B4510                	mov rax, qword [rbp + 8 * 2]
  9363 00007471 488B00                  	mov rax, qword [rax + 8 * 0]
  9364 00007474 488B00                  	mov rax, qword [rax + 8 * 0]
  9365                                  	assert_closure(rax)
    42 00007477 803805              <1>  cmp byte [%1], %2
    43 0000747A 0F85519D0000        <1>  jne L_error_incorrect_type
  9366 00007480 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9367 00007483 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9368 00007486 FF7500                  	push qword [rbp] ; same the old rbp
  9369 00007489 BA05000000              	mov rdx, 2 + 3
  9370 0000748E 488B4D00                	mov rcx, [rbp]
  9371 00007492 4889EF                  	mov rdi, rbp
  9372                                  .L_tc_recycle_frame_loop_010c:
  9373 00007495 4883FA00                	cmp rdx, 0
  9374 00007499 7413                    	je .L_tc_recycle_frame_done_010c
  9375 0000749B 4883E908                	sub rcx, 8
  9376 0000749F 4883EF08                	sub rdi, 8
  9377 000074A3 488B37                  	mov rsi, [rdi]
  9378 000074A6 488931                  	mov qword [rcx], rsi
  9379 000074A9 48FFCA                  	dec rdx
  9380 000074AC EBE7                    	jmp .L_tc_recycle_frame_loop_010c
  9381                                  .L_tc_recycle_frame_done_010c:
  9382 000074AE 5D                      	pop rbp ; restore the old rbp
  9383 000074AF 4889CC                  	mov rsp, rcx
  9384 000074B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9385 000074B5 E95F010000              	jmp .L_if_end_0082
  9386                                            .L_if_else_0082:
  9387 000074BA 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9388 000074BE 50                      	push rax
  9389 000074BF 48B8-                   	mov rax, L_constants + 128
  9389 000074C1 [8000000000000000] 
  9390 000074C9 50                      	push rax
  9391 000074CA 488B0425[18030000]      	mov rax, qword [free_var_99]
  9392 000074D2 50                      	push rax
  9393 000074D3 6A03                    	push 3
  9394 000074D5 488B0425[F8020000]      	mov rax, qword [free_var_95]
  9395                                  	assert_closure(rax)
    42 000074DD 803805              <1>  cmp byte [%1], %2
    43 000074E0 0F85EB9C0000        <1>  jne L_error_incorrect_type
  9396 000074E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9397 000074E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9398 000074EC 50                      	push rax
  9399 000074ED 6A01                    	push 1
  9400 000074EF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9401 000074F4 E8E4840000              	call malloc
  9402 000074F9 50                      	push rax
  9403 000074FA BF10000000              	mov rdi, 8 * 2	; new rib
  9404 000074FF E8D9840000              	call malloc
  9405 00007504 50                      	push rax
  9406 00007505 BF20000000              	mov rdi, 8 * 4	; extended env
  9407 0000750A E8CE840000              	call malloc
  9408 0000750F 488B7D10                	mov rdi, ENV
  9409 00007513 BE00000000              	mov rsi, 0
  9410 00007518 BA01000000              	mov rdx, 1
  9411                                  .L_lambda_simple_env_loop_00e0:	; ext_env[i + 1] <-- env[i]
  9412 0000751D 4883FE03                	cmp rsi, 3
  9413 00007521 7410                    	je .L_lambda_simple_env_end_00e0
  9414 00007523 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9415 00007527 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9416 0000752B 48FFC6                  	inc rsi
  9417 0000752E 48FFC2                  	inc rdx
  9418 00007531 EBEA                    	jmp .L_lambda_simple_env_loop_00e0
  9419                                  .L_lambda_simple_env_end_00e0:
  9420 00007533 5B                      	pop rbx
  9421 00007534 BE00000000              	mov rsi, 0
  9422                                  .L_lambda_simple_params_loop_00e0:	; copy params
  9423 00007539 4883FE02                	cmp rsi, 2
  9424 0000753D 740E                    	je .L_lambda_simple_params_end_00e0
  9425 0000753F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9426 00007544 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9427 00007548 48FFC6                  	inc rsi
  9428 0000754B EBEC                    	jmp .L_lambda_simple_params_loop_00e0
  9429                                  .L_lambda_simple_params_end_00e0:
  9430 0000754D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9431 00007550 4889C3                  	mov rbx, rax
  9432 00007553 58                      	pop rax
  9433 00007554 C60005                  	mov byte [rax], T_closure
  9434 00007557 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9435 0000755B 48C74009[65750000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e0
  9436 00007563 EB76                    	jmp .L_lambda_simple_end_00e0
  9437                                  .L_lambda_simple_code_00e0:	; lambda-simple body
  9438 00007565 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9439 0000756B 740B                    	je .L_lambda_simple_arity_check_ok_00e0
  9440 0000756D FF742410                	push qword [rsp + 8 * 2]
  9441 00007571 6A01                    	push 1
  9442 00007573 E91E840000              	jmp L_error_incorrect_arity_simple
  9443                                  .L_lambda_simple_arity_check_ok_00e0:
  9444 00007578 C8000000                	enter 0, 0
  9445 0000757C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9446 00007580 50                      	push rax
  9447 00007581 488B4510                	mov rax, qword [rbp + 8 * 2]
  9448 00007585 488B00                  	mov rax, qword [rax + 8 * 0]
  9449 00007588 488B00                  	mov rax, qword [rax + 8 * 0]
  9450 0000758B 50                      	push rax
  9451 0000758C 6A02                    	push 2
  9452 0000758E 488B4510                	mov rax, qword [rbp + 8 * 2]
  9453 00007592 488B4008                	mov rax, qword [rax + 8 * 1]
  9454 00007596 488B00                  	mov rax, qword [rax + 8 * 0]
  9455                                  	assert_closure(rax)
    42 00007599 803805              <1>  cmp byte [%1], %2
    43 0000759C 0F852F9C0000        <1>  jne L_error_incorrect_type
  9456 000075A2 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9457 000075A5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9458 000075A8 FF7500                  	push qword [rbp] ; same the old rbp
  9459 000075AB BA05000000              	mov rdx, 2 + 3
  9460 000075B0 488B4D00                	mov rcx, [rbp]
  9461 000075B4 4889EF                  	mov rdi, rbp
  9462                                  .L_tc_recycle_frame_loop_010e:
  9463 000075B7 4883FA00                	cmp rdx, 0
  9464 000075BB 7413                    	je .L_tc_recycle_frame_done_010e
  9465 000075BD 4883E908                	sub rcx, 8
  9466 000075C1 4883EF08                	sub rdi, 8
  9467 000075C5 488B37                  	mov rsi, [rdi]
  9468 000075C8 488931                  	mov qword [rcx], rsi
  9469 000075CB 48FFCA                  	dec rdx
  9470 000075CE EBE7                    	jmp .L_tc_recycle_frame_loop_010e
  9471                                  .L_tc_recycle_frame_done_010e:
  9472 000075D0 5D                      	pop rbp ; restore the old rbp
  9473 000075D1 4889CC                  	mov rsp, rcx
  9474 000075D4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9475 000075D7 C9                      	leave
  9476 000075D8 C21800                  	ret 8 * (2 + 1)
  9477                                  .L_lambda_simple_end_00e0:	; new closure is in rax
  9478                                  	assert_closure(rax)
    42 000075DB 803805              <1>  cmp byte [%1], %2
    43 000075DE 0F85ED9B0000        <1>  jne L_error_incorrect_type
  9479 000075E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9480 000075E7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9481 000075EA FF7500                  	push qword [rbp] ; same the old rbp
  9482 000075ED BA04000000              	mov rdx, 1 + 3
  9483 000075F2 488B4D00                	mov rcx, [rbp]
  9484 000075F6 4889EF                  	mov rdi, rbp
  9485                                  .L_tc_recycle_frame_loop_010d:
  9486 000075F9 4883FA00                	cmp rdx, 0
  9487 000075FD 7413                    	je .L_tc_recycle_frame_done_010d
  9488 000075FF 4883E908                	sub rcx, 8
  9489 00007603 4883EF08                	sub rdi, 8
  9490 00007607 488B37                  	mov rsi, [rdi]
  9491 0000760A 488931                  	mov qword [rcx], rsi
  9492 0000760D 48FFCA                  	dec rdx
  9493 00007610 EBE7                    	jmp .L_tc_recycle_frame_loop_010d
  9494                                  .L_tc_recycle_frame_done_010d:
  9495 00007612 5D                      	pop rbp ; restore the old rbp
  9496 00007613 4889CC                  	mov rsp, rcx
  9497 00007616 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9498                                  .L_if_end_0082:
  9499 00007619 C9                      	leave
  9500 0000761A C22000                  	ret 8 * (2 + 2)
  9501                                  .L_lambda_opt_end_0024:	; new closure is in rax
  9502 0000761D C9                      	leave
  9503 0000761E C21800                  	ret 8 * (2 + 1)
  9504                                  .L_lambda_simple_end_00df:	; new closure is in rax
  9505                                  	assert_closure(rax)
    42 00007621 803805              <1>  cmp byte [%1], %2
    43 00007624 0F85A79B0000        <1>  jne L_error_incorrect_type
  9506 0000762A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9507 0000762D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9508 00007630 FF7500                  	push qword [rbp] ; same the old rbp
  9509 00007633 BA04000000              	mov rdx, 1 + 3
  9510 00007638 488B4D00                	mov rcx, [rbp]
  9511 0000763C 4889EF                  	mov rdi, rbp
  9512                                  .L_tc_recycle_frame_loop_010b:
  9513 0000763F 4883FA00                	cmp rdx, 0
  9514 00007643 7413                    	je .L_tc_recycle_frame_done_010b
  9515 00007645 4883E908                	sub rcx, 8
  9516 00007649 4883EF08                	sub rdi, 8
  9517 0000764D 488B37                  	mov rsi, [rdi]
  9518 00007650 488931                  	mov qword [rcx], rsi
  9519 00007653 48FFCA                  	dec rdx
  9520 00007656 EBE7                    	jmp .L_tc_recycle_frame_loop_010b
  9521                                  .L_tc_recycle_frame_done_010b:
  9522 00007658 5D                      	pop rbp ; restore the old rbp
  9523 00007659 4889CC                  	mov rsp, rcx
  9524 0000765C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9525 0000765F C9                      	leave
  9526 00007660 C21800                  	ret 8 * (2 + 1)
  9527                                  .L_lambda_simple_end_00de:	; new closure is in rax
  9528                                  	assert_closure(rax)
    42 00007663 803805              <1>  cmp byte [%1], %2
    43 00007666 0F85659B0000        <1>  jne L_error_incorrect_type
  9529 0000766C FF7001                  	push SOB_CLOSURE_ENV(rax)
  9530 0000766F FF5009                  	call SOB_CLOSURE_CODE(rax)
  9531 00007672 48890425[20030000]      	mov qword [free_var_100], rax
  9532 0000767A 48B8-                   	mov rax, sob_void
  9532 0000767C [0000000000000000] 
  9533                                  
  9534 00007684 4889C7                  	mov rdi, rax
  9535 00007687 E862830000              	call print_sexpr_if_not_void
  9536                                  
  9537 0000768C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9538 00007691 E847830000              	call malloc
  9539 00007696 50                      	push rax
  9540 00007697 BF00000000              	mov rdi, 8 * 0	; new rib
  9541 0000769C E83C830000              	call malloc
  9542 000076A1 50                      	push rax
  9543 000076A2 BF08000000              	mov rdi, 8 * 1	; extended env
  9544 000076A7 E831830000              	call malloc
  9545 000076AC 488B7D10                	mov rdi, ENV
  9546 000076B0 BE00000000              	mov rsi, 0
  9547 000076B5 BA01000000              	mov rdx, 1
  9548                                  .L_lambda_simple_env_loop_00e3:	; ext_env[i + 1] <-- env[i]
  9549 000076BA 4883FE00                	cmp rsi, 0
  9550 000076BE 7410                    	je .L_lambda_simple_env_end_00e3
  9551 000076C0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9552 000076C4 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9553 000076C8 48FFC6                  	inc rsi
  9554 000076CB 48FFC2                  	inc rdx
  9555 000076CE EBEA                    	jmp .L_lambda_simple_env_loop_00e3
  9556                                  .L_lambda_simple_env_end_00e3:
  9557 000076D0 5B                      	pop rbx
  9558 000076D1 BE00000000              	mov rsi, 0
  9559                                  .L_lambda_simple_params_loop_00e3:	; copy params
  9560 000076D6 4883FE00                	cmp rsi, 0
  9561 000076DA 740E                    	je .L_lambda_simple_params_end_00e3
  9562 000076DC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9563 000076E1 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9564 000076E5 48FFC6                  	inc rsi
  9565 000076E8 EBEC                    	jmp .L_lambda_simple_params_loop_00e3
  9566                                  .L_lambda_simple_params_end_00e3:
  9567 000076EA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9568 000076ED 4889C3                  	mov rbx, rax
  9569 000076F0 58                      	pop rax
  9570 000076F1 C60005                  	mov byte [rax], T_closure
  9571 000076F4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9572 000076F8 48C74009[05770000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e3
  9573 00007700 E9E1000000              	jmp .L_lambda_simple_end_00e3
  9574                                  .L_lambda_simple_code_00e3:	; lambda-simple body
  9575 00007705 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9576 0000770B 740B                    	je .L_lambda_simple_arity_check_ok_00e3
  9577 0000770D FF742410                	push qword [rsp + 8 * 2]
  9578 00007711 6A01                    	push 1
  9579 00007713 E97E820000              	jmp L_error_incorrect_arity_simple
  9580                                  .L_lambda_simple_arity_check_ok_00e3:
  9581 00007718 C8000000                	enter 0, 0
  9582 0000771C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9583 00007720 50                      	push rax
  9584 00007721 6A01                    	push 1
  9585 00007723 488B0425[D8000000]      	mov rax, qword [free_var_27]
  9586                                  	assert_closure(rax)
    42 0000772B 803805              <1>  cmp byte [%1], %2
    43 0000772E 0F859D9A0000        <1>  jne L_error_incorrect_type
  9587 00007734 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9588 00007737 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9589 0000773A 483D[02000000]          	cmp rax, sob_boolean_false
  9590 00007740 740F                              	je .L_if_else_0089
  9591 00007742 48B8-                             	mov rax, L_constants + 128
  9591 00007744 [8000000000000000] 
  9592 0000774C E991000000              	jmp .L_if_end_0089
  9593                                            .L_if_else_0089:
  9594 00007751 48B8-                             	mov rax, L_constants + 128
  9594 00007753 [8000000000000000] 
  9595 0000775B 50                      	push rax
  9596 0000775C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9597 00007760 50                      	push rax
  9598 00007761 6A02                    	push 2
  9599 00007763 488B0425[10030000]      	mov rax, qword [free_var_98]
  9600                                  	assert_closure(rax)
    42 0000776B 803805              <1>  cmp byte [%1], %2
    43 0000776E 0F855D9A0000        <1>  jne L_error_incorrect_type
  9601 00007774 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9602 00007777 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9603 0000777A 50                      	push rax
  9604 0000777B 6A01                    	push 1
  9605 0000777D 488B0425[28030000]      	mov rax, qword [free_var_101]
  9606                                  	assert_closure(rax)
    42 00007785 803805              <1>  cmp byte [%1], %2
    43 00007788 0F85439A0000        <1>  jne L_error_incorrect_type
  9607 0000778E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9608 00007791 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9609 00007794 50                      	push rax
  9610 00007795 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9611 00007799 50                      	push rax
  9612 0000779A 6A02                    	push 2
  9613 0000779C 488B0425[18030000]      	mov rax, qword [free_var_99]
  9614                                  	assert_closure(rax)
    42 000077A4 803805              <1>  cmp byte [%1], %2
    43 000077A7 0F85249A0000        <1>  jne L_error_incorrect_type
  9615 000077AD FF7001                  	push SOB_CLOSURE_ENV(rax)
  9616 000077B0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9617 000077B3 FF7500                  	push qword [rbp] ; same the old rbp
  9618 000077B6 BA05000000              	mov rdx, 2 + 3
  9619 000077BB 488B4D00                	mov rcx, [rbp]
  9620 000077BF 4889EF                  	mov rdi, rbp
  9621                                  .L_tc_recycle_frame_loop_0117:
  9622 000077C2 4883FA00                	cmp rdx, 0
  9623 000077C6 7413                    	je .L_tc_recycle_frame_done_0117
  9624 000077C8 4883E908                	sub rcx, 8
  9625 000077CC 4883EF08                	sub rdi, 8
  9626 000077D0 488B37                  	mov rsi, [rdi]
  9627 000077D3 488931                  	mov qword [rcx], rsi
  9628 000077D6 48FFCA                  	dec rdx
  9629 000077D9 EBE7                    	jmp .L_tc_recycle_frame_loop_0117
  9630                                  .L_tc_recycle_frame_done_0117:
  9631 000077DB 5D                      	pop rbp ; restore the old rbp
  9632 000077DC 4889CC                  	mov rsp, rcx
  9633 000077DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9634                                  .L_if_end_0089:
  9635 000077E2 C9                      	leave
  9636 000077E3 C21800                  	ret 8 * (2 + 1)
  9637                                  .L_lambda_simple_end_00e3:	; new closure is in rax
  9638 000077E6 48890425[28030000]      	mov qword [free_var_101], rax
  9639 000077EE 48B8-                   	mov rax, sob_void
  9639 000077F0 [0000000000000000] 
  9640                                  
  9641 000077F8 4889C7                  	mov rdi, rax
  9642 000077FB E8EE810000              	call print_sexpr_if_not_void
  9643                                  
  9644 00007800 48B8-                   	mov rax, L_constants + 0
  9644 00007802 [0000000000000000] 
  9645 0000780A 48890425[30030000]      	mov qword [free_var_102], rax
  9646 00007812 48B8-                   	mov rax, sob_void
  9646 00007814 [0000000000000000] 
  9647                                  
  9648 0000781C 4889C7                  	mov rdi, rax
  9649 0000781F E8CA810000              	call print_sexpr_if_not_void
  9650                                  
  9651 00007824 48B8-                   	mov rax, L_constants + 0
  9651 00007826 [0000000000000000] 
  9652 0000782E 48890425[38030000]      	mov qword [free_var_103], rax
  9653 00007836 48B8-                   	mov rax, sob_void
  9653 00007838 [0000000000000000] 
  9654                                  
  9655 00007840 4889C7                  	mov rdi, rax
  9656 00007843 E8A6810000              	call print_sexpr_if_not_void
  9657                                  
  9658 00007848 48B8-                   	mov rax, L_constants + 0
  9658 0000784A [0000000000000000] 
  9659 00007852 48890425[40030000]      	mov qword [free_var_104], rax
  9660 0000785A 48B8-                   	mov rax, sob_void
  9660 0000785C [0000000000000000] 
  9661                                  
  9662 00007864 4889C7                  	mov rdi, rax
  9663 00007867 E882810000              	call print_sexpr_if_not_void
  9664                                  
  9665 0000786C 48B8-                   	mov rax, L_constants + 0
  9665 0000786E [0000000000000000] 
  9666 00007876 48890425[48030000]      	mov qword [free_var_105], rax
  9667 0000787E 48B8-                   	mov rax, sob_void
  9667 00007880 [0000000000000000] 
  9668                                  
  9669 00007888 4889C7                  	mov rdi, rax
  9670 0000788B E85E810000              	call print_sexpr_if_not_void
  9671                                  
  9672 00007890 48B8-                   	mov rax, L_constants + 0
  9672 00007892 [0000000000000000] 
  9673 0000789A 48890425[50030000]      	mov qword [free_var_106], rax
  9674 000078A2 48B8-                   	mov rax, sob_void
  9674 000078A4 [0000000000000000] 
  9675                                  
  9676 000078AC 4889C7                  	mov rdi, rax
  9677 000078AF E83A810000              	call print_sexpr_if_not_void
  9678                                  
  9679 000078B4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9680 000078B9 E81F810000              	call malloc
  9681 000078BE 50                      	push rax
  9682 000078BF BF00000000              	mov rdi, 8 * 0	; new rib
  9683 000078C4 E814810000              	call malloc
  9684 000078C9 50                      	push rax
  9685 000078CA BF08000000              	mov rdi, 8 * 1	; extended env
  9686 000078CF E809810000              	call malloc
  9687 000078D4 488B7D10                	mov rdi, ENV
  9688 000078D8 BE00000000              	mov rsi, 0
  9689 000078DD BA01000000              	mov rdx, 1
  9690                                  .L_lambda_simple_env_loop_00f4:	; ext_env[i + 1] <-- env[i]
  9691 000078E2 4883FE00                	cmp rsi, 0
  9692 000078E6 7410                    	je .L_lambda_simple_env_end_00f4
  9693 000078E8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9694 000078EC 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9695 000078F0 48FFC6                  	inc rsi
  9696 000078F3 48FFC2                  	inc rdx
  9697 000078F6 EBEA                    	jmp .L_lambda_simple_env_loop_00f4
  9698                                  .L_lambda_simple_env_end_00f4:
  9699 000078F8 5B                      	pop rbx
  9700 000078F9 BE00000000              	mov rsi, 0
  9701                                  .L_lambda_simple_params_loop_00f4:	; copy params
  9702 000078FE 4883FE00                	cmp rsi, 0
  9703 00007902 740E                    	je .L_lambda_simple_params_end_00f4
  9704 00007904 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9705 00007909 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9706 0000790D 48FFC6                  	inc rsi
  9707 00007910 EBEC                    	jmp .L_lambda_simple_params_loop_00f4
  9708                                  .L_lambda_simple_params_end_00f4:
  9709 00007912 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9710 00007915 4889C3                  	mov rbx, rax
  9711 00007918 58                      	pop rax
  9712 00007919 C60005                  	mov byte [rax], T_closure
  9713 0000791C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9714 00007920 48C74009[2A790000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f4
  9715 00007928 EB79                    	jmp .L_lambda_simple_end_00f4
  9716                                  .L_lambda_simple_code_00f4:	; lambda-simple body
  9717 0000792A 48837C241000            	cmp qword [rsp + 8 * 2], 0
  9718 00007930 740B                    	je .L_lambda_simple_arity_check_ok_00f4
  9719 00007932 FF742410                	push qword [rsp + 8 * 2]
  9720 00007936 6A00                    	push 0
  9721 00007938 E959800000              	jmp L_error_incorrect_arity_simple
  9722                                  .L_lambda_simple_arity_check_ok_00f4:
  9723 0000793D C8000000                	enter 0, 0
  9724 00007941 48B8-                   	mov rax, L_constants + 219
  9724 00007943 [DB00000000000000] 
  9725 0000794B 50                      	push rax
  9726 0000794C 48B8-                   	mov rax, L_constants + 210
  9726 0000794E [D200000000000000] 
  9727 00007956 50                      	push rax
  9728 00007957 6A02                    	push 2
  9729 00007959 488B0425[30010000]      	mov rax, qword [free_var_38]
  9730                                  	assert_closure(rax)
    42 00007961 803805              <1>  cmp byte [%1], %2
    43 00007964 0F8567980000        <1>  jne L_error_incorrect_type
  9731 0000796A FF7001                  	push SOB_CLOSURE_ENV(rax)
  9732 0000796D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9733 00007970 FF7500                  	push qword [rbp] ; same the old rbp
  9734 00007973 BA05000000              	mov rdx, 2 + 3
  9735 00007978 488B4D00                	mov rcx, [rbp]
  9736 0000797C 4889EF                  	mov rdi, rbp
  9737                                  .L_tc_recycle_frame_loop_012b:
  9738 0000797F 4883FA00                	cmp rdx, 0
  9739 00007983 7413                    	je .L_tc_recycle_frame_done_012b
  9740 00007985 4883E908                	sub rcx, 8
  9741 00007989 4883EF08                	sub rdi, 8
  9742 0000798D 488B37                  	mov rsi, [rdi]
  9743 00007990 488931                  	mov qword [rcx], rsi
  9744 00007993 48FFCA                  	dec rdx
  9745 00007996 EBE7                    	jmp .L_tc_recycle_frame_loop_012b
  9746                                  .L_tc_recycle_frame_done_012b:
  9747 00007998 5D                      	pop rbp ; restore the old rbp
  9748 00007999 4889CC                  	mov rsp, rcx
  9749 0000799C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9750 0000799F C9                      	leave
  9751 000079A0 C21000                  	ret 8 * (2 + 0)
  9752                                  .L_lambda_simple_end_00f4:	; new closure is in rax
  9753 000079A3 50                      	push rax
  9754 000079A4 6A01                    	push 1
  9755 000079A6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9756 000079AB E82D800000              	call malloc
  9757 000079B0 50                      	push rax
  9758 000079B1 BF00000000              	mov rdi, 8 * 0	; new rib
  9759 000079B6 E822800000              	call malloc
  9760 000079BB 50                      	push rax
  9761 000079BC BF08000000              	mov rdi, 8 * 1	; extended env
  9762 000079C1 E817800000              	call malloc
  9763 000079C6 488B7D10                	mov rdi, ENV
  9764 000079CA BE00000000              	mov rsi, 0
  9765 000079CF BA01000000              	mov rdx, 1
  9766                                  .L_lambda_simple_env_loop_00e4:	; ext_env[i + 1] <-- env[i]
  9767 000079D4 4883FE00                	cmp rsi, 0
  9768 000079D8 7410                    	je .L_lambda_simple_env_end_00e4
  9769 000079DA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9770 000079DE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9771 000079E2 48FFC6                  	inc rsi
  9772 000079E5 48FFC2                  	inc rdx
  9773 000079E8 EBEA                    	jmp .L_lambda_simple_env_loop_00e4
  9774                                  .L_lambda_simple_env_end_00e4:
  9775 000079EA 5B                      	pop rbx
  9776 000079EB BE00000000              	mov rsi, 0
  9777                                  .L_lambda_simple_params_loop_00e4:	; copy params
  9778 000079F0 4883FE00                	cmp rsi, 0
  9779 000079F4 740E                    	je .L_lambda_simple_params_end_00e4
  9780 000079F6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9781 000079FB 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9782 000079FF 48FFC6                  	inc rsi
  9783 00007A02 EBEC                    	jmp .L_lambda_simple_params_loop_00e4
  9784                                  .L_lambda_simple_params_end_00e4:
  9785 00007A04 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9786 00007A07 4889C3                  	mov rbx, rax
  9787 00007A0A 58                      	pop rax
  9788 00007A0B C60005                  	mov byte [rax], T_closure
  9789 00007A0E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9790 00007A12 48C74009[1F7A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e4
  9791 00007A1A E96C130000              	jmp .L_lambda_simple_end_00e4
  9792                                  .L_lambda_simple_code_00e4:	; lambda-simple body
  9793 00007A1F 48837C241001            	cmp qword [rsp + 8 * 2], 1
  9794 00007A25 740B                    	je .L_lambda_simple_arity_check_ok_00e4
  9795 00007A27 FF742410                	push qword [rsp + 8 * 2]
  9796 00007A2B 6A01                    	push 1
  9797 00007A2D E9647F0000              	jmp L_error_incorrect_arity_simple
  9798                                  .L_lambda_simple_arity_check_ok_00e4:
  9799 00007A32 C8000000                	enter 0, 0
  9800 00007A36 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9801 00007A3B E89D7F0000              	call malloc
  9802 00007A40 50                      	push rax
  9803 00007A41 BF08000000              	mov rdi, 8 * 1	; new rib
  9804 00007A46 E8927F0000              	call malloc
  9805 00007A4B 50                      	push rax
  9806 00007A4C BF10000000              	mov rdi, 8 * 2	; extended env
  9807 00007A51 E8877F0000              	call malloc
  9808 00007A56 488B7D10                	mov rdi, ENV
  9809 00007A5A BE00000000              	mov rsi, 0
  9810 00007A5F BA01000000              	mov rdx, 1
  9811                                  .L_lambda_simple_env_loop_00f2:	; ext_env[i + 1] <-- env[i]
  9812 00007A64 4883FE01                	cmp rsi, 1
  9813 00007A68 7410                    	je .L_lambda_simple_env_end_00f2
  9814 00007A6A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9815 00007A6E 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9816 00007A72 48FFC6                  	inc rsi
  9817 00007A75 48FFC2                  	inc rdx
  9818 00007A78 EBEA                    	jmp .L_lambda_simple_env_loop_00f2
  9819                                  .L_lambda_simple_env_end_00f2:
  9820 00007A7A 5B                      	pop rbx
  9821 00007A7B BE00000000              	mov rsi, 0
  9822                                  .L_lambda_simple_params_loop_00f2:	; copy params
  9823 00007A80 4883FE01                	cmp rsi, 1
  9824 00007A84 740E                    	je .L_lambda_simple_params_end_00f2
  9825 00007A86 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9826 00007A8B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9827 00007A8F 48FFC6                  	inc rsi
  9828 00007A92 EBEC                    	jmp .L_lambda_simple_params_loop_00f2
  9829                                  .L_lambda_simple_params_end_00f2:
  9830 00007A94 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9831 00007A97 4889C3                  	mov rbx, rax
  9832 00007A9A 58                      	pop rax
  9833 00007A9B C60005                  	mov byte [rax], T_closure
  9834 00007A9E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9835 00007AA2 48C74009[AF7A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f2
  9836 00007AAA E9D7030000              	jmp .L_lambda_simple_end_00f2
  9837                                  .L_lambda_simple_code_00f2:	; lambda-simple body
  9838 00007AAF 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9839 00007AB5 740B                    	je .L_lambda_simple_arity_check_ok_00f2
  9840 00007AB7 FF742410                	push qword [rsp + 8 * 2]
  9841 00007ABB 6A02                    	push 2
  9842 00007ABD E9D47E0000              	jmp L_error_incorrect_arity_simple
  9843                                  .L_lambda_simple_arity_check_ok_00f2:
  9844 00007AC2 C8000000                	enter 0, 0
  9845 00007AC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
  9846 00007ACB E80D7F0000              	call malloc
  9847 00007AD0 50                      	push rax
  9848 00007AD1 BF10000000              	mov rdi, 8 * 2	; new rib
  9849 00007AD6 E8027F0000              	call malloc
  9850 00007ADB 50                      	push rax
  9851 00007ADC BF18000000              	mov rdi, 8 * 3	; extended env
  9852 00007AE1 E8F77E0000              	call malloc
  9853 00007AE6 488B7D10                	mov rdi, ENV
  9854 00007AEA BE00000000              	mov rsi, 0
  9855 00007AEF BA01000000              	mov rdx, 1
  9856                                  .L_lambda_simple_env_loop_00f3:	; ext_env[i + 1] <-- env[i]
  9857 00007AF4 4883FE02                	cmp rsi, 2
  9858 00007AF8 7410                    	je .L_lambda_simple_env_end_00f3
  9859 00007AFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
  9860 00007AFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
  9861 00007B02 48FFC6                  	inc rsi
  9862 00007B05 48FFC2                  	inc rdx
  9863 00007B08 EBEA                    	jmp .L_lambda_simple_env_loop_00f3
  9864                                  .L_lambda_simple_env_end_00f3:
  9865 00007B0A 5B                      	pop rbx
  9866 00007B0B BE00000000              	mov rsi, 0
  9867                                  .L_lambda_simple_params_loop_00f3:	; copy params
  9868 00007B10 4883FE02                	cmp rsi, 2
  9869 00007B14 740E                    	je .L_lambda_simple_params_end_00f3
  9870 00007B16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
  9871 00007B1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
  9872 00007B1F 48FFC6                  	inc rsi
  9873 00007B22 EBEC                    	jmp .L_lambda_simple_params_loop_00f3
  9874                                  .L_lambda_simple_params_end_00f3:
  9875 00007B24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
  9876 00007B27 4889C3                  	mov rbx, rax
  9877 00007B2A 58                      	pop rax
  9878 00007B2B C60005                  	mov byte [rax], T_closure
  9879 00007B2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
  9880 00007B32 48C74009[3F7B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f3
  9881 00007B3A E943030000              	jmp .L_lambda_simple_end_00f3
  9882                                  .L_lambda_simple_code_00f3:	; lambda-simple body
  9883 00007B3F 48837C241002            	cmp qword [rsp + 8 * 2], 2
  9884 00007B45 740B                    	je .L_lambda_simple_arity_check_ok_00f3
  9885 00007B47 FF742410                	push qword [rsp + 8 * 2]
  9886 00007B4B 6A02                    	push 2
  9887 00007B4D E9447E0000              	jmp L_error_incorrect_arity_simple
  9888                                  .L_lambda_simple_arity_check_ok_00f3:
  9889 00007B52 C8000000                	enter 0, 0
  9890 00007B56 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9891 00007B5A 50                      	push rax
  9892 00007B5B 6A01                    	push 1
  9893 00007B5D 488B0425[48000000]      	mov rax, qword [free_var_9]
  9894                                  	assert_closure(rax)
    42 00007B65 803805              <1>  cmp byte [%1], %2
    43 00007B68 0F8563960000        <1>  jne L_error_incorrect_type
  9895 00007B6E FF7001                  	push SOB_CLOSURE_ENV(rax)
  9896 00007B71 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9897 00007B74 483D[02000000]          	cmp rax, sob_boolean_false
  9898 00007B7A 0F8466010000                      	je .L_if_else_0090
  9899 00007B80 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9900 00007B84 50                      	push rax
  9901 00007B85 6A01                    	push 1
  9902 00007B87 488B0425[48000000]      	mov rax, qword [free_var_9]
  9903                                  	assert_closure(rax)
    42 00007B8F 803805              <1>  cmp byte [%1], %2
    43 00007B92 0F8539960000        <1>  jne L_error_incorrect_type
  9904 00007B98 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9905 00007B9B FF5009                  	call SOB_CLOSURE_CODE(rax)
  9906 00007B9E 483D[02000000]          	cmp rax, sob_boolean_false
  9907 00007BA4 7459                              	je .L_if_else_008c
  9908 00007BA6 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9909 00007BAA 50                      	push rax
  9910 00007BAB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9911 00007BAF 50                      	push rax
  9912 00007BB0 6A02                    	push 2
  9913 00007BB2 488B4510                	mov rax, qword [rbp + 8 * 2]
  9914 00007BB6 488B00                  	mov rax, qword [rax + 8 * 0]
  9915 00007BB9 488B00                  	mov rax, qword [rax + 8 * 0]
  9916                                  	assert_closure(rax)
    42 00007BBC 803805              <1>  cmp byte [%1], %2
    43 00007BBF 0F850C960000        <1>  jne L_error_incorrect_type
  9917 00007BC5 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9918 00007BC8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9919 00007BCB FF7500                  	push qword [rbp] ; same the old rbp
  9920 00007BCE BA05000000              	mov rdx, 2 + 3
  9921 00007BD3 488B4D00                	mov rcx, [rbp]
  9922 00007BD7 4889EF                  	mov rdi, rbp
  9923                                  .L_tc_recycle_frame_loop_0125:
  9924 00007BDA 4883FA00                	cmp rdx, 0
  9925 00007BDE 7413                    	je .L_tc_recycle_frame_done_0125
  9926 00007BE0 4883E908                	sub rcx, 8
  9927 00007BE4 4883EF08                	sub rdi, 8
  9928 00007BE8 488B37                  	mov rsi, [rdi]
  9929 00007BEB 488931                  	mov qword [rcx], rsi
  9930 00007BEE 48FFCA                  	dec rdx
  9931 00007BF1 EBE7                    	jmp .L_tc_recycle_frame_loop_0125
  9932                                  .L_tc_recycle_frame_done_0125:
  9933 00007BF3 5D                      	pop rbp ; restore the old rbp
  9934 00007BF4 4889CC                  	mov rsp, rcx
  9935 00007BF7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9936 00007BFA E9E2000000              	jmp .L_if_end_008c
  9937                                            .L_if_else_008c:
  9938 00007BFF 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9939 00007C03 50                      	push rax
  9940 00007C04 6A01                    	push 1
  9941 00007C06 488B0425[40000000]      	mov rax, qword [free_var_8]
  9942                                  	assert_closure(rax)
    42 00007C0E 803805              <1>  cmp byte [%1], %2
    43 00007C11 0F85BA950000        <1>  jne L_error_incorrect_type
  9943 00007C17 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9944 00007C1A FF5009                  	call SOB_CLOSURE_CODE(rax)
  9945 00007C1D 483D[02000000]          	cmp rax, sob_boolean_false
  9946 00007C23 7471                              	je .L_if_else_008b
  9947 00007C25 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
  9948 00007C29 50                      	push rax
  9949 00007C2A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
  9950 00007C2E 50                      	push rax
  9951 00007C2F 6A01                    	push 1
  9952 00007C31 488B0425[B8000000]      	mov rax, qword [free_var_23]
  9953                                  	assert_closure(rax)
    42 00007C39 803805              <1>  cmp byte [%1], %2
    43 00007C3C 0F858F950000        <1>  jne L_error_incorrect_type
  9954 00007C42 FF7001                  	push SOB_CLOSURE_ENV(rax)
  9955 00007C45 FF5009                  	call SOB_CLOSURE_CODE(rax)
  9956 00007C48 50                      	push rax
  9957 00007C49 6A02                    	push 2
  9958 00007C4B 488B4510                	mov rax, qword [rbp + 8 * 2]
  9959 00007C4F 488B00                  	mov rax, qword [rax + 8 * 0]
  9960 00007C52 488B4008                	mov rax, qword [rax + 8 * 1]
  9961                                  	assert_closure(rax)
    42 00007C56 803805              <1>  cmp byte [%1], %2
    43 00007C59 0F8572950000        <1>  jne L_error_incorrect_type
  9962 00007C5F FF7001                  	push SOB_CLOSURE_ENV(rax)
  9963 00007C62 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9964 00007C65 FF7500                  	push qword [rbp] ; same the old rbp
  9965 00007C68 BA05000000              	mov rdx, 2 + 3
  9966 00007C6D 488B4D00                	mov rcx, [rbp]
  9967 00007C71 4889EF                  	mov rdi, rbp
  9968                                  .L_tc_recycle_frame_loop_0126:
  9969 00007C74 4883FA00                	cmp rdx, 0
  9970 00007C78 7413                    	je .L_tc_recycle_frame_done_0126
  9971 00007C7A 4883E908                	sub rcx, 8
  9972 00007C7E 4883EF08                	sub rdi, 8
  9973 00007C82 488B37                  	mov rsi, [rdi]
  9974 00007C85 488931                  	mov qword [rcx], rsi
  9975 00007C88 48FFCA                  	dec rdx
  9976 00007C8B EBE7                    	jmp .L_tc_recycle_frame_loop_0126
  9977                                  .L_tc_recycle_frame_done_0126:
  9978 00007C8D 5D                      	pop rbp ; restore the old rbp
  9979 00007C8E 4889CC                  	mov rsp, rcx
  9980 00007C91 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
  9981 00007C94 EB4B                    	jmp .L_if_end_008b
  9982                                            .L_if_else_008b:
  9983 00007C96 6A00                              	push 0
  9984 00007C98 488B4510                	mov rax, qword [rbp + 8 * 2]
  9985 00007C9C 488B4008                	mov rax, qword [rax + 8 * 1]
  9986 00007CA0 488B00                  	mov rax, qword [rax + 8 * 0]
  9987                                  	assert_closure(rax)
    42 00007CA3 803805              <1>  cmp byte [%1], %2
    43 00007CA6 0F8525950000        <1>  jne L_error_incorrect_type
  9988 00007CAC FF7001                  	push SOB_CLOSURE_ENV(rax)
  9989 00007CAF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
  9990 00007CB2 FF7500                  	push qword [rbp] ; same the old rbp
  9991 00007CB5 BA03000000              	mov rdx, 0 + 3
  9992 00007CBA 488B4D00                	mov rcx, [rbp]
  9993 00007CBE 4889EF                  	mov rdi, rbp
  9994                                  .L_tc_recycle_frame_loop_0127:
  9995 00007CC1 4883FA00                	cmp rdx, 0
  9996 00007CC5 7413                    	je .L_tc_recycle_frame_done_0127
  9997 00007CC7 4883E908                	sub rcx, 8
  9998 00007CCB 4883EF08                	sub rdi, 8
  9999 00007CCF 488B37                  	mov rsi, [rdi]
 10000 00007CD2 488931                  	mov qword [rcx], rsi
 10001 00007CD5 48FFCA                  	dec rdx
 10002 00007CD8 EBE7                    	jmp .L_tc_recycle_frame_loop_0127
 10003                                  .L_tc_recycle_frame_done_0127:
 10004 00007CDA 5D                      	pop rbp ; restore the old rbp
 10005 00007CDB 4889CC                  	mov rsp, rcx
 10006 00007CDE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10007                                  .L_if_end_008b:
 10008                                  .L_if_end_008c:
 10009 00007CE1 E998010000              	jmp .L_if_end_0090
 10010                                            .L_if_else_0090:
 10011 00007CE6 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 10012 00007CEA 50                      	push rax
 10013 00007CEB 6A01                    	push 1
 10014 00007CED 488B0425[40000000]      	mov rax, qword [free_var_8]
 10015                                  	assert_closure(rax)
    42 00007CF5 803805              <1>  cmp byte [%1], %2
    43 00007CF8 0F85D3940000        <1>  jne L_error_incorrect_type
 10016 00007CFE FF7001                  	push SOB_CLOSURE_ENV(rax)
 10017 00007D01 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10018 00007D04 483D[02000000]          	cmp rax, sob_boolean_false
 10019 00007D0A 0F8464010000                      	je .L_if_else_008f
 10020 00007D10 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10021 00007D14 50                      	push rax
 10022 00007D15 6A01                    	push 1
 10023 00007D17 488B0425[48000000]      	mov rax, qword [free_var_9]
 10024                                  	assert_closure(rax)
    42 00007D1F 803805              <1>  cmp byte [%1], %2
    43 00007D22 0F85A9940000        <1>  jne L_error_incorrect_type
 10025 00007D28 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10026 00007D2B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10027 00007D2E 483D[02000000]          	cmp rax, sob_boolean_false
 10028 00007D34 7474                              	je .L_if_else_008e
 10029 00007D36 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10030 00007D3A 50                      	push rax
 10031 00007D3B 6A01                    	push 1
 10032 00007D3D 488B0425[B8000000]      	mov rax, qword [free_var_23]
 10033                                  	assert_closure(rax)
    42 00007D45 803805              <1>  cmp byte [%1], %2
    43 00007D48 0F8583940000        <1>  jne L_error_incorrect_type
 10034 00007D4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10035 00007D51 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10036 00007D54 50                      	push rax
 10037 00007D55 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10038 00007D59 50                      	push rax
 10039 00007D5A 6A02                    	push 2
 10040 00007D5C 488B4510                	mov rax, qword [rbp + 8 * 2]
 10041 00007D60 488B00                  	mov rax, qword [rax + 8 * 0]
 10042 00007D63 488B4008                	mov rax, qword [rax + 8 * 1]
 10043                                  	assert_closure(rax)
    42 00007D67 803805              <1>  cmp byte [%1], %2
    43 00007D6A 0F8561940000        <1>  jne L_error_incorrect_type
 10044 00007D70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10045 00007D73 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10046 00007D76 FF7500                  	push qword [rbp] ; same the old rbp
 10047 00007D79 BA05000000              	mov rdx, 2 + 3
 10048 00007D7E 488B4D00                	mov rcx, [rbp]
 10049 00007D82 4889EF                  	mov rdi, rbp
 10050                                  .L_tc_recycle_frame_loop_0128:
 10051 00007D85 4883FA00                	cmp rdx, 0
 10052 00007D89 7413                    	je .L_tc_recycle_frame_done_0128
 10053 00007D8B 4883E908                	sub rcx, 8
 10054 00007D8F 4883EF08                	sub rdi, 8
 10055 00007D93 488B37                  	mov rsi, [rdi]
 10056 00007D96 488931                  	mov qword [rcx], rsi
 10057 00007D99 48FFCA                  	dec rdx
 10058 00007D9C EBE7                    	jmp .L_tc_recycle_frame_loop_0128
 10059                                  .L_tc_recycle_frame_done_0128:
 10060 00007D9E 5D                      	pop rbp ; restore the old rbp
 10061 00007D9F 4889CC                  	mov rsp, rcx
 10062 00007DA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10063 00007DA5 E9C8000000              	jmp .L_if_end_008e
 10064                                            .L_if_else_008e:
 10065 00007DAA 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10066 00007DAE 50                      	push rax
 10067 00007DAF 6A01                    	push 1
 10068 00007DB1 488B0425[40000000]      	mov rax, qword [free_var_8]
 10069                                  	assert_closure(rax)
    42 00007DB9 803805              <1>  cmp byte [%1], %2
    43 00007DBC 0F850F940000        <1>  jne L_error_incorrect_type
 10070 00007DC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10071 00007DC5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10072 00007DC8 483D[02000000]          	cmp rax, sob_boolean_false
 10073 00007DCE 7457                              	je .L_if_else_008d
 10074 00007DD0 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10075 00007DD4 50                      	push rax
 10076 00007DD5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10077 00007DD9 50                      	push rax
 10078 00007DDA 6A02                    	push 2
 10079 00007DDC 488B4510                	mov rax, qword [rbp + 8 * 2]
 10080 00007DE0 488B00                  	mov rax, qword [rax + 8 * 0]
 10081 00007DE3 488B4008                	mov rax, qword [rax + 8 * 1]
 10082                                  	assert_closure(rax)
    42 00007DE7 803805              <1>  cmp byte [%1], %2
    43 00007DEA 0F85E1930000        <1>  jne L_error_incorrect_type
 10083 00007DF0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10084 00007DF3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10085 00007DF6 FF7500                  	push qword [rbp] ; same the old rbp
 10086 00007DF9 BA05000000              	mov rdx, 2 + 3
 10087 00007DFE 488B4D00                	mov rcx, [rbp]
 10088 00007E02 4889EF                  	mov rdi, rbp
 10089                                  .L_tc_recycle_frame_loop_0129:
 10090 00007E05 4883FA00                	cmp rdx, 0
 10091 00007E09 7413                    	je .L_tc_recycle_frame_done_0129
 10092 00007E0B 4883E908                	sub rcx, 8
 10093 00007E0F 4883EF08                	sub rdi, 8
 10094 00007E13 488B37                  	mov rsi, [rdi]
 10095 00007E16 488931                  	mov qword [rcx], rsi
 10096 00007E19 48FFCA                  	dec rdx
 10097 00007E1C EBE7                    	jmp .L_tc_recycle_frame_loop_0129
 10098                                  .L_tc_recycle_frame_done_0129:
 10099 00007E1E 5D                      	pop rbp ; restore the old rbp
 10100 00007E1F 4889CC                  	mov rsp, rcx
 10101 00007E22 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10102 00007E25 EB4B                    	jmp .L_if_end_008d
 10103                                            .L_if_else_008d:
 10104 00007E27 6A00                              	push 0
 10105 00007E29 488B4510                	mov rax, qword [rbp + 8 * 2]
 10106 00007E2D 488B4008                	mov rax, qword [rax + 8 * 1]
 10107 00007E31 488B00                  	mov rax, qword [rax + 8 * 0]
 10108                                  	assert_closure(rax)
    42 00007E34 803805              <1>  cmp byte [%1], %2
    43 00007E37 0F8594930000        <1>  jne L_error_incorrect_type
 10109 00007E3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10110 00007E40 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10111 00007E43 FF7500                  	push qword [rbp] ; same the old rbp
 10112 00007E46 BA03000000              	mov rdx, 0 + 3
 10113 00007E4B 488B4D00                	mov rcx, [rbp]
 10114 00007E4F 4889EF                  	mov rdi, rbp
 10115                                  .L_tc_recycle_frame_loop_012a:
 10116 00007E52 4883FA00                	cmp rdx, 0
 10117 00007E56 7413                    	je .L_tc_recycle_frame_done_012a
 10118 00007E58 4883E908                	sub rcx, 8
 10119 00007E5C 4883EF08                	sub rdi, 8
 10120 00007E60 488B37                  	mov rsi, [rdi]
 10121 00007E63 488931                  	mov qword [rcx], rsi
 10122 00007E66 48FFCA                  	dec rdx
 10123 00007E69 EBE7                    	jmp .L_tc_recycle_frame_loop_012a
 10124                                  .L_tc_recycle_frame_done_012a:
 10125 00007E6B 5D                      	pop rbp ; restore the old rbp
 10126 00007E6C 4889CC                  	mov rsp, rcx
 10127 00007E6F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10128                                  .L_if_end_008d:
 10129                                  .L_if_end_008e:
 10130 00007E72 EB0A                    	jmp .L_if_end_008f
 10131                                            .L_if_else_008f:
 10132 00007E74 48B8-                             	mov rax, L_constants + 0
 10132 00007E76 [0000000000000000] 
 10133                                  .L_if_end_008f:
 10134                                  .L_if_end_0090:
 10135 00007E7E C9                      	leave
 10136 00007E7F C22000                  	ret 8 * (2 + 2)
 10137                                  .L_lambda_simple_end_00f3:	; new closure is in rax
 10138 00007E82 C9                      	leave
 10139 00007E83 C22000                  	ret 8 * (2 + 2)
 10140                                  .L_lambda_simple_end_00f2:	; new closure is in rax
 10141 00007E86 50                      	push rax
 10142 00007E87 6A01                    	push 1
 10143 00007E89 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10144 00007E8E E84A7B0000              	call malloc
 10145 00007E93 50                      	push rax
 10146 00007E94 BF08000000              	mov rdi, 8 * 1	; new rib
 10147 00007E99 E83F7B0000              	call malloc
 10148 00007E9E 50                      	push rax
 10149 00007E9F BF10000000              	mov rdi, 8 * 2	; extended env
 10150 00007EA4 E8347B0000              	call malloc
 10151 00007EA9 488B7D10                	mov rdi, ENV
 10152 00007EAD BE00000000              	mov rsi, 0
 10153 00007EB2 BA01000000              	mov rdx, 1
 10154                                  .L_lambda_simple_env_loop_00e5:	; ext_env[i + 1] <-- env[i]
 10155 00007EB7 4883FE01                	cmp rsi, 1
 10156 00007EBB 7410                    	je .L_lambda_simple_env_end_00e5
 10157 00007EBD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10158 00007EC1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10159 00007EC5 48FFC6                  	inc rsi
 10160 00007EC8 48FFC2                  	inc rdx
 10161 00007ECB EBEA                    	jmp .L_lambda_simple_env_loop_00e5
 10162                                  .L_lambda_simple_env_end_00e5:
 10163 00007ECD 5B                      	pop rbx
 10164 00007ECE BE00000000              	mov rsi, 0
 10165                                  .L_lambda_simple_params_loop_00e5:	; copy params
 10166 00007ED3 4883FE01                	cmp rsi, 1
 10167 00007ED7 740E                    	je .L_lambda_simple_params_end_00e5
 10168 00007ED9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10169 00007EDE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10170 00007EE2 48FFC6                  	inc rsi
 10171 00007EE5 EBEC                    	jmp .L_lambda_simple_params_loop_00e5
 10172                                  .L_lambda_simple_params_end_00e5:
 10173 00007EE7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10174 00007EEA 4889C3                  	mov rbx, rax
 10175 00007EED 58                      	pop rax
 10176 00007EEE C60005                  	mov byte [rax], T_closure
 10177 00007EF1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10178 00007EF5 48C74009[027F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e5
 10179 00007EFD E9470E0000              	jmp .L_lambda_simple_end_00e5
 10180                                  .L_lambda_simple_code_00e5:	; lambda-simple body
 10181 00007F02 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10182 00007F08 740B                    	je .L_lambda_simple_arity_check_ok_00e5
 10183 00007F0A FF742410                	push qword [rsp + 8 * 2]
 10184 00007F0E 6A01                    	push 1
 10185 00007F10 E9817A0000              	jmp L_error_incorrect_arity_simple
 10186                                  .L_lambda_simple_arity_check_ok_00e5:
 10187 00007F15 C8000000                	enter 0, 0
 10188 00007F19 488B0425[38010000]      	mov rax, qword [free_var_39]
 10189 00007F21 50                      	push rax
 10190 00007F22 488B0425[40010000]      	mov rax, qword [free_var_40]
 10191 00007F2A 50                      	push rax
 10192 00007F2B 6A02                    	push 2
 10193 00007F2D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10194                                  	assert_closure(rax)
    42 00007F31 803805              <1>  cmp byte [%1], %2
    43 00007F34 0F8597920000        <1>  jne L_error_incorrect_type
 10195 00007F3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10196 00007F3D FF5009                  	call SOB_CLOSURE_CODE(rax)
 10197 00007F40 50                      	push rax
 10198 00007F41 6A01                    	push 1
 10199 00007F43 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10200 00007F48 E8907A0000              	call malloc
 10201 00007F4D 50                      	push rax
 10202 00007F4E BF08000000              	mov rdi, 8 * 1	; new rib
 10203 00007F53 E8857A0000              	call malloc
 10204 00007F58 50                      	push rax
 10205 00007F59 BF18000000              	mov rdi, 8 * 3	; extended env
 10206 00007F5E E87A7A0000              	call malloc
 10207 00007F63 488B7D10                	mov rdi, ENV
 10208 00007F67 BE00000000              	mov rsi, 0
 10209 00007F6C BA01000000              	mov rdx, 1
 10210                                  .L_lambda_simple_env_loop_00e6:	; ext_env[i + 1] <-- env[i]
 10211 00007F71 4883FE02                	cmp rsi, 2
 10212 00007F75 7410                    	je .L_lambda_simple_env_end_00e6
 10213 00007F77 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10214 00007F7B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10215 00007F7F 48FFC6                  	inc rsi
 10216 00007F82 48FFC2                  	inc rdx
 10217 00007F85 EBEA                    	jmp .L_lambda_simple_env_loop_00e6
 10218                                  .L_lambda_simple_env_end_00e6:
 10219 00007F87 5B                      	pop rbx
 10220 00007F88 BE00000000              	mov rsi, 0
 10221                                  .L_lambda_simple_params_loop_00e6:	; copy params
 10222 00007F8D 4883FE01                	cmp rsi, 1
 10223 00007F91 740E                    	je .L_lambda_simple_params_end_00e6
 10224 00007F93 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10225 00007F98 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10226 00007F9C 48FFC6                  	inc rsi
 10227 00007F9F EBEC                    	jmp .L_lambda_simple_params_loop_00e6
 10228                                  .L_lambda_simple_params_end_00e6:
 10229 00007FA1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10230 00007FA4 4889C3                  	mov rbx, rax
 10231 00007FA7 58                      	pop rax
 10232 00007FA8 C60005                  	mov byte [rax], T_closure
 10233 00007FAB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10234 00007FAF 48C74009[BC7F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e6
 10235 00007FB7 E94B0D0000              	jmp .L_lambda_simple_end_00e6
 10236                                  .L_lambda_simple_code_00e6:	; lambda-simple body
 10237 00007FBC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10238 00007FC2 740B                    	je .L_lambda_simple_arity_check_ok_00e6
 10239 00007FC4 FF742410                	push qword [rsp + 8 * 2]
 10240 00007FC8 6A01                    	push 1
 10241 00007FCA E9C7790000              	jmp L_error_incorrect_arity_simple
 10242                                  .L_lambda_simple_arity_check_ok_00e6:
 10243 00007FCF C8000000                	enter 0, 0
 10244 00007FD3 488B0425[48010000]      	mov rax, qword [free_var_41]
 10245 00007FDB 50                      	push rax
 10246 00007FDC 488B0425[50010000]      	mov rax, qword [free_var_42]
 10247 00007FE4 50                      	push rax
 10248 00007FE5 6A02                    	push 2
 10249 00007FE7 488B4510                	mov rax, qword [rbp + 8 * 2]
 10250 00007FEB 488B00                  	mov rax, qword [rax + 8 * 0]
 10251 00007FEE 488B00                  	mov rax, qword [rax + 8 * 0]
 10252                                  	assert_closure(rax)
    42 00007FF1 803805              <1>  cmp byte [%1], %2
    43 00007FF4 0F85D7910000        <1>  jne L_error_incorrect_type
 10253 00007FFA FF7001                  	push SOB_CLOSURE_ENV(rax)
 10254 00007FFD FF5009                  	call SOB_CLOSURE_CODE(rax)
 10255 00008000 50                      	push rax
 10256 00008001 6A01                    	push 1
 10257 00008003 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10258 00008008 E8D0790000              	call malloc
 10259 0000800D 50                      	push rax
 10260 0000800E BF08000000              	mov rdi, 8 * 1	; new rib
 10261 00008013 E8C5790000              	call malloc
 10262 00008018 50                      	push rax
 10263 00008019 BF20000000              	mov rdi, 8 * 4	; extended env
 10264 0000801E E8BA790000              	call malloc
 10265 00008023 488B7D10                	mov rdi, ENV
 10266 00008027 BE00000000              	mov rsi, 0
 10267 0000802C BA01000000              	mov rdx, 1
 10268                                  .L_lambda_simple_env_loop_00e7:	; ext_env[i + 1] <-- env[i]
 10269 00008031 4883FE03                	cmp rsi, 3
 10270 00008035 7410                    	je .L_lambda_simple_env_end_00e7
 10271 00008037 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10272 0000803B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10273 0000803F 48FFC6                  	inc rsi
 10274 00008042 48FFC2                  	inc rdx
 10275 00008045 EBEA                    	jmp .L_lambda_simple_env_loop_00e7
 10276                                  .L_lambda_simple_env_end_00e7:
 10277 00008047 5B                      	pop rbx
 10278 00008048 BE00000000              	mov rsi, 0
 10279                                  .L_lambda_simple_params_loop_00e7:	; copy params
 10280 0000804D 4883FE01                	cmp rsi, 1
 10281 00008051 740E                    	je .L_lambda_simple_params_end_00e7
 10282 00008053 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10283 00008058 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10284 0000805C 48FFC6                  	inc rsi
 10285 0000805F EBEC                    	jmp .L_lambda_simple_params_loop_00e7
 10286                                  .L_lambda_simple_params_end_00e7:
 10287 00008061 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10288 00008064 4889C3                  	mov rbx, rax
 10289 00008067 58                      	pop rax
 10290 00008068 C60005                  	mov byte [rax], T_closure
 10291 0000806B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10292 0000806F 48C74009[7C800000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e7
 10293 00008077 E9490C0000              	jmp .L_lambda_simple_end_00e7
 10294                                  .L_lambda_simple_code_00e7:	; lambda-simple body
 10295 0000807C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10296 00008082 740B                    	je .L_lambda_simple_arity_check_ok_00e7
 10297 00008084 FF742410                	push qword [rsp + 8 * 2]
 10298 00008088 6A01                    	push 1
 10299 0000808A E907790000              	jmp L_error_incorrect_arity_simple
 10300                                  .L_lambda_simple_arity_check_ok_00e7:
 10301 0000808F C8000000                	enter 0, 0
 10302 00008093 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10303 00008098 E840790000              	call malloc
 10304 0000809D 50                      	push rax
 10305 0000809E BF08000000              	mov rdi, 8 * 1	; new rib
 10306 000080A3 E835790000              	call malloc
 10307 000080A8 50                      	push rax
 10308 000080A9 BF28000000              	mov rdi, 8 * 5	; extended env
 10309 000080AE E82A790000              	call malloc
 10310 000080B3 488B7D10                	mov rdi, ENV
 10311 000080B7 BE00000000              	mov rsi, 0
 10312 000080BC BA01000000              	mov rdx, 1
 10313                                  .L_lambda_simple_env_loop_00f1:	; ext_env[i + 1] <-- env[i]
 10314 000080C1 4883FE04                	cmp rsi, 4
 10315 000080C5 7410                    	je .L_lambda_simple_env_end_00f1
 10316 000080C7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10317 000080CB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10318 000080CF 48FFC6                  	inc rsi
 10319 000080D2 48FFC2                  	inc rdx
 10320 000080D5 EBEA                    	jmp .L_lambda_simple_env_loop_00f1
 10321                                  .L_lambda_simple_env_end_00f1:
 10322 000080D7 5B                      	pop rbx
 10323 000080D8 BE00000000              	mov rsi, 0
 10324                                  .L_lambda_simple_params_loop_00f1:	; copy params
 10325 000080DD 4883FE01                	cmp rsi, 1
 10326 000080E1 740E                    	je .L_lambda_simple_params_end_00f1
 10327 000080E3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10328 000080E8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10329 000080EC 48FFC6                  	inc rsi
 10330 000080EF EBEC                    	jmp .L_lambda_simple_params_loop_00f1
 10331                                  .L_lambda_simple_params_end_00f1:
 10332 000080F1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10333 000080F4 4889C3                  	mov rbx, rax
 10334 000080F7 58                      	pop rax
 10335 000080F8 C60005                  	mov byte [rax], T_closure
 10336 000080FB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10337 000080FF 48C74009[0C810000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f1
 10338 00008107 E98A000000              	jmp .L_lambda_simple_end_00f1
 10339                                  .L_lambda_simple_code_00f1:	; lambda-simple body
 10340 0000810C 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10341 00008112 740B                    	je .L_lambda_simple_arity_check_ok_00f1
 10342 00008114 FF742410                	push qword [rsp + 8 * 2]
 10343 00008118 6A02                    	push 2
 10344 0000811A E977780000              	jmp L_error_incorrect_arity_simple
 10345                                  .L_lambda_simple_arity_check_ok_00f1:
 10346 0000811F C8000000                	enter 0, 0
 10347 00008123 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10348 00008127 50                      	push rax
 10349 00008128 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10350 0000812C 50                      	push rax
 10351 0000812D 6A02                    	push 2
 10352 0000812F 488B4510                	mov rax, qword [rbp + 8 * 2]
 10353 00008133 488B4008                	mov rax, qword [rax + 8 * 1]
 10354 00008137 488B00                  	mov rax, qword [rax + 8 * 0]
 10355                                  	assert_closure(rax)
    42 0000813A 803805              <1>  cmp byte [%1], %2
    43 0000813D 0F858E900000        <1>  jne L_error_incorrect_type
 10356 00008143 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10357 00008146 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10358 00008149 50                      	push rax
 10359 0000814A 6A01                    	push 1
 10360 0000814C 488B0425[B0020000]      	mov rax, qword [free_var_86]
 10361                                  	assert_closure(rax)
    42 00008154 803805              <1>  cmp byte [%1], %2
    43 00008157 0F8574900000        <1>  jne L_error_incorrect_type
 10362 0000815D FF7001                  	push SOB_CLOSURE_ENV(rax)
 10363 00008160 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10364 00008163 FF7500                  	push qword [rbp] ; same the old rbp
 10365 00008166 BA04000000              	mov rdx, 1 + 3
 10366 0000816B 488B4D00                	mov rcx, [rbp]
 10367 0000816F 4889EF                  	mov rdi, rbp
 10368                                  .L_tc_recycle_frame_loop_0124:
 10369 00008172 4883FA00                	cmp rdx, 0
 10370 00008176 7413                    	je .L_tc_recycle_frame_done_0124
 10371 00008178 4883E908                	sub rcx, 8
 10372 0000817C 4883EF08                	sub rdi, 8
 10373 00008180 488B37                  	mov rsi, [rdi]
 10374 00008183 488931                  	mov qword [rcx], rsi
 10375 00008186 48FFCA                  	dec rdx
 10376 00008189 EBE7                    	jmp .L_tc_recycle_frame_loop_0124
 10377                                  .L_tc_recycle_frame_done_0124:
 10378 0000818B 5D                      	pop rbp ; restore the old rbp
 10379 0000818C 4889CC                  	mov rsp, rcx
 10380 0000818F FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10381 00008192 C9                      	leave
 10382 00008193 C22000                  	ret 8 * (2 + 2)
 10383                                  .L_lambda_simple_end_00f1:	; new closure is in rax
 10384 00008196 50                      	push rax
 10385 00008197 6A01                    	push 1
 10386 00008199 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10387 0000819E E83A780000              	call malloc
 10388 000081A3 50                      	push rax
 10389 000081A4 BF08000000              	mov rdi, 8 * 1	; new rib
 10390 000081A9 E82F780000              	call malloc
 10391 000081AE 50                      	push rax
 10392 000081AF BF28000000              	mov rdi, 8 * 5	; extended env
 10393 000081B4 E824780000              	call malloc
 10394 000081B9 488B7D10                	mov rdi, ENV
 10395 000081BD BE00000000              	mov rsi, 0
 10396 000081C2 BA01000000              	mov rdx, 1
 10397                                  .L_lambda_simple_env_loop_00e8:	; ext_env[i + 1] <-- env[i]
 10398 000081C7 4883FE04                	cmp rsi, 4
 10399 000081CB 7410                    	je .L_lambda_simple_env_end_00e8
 10400 000081CD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10401 000081D1 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10402 000081D5 48FFC6                  	inc rsi
 10403 000081D8 48FFC2                  	inc rdx
 10404 000081DB EBEA                    	jmp .L_lambda_simple_env_loop_00e8
 10405                                  .L_lambda_simple_env_end_00e8:
 10406 000081DD 5B                      	pop rbx
 10407 000081DE BE00000000              	mov rsi, 0
 10408                                  .L_lambda_simple_params_loop_00e8:	; copy params
 10409 000081E3 4883FE01                	cmp rsi, 1
 10410 000081E7 740E                    	je .L_lambda_simple_params_end_00e8
 10411 000081E9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10412 000081EE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10413 000081F2 48FFC6                  	inc rsi
 10414 000081F5 EBEC                    	jmp .L_lambda_simple_params_loop_00e8
 10415                                  .L_lambda_simple_params_end_00e8:
 10416 000081F7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10417 000081FA 4889C3                  	mov rbx, rax
 10418 000081FD 58                      	pop rax
 10419 000081FE C60005                  	mov byte [rax], T_closure
 10420 00008201 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10421 00008205 48C74009[12820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e8
 10422 0000820D E9710A0000              	jmp .L_lambda_simple_end_00e8
 10423                                  .L_lambda_simple_code_00e8:	; lambda-simple body
 10424 00008212 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10425 00008218 740B                    	je .L_lambda_simple_arity_check_ok_00e8
 10426 0000821A FF742410                	push qword [rsp + 8 * 2]
 10427 0000821E 6A01                    	push 1
 10428 00008220 E971770000              	jmp L_error_incorrect_arity_simple
 10429                                  .L_lambda_simple_arity_check_ok_00e8:
 10430 00008225 C8000000                	enter 0, 0
 10431 00008229 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10432 0000822E E8AA770000              	call malloc
 10433 00008233 50                      	push rax
 10434 00008234 BF08000000              	mov rdi, 8 * 1	; new rib
 10435 00008239 E89F770000              	call malloc
 10436 0000823E 50                      	push rax
 10437 0000823F BF30000000              	mov rdi, 8 * 6	; extended env
 10438 00008244 E894770000              	call malloc
 10439 00008249 488B7D10                	mov rdi, ENV
 10440 0000824D BE00000000              	mov rsi, 0
 10441 00008252 BA01000000              	mov rdx, 1
 10442                                  .L_lambda_simple_env_loop_00f0:	; ext_env[i + 1] <-- env[i]
 10443 00008257 4883FE05                	cmp rsi, 5
 10444 0000825B 7410                    	je .L_lambda_simple_env_end_00f0
 10445 0000825D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10446 00008261 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10447 00008265 48FFC6                  	inc rsi
 10448 00008268 48FFC2                  	inc rdx
 10449 0000826B EBEA                    	jmp .L_lambda_simple_env_loop_00f0
 10450                                  .L_lambda_simple_env_end_00f0:
 10451 0000826D 5B                      	pop rbx
 10452 0000826E BE00000000              	mov rsi, 0
 10453                                  .L_lambda_simple_params_loop_00f0:	; copy params
 10454 00008273 4883FE01                	cmp rsi, 1
 10455 00008277 740E                    	je .L_lambda_simple_params_end_00f0
 10456 00008279 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10457 0000827E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10458 00008282 48FFC6                  	inc rsi
 10459 00008285 EBEC                    	jmp .L_lambda_simple_params_loop_00f0
 10460                                  .L_lambda_simple_params_end_00f0:
 10461 00008287 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10462 0000828A 4889C3                  	mov rbx, rax
 10463 0000828D 58                      	pop rax
 10464 0000828E C60005                  	mov byte [rax], T_closure
 10465 00008291 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10466 00008295 48C74009[9F820000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f0
 10467 0000829D EB70                    	jmp .L_lambda_simple_end_00f0
 10468                                  .L_lambda_simple_code_00f0:	; lambda-simple body
 10469 0000829F 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10470 000082A5 740B                    	je .L_lambda_simple_arity_check_ok_00f0
 10471 000082A7 FF742410                	push qword [rsp + 8 * 2]
 10472 000082AB 6A02                    	push 2
 10473 000082AD E9E4760000              	jmp L_error_incorrect_arity_simple
 10474                                  .L_lambda_simple_arity_check_ok_00f0:
 10475 000082B2 C8000000                	enter 0, 0
 10476 000082B6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10477 000082BA 50                      	push rax
 10478 000082BB 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10479 000082BF 50                      	push rax
 10480 000082C0 6A02                    	push 2
 10481 000082C2 488B4510                	mov rax, qword [rbp + 8 * 2]
 10482 000082C6 488B4010                	mov rax, qword [rax + 8 * 2]
 10483 000082CA 488B00                  	mov rax, qword [rax + 8 * 0]
 10484                                  	assert_closure(rax)
    42 000082CD 803805              <1>  cmp byte [%1], %2
    43 000082D0 0F85FB8E0000        <1>  jne L_error_incorrect_type
 10485 000082D6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10486 000082D9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10487 000082DC FF7500                  	push qword [rbp] ; same the old rbp
 10488 000082DF BA05000000              	mov rdx, 2 + 3
 10489 000082E4 488B4D00                	mov rcx, [rbp]
 10490 000082E8 4889EF                  	mov rdi, rbp
 10491                                  .L_tc_recycle_frame_loop_0123:
 10492 000082EB 4883FA00                	cmp rdx, 0
 10493 000082EF 7413                    	je .L_tc_recycle_frame_done_0123
 10494 000082F1 4883E908                	sub rcx, 8
 10495 000082F5 4883EF08                	sub rdi, 8
 10496 000082F9 488B37                  	mov rsi, [rdi]
 10497 000082FC 488931                  	mov qword [rcx], rsi
 10498 000082FF 48FFCA                  	dec rdx
 10499 00008302 EBE7                    	jmp .L_tc_recycle_frame_loop_0123
 10500                                  .L_tc_recycle_frame_done_0123:
 10501 00008304 5D                      	pop rbp ; restore the old rbp
 10502 00008305 4889CC                  	mov rsp, rcx
 10503 00008308 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10504 0000830B C9                      	leave
 10505 0000830C C22000                  	ret 8 * (2 + 2)
 10506                                  .L_lambda_simple_end_00f0:	; new closure is in rax
 10507 0000830F 50                      	push rax
 10508 00008310 6A01                    	push 1
 10509 00008312 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10510 00008317 E8C1760000              	call malloc
 10511 0000831C 50                      	push rax
 10512 0000831D BF08000000              	mov rdi, 8 * 1	; new rib
 10513 00008322 E8B6760000              	call malloc
 10514 00008327 50                      	push rax
 10515 00008328 BF30000000              	mov rdi, 8 * 6	; extended env
 10516 0000832D E8AB760000              	call malloc
 10517 00008332 488B7D10                	mov rdi, ENV
 10518 00008336 BE00000000              	mov rsi, 0
 10519 0000833B BA01000000              	mov rdx, 1
 10520                                  .L_lambda_simple_env_loop_00e9:	; ext_env[i + 1] <-- env[i]
 10521 00008340 4883FE05                	cmp rsi, 5
 10522 00008344 7410                    	je .L_lambda_simple_env_end_00e9
 10523 00008346 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10524 0000834A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10525 0000834E 48FFC6                  	inc rsi
 10526 00008351 48FFC2                  	inc rdx
 10527 00008354 EBEA                    	jmp .L_lambda_simple_env_loop_00e9
 10528                                  .L_lambda_simple_env_end_00e9:
 10529 00008356 5B                      	pop rbx
 10530 00008357 BE00000000              	mov rsi, 0
 10531                                  .L_lambda_simple_params_loop_00e9:	; copy params
 10532 0000835C 4883FE01                	cmp rsi, 1
 10533 00008360 740E                    	je .L_lambda_simple_params_end_00e9
 10534 00008362 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10535 00008367 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10536 0000836B 48FFC6                  	inc rsi
 10537 0000836E EBEC                    	jmp .L_lambda_simple_params_loop_00e9
 10538                                  .L_lambda_simple_params_end_00e9:
 10539 00008370 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10540 00008373 4889C3                  	mov rbx, rax
 10541 00008376 58                      	pop rax
 10542 00008377 C60005                  	mov byte [rax], T_closure
 10543 0000837A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10544 0000837E 48C74009[8B830000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00e9
 10545 00008386 E9B6080000              	jmp .L_lambda_simple_end_00e9
 10546                                  .L_lambda_simple_code_00e9:	; lambda-simple body
 10547 0000838B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10548 00008391 740B                    	je .L_lambda_simple_arity_check_ok_00e9
 10549 00008393 FF742410                	push qword [rsp + 8 * 2]
 10550 00008397 6A01                    	push 1
 10551 00008399 E9F8750000              	jmp L_error_incorrect_arity_simple
 10552                                  .L_lambda_simple_arity_check_ok_00e9:
 10553 0000839E C8000000                	enter 0, 0
 10554 000083A2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10555 000083A7 E831760000              	call malloc
 10556 000083AC 50                      	push rax
 10557 000083AD BF08000000              	mov rdi, 8 * 1	; new rib
 10558 000083B2 E826760000              	call malloc
 10559 000083B7 50                      	push rax
 10560 000083B8 BF38000000              	mov rdi, 8 * 7	; extended env
 10561 000083BD E81B760000              	call malloc
 10562 000083C2 488B7D10                	mov rdi, ENV
 10563 000083C6 BE00000000              	mov rsi, 0
 10564 000083CB BA01000000              	mov rdx, 1
 10565                                  .L_lambda_simple_env_loop_00ef:	; ext_env[i + 1] <-- env[i]
 10566 000083D0 4883FE06                	cmp rsi, 6
 10567 000083D4 7410                    	je .L_lambda_simple_env_end_00ef
 10568 000083D6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10569 000083DA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10570 000083DE 48FFC6                  	inc rsi
 10571 000083E1 48FFC2                  	inc rdx
 10572 000083E4 EBEA                    	jmp .L_lambda_simple_env_loop_00ef
 10573                                  .L_lambda_simple_env_end_00ef:
 10574 000083E6 5B                      	pop rbx
 10575 000083E7 BE00000000              	mov rsi, 0
 10576                                  .L_lambda_simple_params_loop_00ef:	; copy params
 10577 000083EC 4883FE01                	cmp rsi, 1
 10578 000083F0 740E                    	je .L_lambda_simple_params_end_00ef
 10579 000083F2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10580 000083F7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10581 000083FB 48FFC6                  	inc rsi
 10582 000083FE EBEC                    	jmp .L_lambda_simple_params_loop_00ef
 10583                                  .L_lambda_simple_params_end_00ef:
 10584 00008400 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10585 00008403 4889C3                  	mov rbx, rax
 10586 00008406 58                      	pop rax
 10587 00008407 C60005                  	mov byte [rax], T_closure
 10588 0000840A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10589 0000840E 48C74009[1B840000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ef
 10590 00008416 E989000000              	jmp .L_lambda_simple_end_00ef
 10591                                  .L_lambda_simple_code_00ef:	; lambda-simple body
 10592 0000841B 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10593 00008421 740B                    	je .L_lambda_simple_arity_check_ok_00ef
 10594 00008423 FF742410                	push qword [rsp + 8 * 2]
 10595 00008427 6A02                    	push 2
 10596 00008429 E968750000              	jmp L_error_incorrect_arity_simple
 10597                                  .L_lambda_simple_arity_check_ok_00ef:
 10598 0000842E C8000000                	enter 0, 0
 10599 00008432 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10600 00008436 50                      	push rax
 10601 00008437 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10602 0000843B 50                      	push rax
 10603 0000843C 6A02                    	push 2
 10604 0000843E 488B4510                	mov rax, qword [rbp + 8 * 2]
 10605 00008442 488B00                  	mov rax, qword [rax + 8 * 0]
 10606 00008445 488B00                  	mov rax, qword [rax + 8 * 0]
 10607                                  	assert_closure(rax)
    42 00008448 803805              <1>  cmp byte [%1], %2
    43 0000844B 0F85808D0000        <1>  jne L_error_incorrect_type
 10608 00008451 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10609 00008454 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10610 00008457 50                      	push rax
 10611 00008458 6A01                    	push 1
 10612 0000845A 488B0425[B0020000]      	mov rax, qword [free_var_86]
 10613                                  	assert_closure(rax)
    42 00008462 803805              <1>  cmp byte [%1], %2
    43 00008465 0F85668D0000        <1>  jne L_error_incorrect_type
 10614 0000846B FF7001                  	push SOB_CLOSURE_ENV(rax)
 10615 0000846E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10616 00008471 FF7500                  	push qword [rbp] ; same the old rbp
 10617 00008474 BA04000000              	mov rdx, 1 + 3
 10618 00008479 488B4D00                	mov rcx, [rbp]
 10619 0000847D 4889EF                  	mov rdi, rbp
 10620                                  .L_tc_recycle_frame_loop_0122:
 10621 00008480 4883FA00                	cmp rdx, 0
 10622 00008484 7413                    	je .L_tc_recycle_frame_done_0122
 10623 00008486 4883E908                	sub rcx, 8
 10624 0000848A 4883EF08                	sub rdi, 8
 10625 0000848E 488B37                  	mov rsi, [rdi]
 10626 00008491 488931                  	mov qword [rcx], rsi
 10627 00008494 48FFCA                  	dec rdx
 10628 00008497 EBE7                    	jmp .L_tc_recycle_frame_loop_0122
 10629                                  .L_tc_recycle_frame_done_0122:
 10630 00008499 5D                      	pop rbp ; restore the old rbp
 10631 0000849A 4889CC                  	mov rsp, rcx
 10632 0000849D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10633 000084A0 C9                      	leave
 10634 000084A1 C22000                  	ret 8 * (2 + 2)
 10635                                  .L_lambda_simple_end_00ef:	; new closure is in rax
 10636 000084A4 50                      	push rax
 10637 000084A5 6A01                    	push 1
 10638 000084A7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10639 000084AC E82C750000              	call malloc
 10640 000084B1 50                      	push rax
 10641 000084B2 BF08000000              	mov rdi, 8 * 1	; new rib
 10642 000084B7 E821750000              	call malloc
 10643 000084BC 50                      	push rax
 10644 000084BD BF38000000              	mov rdi, 8 * 7	; extended env
 10645 000084C2 E816750000              	call malloc
 10646 000084C7 488B7D10                	mov rdi, ENV
 10647 000084CB BE00000000              	mov rsi, 0
 10648 000084D0 BA01000000              	mov rdx, 1
 10649                                  .L_lambda_simple_env_loop_00ea:	; ext_env[i + 1] <-- env[i]
 10650 000084D5 4883FE06                	cmp rsi, 6
 10651 000084D9 7410                    	je .L_lambda_simple_env_end_00ea
 10652 000084DB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10653 000084DF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10654 000084E3 48FFC6                  	inc rsi
 10655 000084E6 48FFC2                  	inc rdx
 10656 000084E9 EBEA                    	jmp .L_lambda_simple_env_loop_00ea
 10657                                  .L_lambda_simple_env_end_00ea:
 10658 000084EB 5B                      	pop rbx
 10659 000084EC BE00000000              	mov rsi, 0
 10660                                  .L_lambda_simple_params_loop_00ea:	; copy params
 10661 000084F1 4883FE01                	cmp rsi, 1
 10662 000084F5 740E                    	je .L_lambda_simple_params_end_00ea
 10663 000084F7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10664 000084FC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10665 00008500 48FFC6                  	inc rsi
 10666 00008503 EBEC                    	jmp .L_lambda_simple_params_loop_00ea
 10667                                  .L_lambda_simple_params_end_00ea:
 10668 00008505 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10669 00008508 4889C3                  	mov rbx, rax
 10670 0000850B 58                      	pop rax
 10671 0000850C C60005                  	mov byte [rax], T_closure
 10672 0000850F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10673 00008513 48C74009[20850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ea
 10674 0000851B E9DF060000              	jmp .L_lambda_simple_end_00ea
 10675                                  .L_lambda_simple_code_00ea:	; lambda-simple body
 10676 00008520 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10677 00008526 740B                    	je .L_lambda_simple_arity_check_ok_00ea
 10678 00008528 FF742410                	push qword [rsp + 8 * 2]
 10679 0000852C 6A01                    	push 1
 10680 0000852E E963740000              	jmp L_error_incorrect_arity_simple
 10681                                  .L_lambda_simple_arity_check_ok_00ea:
 10682 00008533 C8000000                	enter 0, 0
 10683 00008537 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10684 0000853C E89C740000              	call malloc
 10685 00008541 50                      	push rax
 10686 00008542 BF08000000              	mov rdi, 8 * 1	; new rib
 10687 00008547 E891740000              	call malloc
 10688 0000854C 50                      	push rax
 10689 0000854D BF40000000              	mov rdi, 8 * 8	; extended env
 10690 00008552 E886740000              	call malloc
 10691 00008557 488B7D10                	mov rdi, ENV
 10692 0000855B BE00000000              	mov rsi, 0
 10693 00008560 BA01000000              	mov rdx, 1
 10694                                  .L_lambda_simple_env_loop_00ec:	; ext_env[i + 1] <-- env[i]
 10695 00008565 4883FE07                	cmp rsi, 7
 10696 00008569 7410                    	je .L_lambda_simple_env_end_00ec
 10697 0000856B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10698 0000856F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10699 00008573 48FFC6                  	inc rsi
 10700 00008576 48FFC2                  	inc rdx
 10701 00008579 EBEA                    	jmp .L_lambda_simple_env_loop_00ec
 10702                                  .L_lambda_simple_env_end_00ec:
 10703 0000857B 5B                      	pop rbx
 10704 0000857C BE00000000              	mov rsi, 0
 10705                                  .L_lambda_simple_params_loop_00ec:	; copy params
 10706 00008581 4883FE01                	cmp rsi, 1
 10707 00008585 740E                    	je .L_lambda_simple_params_end_00ec
 10708 00008587 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10709 0000858C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10710 00008590 48FFC6                  	inc rsi
 10711 00008593 EBEC                    	jmp .L_lambda_simple_params_loop_00ec
 10712                                  .L_lambda_simple_params_end_00ec:
 10713 00008595 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10714 00008598 4889C3                  	mov rbx, rax
 10715 0000859B 58                      	pop rax
 10716 0000859C C60005                  	mov byte [rax], T_closure
 10717 0000859F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10718 000085A3 48C74009[B0850000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ec
 10719 000085AB E978040000              	jmp .L_lambda_simple_end_00ec
 10720                                  .L_lambda_simple_code_00ec:	; lambda-simple body
 10721 000085B0 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10722 000085B6 740B                    	je .L_lambda_simple_arity_check_ok_00ec
 10723 000085B8 FF742410                	push qword [rsp + 8 * 2]
 10724 000085BC 6A01                    	push 1
 10725 000085BE E9D3730000              	jmp L_error_incorrect_arity_simple
 10726                                  .L_lambda_simple_arity_check_ok_00ec:
 10727 000085C3 C8000000                	enter 0, 0
 10728 000085C7 48B8-                   	mov rax, L_constants + 23
 10728 000085C9 [1700000000000000] 
 10729 000085D1 50                      	push rax
 10730 000085D2 6A01                    	push 1
 10731 000085D4 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10732 000085D9 E8FF730000              	call malloc
 10733 000085DE 50                      	push rax
 10734 000085DF BF08000000              	mov rdi, 8 * 1	; new rib
 10735 000085E4 E8F4730000              	call malloc
 10736 000085E9 50                      	push rax
 10737 000085EA BF48000000              	mov rdi, 8 * 9	; extended env
 10738 000085EF E8E9730000              	call malloc
 10739 000085F4 488B7D10                	mov rdi, ENV
 10740 000085F8 BE00000000              	mov rsi, 0
 10741 000085FD BA01000000              	mov rdx, 1
 10742                                  .L_lambda_simple_env_loop_00ed:	; ext_env[i + 1] <-- env[i]
 10743 00008602 4883FE08                	cmp rsi, 8
 10744 00008606 7410                    	je .L_lambda_simple_env_end_00ed
 10745 00008608 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10746 0000860C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10747 00008610 48FFC6                  	inc rsi
 10748 00008613 48FFC2                  	inc rdx
 10749 00008616 EBEA                    	jmp .L_lambda_simple_env_loop_00ed
 10750                                  .L_lambda_simple_env_end_00ed:
 10751 00008618 5B                      	pop rbx
 10752 00008619 BE00000000              	mov rsi, 0
 10753                                  .L_lambda_simple_params_loop_00ed:	; copy params
 10754 0000861E 4883FE01                	cmp rsi, 1
 10755 00008622 740E                    	je .L_lambda_simple_params_end_00ed
 10756 00008624 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10757 00008629 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10758 0000862D 48FFC6                  	inc rsi
 10759 00008630 EBEC                    	jmp .L_lambda_simple_params_loop_00ed
 10760                                  .L_lambda_simple_params_end_00ed:
 10761 00008632 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10762 00008635 4889C3                  	mov rbx, rax
 10763 00008638 58                      	pop rax
 10764 00008639 C60005                  	mov byte [rax], T_closure
 10765 0000863C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10766 00008640 48C74009[4D860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ed
 10767 00008648 E999030000              	jmp .L_lambda_simple_end_00ed
 10768                                  .L_lambda_simple_code_00ed:	; lambda-simple body
 10769 0000864D 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10770 00008653 740B                    	je .L_lambda_simple_arity_check_ok_00ed
 10771 00008655 FF742410                	push qword [rsp + 8 * 2]
 10772 00008659 6A01                    	push 1
 10773 0000865B E936730000              	jmp L_error_incorrect_arity_simple
 10774                                  .L_lambda_simple_arity_check_ok_00ed:
 10775 00008660 C8000000                	enter 0, 0
 10776 00008664 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10777 00008668 4889C2                  	mov rdx, rax
 10778 0000866B BF08000000              	mov rdi, 8
 10779 00008670 E868730000              	call malloc
 10780 00008675 488910                  	mov qword[rax], rdx
 10781 00008678 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 10782 0000867C 48B8-                   	mov rax, sob_void
 10782 0000867E [0000000000000000] 
 10783                                  
 10784 00008686 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10785 0000868B E84D730000              	call malloc
 10786 00008690 50                      	push rax
 10787 00008691 BF08000000              	mov rdi, 8 * 1	; new rib
 10788 00008696 E842730000              	call malloc
 10789 0000869B 50                      	push rax
 10790 0000869C BF50000000              	mov rdi, 8 * 10	; extended env
 10791 000086A1 E837730000              	call malloc
 10792 000086A6 488B7D10                	mov rdi, ENV
 10793 000086AA BE00000000              	mov rsi, 0
 10794 000086AF BA01000000              	mov rdx, 1
 10795                                  .L_lambda_simple_env_loop_00ee:	; ext_env[i + 1] <-- env[i]
 10796 000086B4 4883FE09                	cmp rsi, 9
 10797 000086B8 7410                    	je .L_lambda_simple_env_end_00ee
 10798 000086BA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10799 000086BE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10800 000086C2 48FFC6                  	inc rsi
 10801 000086C5 48FFC2                  	inc rdx
 10802 000086C8 EBEA                    	jmp .L_lambda_simple_env_loop_00ee
 10803                                  .L_lambda_simple_env_end_00ee:
 10804 000086CA 5B                      	pop rbx
 10805 000086CB BE00000000              	mov rsi, 0
 10806                                  .L_lambda_simple_params_loop_00ee:	; copy params
 10807 000086D0 4883FE01                	cmp rsi, 1
 10808 000086D4 740E                    	je .L_lambda_simple_params_end_00ee
 10809 000086D6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10810 000086DB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10811 000086DF 48FFC6                  	inc rsi
 10812 000086E2 EBEC                    	jmp .L_lambda_simple_params_loop_00ee
 10813                                  .L_lambda_simple_params_end_00ee:
 10814 000086E4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10815 000086E7 4889C3                  	mov rbx, rax
 10816 000086EA 58                      	pop rax
 10817 000086EB C60005                  	mov byte [rax], T_closure
 10818 000086EE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10819 000086F2 48C74009[FF860000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ee
 10820 000086FA E928010000              	jmp .L_lambda_simple_end_00ee
 10821                                  .L_lambda_simple_code_00ee:	; lambda-simple body
 10822 000086FF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 10823 00008705 740B                    	je .L_lambda_simple_arity_check_ok_00ee
 10824 00008707 FF742410                	push qword [rsp + 8 * 2]
 10825 0000870B 6A02                    	push 2
 10826 0000870D E984720000              	jmp L_error_incorrect_arity_simple
 10827                                  .L_lambda_simple_arity_check_ok_00ee:
 10828 00008712 C8000000                	enter 0, 0
 10829 00008716 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10830 0000871A 50                      	push rax
 10831 0000871B 6A01                    	push 1
 10832 0000871D 488B0425[00000000]      	mov rax, qword [free_var_0]
 10833                                  	assert_closure(rax)
    42 00008725 803805              <1>  cmp byte [%1], %2
    43 00008728 0F85A38A0000        <1>  jne L_error_incorrect_type
 10834 0000872E FF7001                  	push SOB_CLOSURE_ENV(rax)
 10835 00008731 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10836 00008734 483D[02000000]          	cmp rax, sob_boolean_false
 10837 0000873A 0F85E3000000            	jne .L_or_end_0010
 10838 00008740 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10839 00008744 50                      	push rax
 10840 00008745 6A01                    	push 1
 10841 00008747 488B0425[80000000]      	mov rax, qword [free_var_16]
 10842                                  	assert_closure(rax)
    42 0000874F 803805              <1>  cmp byte [%1], %2
    43 00008752 0F85798A0000        <1>  jne L_error_incorrect_type
 10843 00008758 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10844 0000875B FF5009                  	call SOB_CLOSURE_CODE(rax)
 10845 0000875E 50                      	push rax
 10846 0000875F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10847 00008763 50                      	push rax
 10848 00008764 6A02                    	push 2
 10849 00008766 488B4510                	mov rax, qword [rbp + 8 * 2]
 10850 0000876A 488B4008                	mov rax, qword [rax + 8 * 1]
 10851 0000876E 488B00                  	mov rax, qword [rax + 8 * 0]
 10852                                  	assert_closure(rax)
    42 00008771 803805              <1>  cmp byte [%1], %2
    43 00008774 0F85578A0000        <1>  jne L_error_incorrect_type
 10853 0000877A FF7001                  	push SOB_CLOSURE_ENV(rax)
 10854 0000877D FF5009                  	call SOB_CLOSURE_CODE(rax)
 10855 00008780 483D[02000000]          	cmp rax, sob_boolean_false
 10856 00008786 0F848D000000                      	je .L_if_else_008a
 10857 0000878C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 10858 00008790 50                      	push rax
 10859 00008791 6A01                    	push 1
 10860 00008793 488B0425[88000000]      	mov rax, qword [free_var_17]
 10861                                  	assert_closure(rax)
    42 0000879B 803805              <1>  cmp byte [%1], %2
    43 0000879E 0F852D8A0000        <1>  jne L_error_incorrect_type
 10862 000087A4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10863 000087A7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10864 000087AA 50                      	push rax
 10865 000087AB 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 10866 000087AF 50                      	push rax
 10867 000087B0 6A01                    	push 1
 10868 000087B2 488B0425[80000000]      	mov rax, qword [free_var_16]
 10869                                  	assert_closure(rax)
    42 000087BA 803805              <1>  cmp byte [%1], %2
    43 000087BD 0F850E8A0000        <1>  jne L_error_incorrect_type
 10870 000087C3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10871 000087C6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 10872 000087C9 50                      	push rax
 10873 000087CA 6A02                    	push 2
 10874 000087CC 488B4510                	mov rax, qword [rbp + 8 * 2]
 10875 000087D0 488B00                  	mov rax, qword [rax + 8 * 0]
 10876 000087D3 488B00                  	mov rax, qword [rax + 8 * 0]
 10877 000087D6 488B00                  	mov rax, qword [rax]
 10878                                  	assert_closure(rax)
    42 000087D9 803805              <1>  cmp byte [%1], %2
    43 000087DC 0F85EF890000        <1>  jne L_error_incorrect_type
 10879 000087E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 10880 000087E5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 10881 000087E8 FF7500                  	push qword [rbp] ; same the old rbp
 10882 000087EB BA05000000              	mov rdx, 2 + 3
 10883 000087F0 488B4D00                	mov rcx, [rbp]
 10884 000087F4 4889EF                  	mov rdi, rbp
 10885                                  .L_tc_recycle_frame_loop_0120:
 10886 000087F7 4883FA00                	cmp rdx, 0
 10887 000087FB 7413                    	je .L_tc_recycle_frame_done_0120
 10888 000087FD 4883E908                	sub rcx, 8
 10889 00008801 4883EF08                	sub rdi, 8
 10890 00008805 488B37                  	mov rsi, [rdi]
 10891 00008808 488931                  	mov qword [rcx], rsi
 10892 0000880B 48FFCA                  	dec rdx
 10893 0000880E EBE7                    	jmp .L_tc_recycle_frame_loop_0120
 10894                                  .L_tc_recycle_frame_done_0120:
 10895 00008810 5D                      	pop rbp ; restore the old rbp
 10896 00008811 4889CC                  	mov rsp, rcx
 10897 00008814 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 10898 00008817 EB0A                    	jmp .L_if_end_008a
 10899                                            .L_if_else_008a:
 10900 00008819 48B8-                             	mov rax, L_constants + 2
 10900 0000881B [0200000000000000] 
 10901                                  .L_if_end_008a:
 10902                                  .L_or_end_0010:
 10903 00008823 C9                      	leave
 10904 00008824 C22000                  	ret 8 * (2 + 2)
 10905                                  .L_lambda_simple_end_00ee:	; new closure is in rax
 10906 00008827 50                      	push rax
 10907 00008828 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 10908 0000882C 8F00                    	pop qword [rax]
 10909 0000882E 48B8-                   	mov rax, sob_void
 10909 00008830 [0000000000000000] 
 10910                                  
 10911 00008838 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 10912 0000883D E89B710000              	call malloc
 10913 00008842 50                      	push rax
 10914 00008843 BF08000000              	mov rdi, 8 * 1	; new rib
 10915 00008848 E890710000              	call malloc
 10916 0000884D 50                      	push rax
 10917 0000884E BF50000000              	mov rdi, 8 * 10	; extended env
 10918 00008853 E885710000              	call malloc
 10919 00008858 488B7D10                	mov rdi, ENV
 10920 0000885C BE00000000              	mov rsi, 0
 10921 00008861 BA01000000              	mov rdx, 1
 10922                                  .L_lambda_opt_env_loop_0025:	; ext_env[i + 1] <-- env[i]
 10923 00008866 4883FE09                	cmp rsi, 9
 10924 0000886A 7410                    	je .L_lambda_opt_env_end_0025
 10925 0000886C 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 10926 00008870 48890CD0                	mov qword [rax + 8 * rdx], rcx
 10927 00008874 48FFC6                  	inc rsi
 10928 00008877 48FFC2                  	inc rdx
 10929 0000887A EBEA                    	jmp .L_lambda_opt_env_loop_0025
 10930                                  .L_lambda_opt_env_end_0025:
 10931 0000887C 5B                      	pop rbx
 10932 0000887D BE00000000              	mov rsi, 0
 10933                                  .L_lambda_opt_params_loop_0025:	; copy params
 10934 00008882 4883FE01                	cmp rsi, 1
 10935 00008886 740E                    	je .L_lambda_opt_params_end_0025
 10936 00008888 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 10937 0000888D 488914F3                	mov qword [rbx + 8 * rsi], rdx
 10938 00008891 48FFC6                  	inc rsi
 10939 00008894 EBEC                    	jmp .L_lambda_opt_params_loop_0025
 10940                                  .L_lambda_opt_params_end_0025:
 10941 00008896 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 10942 00008899 4889C3                  	mov rbx, rax
 10943 0000889C 58                      	pop rax
 10944 0000889D C60005                  	mov byte [rax], T_closure
 10945 000088A0 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 10946 000088A4 48C74009[B1880000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0025
 10947 000088AC E931010000              	jmp .L_lambda_opt_end_0025
 10948                                  .L_lambda_opt_code_0025:	; lambda-opt body
 10949 000088B1 48837C241001            	cmp qword [rsp + 8 * 2], 1
 10950 000088B7 740D                    	je .L_lambda_opt_arity_check_exact_0025
 10951 000088B9 7F43                    	jg .L_lambda_opt_arity_check_more_0025
 10952 000088BB FF742410                	push qword [rsp + 8 * 2]
 10953 000088BF 6A01                    	push 1
 10954 000088C1 E9E4700000              	jmp L_error_incorrect_arity_opt
 10955                                  .L_lambda_opt_arity_check_exact_0025:
 10956 000088C6 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 10957 000088CF BA04000000              	mov rdx, 4
 10958 000088D4 FF3424                  	push qword [rsp]
 10959 000088D7 BE01000000              	mov rsi, 1
 10960                                  .L_lambda_opt_stack_shrink_loop_006d:
 10961 000088DC 4839D6                  	cmp rsi, rdx
 10962 000088DF 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_006d
 10963 000088E1 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 10964 000088E6 488B0B                  	mov rcx, [rbx]
 10965 000088E9 48894BF8                	mov qword [rbx - 8], rcx
 10966 000088ED 48FFC6                  	inc rsi
 10967 000088F0 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_006d
 10968                                  .L_lambda_opt_stack_shrink_loop_exit_006d:
 10969 000088F2 48C703[01000000]        	mov qword [rbx], sob_nil
 10970 000088F9 E985000000              	jmp .L_lambda_opt_stack_adjusted_0025
 10971                                  .L_lambda_opt_arity_check_more_0025:
 10972 000088FE 488B542410              	mov rdx, qword [rsp + 8 * 2]
 10973 00008903 4883EA01                	sub rdx, 1
 10974 00008907 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 10975 00008910 BE00000000              	mov rsi, 0
 10976 00008915 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 10977 0000891A 48B9-                   	mov rcx, sob_nil
 10977 0000891C [0100000000000000] 
 10978                                  .L_lambda_opt_stack_shrink_loop_006e:
 10979 00008924 4839D6                  	cmp rsi, rdx
 10980 00008927 7427                    je .L_lambda_opt_stack_shrink_loop_exit_006e
 10981 00008929 BF11000000              	mov rdi, 17 ; 1+8+8
 10982 0000892E E8AA700000              	call malloc
 10983 00008933 48894809                	mov SOB_PAIR_CDR(rax), rcx
 10984 00008937 48F7DE                  	neg rsi
 10985 0000893A 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 10986 0000893E 48F7DE                  	neg rsi
 10987 00008941 48894801                	mov SOB_PAIR_CAR(rax), rcx
 10988 00008945 C60021                  	mov byte [rax], T_pair
 10989 00008948 4889C1                  	mov rcx, rax
 10990 0000894B 48FFC6                  	inc rsi
 10991 0000894E EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_006e
 10992                                  .L_lambda_opt_stack_shrink_loop_exit_006e:
 10993 00008950 48890B                  	mov qword [rbx], rcx
 10994 00008953 4883EB08                	sub rbx, 8
 10995 00008957 4889E7                  	mov rdi, rsp
 10996 0000895A 4883C718                	add rdi, 24
 10997 0000895E BE04000000              	mov rsi, 4
 10998                                  .L_lambda_opt_stack_shrink_loop_006f:
 10999 00008963 4883FE00                	cmp rsi,0
 11000 00008967 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_006f
 11001 00008969 488B0F                  	mov rcx, qword [rdi]
 11002 0000896C 48890B                  	mov [rbx], rcx
 11003 0000896F 48FFCE                  	dec rsi
 11004 00008972 4883EB08                	sub rbx, 8
 11005 00008976 4883EF08                	sub rdi, 8
 11006 0000897A EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_006f
 11007                                  .L_lambda_opt_stack_shrink_loop_exit_006f:
 11008 0000897C 4883C308                	add rbx, 8
 11009 00008980 4889DC                  	mov rsp, rbx
 11010                                  .L_lambda_opt_stack_adjusted_0025:
 11011 00008983 C8000000                	enter 0, 0
 11012 00008987 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 11013 0000898B 50                      	push rax
 11014 0000898C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11015 00008990 50                      	push rax
 11016 00008991 6A02                    	push 2
 11017 00008993 488B4510                	mov rax, qword [rbp + 8 * 2]
 11018 00008997 488B00                  	mov rax, qword [rax + 8 * 0]
 11019 0000899A 488B00                  	mov rax, qword [rax + 8 * 0]
 11020 0000899D 488B00                  	mov rax, qword [rax]
 11021                                  	assert_closure(rax)
    42 000089A0 803805              <1>  cmp byte [%1], %2
    43 000089A3 0F8528880000        <1>  jne L_error_incorrect_type
 11022 000089A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11023 000089AC FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11024 000089AF FF7500                  	push qword [rbp] ; same the old rbp
 11025 000089B2 BA05000000              	mov rdx, 2 + 3
 11026 000089B7 488B4D00                	mov rcx, [rbp]
 11027 000089BB 4889EF                  	mov rdi, rbp
 11028                                  .L_tc_recycle_frame_loop_0121:
 11029 000089BE 4883FA00                	cmp rdx, 0
 11030 000089C2 7413                    	je .L_tc_recycle_frame_done_0121
 11031 000089C4 4883E908                	sub rcx, 8
 11032 000089C8 4883EF08                	sub rdi, 8
 11033 000089CC 488B37                  	mov rsi, [rdi]
 11034 000089CF 488931                  	mov qword [rcx], rsi
 11035 000089D2 48FFCA                  	dec rdx
 11036 000089D5 EBE7                    	jmp .L_tc_recycle_frame_loop_0121
 11037                                  .L_tc_recycle_frame_done_0121:
 11038 000089D7 5D                      	pop rbp ; restore the old rbp
 11039 000089D8 4889CC                  	mov rsp, rcx
 11040 000089DB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11041 000089DE C9                      	leave
 11042 000089DF C22000                  	ret 8 * (2 + 2)
 11043                                  .L_lambda_opt_end_0025:	; new closure is in rax
 11044 000089E2 C9                      	leave
 11045 000089E3 C21800                  	ret 8 * (2 + 1)
 11046                                  .L_lambda_simple_end_00ed:	; new closure is in rax
 11047                                  	assert_closure(rax)
    42 000089E6 803805              <1>  cmp byte [%1], %2
    43 000089E9 0F85E2870000        <1>  jne L_error_incorrect_type
 11048 000089EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11049 000089F2 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11050 000089F5 FF7500                  	push qword [rbp] ; same the old rbp
 11051 000089F8 BA04000000              	mov rdx, 1 + 3
 11052 000089FD 488B4D00                	mov rcx, [rbp]
 11053 00008A01 4889EF                  	mov rdi, rbp
 11054                                  .L_tc_recycle_frame_loop_011f:
 11055 00008A04 4883FA00                	cmp rdx, 0
 11056 00008A08 7413                    	je .L_tc_recycle_frame_done_011f
 11057 00008A0A 4883E908                	sub rcx, 8
 11058 00008A0E 4883EF08                	sub rdi, 8
 11059 00008A12 488B37                  	mov rsi, [rdi]
 11060 00008A15 488931                  	mov qword [rcx], rsi
 11061 00008A18 48FFCA                  	dec rdx
 11062 00008A1B EBE7                    	jmp .L_tc_recycle_frame_loop_011f
 11063                                  .L_tc_recycle_frame_done_011f:
 11064 00008A1D 5D                      	pop rbp ; restore the old rbp
 11065 00008A1E 4889CC                  	mov rsp, rcx
 11066 00008A21 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11067 00008A24 C9                      	leave
 11068 00008A25 C21800                  	ret 8 * (2 + 1)
 11069                                  .L_lambda_simple_end_00ec:	; new closure is in rax
 11070 00008A28 50                      	push rax
 11071 00008A29 6A01                    	push 1
 11072 00008A2B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11073 00008A30 E8A86F0000              	call malloc
 11074 00008A35 50                      	push rax
 11075 00008A36 BF08000000              	mov rdi, 8 * 1	; new rib
 11076 00008A3B E89D6F0000              	call malloc
 11077 00008A40 50                      	push rax
 11078 00008A41 BF40000000              	mov rdi, 8 * 8	; extended env
 11079 00008A46 E8926F0000              	call malloc
 11080 00008A4B 488B7D10                	mov rdi, ENV
 11081 00008A4F BE00000000              	mov rsi, 0
 11082 00008A54 BA01000000              	mov rdx, 1
 11083                                  .L_lambda_simple_env_loop_00eb:	; ext_env[i + 1] <-- env[i]
 11084 00008A59 4883FE07                	cmp rsi, 7
 11085 00008A5D 7410                    	je .L_lambda_simple_env_end_00eb
 11086 00008A5F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11087 00008A63 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11088 00008A67 48FFC6                  	inc rsi
 11089 00008A6A 48FFC2                  	inc rdx
 11090 00008A6D EBEA                    	jmp .L_lambda_simple_env_loop_00eb
 11091                                  .L_lambda_simple_env_end_00eb:
 11092 00008A6F 5B                      	pop rbx
 11093 00008A70 BE00000000              	mov rsi, 0
 11094                                  .L_lambda_simple_params_loop_00eb:	; copy params
 11095 00008A75 4883FE01                	cmp rsi, 1
 11096 00008A79 740E                    	je .L_lambda_simple_params_end_00eb
 11097 00008A7B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11098 00008A80 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11099 00008A84 48FFC6                  	inc rsi
 11100 00008A87 EBEC                    	jmp .L_lambda_simple_params_loop_00eb
 11101                                  .L_lambda_simple_params_end_00eb:
 11102 00008A89 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11103 00008A8C 4889C3                  	mov rbx, rax
 11104 00008A8F 58                      	pop rax
 11105 00008A90 C60005                  	mov byte [rax], T_closure
 11106 00008A93 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11107 00008A97 48C74009[A48A0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00eb
 11108 00008A9F E919010000              	jmp .L_lambda_simple_end_00eb
 11109                                  .L_lambda_simple_code_00eb:	; lambda-simple body
 11110 00008AA4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11111 00008AAA 740B                    	je .L_lambda_simple_arity_check_ok_00eb
 11112 00008AAC FF742410                	push qword [rsp + 8 * 2]
 11113 00008AB0 6A01                    	push 1
 11114 00008AB2 E9DF6E0000              	jmp L_error_incorrect_arity_simple
 11115                                  .L_lambda_simple_arity_check_ok_00eb:
 11116 00008AB7 C8000000                	enter 0, 0
 11117 00008ABB 488B4510                	mov rax, qword [rbp + 8 * 2]
 11118 00008ABF 488B4020                	mov rax, qword [rax + 8 * 4]
 11119 00008AC3 488B00                  	mov rax, qword [rax + 8 * 0]
 11120 00008AC6 50                      	push rax
 11121 00008AC7 6A01                    	push 1
 11122 00008AC9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11123                                  	assert_closure(rax)
    42 00008ACD 803805              <1>  cmp byte [%1], %2
    43 00008AD0 0F85FB860000        <1>  jne L_error_incorrect_type
 11124 00008AD6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11125 00008AD9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11126 00008ADC 48890425[30030000]      	mov qword [free_var_102], rax
 11127 00008AE4 48B8-                   	mov rax, sob_void
 11127 00008AE6 [0000000000000000] 
 11128                                  
 11129 00008AEE 488B4510                	mov rax, qword [rbp + 8 * 2]
 11130 00008AF2 488B00                  	mov rax, qword [rax + 8 * 0]
 11131 00008AF5 488B00                  	mov rax, qword [rax + 8 * 0]
 11132 00008AF8 50                      	push rax
 11133 00008AF9 6A01                    	push 1
 11134 00008AFB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11135                                  	assert_closure(rax)
    42 00008AFF 803805              <1>  cmp byte [%1], %2
    43 00008B02 0F85C9860000        <1>  jne L_error_incorrect_type
 11136 00008B08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11137 00008B0B FF5009                  	call SOB_CLOSURE_CODE(rax)
 11138 00008B0E 48890425[38030000]      	mov qword [free_var_103], rax
 11139 00008B16 48B8-                   	mov rax, sob_void
 11139 00008B18 [0000000000000000] 
 11140                                  
 11141 00008B20 488B4510                	mov rax, qword [rbp + 8 * 2]
 11142 00008B24 488B4008                	mov rax, qword [rax + 8 * 1]
 11143 00008B28 488B00                  	mov rax, qword [rax + 8 * 0]
 11144 00008B2B 50                      	push rax
 11145 00008B2C 6A01                    	push 1
 11146 00008B2E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11147                                  	assert_closure(rax)
    42 00008B32 803805              <1>  cmp byte [%1], %2
    43 00008B35 0F8596860000        <1>  jne L_error_incorrect_type
 11148 00008B3B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11149 00008B3E FF5009                  	call SOB_CLOSURE_CODE(rax)
 11150 00008B41 48890425[40030000]      	mov qword [free_var_104], rax
 11151 00008B49 48B8-                   	mov rax, sob_void
 11151 00008B4B [0000000000000000] 
 11152                                  
 11153 00008B53 488B4510                	mov rax, qword [rbp + 8 * 2]
 11154 00008B57 488B4010                	mov rax, qword [rax + 8 * 2]
 11155 00008B5B 488B00                  	mov rax, qword [rax + 8 * 0]
 11156 00008B5E 50                      	push rax
 11157 00008B5F 6A01                    	push 1
 11158 00008B61 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11159                                  	assert_closure(rax)
    42 00008B65 803805              <1>  cmp byte [%1], %2
    43 00008B68 0F8563860000        <1>  jne L_error_incorrect_type
 11160 00008B6E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11161 00008B71 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11162 00008B74 48890425[48030000]      	mov qword [free_var_105], rax
 11163 00008B7C 48B8-                   	mov rax, sob_void
 11163 00008B7E [0000000000000000] 
 11164                                  
 11165 00008B86 488B4510                	mov rax, qword [rbp + 8 * 2]
 11166 00008B8A 488B4018                	mov rax, qword [rax + 8 * 3]
 11167 00008B8E 488B00                  	mov rax, qword [rax + 8 * 0]
 11168 00008B91 50                      	push rax
 11169 00008B92 6A01                    	push 1
 11170 00008B94 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11171                                  	assert_closure(rax)
    42 00008B98 803805              <1>  cmp byte [%1], %2
    43 00008B9B 0F8530860000        <1>  jne L_error_incorrect_type
 11172 00008BA1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11173 00008BA4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11174 00008BA7 48890425[50030000]      	mov qword [free_var_106], rax
 11175 00008BAF 48B8-                   	mov rax, sob_void
 11175 00008BB1 [0000000000000000] 
 11176 00008BB9 C9                      	leave
 11177 00008BBA C21800                  	ret 8 * (2 + 1)
 11178                                  .L_lambda_simple_end_00eb:	; new closure is in rax
 11179                                  	assert_closure(rax)
    42 00008BBD 803805              <1>  cmp byte [%1], %2
    43 00008BC0 0F850B860000        <1>  jne L_error_incorrect_type
 11180 00008BC6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11181 00008BC9 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11182 00008BCC FF7500                  	push qword [rbp] ; same the old rbp
 11183 00008BCF BA04000000              	mov rdx, 1 + 3
 11184 00008BD4 488B4D00                	mov rcx, [rbp]
 11185 00008BD8 4889EF                  	mov rdi, rbp
 11186                                  .L_tc_recycle_frame_loop_011e:
 11187 00008BDB 4883FA00                	cmp rdx, 0
 11188 00008BDF 7413                    	je .L_tc_recycle_frame_done_011e
 11189 00008BE1 4883E908                	sub rcx, 8
 11190 00008BE5 4883EF08                	sub rdi, 8
 11191 00008BE9 488B37                  	mov rsi, [rdi]
 11192 00008BEC 488931                  	mov qword [rcx], rsi
 11193 00008BEF 48FFCA                  	dec rdx
 11194 00008BF2 EBE7                    	jmp .L_tc_recycle_frame_loop_011e
 11195                                  .L_tc_recycle_frame_done_011e:
 11196 00008BF4 5D                      	pop rbp ; restore the old rbp
 11197 00008BF5 4889CC                  	mov rsp, rcx
 11198 00008BF8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11199 00008BFB C9                      	leave
 11200 00008BFC C21800                  	ret 8 * (2 + 1)
 11201                                  .L_lambda_simple_end_00ea:	; new closure is in rax
 11202                                  	assert_closure(rax)
    42 00008BFF 803805              <1>  cmp byte [%1], %2
    43 00008C02 0F85C9850000        <1>  jne L_error_incorrect_type
 11203 00008C08 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11204 00008C0B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11205 00008C0E FF7500                  	push qword [rbp] ; same the old rbp
 11206 00008C11 BA04000000              	mov rdx, 1 + 3
 11207 00008C16 488B4D00                	mov rcx, [rbp]
 11208 00008C1A 4889EF                  	mov rdi, rbp
 11209                                  .L_tc_recycle_frame_loop_011d:
 11210 00008C1D 4883FA00                	cmp rdx, 0
 11211 00008C21 7413                    	je .L_tc_recycle_frame_done_011d
 11212 00008C23 4883E908                	sub rcx, 8
 11213 00008C27 4883EF08                	sub rdi, 8
 11214 00008C2B 488B37                  	mov rsi, [rdi]
 11215 00008C2E 488931                  	mov qword [rcx], rsi
 11216 00008C31 48FFCA                  	dec rdx
 11217 00008C34 EBE7                    	jmp .L_tc_recycle_frame_loop_011d
 11218                                  .L_tc_recycle_frame_done_011d:
 11219 00008C36 5D                      	pop rbp ; restore the old rbp
 11220 00008C37 4889CC                  	mov rsp, rcx
 11221 00008C3A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11222 00008C3D C9                      	leave
 11223 00008C3E C21800                  	ret 8 * (2 + 1)
 11224                                  .L_lambda_simple_end_00e9:	; new closure is in rax
 11225                                  	assert_closure(rax)
    42 00008C41 803805              <1>  cmp byte [%1], %2
    43 00008C44 0F8587850000        <1>  jne L_error_incorrect_type
 11226 00008C4A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11227 00008C4D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11228 00008C50 FF7500                  	push qword [rbp] ; same the old rbp
 11229 00008C53 BA04000000              	mov rdx, 1 + 3
 11230 00008C58 488B4D00                	mov rcx, [rbp]
 11231 00008C5C 4889EF                  	mov rdi, rbp
 11232                                  .L_tc_recycle_frame_loop_011c:
 11233 00008C5F 4883FA00                	cmp rdx, 0
 11234 00008C63 7413                    	je .L_tc_recycle_frame_done_011c
 11235 00008C65 4883E908                	sub rcx, 8
 11236 00008C69 4883EF08                	sub rdi, 8
 11237 00008C6D 488B37                  	mov rsi, [rdi]
 11238 00008C70 488931                  	mov qword [rcx], rsi
 11239 00008C73 48FFCA                  	dec rdx
 11240 00008C76 EBE7                    	jmp .L_tc_recycle_frame_loop_011c
 11241                                  .L_tc_recycle_frame_done_011c:
 11242 00008C78 5D                      	pop rbp ; restore the old rbp
 11243 00008C79 4889CC                  	mov rsp, rcx
 11244 00008C7C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11245 00008C7F C9                      	leave
 11246 00008C80 C21800                  	ret 8 * (2 + 1)
 11247                                  .L_lambda_simple_end_00e8:	; new closure is in rax
 11248                                  	assert_closure(rax)
    42 00008C83 803805              <1>  cmp byte [%1], %2
    43 00008C86 0F8545850000        <1>  jne L_error_incorrect_type
 11249 00008C8C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11250 00008C8F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11251 00008C92 FF7500                  	push qword [rbp] ; same the old rbp
 11252 00008C95 BA04000000              	mov rdx, 1 + 3
 11253 00008C9A 488B4D00                	mov rcx, [rbp]
 11254 00008C9E 4889EF                  	mov rdi, rbp
 11255                                  .L_tc_recycle_frame_loop_011b:
 11256 00008CA1 4883FA00                	cmp rdx, 0
 11257 00008CA5 7413                    	je .L_tc_recycle_frame_done_011b
 11258 00008CA7 4883E908                	sub rcx, 8
 11259 00008CAB 4883EF08                	sub rdi, 8
 11260 00008CAF 488B37                  	mov rsi, [rdi]
 11261 00008CB2 488931                  	mov qword [rcx], rsi
 11262 00008CB5 48FFCA                  	dec rdx
 11263 00008CB8 EBE7                    	jmp .L_tc_recycle_frame_loop_011b
 11264                                  .L_tc_recycle_frame_done_011b:
 11265 00008CBA 5D                      	pop rbp ; restore the old rbp
 11266 00008CBB 4889CC                  	mov rsp, rcx
 11267 00008CBE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11268 00008CC1 C9                      	leave
 11269 00008CC2 C21800                  	ret 8 * (2 + 1)
 11270                                  .L_lambda_simple_end_00e7:	; new closure is in rax
 11271                                  	assert_closure(rax)
    42 00008CC5 803805              <1>  cmp byte [%1], %2
    43 00008CC8 0F8503850000        <1>  jne L_error_incorrect_type
 11272 00008CCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 11273 00008CD1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11274 00008CD4 FF7500                  	push qword [rbp] ; same the old rbp
 11275 00008CD7 BA04000000              	mov rdx, 1 + 3
 11276 00008CDC 488B4D00                	mov rcx, [rbp]
 11277 00008CE0 4889EF                  	mov rdi, rbp
 11278                                  .L_tc_recycle_frame_loop_011a:
 11279 00008CE3 4883FA00                	cmp rdx, 0
 11280 00008CE7 7413                    	je .L_tc_recycle_frame_done_011a
 11281 00008CE9 4883E908                	sub rcx, 8
 11282 00008CED 4883EF08                	sub rdi, 8
 11283 00008CF1 488B37                  	mov rsi, [rdi]
 11284 00008CF4 488931                  	mov qword [rcx], rsi
 11285 00008CF7 48FFCA                  	dec rdx
 11286 00008CFA EBE7                    	jmp .L_tc_recycle_frame_loop_011a
 11287                                  .L_tc_recycle_frame_done_011a:
 11288 00008CFC 5D                      	pop rbp ; restore the old rbp
 11289 00008CFD 4889CC                  	mov rsp, rcx
 11290 00008D00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11291 00008D03 C9                      	leave
 11292 00008D04 C21800                  	ret 8 * (2 + 1)
 11293                                  .L_lambda_simple_end_00e6:	; new closure is in rax
 11294                                  	assert_closure(rax)
    42 00008D07 803805              <1>  cmp byte [%1], %2
    43 00008D0A 0F85C1840000        <1>  jne L_error_incorrect_type
 11295 00008D10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11296 00008D13 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11297 00008D16 FF7500                  	push qword [rbp] ; same the old rbp
 11298 00008D19 BA04000000              	mov rdx, 1 + 3
 11299 00008D1E 488B4D00                	mov rcx, [rbp]
 11300 00008D22 4889EF                  	mov rdi, rbp
 11301                                  .L_tc_recycle_frame_loop_0119:
 11302 00008D25 4883FA00                	cmp rdx, 0
 11303 00008D29 7413                    	je .L_tc_recycle_frame_done_0119
 11304 00008D2B 4883E908                	sub rcx, 8
 11305 00008D2F 4883EF08                	sub rdi, 8
 11306 00008D33 488B37                  	mov rsi, [rdi]
 11307 00008D36 488931                  	mov qword [rcx], rsi
 11308 00008D39 48FFCA                  	dec rdx
 11309 00008D3C EBE7                    	jmp .L_tc_recycle_frame_loop_0119
 11310                                  .L_tc_recycle_frame_done_0119:
 11311 00008D3E 5D                      	pop rbp ; restore the old rbp
 11312 00008D3F 4889CC                  	mov rsp, rcx
 11313 00008D42 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11314 00008D45 C9                      	leave
 11315 00008D46 C21800                  	ret 8 * (2 + 1)
 11316                                  .L_lambda_simple_end_00e5:	; new closure is in rax
 11317                                  	assert_closure(rax)
    42 00008D49 803805              <1>  cmp byte [%1], %2
    43 00008D4C 0F857F840000        <1>  jne L_error_incorrect_type
 11318 00008D52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11319 00008D55 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11320 00008D58 FF7500                  	push qword [rbp] ; same the old rbp
 11321 00008D5B BA04000000              	mov rdx, 1 + 3
 11322 00008D60 488B4D00                	mov rcx, [rbp]
 11323 00008D64 4889EF                  	mov rdi, rbp
 11324                                  .L_tc_recycle_frame_loop_0118:
 11325 00008D67 4883FA00                	cmp rdx, 0
 11326 00008D6B 7413                    	je .L_tc_recycle_frame_done_0118
 11327 00008D6D 4883E908                	sub rcx, 8
 11328 00008D71 4883EF08                	sub rdi, 8
 11329 00008D75 488B37                  	mov rsi, [rdi]
 11330 00008D78 488931                  	mov qword [rcx], rsi
 11331 00008D7B 48FFCA                  	dec rdx
 11332 00008D7E EBE7                    	jmp .L_tc_recycle_frame_loop_0118
 11333                                  .L_tc_recycle_frame_done_0118:
 11334 00008D80 5D                      	pop rbp ; restore the old rbp
 11335 00008D81 4889CC                  	mov rsp, rcx
 11336 00008D84 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11337 00008D87 C9                      	leave
 11338 00008D88 C21800                  	ret 8 * (2 + 1)
 11339                                  .L_lambda_simple_end_00e4:	; new closure is in rax
 11340                                  	assert_closure(rax)
    42 00008D8B 803805              <1>  cmp byte [%1], %2
    43 00008D8E 0F853D840000        <1>  jne L_error_incorrect_type
 11341 00008D94 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11342 00008D97 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11343                                  
 11344 00008D9A 4889C7                  	mov rdi, rax
 11345 00008D9D E84C6C0000              	call print_sexpr_if_not_void
 11346                                  
 11347 00008DA2 48B8-                   	mov rax, L_constants + 23
 11347 00008DA4 [1700000000000000] 
 11348 00008DAC 50                      	push rax
 11349 00008DAD 6A01                    	push 1
 11350 00008DAF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11351 00008DB4 E8246C0000              	call malloc
 11352 00008DB9 50                      	push rax
 11353 00008DBA BF00000000              	mov rdi, 8 * 0	; new rib
 11354 00008DBF E8196C0000              	call malloc
 11355 00008DC4 50                      	push rax
 11356 00008DC5 BF08000000              	mov rdi, 8 * 1	; extended env
 11357 00008DCA E80E6C0000              	call malloc
 11358 00008DCF 488B7D10                	mov rdi, ENV
 11359 00008DD3 BE00000000              	mov rsi, 0
 11360 00008DD8 BA01000000              	mov rdx, 1
 11361                                  .L_lambda_simple_env_loop_00f5:	; ext_env[i + 1] <-- env[i]
 11362 00008DDD 4883FE00                	cmp rsi, 0
 11363 00008DE1 7410                    	je .L_lambda_simple_env_end_00f5
 11364 00008DE3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11365 00008DE7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11366 00008DEB 48FFC6                  	inc rsi
 11367 00008DEE 48FFC2                  	inc rdx
 11368 00008DF1 EBEA                    	jmp .L_lambda_simple_env_loop_00f5
 11369                                  .L_lambda_simple_env_end_00f5:
 11370 00008DF3 5B                      	pop rbx
 11371 00008DF4 BE00000000              	mov rsi, 0
 11372                                  .L_lambda_simple_params_loop_00f5:	; copy params
 11373 00008DF9 4883FE00                	cmp rsi, 0
 11374 00008DFD 740E                    	je .L_lambda_simple_params_end_00f5
 11375 00008DFF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11376 00008E04 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11377 00008E08 48FFC6                  	inc rsi
 11378 00008E0B EBEC                    	jmp .L_lambda_simple_params_loop_00f5
 11379                                  .L_lambda_simple_params_end_00f5:
 11380 00008E0D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11381 00008E10 4889C3                  	mov rbx, rax
 11382 00008E13 58                      	pop rax
 11383 00008E14 C60005                  	mov byte [rax], T_closure
 11384 00008E17 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11385 00008E1B 48C74009[288E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f5
 11386 00008E23 E920050000              	jmp .L_lambda_simple_end_00f5
 11387                                  .L_lambda_simple_code_00f5:	; lambda-simple body
 11388 00008E28 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11389 00008E2E 740B                    	je .L_lambda_simple_arity_check_ok_00f5
 11390 00008E30 FF742410                	push qword [rsp + 8 * 2]
 11391 00008E34 6A01                    	push 1
 11392 00008E36 E95B6B0000              	jmp L_error_incorrect_arity_simple
 11393                                  .L_lambda_simple_arity_check_ok_00f5:
 11394 00008E3B C8000000                	enter 0, 0
 11395 00008E3F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11396 00008E43 4889C2                  	mov rdx, rax
 11397 00008E46 BF08000000              	mov rdi, 8
 11398 00008E4B E88D6B0000              	call malloc
 11399 00008E50 488910                  	mov qword[rax], rdx
 11400 00008E53 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 11401 00008E57 48B8-                   	mov rax, sob_void
 11401 00008E59 [0000000000000000] 
 11402                                  
 11403 00008E61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11404 00008E66 E8726B0000              	call malloc
 11405 00008E6B 50                      	push rax
 11406 00008E6C BF08000000              	mov rdi, 8 * 1	; new rib
 11407 00008E71 E8676B0000              	call malloc
 11408 00008E76 50                      	push rax
 11409 00008E77 BF10000000              	mov rdi, 8 * 2	; extended env
 11410 00008E7C E85C6B0000              	call malloc
 11411 00008E81 488B7D10                	mov rdi, ENV
 11412 00008E85 BE00000000              	mov rsi, 0
 11413 00008E8A BA01000000              	mov rdx, 1
 11414                                  .L_lambda_simple_env_loop_00f6:	; ext_env[i + 1] <-- env[i]
 11415 00008E8F 4883FE01                	cmp rsi, 1
 11416 00008E93 7410                    	je .L_lambda_simple_env_end_00f6
 11417 00008E95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11418 00008E99 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11419 00008E9D 48FFC6                  	inc rsi
 11420 00008EA0 48FFC2                  	inc rdx
 11421 00008EA3 EBEA                    	jmp .L_lambda_simple_env_loop_00f6
 11422                                  .L_lambda_simple_env_end_00f6:
 11423 00008EA5 5B                      	pop rbx
 11424 00008EA6 BE00000000              	mov rsi, 0
 11425                                  .L_lambda_simple_params_loop_00f6:	; copy params
 11426 00008EAB 4883FE01                	cmp rsi, 1
 11427 00008EAF 740E                    	je .L_lambda_simple_params_end_00f6
 11428 00008EB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11429 00008EB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11430 00008EBA 48FFC6                  	inc rsi
 11431 00008EBD EBEC                    	jmp .L_lambda_simple_params_loop_00f6
 11432                                  .L_lambda_simple_params_end_00f6:
 11433 00008EBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11434 00008EC2 4889C3                  	mov rbx, rax
 11435 00008EC5 58                      	pop rax
 11436 00008EC6 C60005                  	mov byte [rax], T_closure
 11437 00008EC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11438 00008ECD 48C74009[DA8E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f6
 11439 00008ED5 E9EB000000              	jmp .L_lambda_simple_end_00f6
 11440                                  .L_lambda_simple_code_00f6:	; lambda-simple body
 11441 00008EDA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 11442 00008EE0 740B                    	je .L_lambda_simple_arity_check_ok_00f6
 11443 00008EE2 FF742410                	push qword [rsp + 8 * 2]
 11444 00008EE6 6A02                    	push 2
 11445 00008EE8 E9A96A0000              	jmp L_error_incorrect_arity_simple
 11446                                  .L_lambda_simple_arity_check_ok_00f6:
 11447 00008EED C8000000                	enter 0, 0
 11448 00008EF1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11449 00008EF5 50                      	push rax
 11450 00008EF6 6A01                    	push 1
 11451 00008EF8 488B0425[D8000000]      	mov rax, qword [free_var_27]
 11452                                  	assert_closure(rax)
    42 00008F00 803805              <1>  cmp byte [%1], %2
    43 00008F03 0F85C8820000        <1>  jne L_error_incorrect_type
 11453 00008F09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11454 00008F0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11455 00008F0F 483D[02000000]          	cmp rax, sob_boolean_false
 11456 00008F15 740F                              	je .L_if_else_0091
 11457 00008F17 48B8-                             	mov rax, L_constants + 1
 11457 00008F19 [0100000000000000] 
 11458 00008F21 E99B000000              	jmp .L_if_end_0091
 11459                                            .L_if_else_0091:
 11460 00008F26 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11461 00008F2A 50                      	push rax
 11462 00008F2B 48B8-                   	mov rax, L_constants + 128
 11462 00008F2D [8000000000000000] 
 11463 00008F35 50                      	push rax
 11464 00008F36 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11465 00008F3A 50                      	push rax
 11466 00008F3B 6A02                    	push 2
 11467 00008F3D 488B0425[10030000]      	mov rax, qword [free_var_98]
 11468                                  	assert_closure(rax)
    42 00008F45 803805              <1>  cmp byte [%1], %2
    43 00008F48 0F8583820000        <1>  jne L_error_incorrect_type
 11469 00008F4E FF7001                  	push SOB_CLOSURE_ENV(rax)
 11470 00008F51 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11471 00008F54 50                      	push rax
 11472 00008F55 6A02                    	push 2
 11473 00008F57 488B4510                	mov rax, qword [rbp + 8 * 2]
 11474 00008F5B 488B00                  	mov rax, qword [rax + 8 * 0]
 11475 00008F5E 488B00                  	mov rax, qword [rax + 8 * 0]
 11476 00008F61 488B00                  	mov rax, qword [rax]
 11477                                  	assert_closure(rax)
    42 00008F64 803805              <1>  cmp byte [%1], %2
    43 00008F67 0F8564820000        <1>  jne L_error_incorrect_type
 11478 00008F6D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11479 00008F70 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11480 00008F73 50                      	push rax
 11481 00008F74 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 11482 00008F78 50                      	push rax
 11483 00008F79 6A02                    	push 2
 11484 00008F7B 488B0425[68000000]      	mov rax, qword [free_var_13]
 11485                                  	assert_closure(rax)
    42 00008F83 803805              <1>  cmp byte [%1], %2
    43 00008F86 0F8545820000        <1>  jne L_error_incorrect_type
 11486 00008F8C FF7001                  	push SOB_CLOSURE_ENV(rax)
 11487 00008F8F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11488 00008F92 FF7500                  	push qword [rbp] ; same the old rbp
 11489 00008F95 BA05000000              	mov rdx, 2 + 3
 11490 00008F9A 488B4D00                	mov rcx, [rbp]
 11491 00008F9E 4889EF                  	mov rdi, rbp
 11492                                  .L_tc_recycle_frame_loop_012c:
 11493 00008FA1 4883FA00                	cmp rdx, 0
 11494 00008FA5 7413                    	je .L_tc_recycle_frame_done_012c
 11495 00008FA7 4883E908                	sub rcx, 8
 11496 00008FAB 4883EF08                	sub rdi, 8
 11497 00008FAF 488B37                  	mov rsi, [rdi]
 11498 00008FB2 488931                  	mov qword [rcx], rsi
 11499 00008FB5 48FFCA                  	dec rdx
 11500 00008FB8 EBE7                    	jmp .L_tc_recycle_frame_loop_012c
 11501                                  .L_tc_recycle_frame_done_012c:
 11502 00008FBA 5D                      	pop rbp ; restore the old rbp
 11503 00008FBB 4889CC                  	mov rsp, rcx
 11504 00008FBE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11505                                  .L_if_end_0091:
 11506 00008FC1 C9                      	leave
 11507 00008FC2 C22000                  	ret 8 * (2 + 2)
 11508                                  .L_lambda_simple_end_00f6:	; new closure is in rax
 11509 00008FC5 50                      	push rax
 11510 00008FC6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11511 00008FCA 8F00                    	pop qword [rax]
 11512 00008FCC 48B8-                   	mov rax, sob_void
 11512 00008FCE [0000000000000000] 
 11513                                  
 11514 00008FD6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11515 00008FDB E8FD690000              	call malloc
 11516 00008FE0 50                      	push rax
 11517 00008FE1 BF08000000              	mov rdi, 8 * 1	; new rib
 11518 00008FE6 E8F2690000              	call malloc
 11519 00008FEB 50                      	push rax
 11520 00008FEC BF10000000              	mov rdi, 8 * 2	; extended env
 11521 00008FF1 E8E7690000              	call malloc
 11522 00008FF6 488B7D10                	mov rdi, ENV
 11523 00008FFA BE00000000              	mov rsi, 0
 11524 00008FFF BA01000000              	mov rdx, 1
 11525                                  .L_lambda_opt_env_loop_0026:	; ext_env[i + 1] <-- env[i]
 11526 00009004 4883FE01                	cmp rsi, 1
 11527 00009008 7410                    	je .L_lambda_opt_env_end_0026
 11528 0000900A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11529 0000900E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11530 00009012 48FFC6                  	inc rsi
 11531 00009015 48FFC2                  	inc rdx
 11532 00009018 EBEA                    	jmp .L_lambda_opt_env_loop_0026
 11533                                  .L_lambda_opt_env_end_0026:
 11534 0000901A 5B                      	pop rbx
 11535 0000901B BE00000000              	mov rsi, 0
 11536                                  .L_lambda_opt_params_loop_0026:	; copy params
 11537 00009020 4883FE01                	cmp rsi, 1
 11538 00009024 740E                    	je .L_lambda_opt_params_end_0026
 11539 00009026 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11540 0000902B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11541 0000902F 48FFC6                  	inc rsi
 11542 00009032 EBEC                    	jmp .L_lambda_opt_params_loop_0026
 11543                                  .L_lambda_opt_params_end_0026:
 11544 00009034 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11545 00009037 4889C3                  	mov rbx, rax
 11546 0000903A 58                      	pop rax
 11547 0000903B C60005                  	mov byte [rax], T_closure
 11548 0000903E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11549 00009042 48C74009[4F900000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0026
 11550 0000904A E9F5020000              	jmp .L_lambda_opt_end_0026
 11551                                  .L_lambda_opt_code_0026:	; lambda-opt body
 11552 0000904F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11553 00009055 740D                    	je .L_lambda_opt_arity_check_exact_0026
 11554 00009057 7F43                    	jg .L_lambda_opt_arity_check_more_0026
 11555 00009059 FF742410                	push qword [rsp + 8 * 2]
 11556 0000905D 6A01                    	push 1
 11557 0000905F E946690000              	jmp L_error_incorrect_arity_opt
 11558                                  .L_lambda_opt_arity_check_exact_0026:
 11559 00009064 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11560 0000906D BA04000000              	mov rdx, 4
 11561 00009072 FF3424                  	push qword [rsp]
 11562 00009075 BE01000000              	mov rsi, 1
 11563                                  .L_lambda_opt_stack_shrink_loop_0070:
 11564 0000907A 4839D6                  	cmp rsi, rdx
 11565 0000907D 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0070
 11566 0000907F 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 11567 00009084 488B0B                  	mov rcx, [rbx]
 11568 00009087 48894BF8                	mov qword [rbx - 8], rcx
 11569 0000908B 48FFC6                  	inc rsi
 11570 0000908E EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0070
 11571                                  .L_lambda_opt_stack_shrink_loop_exit_0070:
 11572 00009090 48C703[01000000]        	mov qword [rbx], sob_nil
 11573 00009097 E985000000              	jmp .L_lambda_opt_stack_adjusted_0026
 11574                                  .L_lambda_opt_arity_check_more_0026:
 11575 0000909C 488B542410              	mov rdx, qword [rsp + 8 * 2]
 11576 000090A1 4883EA01                	sub rdx, 1
 11577 000090A5 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 11578 000090AE BE00000000              	mov rsi, 0
 11579 000090B3 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 11580 000090B8 48B9-                   	mov rcx, sob_nil
 11580 000090BA [0100000000000000] 
 11581                                  .L_lambda_opt_stack_shrink_loop_0071:
 11582 000090C2 4839D6                  	cmp rsi, rdx
 11583 000090C5 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0071
 11584 000090C7 BF11000000              	mov rdi, 17 ; 1+8+8
 11585 000090CC E80C690000              	call malloc
 11586 000090D1 48894809                	mov SOB_PAIR_CDR(rax), rcx
 11587 000090D5 48F7DE                  	neg rsi
 11588 000090D8 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 11589 000090DC 48F7DE                  	neg rsi
 11590 000090DF 48894801                	mov SOB_PAIR_CAR(rax), rcx
 11591 000090E3 C60021                  	mov byte [rax], T_pair
 11592 000090E6 4889C1                  	mov rcx, rax
 11593 000090E9 48FFC6                  	inc rsi
 11594 000090EC EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0071
 11595                                  .L_lambda_opt_stack_shrink_loop_exit_0071:
 11596 000090EE 48890B                  	mov qword [rbx], rcx
 11597 000090F1 4883EB08                	sub rbx, 8
 11598 000090F5 4889E7                  	mov rdi, rsp
 11599 000090F8 4883C718                	add rdi, 24
 11600 000090FC BE04000000              	mov rsi, 4
 11601                                  .L_lambda_opt_stack_shrink_loop_0072:
 11602 00009101 4883FE00                	cmp rsi,0
 11603 00009105 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0072
 11604 00009107 488B0F                  	mov rcx, qword [rdi]
 11605 0000910A 48890B                  	mov [rbx], rcx
 11606 0000910D 48FFCE                  	dec rsi
 11607 00009110 4883EB08                	sub rbx, 8
 11608 00009114 4883EF08                	sub rdi, 8
 11609 00009118 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0072
 11610                                  .L_lambda_opt_stack_shrink_loop_exit_0072:
 11611 0000911A 4883C308                	add rbx, 8
 11612 0000911E 4889DC                  	mov rsp, rbx
 11613                                  .L_lambda_opt_stack_adjusted_0026:
 11614 00009121 C8000000                	enter 0, 0
 11615 00009125 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 11616 00009129 50                      	push rax
 11617 0000912A 6A01                    	push 1
 11618 0000912C 488B0425[00000000]      	mov rax, qword [free_var_0]
 11619                                  	assert_closure(rax)
    42 00009134 803805              <1>  cmp byte [%1], %2
    43 00009137 0F8594800000        <1>  jne L_error_incorrect_type
 11620 0000913D FF7001                  	push SOB_CLOSURE_ENV(rax)
 11621 00009140 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11622 00009143 483D[02000000]          	cmp rax, sob_boolean_false
 11623 00009149 7462                              	je .L_if_else_0095
 11624 0000914B 48B8-                             	mov rax, L_constants + 4
 11624 0000914D [0400000000000000] 
 11625 00009155 50                      	push rax
 11626 00009156 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11627 0000915A 50                      	push rax
 11628 0000915B 6A02                    	push 2
 11629 0000915D 488B4510                	mov rax, qword [rbp + 8 * 2]
 11630 00009161 488B00                  	mov rax, qword [rax + 8 * 0]
 11631 00009164 488B00                  	mov rax, qword [rax + 8 * 0]
 11632 00009167 488B00                  	mov rax, qword [rax]
 11633                                  	assert_closure(rax)
    42 0000916A 803805              <1>  cmp byte [%1], %2
    43 0000916D 0F855E800000        <1>  jne L_error_incorrect_type
 11634 00009173 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11635 00009176 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11636 00009179 FF7500                  	push qword [rbp] ; same the old rbp
 11637 0000917C BA05000000              	mov rdx, 2 + 3
 11638 00009181 488B4D00                	mov rcx, [rbp]
 11639 00009185 4889EF                  	mov rdi, rbp
 11640                                  .L_tc_recycle_frame_loop_012d:
 11641 00009188 4883FA00                	cmp rdx, 0
 11642 0000918C 7413                    	je .L_tc_recycle_frame_done_012d
 11643 0000918E 4883E908                	sub rcx, 8
 11644 00009192 4883EF08                	sub rdi, 8
 11645 00009196 488B37                  	mov rsi, [rdi]
 11646 00009199 488931                  	mov qword [rcx], rsi
 11647 0000919C 48FFCA                  	dec rdx
 11648 0000919F EBE7                    	jmp .L_tc_recycle_frame_loop_012d
 11649                                  .L_tc_recycle_frame_done_012d:
 11650 000091A1 5D                      	pop rbp ; restore the old rbp
 11651 000091A2 4889CC                  	mov rsp, rcx
 11652 000091A5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11653 000091A8 E993010000              	jmp .L_if_end_0095
 11654                                            .L_if_else_0095:
 11655 000091AD 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11656 000091B1 50                      	push rax
 11657 000091B2 6A01                    	push 1
 11658 000091B4 488B0425[08000000]      	mov rax, qword [free_var_1]
 11659                                  	assert_closure(rax)
    42 000091BC 803805              <1>  cmp byte [%1], %2
    43 000091BF 0F850C800000        <1>  jne L_error_incorrect_type
 11660 000091C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11661 000091C8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11662 000091CB 483D[02000000]          	cmp rax, sob_boolean_false
 11663 000091D1 0F8486000000                      	je .L_if_else_0093
 11664 000091D7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11665 000091DB 50                      	push rax
 11666 000091DC 6A01                    	push 1
 11667 000091DE 488B0425[88000000]      	mov rax, qword [free_var_17]
 11668                                  	assert_closure(rax)
    42 000091E6 803805              <1>  cmp byte [%1], %2
    43 000091E9 0F85E27F0000        <1>  jne L_error_incorrect_type
 11669 000091EF FF7001                  	push SOB_CLOSURE_ENV(rax)
 11670 000091F2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11671 000091F5 50                      	push rax
 11672 000091F6 6A01                    	push 1
 11673 000091F8 488B0425[00000000]      	mov rax, qword [free_var_0]
 11674                                  	assert_closure(rax)
    42 00009200 803805              <1>  cmp byte [%1], %2
    43 00009203 0F85C87F0000        <1>  jne L_error_incorrect_type
 11675 00009209 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11676 0000920C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11677 0000920F 483D[02000000]          	cmp rax, sob_boolean_false
 11678 00009215 743A                              	je .L_if_else_0092
 11679 00009217 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11680 0000921B 50                      	push rax
 11681 0000921C 6A01                    	push 1
 11682 0000921E 488B0425[80000000]      	mov rax, qword [free_var_16]
 11683                                  	assert_closure(rax)
    42 00009226 803805              <1>  cmp byte [%1], %2
    43 00009229 0F85A27F0000        <1>  jne L_error_incorrect_type
 11684 0000922F FF7001                  	push SOB_CLOSURE_ENV(rax)
 11685 00009232 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11686 00009235 50                      	push rax
 11687 00009236 6A01                    	push 1
 11688 00009238 488B0425[18000000]      	mov rax, qword [free_var_3]
 11689                                  	assert_closure(rax)
    42 00009240 803805              <1>  cmp byte [%1], %2
    43 00009243 0F85887F0000        <1>  jne L_error_incorrect_type
 11690 00009249 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11691 0000924C FF5009                  	call SOB_CLOSURE_CODE(rax)
 11692 0000924F EB0A                    	jmp .L_if_end_0092
 11693                                            .L_if_else_0092:
 11694 00009251 48B8-                             	mov rax, L_constants + 2
 11694 00009253 [0200000000000000] 
 11695                                  .L_if_end_0092:
 11696 0000925B EB0A                    	jmp .L_if_end_0093
 11697                                            .L_if_else_0093:
 11698 0000925D 48B8-                             	mov rax, L_constants + 2
 11698 0000925F [0200000000000000] 
 11699                                  .L_if_end_0093:
 11700 00009267 483D[02000000]          	cmp rax, sob_boolean_false
 11701 0000926D 7473                              	je .L_if_else_0094
 11702 0000926F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 11703 00009273 50                      	push rax
 11704 00009274 6A01                    	push 1
 11705 00009276 488B0425[80000000]      	mov rax, qword [free_var_16]
 11706                                  	assert_closure(rax)
    42 0000927E 803805              <1>  cmp byte [%1], %2
    43 00009281 0F854A7F0000        <1>  jne L_error_incorrect_type
 11707 00009287 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11708 0000928A FF5009                  	call SOB_CLOSURE_CODE(rax)
 11709 0000928D 50                      	push rax
 11710 0000928E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11711 00009292 50                      	push rax
 11712 00009293 6A02                    	push 2
 11713 00009295 488B4510                	mov rax, qword [rbp + 8 * 2]
 11714 00009299 488B00                  	mov rax, qword [rax + 8 * 0]
 11715 0000929C 488B00                  	mov rax, qword [rax + 8 * 0]
 11716 0000929F 488B00                  	mov rax, qword [rax]
 11717                                  	assert_closure(rax)
    42 000092A2 803805              <1>  cmp byte [%1], %2
    43 000092A5 0F85267F0000        <1>  jne L_error_incorrect_type
 11718 000092AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 11719 000092AE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11720 000092B1 FF7500                  	push qword [rbp] ; same the old rbp
 11721 000092B4 BA05000000              	mov rdx, 2 + 3
 11722 000092B9 488B4D00                	mov rcx, [rbp]
 11723 000092BD 4889EF                  	mov rdi, rbp
 11724                                  .L_tc_recycle_frame_loop_012e:
 11725 000092C0 4883FA00                	cmp rdx, 0
 11726 000092C4 7413                    	je .L_tc_recycle_frame_done_012e
 11727 000092C6 4883E908                	sub rcx, 8
 11728 000092CA 4883EF08                	sub rdi, 8
 11729 000092CE 488B37                  	mov rsi, [rdi]
 11730 000092D1 488931                  	mov qword [rcx], rsi
 11731 000092D4 48FFCA                  	dec rdx
 11732 000092D7 EBE7                    	jmp .L_tc_recycle_frame_loop_012e
 11733                                  .L_tc_recycle_frame_done_012e:
 11734 000092D9 5D                      	pop rbp ; restore the old rbp
 11735 000092DA 4889CC                  	mov rsp, rcx
 11736 000092DD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11737 000092E0 EB5E                    	jmp .L_if_end_0094
 11738                                            .L_if_else_0094:
 11739 000092E2 48B8-                             	mov rax, L_constants + 288
 11739 000092E4 [2001000000000000] 
 11740 000092EC 50                      	push rax
 11741 000092ED 48B8-                   	mov rax, L_constants + 279
 11741 000092EF [1701000000000000] 
 11742 000092F7 50                      	push rax
 11743 000092F8 6A02                    	push 2
 11744 000092FA 488B0425[30010000]      	mov rax, qword [free_var_38]
 11745                                  	assert_closure(rax)
    42 00009302 803805              <1>  cmp byte [%1], %2
    43 00009305 0F85C67E0000        <1>  jne L_error_incorrect_type
 11746 0000930B FF7001                  	push SOB_CLOSURE_ENV(rax)
 11747 0000930E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11748 00009311 FF7500                  	push qword [rbp] ; same the old rbp
 11749 00009314 BA05000000              	mov rdx, 2 + 3
 11750 00009319 488B4D00                	mov rcx, [rbp]
 11751 0000931D 4889EF                  	mov rdi, rbp
 11752                                  .L_tc_recycle_frame_loop_012f:
 11753 00009320 4883FA00                	cmp rdx, 0
 11754 00009324 7413                    	je .L_tc_recycle_frame_done_012f
 11755 00009326 4883E908                	sub rcx, 8
 11756 0000932A 4883EF08                	sub rdi, 8
 11757 0000932E 488B37                  	mov rsi, [rdi]
 11758 00009331 488931                  	mov qword [rcx], rsi
 11759 00009334 48FFCA                  	dec rdx
 11760 00009337 EBE7                    	jmp .L_tc_recycle_frame_loop_012f
 11761                                  .L_tc_recycle_frame_done_012f:
 11762 00009339 5D                      	pop rbp ; restore the old rbp
 11763 0000933A 4889CC                  	mov rsp, rcx
 11764 0000933D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11765                                  .L_if_end_0094:
 11766                                  .L_if_end_0095:
 11767 00009340 C9                      	leave
 11768 00009341 C22000                  	ret 8 * (2 + 2)
 11769                                  .L_lambda_opt_end_0026:	; new closure is in rax
 11770 00009344 C9                      	leave
 11771 00009345 C21800                  	ret 8 * (2 + 1)
 11772                                  .L_lambda_simple_end_00f5:	; new closure is in rax
 11773                                  	assert_closure(rax)
    42 00009348 803805              <1>  cmp byte [%1], %2
    43 0000934B 0F85807E0000        <1>  jne L_error_incorrect_type
 11774 00009351 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11775 00009354 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11776 00009357 48890425[58030000]      	mov qword [free_var_107], rax
 11777 0000935F 48B8-                   	mov rax, sob_void
 11777 00009361 [0000000000000000] 
 11778                                  
 11779 00009369 4889C7                  	mov rdi, rax
 11780 0000936C E87D660000              	call print_sexpr_if_not_void
 11781                                  
 11782 00009371 48B8-                   	mov rax, L_constants + 0
 11782 00009373 [0000000000000000] 
 11783 0000937B 48890425[60030000]      	mov qword [free_var_108], rax
 11784 00009383 48B8-                   	mov rax, sob_void
 11784 00009385 [0000000000000000] 
 11785                                  
 11786 0000938D 4889C7                  	mov rdi, rax
 11787 00009390 E859660000              	call print_sexpr_if_not_void
 11788                                  
 11789 00009395 48B8-                   	mov rax, L_constants + 0
 11789 00009397 [0000000000000000] 
 11790 0000939F 48890425[68030000]      	mov qword [free_var_109], rax
 11791 000093A7 48B8-                   	mov rax, sob_void
 11791 000093A9 [0000000000000000] 
 11792                                  
 11793 000093B1 4889C7                  	mov rdi, rax
 11794 000093B4 E835660000              	call print_sexpr_if_not_void
 11795                                  
 11796 000093B9 48B8-                   	mov rax, L_constants + 0
 11796 000093BB [0000000000000000] 
 11797 000093C3 48890425[70030000]      	mov qword [free_var_110], rax
 11798 000093CB 48B8-                   	mov rax, sob_void
 11798 000093CD [0000000000000000] 
 11799                                  
 11800 000093D5 4889C7                  	mov rdi, rax
 11801 000093D8 E811660000              	call print_sexpr_if_not_void
 11802                                  
 11803 000093DD 48B8-                   	mov rax, L_constants + 0
 11803 000093DF [0000000000000000] 
 11804 000093E7 48890425[78030000]      	mov qword [free_var_111], rax
 11805 000093EF 48B8-                   	mov rax, sob_void
 11805 000093F1 [0000000000000000] 
 11806                                  
 11807 000093F9 4889C7                  	mov rdi, rax
 11808 000093FC E8ED650000              	call print_sexpr_if_not_void
 11809                                  
 11810 00009401 48B8-                   	mov rax, L_constants + 0
 11810 00009403 [0000000000000000] 
 11811 0000940B 48890425[80030000]      	mov qword [free_var_112], rax
 11812 00009413 48B8-                   	mov rax, sob_void
 11812 00009415 [0000000000000000] 
 11813                                  
 11814 0000941D 4889C7                  	mov rdi, rax
 11815 00009420 E8C9650000              	call print_sexpr_if_not_void
 11816                                  
 11817 00009425 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11818 0000942A E8AE650000              	call malloc
 11819 0000942F 50                      	push rax
 11820 00009430 BF00000000              	mov rdi, 8 * 0	; new rib
 11821 00009435 E8A3650000              	call malloc
 11822 0000943A 50                      	push rax
 11823 0000943B BF08000000              	mov rdi, 8 * 1	; extended env
 11824 00009440 E898650000              	call malloc
 11825 00009445 488B7D10                	mov rdi, ENV
 11826 00009449 BE00000000              	mov rsi, 0
 11827 0000944E BA01000000              	mov rdx, 1
 11828                                  .L_lambda_simple_env_loop_00f8:	; ext_env[i + 1] <-- env[i]
 11829 00009453 4883FE00                	cmp rsi, 0
 11830 00009457 7410                    	je .L_lambda_simple_env_end_00f8
 11831 00009459 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11832 0000945D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11833 00009461 48FFC6                  	inc rsi
 11834 00009464 48FFC2                  	inc rdx
 11835 00009467 EBEA                    	jmp .L_lambda_simple_env_loop_00f8
 11836                                  .L_lambda_simple_env_end_00f8:
 11837 00009469 5B                      	pop rbx
 11838 0000946A BE00000000              	mov rsi, 0
 11839                                  .L_lambda_simple_params_loop_00f8:	; copy params
 11840 0000946F 4883FE00                	cmp rsi, 0
 11841 00009473 740E                    	je .L_lambda_simple_params_end_00f8
 11842 00009475 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11843 0000947A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11844 0000947E 48FFC6                  	inc rsi
 11845 00009481 EBEC                    	jmp .L_lambda_simple_params_loop_00f8
 11846                                  .L_lambda_simple_params_end_00f8:
 11847 00009483 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11848 00009486 4889C3                  	mov rbx, rax
 11849 00009489 58                      	pop rax
 11850 0000948A C60005                  	mov byte [rax], T_closure
 11851 0000948D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11852 00009491 48C74009[9E940000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f8
 11853 00009499 E9E9010000              	jmp .L_lambda_simple_end_00f8
 11854                                  .L_lambda_simple_code_00f8:	; lambda-simple body
 11855 0000949E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 11856 000094A4 740B                    	je .L_lambda_simple_arity_check_ok_00f8
 11857 000094A6 FF742410                	push qword [rsp + 8 * 2]
 11858 000094AA 6A01                    	push 1
 11859 000094AC E9E5640000              	jmp L_error_incorrect_arity_simple
 11860                                  .L_lambda_simple_arity_check_ok_00f8:
 11861 000094B1 C8000000                	enter 0, 0
 11862 000094B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 11863 000094BA E81E650000              	call malloc
 11864 000094BF 50                      	push rax
 11865 000094C0 BF08000000              	mov rdi, 8 * 1	; new rib
 11866 000094C5 E813650000              	call malloc
 11867 000094CA 50                      	push rax
 11868 000094CB BF10000000              	mov rdi, 8 * 2	; extended env
 11869 000094D0 E808650000              	call malloc
 11870 000094D5 488B7D10                	mov rdi, ENV
 11871 000094D9 BE00000000              	mov rsi, 0
 11872 000094DE BA01000000              	mov rdx, 1
 11873                                  .L_lambda_opt_env_loop_0027:	; ext_env[i + 1] <-- env[i]
 11874 000094E3 4883FE01                	cmp rsi, 1
 11875 000094E7 7410                    	je .L_lambda_opt_env_end_0027
 11876 000094E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 11877 000094ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 11878 000094F1 48FFC6                  	inc rsi
 11879 000094F4 48FFC2                  	inc rdx
 11880 000094F7 EBEA                    	jmp .L_lambda_opt_env_loop_0027
 11881                                  .L_lambda_opt_env_end_0027:
 11882 000094F9 5B                      	pop rbx
 11883 000094FA BE00000000              	mov rsi, 0
 11884                                  .L_lambda_opt_params_loop_0027:	; copy params
 11885 000094FF 4883FE01                	cmp rsi, 1
 11886 00009503 740E                    	je .L_lambda_opt_params_end_0027
 11887 00009505 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 11888 0000950A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 11889 0000950E 48FFC6                  	inc rsi
 11890 00009511 EBEC                    	jmp .L_lambda_opt_params_loop_0027
 11891                                  .L_lambda_opt_params_end_0027:
 11892 00009513 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 11893 00009516 4889C3                  	mov rbx, rax
 11894 00009519 58                      	pop rax
 11895 0000951A C60005                  	mov byte [rax], T_closure
 11896 0000951D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 11897 00009521 48C74009[2E950000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0027
 11898 00009529 E955010000              	jmp .L_lambda_opt_end_0027
 11899                                  .L_lambda_opt_code_0027:	; lambda-opt body
 11900 0000952E 48837C241000            	cmp qword [rsp + 8 * 2], 0
 11901 00009534 740D                    	je .L_lambda_opt_arity_check_exact_0027
 11902 00009536 7F43                    	jg .L_lambda_opt_arity_check_more_0027
 11903 00009538 FF742410                	push qword [rsp + 8 * 2]
 11904 0000953C 6A00                    	push 0
 11905 0000953E E967640000              	jmp L_error_incorrect_arity_opt
 11906                                  .L_lambda_opt_arity_check_exact_0027:
 11907 00009543 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 11908 0000954C BA03000000              	mov rdx, 3
 11909 00009551 FF3424                  	push qword [rsp]
 11910 00009554 BE01000000              	mov rsi, 1
 11911                                  .L_lambda_opt_stack_shrink_loop_0073:
 11912 00009559 4839D6                  	cmp rsi, rdx
 11913 0000955C 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0073
 11914 0000955E 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 11915 00009563 488B0B                  	mov rcx, [rbx]
 11916 00009566 48894BF8                	mov qword [rbx - 8], rcx
 11917 0000956A 48FFC6                  	inc rsi
 11918 0000956D EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0073
 11919                                  .L_lambda_opt_stack_shrink_loop_exit_0073:
 11920 0000956F 48C703[01000000]        	mov qword [rbx], sob_nil
 11921 00009576 E985000000              	jmp .L_lambda_opt_stack_adjusted_0027
 11922                                  .L_lambda_opt_arity_check_more_0027:
 11923 0000957B 488B542410              	mov rdx, qword [rsp + 8 * 2]
 11924 00009580 4883EA00                	sub rdx, 0
 11925 00009584 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 11926 0000958D BE00000000              	mov rsi, 0
 11927 00009592 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
 11928 00009597 48B9-                   	mov rcx, sob_nil
 11928 00009599 [0100000000000000] 
 11929                                  .L_lambda_opt_stack_shrink_loop_0074:
 11930 000095A1 4839D6                  	cmp rsi, rdx
 11931 000095A4 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0074
 11932 000095A6 BF11000000              	mov rdi, 17 ; 1+8+8
 11933 000095AB E82D640000              	call malloc
 11934 000095B0 48894809                	mov SOB_PAIR_CDR(rax), rcx
 11935 000095B4 48F7DE                  	neg rsi
 11936 000095B7 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 11937 000095BB 48F7DE                  	neg rsi
 11938 000095BE 48894801                	mov SOB_PAIR_CAR(rax), rcx
 11939 000095C2 C60021                  	mov byte [rax], T_pair
 11940 000095C5 4889C1                  	mov rcx, rax
 11941 000095C8 48FFC6                  	inc rsi
 11942 000095CB EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0074
 11943                                  .L_lambda_opt_stack_shrink_loop_exit_0074:
 11944 000095CD 48890B                  	mov qword [rbx], rcx
 11945 000095D0 4883EB08                	sub rbx, 8
 11946 000095D4 4889E7                  	mov rdi, rsp
 11947 000095D7 4883C710                	add rdi, 16
 11948 000095DB BE03000000              	mov rsi, 3
 11949                                  .L_lambda_opt_stack_shrink_loop_0075:
 11950 000095E0 4883FE00                	cmp rsi,0
 11951 000095E4 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0075
 11952 000095E6 488B0F                  	mov rcx, qword [rdi]
 11953 000095E9 48890B                  	mov [rbx], rcx
 11954 000095EC 48FFCE                  	dec rsi
 11955 000095EF 4883EB08                	sub rbx, 8
 11956 000095F3 4883EF08                	sub rdi, 8
 11957 000095F7 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0075
 11958                                  .L_lambda_opt_stack_shrink_loop_exit_0075:
 11959 000095F9 4883C308                	add rbx, 8
 11960 000095FD 4889DC                  	mov rsp, rbx
 11961                                  .L_lambda_opt_stack_adjusted_0027:
 11962 00009600 C8000000                	enter 0, 0
 11963 00009604 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 11964 00009608 50                      	push rax
 11965 00009609 488B0425[C0000000]      	mov rax, qword [free_var_24]
 11966 00009611 50                      	push rax
 11967 00009612 6A02                    	push 2
 11968 00009614 488B0425[D8020000]      	mov rax, qword [free_var_91]
 11969                                  	assert_closure(rax)
    42 0000961C 803805              <1>  cmp byte [%1], %2
    43 0000961F 0F85AC7B0000        <1>  jne L_error_incorrect_type
 11970 00009625 FF7001                  	push SOB_CLOSURE_ENV(rax)
 11971 00009628 FF5009                  	call SOB_CLOSURE_CODE(rax)
 11972 0000962B 50                      	push rax
 11973 0000962C 488B4510                	mov rax, qword [rbp + 8 * 2]
 11974 00009630 488B00                  	mov rax, qword [rax + 8 * 0]
 11975 00009633 488B00                  	mov rax, qword [rax + 8 * 0]
 11976 00009636 50                      	push rax
 11977 00009637 6A02                    	push 2
 11978 00009639 488B0425[C8020000]      	mov rax, qword [free_var_89]
 11979                                  	assert_closure(rax)
    42 00009641 803805              <1>  cmp byte [%1], %2
    43 00009644 0F85877B0000        <1>  jne L_error_incorrect_type
 11980 0000964A FF7001                  	push SOB_CLOSURE_ENV(rax)
 11981 0000964D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 11982 00009650 FF7500                  	push qword [rbp] ; same the old rbp
 11983 00009653 BA05000000              	mov rdx, 2 + 3
 11984 00009658 488B4D00                	mov rcx, [rbp]
 11985 0000965C 4889EF                  	mov rdi, rbp
 11986                                  .L_tc_recycle_frame_loop_0130:
 11987 0000965F 4883FA00                	cmp rdx, 0
 11988 00009663 7413                    	je .L_tc_recycle_frame_done_0130
 11989 00009665 4883E908                	sub rcx, 8
 11990 00009669 4883EF08                	sub rdi, 8
 11991 0000966D 488B37                  	mov rsi, [rdi]
 11992 00009670 488931                  	mov qword [rcx], rsi
 11993 00009673 48FFCA                  	dec rdx
 11994 00009676 EBE7                    	jmp .L_tc_recycle_frame_loop_0130
 11995                                  .L_tc_recycle_frame_done_0130:
 11996 00009678 5D                      	pop rbp ; restore the old rbp
 11997 00009679 4889CC                  	mov rsp, rcx
 11998 0000967C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 11999 0000967F C9                      	leave
 12000 00009680 C21800                  	ret 8 * (2 + 1)
 12001                                  .L_lambda_opt_end_0027:	; new closure is in rax
 12002 00009683 C9                      	leave
 12003 00009684 C21800                  	ret 8 * (2 + 1)
 12004                                  .L_lambda_simple_end_00f8:	; new closure is in rax
 12005 00009687 50                      	push rax
 12006 00009688 6A01                    	push 1
 12007 0000968A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12008 0000968F E849630000              	call malloc
 12009 00009694 50                      	push rax
 12010 00009695 BF00000000              	mov rdi, 8 * 0	; new rib
 12011 0000969A E83E630000              	call malloc
 12012 0000969F 50                      	push rax
 12013 000096A0 BF08000000              	mov rdi, 8 * 1	; extended env
 12014 000096A5 E833630000              	call malloc
 12015 000096AA 488B7D10                	mov rdi, ENV
 12016 000096AE BE00000000              	mov rsi, 0
 12017 000096B3 BA01000000              	mov rdx, 1
 12018                                  .L_lambda_simple_env_loop_00f7:	; ext_env[i + 1] <-- env[i]
 12019 000096B8 4883FE00                	cmp rsi, 0
 12020 000096BC 7410                    	je .L_lambda_simple_env_end_00f7
 12021 000096BE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12022 000096C2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12023 000096C6 48FFC6                  	inc rsi
 12024 000096C9 48FFC2                  	inc rdx
 12025 000096CC EBEA                    	jmp .L_lambda_simple_env_loop_00f7
 12026                                  .L_lambda_simple_env_end_00f7:
 12027 000096CE 5B                      	pop rbx
 12028 000096CF BE00000000              	mov rsi, 0
 12029                                  .L_lambda_simple_params_loop_00f7:	; copy params
 12030 000096D4 4883FE00                	cmp rsi, 0
 12031 000096D8 740E                    	je .L_lambda_simple_params_end_00f7
 12032 000096DA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12033 000096DF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12034 000096E3 48FFC6                  	inc rsi
 12035 000096E6 EBEC                    	jmp .L_lambda_simple_params_loop_00f7
 12036                                  .L_lambda_simple_params_end_00f7:
 12037 000096E8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12038 000096EB 4889C3                  	mov rbx, rax
 12039 000096EE 58                      	pop rax
 12040 000096EF C60005                  	mov byte [rax], T_closure
 12041 000096F2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12042 000096F6 48C74009[03970000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f7
 12043 000096FE E90B010000              	jmp .L_lambda_simple_end_00f7
 12044                                  .L_lambda_simple_code_00f7:	; lambda-simple body
 12045 00009703 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12046 00009709 740B                    	je .L_lambda_simple_arity_check_ok_00f7
 12047 0000970B FF742410                	push qword [rsp + 8 * 2]
 12048 0000970F 6A01                    	push 1
 12049 00009711 E980620000              	jmp L_error_incorrect_arity_simple
 12050                                  .L_lambda_simple_arity_check_ok_00f7:
 12051 00009716 C8000000                	enter 0, 0
 12052 0000971A 488B0425[30030000]      	mov rax, qword [free_var_102]
 12053 00009722 50                      	push rax
 12054 00009723 6A01                    	push 1
 12055 00009725 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12056                                  	assert_closure(rax)
    42 00009729 803805              <1>  cmp byte [%1], %2
    43 0000972C 0F859F7A0000        <1>  jne L_error_incorrect_type
 12057 00009732 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12058 00009735 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12059 00009738 48890425[60030000]      	mov qword [free_var_108], rax
 12060 00009740 48B8-                   	mov rax, sob_void
 12060 00009742 [0000000000000000] 
 12061                                  
 12062 0000974A 488B0425[38030000]      	mov rax, qword [free_var_103]
 12063 00009752 50                      	push rax
 12064 00009753 6A01                    	push 1
 12065 00009755 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12066                                  	assert_closure(rax)
    42 00009759 803805              <1>  cmp byte [%1], %2
    43 0000975C 0F856F7A0000        <1>  jne L_error_incorrect_type
 12067 00009762 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12068 00009765 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12069 00009768 48890425[68030000]      	mov qword [free_var_109], rax
 12070 00009770 48B8-                   	mov rax, sob_void
 12070 00009772 [0000000000000000] 
 12071                                  
 12072 0000977A 488B0425[50030000]      	mov rax, qword [free_var_106]
 12073 00009782 50                      	push rax
 12074 00009783 6A01                    	push 1
 12075 00009785 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12076                                  	assert_closure(rax)
    42 00009789 803805              <1>  cmp byte [%1], %2
    43 0000978C 0F853F7A0000        <1>  jne L_error_incorrect_type
 12077 00009792 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12078 00009795 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12079 00009798 48890425[70030000]      	mov qword [free_var_110], rax
 12080 000097A0 48B8-                   	mov rax, sob_void
 12080 000097A2 [0000000000000000] 
 12081                                  
 12082 000097AA 488B0425[40030000]      	mov rax, qword [free_var_104]
 12083 000097B2 50                      	push rax
 12084 000097B3 6A01                    	push 1
 12085 000097B5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12086                                  	assert_closure(rax)
    42 000097B9 803805              <1>  cmp byte [%1], %2
    43 000097BC 0F850F7A0000        <1>  jne L_error_incorrect_type
 12087 000097C2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12088 000097C5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12089 000097C8 48890425[78030000]      	mov qword [free_var_111], rax
 12090 000097D0 48B8-                   	mov rax, sob_void
 12090 000097D2 [0000000000000000] 
 12091                                  
 12092 000097DA 488B0425[48030000]      	mov rax, qword [free_var_105]
 12093 000097E2 50                      	push rax
 12094 000097E3 6A01                    	push 1
 12095 000097E5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12096                                  	assert_closure(rax)
    42 000097E9 803805              <1>  cmp byte [%1], %2
    43 000097EC 0F85DF790000        <1>  jne L_error_incorrect_type
 12097 000097F2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12098 000097F5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12099 000097F8 48890425[80030000]      	mov qword [free_var_112], rax
 12100 00009800 48B8-                   	mov rax, sob_void
 12100 00009802 [0000000000000000] 
 12101 0000980A C9                      	leave
 12102 0000980B C21800                  	ret 8 * (2 + 1)
 12103                                  .L_lambda_simple_end_00f7:	; new closure is in rax
 12104                                  	assert_closure(rax)
    42 0000980E 803805              <1>  cmp byte [%1], %2
    43 00009811 0F85BA790000        <1>  jne L_error_incorrect_type
 12105 00009817 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12106 0000981A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12107                                  
 12108 0000981D 4889C7                  	mov rdi, rax
 12109 00009820 E8C9610000              	call print_sexpr_if_not_void
 12110                                  
 12111 00009825 48B8-                   	mov rax, L_constants + 0
 12111 00009827 [0000000000000000] 
 12112 0000982F 48890425[88030000]      	mov qword [free_var_113], rax
 12113 00009837 48B8-                   	mov rax, sob_void
 12113 00009839 [0000000000000000] 
 12114                                  
 12115 00009841 4889C7                  	mov rdi, rax
 12116 00009844 E8A5610000              	call print_sexpr_if_not_void
 12117                                  
 12118 00009849 48B8-                   	mov rax, L_constants + 0
 12118 0000984B [0000000000000000] 
 12119 00009853 48890425[90030000]      	mov qword [free_var_114], rax
 12120 0000985B 48B8-                   	mov rax, sob_void
 12120 0000985D [0000000000000000] 
 12121                                  
 12122 00009865 4889C7                  	mov rdi, rax
 12123 00009868 E881610000              	call print_sexpr_if_not_void
 12124                                  
 12125 0000986D 48B8-                   	mov rax, L_constants + 342
 12125 0000986F [5601000000000000] 
 12126 00009877 50                      	push rax
 12127 00009878 6A01                    	push 1
 12128 0000987A 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12129                                  	assert_closure(rax)
    42 00009882 803805              <1>  cmp byte [%1], %2
    43 00009885 0F8546790000        <1>  jne L_error_incorrect_type
 12130 0000988B FF7001                  	push SOB_CLOSURE_ENV(rax)
 12131 0000988E FF5009                  	call SOB_CLOSURE_CODE(rax)
 12132 00009891 50                      	push rax
 12133 00009892 48B8-                   	mov rax, L_constants + 346
 12133 00009894 [5A01000000000000] 
 12134 0000989C 50                      	push rax
 12135 0000989D 6A01                    	push 1
 12136 0000989F 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12137                                  	assert_closure(rax)
    42 000098A7 803805              <1>  cmp byte [%1], %2
    43 000098AA 0F8521790000        <1>  jne L_error_incorrect_type
 12138 000098B0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12139 000098B3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12140 000098B6 50                      	push rax
 12141 000098B7 6A02                    	push 2
 12142 000098B9 488B0425[10030000]      	mov rax, qword [free_var_98]
 12143                                  	assert_closure(rax)
    42 000098C1 803805              <1>  cmp byte [%1], %2
    43 000098C4 0F8507790000        <1>  jne L_error_incorrect_type
 12144 000098CA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12145 000098CD FF5009                  	call SOB_CLOSURE_CODE(rax)
 12146 000098D0 50                      	push rax
 12147 000098D1 6A01                    	push 1
 12148 000098D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12149 000098D8 E800610000              	call malloc
 12150 000098DD 50                      	push rax
 12151 000098DE BF00000000              	mov rdi, 8 * 0	; new rib
 12152 000098E3 E8F5600000              	call malloc
 12153 000098E8 50                      	push rax
 12154 000098E9 BF08000000              	mov rdi, 8 * 1	; extended env
 12155 000098EE E8EA600000              	call malloc
 12156 000098F3 488B7D10                	mov rdi, ENV
 12157 000098F7 BE00000000              	mov rsi, 0
 12158 000098FC BA01000000              	mov rdx, 1
 12159                                  .L_lambda_simple_env_loop_00f9:	; ext_env[i + 1] <-- env[i]
 12160 00009901 4883FE00                	cmp rsi, 0
 12161 00009905 7410                    	je .L_lambda_simple_env_end_00f9
 12162 00009907 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12163 0000990B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12164 0000990F 48FFC6                  	inc rsi
 12165 00009912 48FFC2                  	inc rdx
 12166 00009915 EBEA                    	jmp .L_lambda_simple_env_loop_00f9
 12167                                  .L_lambda_simple_env_end_00f9:
 12168 00009917 5B                      	pop rbx
 12169 00009918 BE00000000              	mov rsi, 0
 12170                                  .L_lambda_simple_params_loop_00f9:	; copy params
 12171 0000991D 4883FE00                	cmp rsi, 0
 12172 00009921 740E                    	je .L_lambda_simple_params_end_00f9
 12173 00009923 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12174 00009928 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12175 0000992C 48FFC6                  	inc rsi
 12176 0000992F EBEC                    	jmp .L_lambda_simple_params_loop_00f9
 12177                                  .L_lambda_simple_params_end_00f9:
 12178 00009931 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12179 00009934 4889C3                  	mov rbx, rax
 12180 00009937 58                      	pop rax
 12181 00009938 C60005                  	mov byte [rax], T_closure
 12182 0000993B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12183 0000993F 48C74009[4C990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00f9
 12184 00009947 E90B030000              	jmp .L_lambda_simple_end_00f9
 12185                                  .L_lambda_simple_code_00f9:	; lambda-simple body
 12186 0000994C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12187 00009952 740B                    	je .L_lambda_simple_arity_check_ok_00f9
 12188 00009954 FF742410                	push qword [rsp + 8 * 2]
 12189 00009958 6A01                    	push 1
 12190 0000995A E937600000              	jmp L_error_incorrect_arity_simple
 12191                                  .L_lambda_simple_arity_check_ok_00f9:
 12192 0000995F C8000000                	enter 0, 0
 12193 00009963 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12194 00009968 E870600000              	call malloc
 12195 0000996D 50                      	push rax
 12196 0000996E BF08000000              	mov rdi, 8 * 1	; new rib
 12197 00009973 E865600000              	call malloc
 12198 00009978 50                      	push rax
 12199 00009979 BF10000000              	mov rdi, 8 * 2	; extended env
 12200 0000997E E85A600000              	call malloc
 12201 00009983 488B7D10                	mov rdi, ENV
 12202 00009987 BE00000000              	mov rsi, 0
 12203 0000998C BA01000000              	mov rdx, 1
 12204                                  .L_lambda_simple_env_loop_00fa:	; ext_env[i + 1] <-- env[i]
 12205 00009991 4883FE01                	cmp rsi, 1
 12206 00009995 7410                    	je .L_lambda_simple_env_end_00fa
 12207 00009997 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12208 0000999B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12209 0000999F 48FFC6                  	inc rsi
 12210 000099A2 48FFC2                  	inc rdx
 12211 000099A5 EBEA                    	jmp .L_lambda_simple_env_loop_00fa
 12212                                  .L_lambda_simple_env_end_00fa:
 12213 000099A7 5B                      	pop rbx
 12214 000099A8 BE00000000              	mov rsi, 0
 12215                                  .L_lambda_simple_params_loop_00fa:	; copy params
 12216 000099AD 4883FE01                	cmp rsi, 1
 12217 000099B1 740E                    	je .L_lambda_simple_params_end_00fa
 12218 000099B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12219 000099B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12220 000099BC 48FFC6                  	inc rsi
 12221 000099BF EBEC                    	jmp .L_lambda_simple_params_loop_00fa
 12222                                  .L_lambda_simple_params_end_00fa:
 12223 000099C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12224 000099C4 4889C3                  	mov rbx, rax
 12225 000099C7 58                      	pop rax
 12226 000099C8 C60005                  	mov byte [rax], T_closure
 12227 000099CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12228 000099CF 48C74009[DC990000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fa
 12229 000099D7 E9ED000000              	jmp .L_lambda_simple_end_00fa
 12230                                  .L_lambda_simple_code_00fa:	; lambda-simple body
 12231 000099DC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12232 000099E2 740B                    	je .L_lambda_simple_arity_check_ok_00fa
 12233 000099E4 FF742410                	push qword [rsp + 8 * 2]
 12234 000099E8 6A01                    	push 1
 12235 000099EA E9A75F0000              	jmp L_error_incorrect_arity_simple
 12236                                  .L_lambda_simple_arity_check_ok_00fa:
 12237 000099EF C8000000                	enter 0, 0
 12238 000099F3 48B8-                   	mov rax, L_constants + 344
 12238 000099F5 [5801000000000000] 
 12239 000099FD 50                      	push rax
 12240 000099FE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12241 00009A02 50                      	push rax
 12242 00009A03 48B8-                   	mov rax, L_constants + 342
 12242 00009A05 [5601000000000000] 
 12243 00009A0D 50                      	push rax
 12244 00009A0E 6A03                    	push 3
 12245 00009A10 488B0425[68030000]      	mov rax, qword [free_var_109]
 12246                                  	assert_closure(rax)
    42 00009A18 803805              <1>  cmp byte [%1], %2
    43 00009A1B 0F85B0770000        <1>  jne L_error_incorrect_type
 12247 00009A21 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12248 00009A24 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12249 00009A27 483D[02000000]          	cmp rax, sob_boolean_false
 12250 00009A2D 0F848E000000                      	je .L_if_else_0096
 12251 00009A33 488B4510                          	mov rax, qword [rbp + 8 * 2]
 12252 00009A37 488B00                  	mov rax, qword [rax + 8 * 0]
 12253 00009A3A 488B00                  	mov rax, qword [rax + 8 * 0]
 12254 00009A3D 50                      	push rax
 12255 00009A3E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12256 00009A42 50                      	push rax
 12257 00009A43 6A01                    	push 1
 12258 00009A45 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12259                                  	assert_closure(rax)
    42 00009A4D 803805              <1>  cmp byte [%1], %2
    43 00009A50 0F857B770000        <1>  jne L_error_incorrect_type
 12260 00009A56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12261 00009A59 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12262 00009A5C 50                      	push rax
 12263 00009A5D 6A02                    	push 2
 12264 00009A5F 488B0425[08030000]      	mov rax, qword [free_var_97]
 12265                                  	assert_closure(rax)
    42 00009A67 803805              <1>  cmp byte [%1], %2
    43 00009A6A 0F8561770000        <1>  jne L_error_incorrect_type
 12266 00009A70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12267 00009A73 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12268 00009A76 50                      	push rax
 12269 00009A77 6A01                    	push 1
 12270 00009A79 488B0425[C8000000]      	mov rax, qword [free_var_25]
 12271                                  	assert_closure(rax)
    42 00009A81 803805              <1>  cmp byte [%1], %2
    43 00009A84 0F8547770000        <1>  jne L_error_incorrect_type
 12272 00009A8A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12273 00009A8D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12274 00009A90 FF7500                  	push qword [rbp] ; same the old rbp
 12275 00009A93 BA04000000              	mov rdx, 1 + 3
 12276 00009A98 488B4D00                	mov rcx, [rbp]
 12277 00009A9C 4889EF                  	mov rdi, rbp
 12278                                  .L_tc_recycle_frame_loop_0131:
 12279 00009A9F 4883FA00                	cmp rdx, 0
 12280 00009AA3 7413                    	je .L_tc_recycle_frame_done_0131
 12281 00009AA5 4883E908                	sub rcx, 8
 12282 00009AA9 4883EF08                	sub rdi, 8
 12283 00009AAD 488B37                  	mov rsi, [rdi]
 12284 00009AB0 488931                  	mov qword [rcx], rsi
 12285 00009AB3 48FFCA                  	dec rdx
 12286 00009AB6 EBE7                    	jmp .L_tc_recycle_frame_loop_0131
 12287                                  .L_tc_recycle_frame_done_0131:
 12288 00009AB8 5D                      	pop rbp ; restore the old rbp
 12289 00009AB9 4889CC                  	mov rsp, rcx
 12290 00009ABC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12291 00009ABF EB04                    	jmp .L_if_end_0096
 12292                                            .L_if_else_0096:
 12293 00009AC1 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 12294                                  .L_if_end_0096:
 12295 00009AC5 C9                      	leave
 12296 00009AC6 C21800                  	ret 8 * (2 + 1)
 12297                                  .L_lambda_simple_end_00fa:	; new closure is in rax
 12298 00009AC9 48890425[88030000]      	mov qword [free_var_113], rax
 12299 00009AD1 48B8-                   	mov rax, sob_void
 12299 00009AD3 [0000000000000000] 
 12300                                  
 12301 00009ADB BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12302 00009AE0 E8F85E0000              	call malloc
 12303 00009AE5 50                      	push rax
 12304 00009AE6 BF08000000              	mov rdi, 8 * 1	; new rib
 12305 00009AEB E8ED5E0000              	call malloc
 12306 00009AF0 50                      	push rax
 12307 00009AF1 BF10000000              	mov rdi, 8 * 2	; extended env
 12308 00009AF6 E8E25E0000              	call malloc
 12309 00009AFB 488B7D10                	mov rdi, ENV
 12310 00009AFF BE00000000              	mov rsi, 0
 12311 00009B04 BA01000000              	mov rdx, 1
 12312                                  .L_lambda_simple_env_loop_00fb:	; ext_env[i + 1] <-- env[i]
 12313 00009B09 4883FE01                	cmp rsi, 1
 12314 00009B0D 7410                    	je .L_lambda_simple_env_end_00fb
 12315 00009B0F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12316 00009B13 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12317 00009B17 48FFC6                  	inc rsi
 12318 00009B1A 48FFC2                  	inc rdx
 12319 00009B1D EBEA                    	jmp .L_lambda_simple_env_loop_00fb
 12320                                  .L_lambda_simple_env_end_00fb:
 12321 00009B1F 5B                      	pop rbx
 12322 00009B20 BE00000000              	mov rsi, 0
 12323                                  .L_lambda_simple_params_loop_00fb:	; copy params
 12324 00009B25 4883FE01                	cmp rsi, 1
 12325 00009B29 740E                    	je .L_lambda_simple_params_end_00fb
 12326 00009B2B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12327 00009B30 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12328 00009B34 48FFC6                  	inc rsi
 12329 00009B37 EBEC                    	jmp .L_lambda_simple_params_loop_00fb
 12330                                  .L_lambda_simple_params_end_00fb:
 12331 00009B39 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12332 00009B3C 4889C3                  	mov rbx, rax
 12333 00009B3F 58                      	pop rax
 12334 00009B40 C60005                  	mov byte [rax], T_closure
 12335 00009B43 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12336 00009B47 48C74009[549B0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fb
 12337 00009B4F E9ED000000              	jmp .L_lambda_simple_end_00fb
 12338                                  .L_lambda_simple_code_00fb:	; lambda-simple body
 12339 00009B54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12340 00009B5A 740B                    	je .L_lambda_simple_arity_check_ok_00fb
 12341 00009B5C FF742410                	push qword [rsp + 8 * 2]
 12342 00009B60 6A01                    	push 1
 12343 00009B62 E92F5E0000              	jmp L_error_incorrect_arity_simple
 12344                                  .L_lambda_simple_arity_check_ok_00fb:
 12345 00009B67 C8000000                	enter 0, 0
 12346 00009B6B 48B8-                   	mov rax, L_constants + 348
 12346 00009B6D [5C01000000000000] 
 12347 00009B75 50                      	push rax
 12348 00009B76 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12349 00009B7A 50                      	push rax
 12350 00009B7B 48B8-                   	mov rax, L_constants + 346
 12350 00009B7D [5A01000000000000] 
 12351 00009B85 50                      	push rax
 12352 00009B86 6A03                    	push 3
 12353 00009B88 488B0425[68030000]      	mov rax, qword [free_var_109]
 12354                                  	assert_closure(rax)
    42 00009B90 803805              <1>  cmp byte [%1], %2
    43 00009B93 0F8538760000        <1>  jne L_error_incorrect_type
 12355 00009B99 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12356 00009B9C FF5009                  	call SOB_CLOSURE_CODE(rax)
 12357 00009B9F 483D[02000000]          	cmp rax, sob_boolean_false
 12358 00009BA5 0F848E000000                      	je .L_if_else_0097
 12359 00009BAB 488B4510                          	mov rax, qword [rbp + 8 * 2]
 12360 00009BAF 488B00                  	mov rax, qword [rax + 8 * 0]
 12361 00009BB2 488B00                  	mov rax, qword [rax + 8 * 0]
 12362 00009BB5 50                      	push rax
 12363 00009BB6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12364 00009BBA 50                      	push rax
 12365 00009BBB 6A01                    	push 1
 12366 00009BBD 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12367                                  	assert_closure(rax)
    42 00009BC5 803805              <1>  cmp byte [%1], %2
    43 00009BC8 0F8503760000        <1>  jne L_error_incorrect_type
 12368 00009BCE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12369 00009BD1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12370 00009BD4 50                      	push rax
 12371 00009BD5 6A02                    	push 2
 12372 00009BD7 488B0425[10030000]      	mov rax, qword [free_var_98]
 12373                                  	assert_closure(rax)
    42 00009BDF 803805              <1>  cmp byte [%1], %2
    43 00009BE2 0F85E9750000        <1>  jne L_error_incorrect_type
 12374 00009BE8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12375 00009BEB FF5009                  	call SOB_CLOSURE_CODE(rax)
 12376 00009BEE 50                      	push rax
 12377 00009BEF 6A01                    	push 1
 12378 00009BF1 488B0425[C8000000]      	mov rax, qword [free_var_25]
 12379                                  	assert_closure(rax)
    42 00009BF9 803805              <1>  cmp byte [%1], %2
    43 00009BFC 0F85CF750000        <1>  jne L_error_incorrect_type
 12380 00009C02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12381 00009C05 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12382 00009C08 FF7500                  	push qword [rbp] ; same the old rbp
 12383 00009C0B BA04000000              	mov rdx, 1 + 3
 12384 00009C10 488B4D00                	mov rcx, [rbp]
 12385 00009C14 4889EF                  	mov rdi, rbp
 12386                                  .L_tc_recycle_frame_loop_0132:
 12387 00009C17 4883FA00                	cmp rdx, 0
 12388 00009C1B 7413                    	je .L_tc_recycle_frame_done_0132
 12389 00009C1D 4883E908                	sub rcx, 8
 12390 00009C21 4883EF08                	sub rdi, 8
 12391 00009C25 488B37                  	mov rsi, [rdi]
 12392 00009C28 488931                  	mov qword [rcx], rsi
 12393 00009C2B 48FFCA                  	dec rdx
 12394 00009C2E EBE7                    	jmp .L_tc_recycle_frame_loop_0132
 12395                                  .L_tc_recycle_frame_done_0132:
 12396 00009C30 5D                      	pop rbp ; restore the old rbp
 12397 00009C31 4889CC                  	mov rsp, rcx
 12398 00009C34 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12399 00009C37 EB04                    	jmp .L_if_end_0097
 12400                                            .L_if_else_0097:
 12401 00009C39 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 12402                                  .L_if_end_0097:
 12403 00009C3D C9                      	leave
 12404 00009C3E C21800                  	ret 8 * (2 + 1)
 12405                                  .L_lambda_simple_end_00fb:	; new closure is in rax
 12406 00009C41 48890425[90030000]      	mov qword [free_var_114], rax
 12407 00009C49 48B8-                   	mov rax, sob_void
 12407 00009C4B [0000000000000000] 
 12408 00009C53 C9                      	leave
 12409 00009C54 C21800                  	ret 8 * (2 + 1)
 12410                                  .L_lambda_simple_end_00f9:	; new closure is in rax
 12411                                  	assert_closure(rax)
    42 00009C57 803805              <1>  cmp byte [%1], %2
    43 00009C5A 0F8571750000        <1>  jne L_error_incorrect_type
 12412 00009C60 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12413 00009C63 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12414                                  
 12415 00009C66 4889C7                  	mov rdi, rax
 12416 00009C69 E8805D0000              	call print_sexpr_if_not_void
 12417                                  
 12418 00009C6E 48B8-                   	mov rax, L_constants + 0
 12418 00009C70 [0000000000000000] 
 12419 00009C78 48890425[98030000]      	mov qword [free_var_115], rax
 12420 00009C80 48B8-                   	mov rax, sob_void
 12420 00009C82 [0000000000000000] 
 12421                                  
 12422 00009C8A 4889C7                  	mov rdi, rax
 12423 00009C8D E85C5D0000              	call print_sexpr_if_not_void
 12424                                  
 12425 00009C92 48B8-                   	mov rax, L_constants + 0
 12425 00009C94 [0000000000000000] 
 12426 00009C9C 48890425[A0030000]      	mov qword [free_var_116], rax
 12427 00009CA4 48B8-                   	mov rax, sob_void
 12427 00009CA6 [0000000000000000] 
 12428                                  
 12429 00009CAE 4889C7                  	mov rdi, rax
 12430 00009CB1 E8385D0000              	call print_sexpr_if_not_void
 12431                                  
 12432 00009CB6 48B8-                   	mov rax, L_constants + 0
 12432 00009CB8 [0000000000000000] 
 12433 00009CC0 48890425[A8030000]      	mov qword [free_var_117], rax
 12434 00009CC8 48B8-                   	mov rax, sob_void
 12434 00009CCA [0000000000000000] 
 12435                                  
 12436 00009CD2 4889C7                  	mov rdi, rax
 12437 00009CD5 E8145D0000              	call print_sexpr_if_not_void
 12438                                  
 12439 00009CDA 48B8-                   	mov rax, L_constants + 0
 12439 00009CDC [0000000000000000] 
 12440 00009CE4 48890425[B0030000]      	mov qword [free_var_118], rax
 12441 00009CEC 48B8-                   	mov rax, sob_void
 12441 00009CEE [0000000000000000] 
 12442                                  
 12443 00009CF6 4889C7                  	mov rdi, rax
 12444 00009CF9 E8F05C0000              	call print_sexpr_if_not_void
 12445                                  
 12446 00009CFE 48B8-                   	mov rax, L_constants + 0
 12446 00009D00 [0000000000000000] 
 12447 00009D08 48890425[B8030000]      	mov qword [free_var_119], rax
 12448 00009D10 48B8-                   	mov rax, sob_void
 12448 00009D12 [0000000000000000] 
 12449                                  
 12450 00009D1A 4889C7                  	mov rdi, rax
 12451 00009D1D E8CC5C0000              	call print_sexpr_if_not_void
 12452                                  
 12453 00009D22 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12454 00009D27 E8B15C0000              	call malloc
 12455 00009D2C 50                      	push rax
 12456 00009D2D BF00000000              	mov rdi, 8 * 0	; new rib
 12457 00009D32 E8A65C0000              	call malloc
 12458 00009D37 50                      	push rax
 12459 00009D38 BF08000000              	mov rdi, 8 * 1	; extended env
 12460 00009D3D E89B5C0000              	call malloc
 12461 00009D42 488B7D10                	mov rdi, ENV
 12462 00009D46 BE00000000              	mov rsi, 0
 12463 00009D4B BA01000000              	mov rdx, 1
 12464                                  .L_lambda_simple_env_loop_00fd:	; ext_env[i + 1] <-- env[i]
 12465 00009D50 4883FE00                	cmp rsi, 0
 12466 00009D54 7410                    	je .L_lambda_simple_env_end_00fd
 12467 00009D56 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12468 00009D5A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12469 00009D5E 48FFC6                  	inc rsi
 12470 00009D61 48FFC2                  	inc rdx
 12471 00009D64 EBEA                    	jmp .L_lambda_simple_env_loop_00fd
 12472                                  .L_lambda_simple_env_end_00fd:
 12473 00009D66 5B                      	pop rbx
 12474 00009D67 BE00000000              	mov rsi, 0
 12475                                  .L_lambda_simple_params_loop_00fd:	; copy params
 12476 00009D6C 4883FE00                	cmp rsi, 0
 12477 00009D70 740E                    	je .L_lambda_simple_params_end_00fd
 12478 00009D72 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12479 00009D77 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12480 00009D7B 48FFC6                  	inc rsi
 12481 00009D7E EBEC                    	jmp .L_lambda_simple_params_loop_00fd
 12482                                  .L_lambda_simple_params_end_00fd:
 12483 00009D80 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12484 00009D83 4889C3                  	mov rbx, rax
 12485 00009D86 58                      	pop rax
 12486 00009D87 C60005                  	mov byte [rax], T_closure
 12487 00009D8A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12488 00009D8E 48C74009[9B9D0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fd
 12489 00009D96 E9DC020000              	jmp .L_lambda_simple_end_00fd
 12490                                  .L_lambda_simple_code_00fd:	; lambda-simple body
 12491 00009D9B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12492 00009DA1 740B                    	je .L_lambda_simple_arity_check_ok_00fd
 12493 00009DA3 FF742410                	push qword [rsp + 8 * 2]
 12494 00009DA7 6A01                    	push 1
 12495 00009DA9 E9E85B0000              	jmp L_error_incorrect_arity_simple
 12496                                  .L_lambda_simple_arity_check_ok_00fd:
 12497 00009DAE C8000000                	enter 0, 0
 12498 00009DB2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12499 00009DB7 E8215C0000              	call malloc
 12500 00009DBC 50                      	push rax
 12501 00009DBD BF08000000              	mov rdi, 8 * 1	; new rib
 12502 00009DC2 E8165C0000              	call malloc
 12503 00009DC7 50                      	push rax
 12504 00009DC8 BF10000000              	mov rdi, 8 * 2	; extended env
 12505 00009DCD E80B5C0000              	call malloc
 12506 00009DD2 488B7D10                	mov rdi, ENV
 12507 00009DD6 BE00000000              	mov rsi, 0
 12508 00009DDB BA01000000              	mov rdx, 1
 12509                                  .L_lambda_opt_env_loop_0028:	; ext_env[i + 1] <-- env[i]
 12510 00009DE0 4883FE01                	cmp rsi, 1
 12511 00009DE4 7410                    	je .L_lambda_opt_env_end_0028
 12512 00009DE6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12513 00009DEA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12514 00009DEE 48FFC6                  	inc rsi
 12515 00009DF1 48FFC2                  	inc rdx
 12516 00009DF4 EBEA                    	jmp .L_lambda_opt_env_loop_0028
 12517                                  .L_lambda_opt_env_end_0028:
 12518 00009DF6 5B                      	pop rbx
 12519 00009DF7 BE00000000              	mov rsi, 0
 12520                                  .L_lambda_opt_params_loop_0028:	; copy params
 12521 00009DFC 4883FE01                	cmp rsi, 1
 12522 00009E00 740E                    	je .L_lambda_opt_params_end_0028
 12523 00009E02 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12524 00009E07 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12525 00009E0B 48FFC6                  	inc rsi
 12526 00009E0E EBEC                    	jmp .L_lambda_opt_params_loop_0028
 12527                                  .L_lambda_opt_params_end_0028:
 12528 00009E10 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12529 00009E13 4889C3                  	mov rbx, rax
 12530 00009E16 58                      	pop rax
 12531 00009E17 C60005                  	mov byte [rax], T_closure
 12532 00009E1A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12533 00009E1E 48C74009[2B9E0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0028
 12534 00009E26 E948020000              	jmp .L_lambda_opt_end_0028
 12535                                  .L_lambda_opt_code_0028:	; lambda-opt body
 12536 00009E2B 48837C241000            	cmp qword [rsp + 8 * 2], 0
 12537 00009E31 740D                    	je .L_lambda_opt_arity_check_exact_0028
 12538 00009E33 7F43                    	jg .L_lambda_opt_arity_check_more_0028
 12539 00009E35 FF742410                	push qword [rsp + 8 * 2]
 12540 00009E39 6A00                    	push 0
 12541 00009E3B E96A5B0000              	jmp L_error_incorrect_arity_opt
 12542                                  .L_lambda_opt_arity_check_exact_0028:
 12543 00009E40 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 12544 00009E49 BA03000000              	mov rdx, 3
 12545 00009E4E FF3424                  	push qword [rsp]
 12546 00009E51 BE01000000              	mov rsi, 1
 12547                                  .L_lambda_opt_stack_shrink_loop_0076:
 12548 00009E56 4839D6                  	cmp rsi, rdx
 12549 00009E59 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0076
 12550 00009E5B 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 12551 00009E60 488B0B                  	mov rcx, [rbx]
 12552 00009E63 48894BF8                	mov qword [rbx - 8], rcx
 12553 00009E67 48FFC6                  	inc rsi
 12554 00009E6A EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0076
 12555                                  .L_lambda_opt_stack_shrink_loop_exit_0076:
 12556 00009E6C 48C703[01000000]        	mov qword [rbx], sob_nil
 12557 00009E73 E985000000              	jmp .L_lambda_opt_stack_adjusted_0028
 12558                                  .L_lambda_opt_arity_check_more_0028:
 12559 00009E78 488B542410              	mov rdx, qword [rsp + 8 * 2]
 12560 00009E7D 4883EA00                	sub rdx, 0
 12561 00009E81 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 12562 00009E8A BE00000000              	mov rsi, 0
 12563 00009E8F 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
 12564 00009E94 48B9-                   	mov rcx, sob_nil
 12564 00009E96 [0100000000000000] 
 12565                                  .L_lambda_opt_stack_shrink_loop_0077:
 12566 00009E9E 4839D6                  	cmp rsi, rdx
 12567 00009EA1 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0077
 12568 00009EA3 BF11000000              	mov rdi, 17 ; 1+8+8
 12569 00009EA8 E8305B0000              	call malloc
 12570 00009EAD 48894809                	mov SOB_PAIR_CDR(rax), rcx
 12571 00009EB1 48F7DE                  	neg rsi
 12572 00009EB4 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 12573 00009EB8 48F7DE                  	neg rsi
 12574 00009EBB 48894801                	mov SOB_PAIR_CAR(rax), rcx
 12575 00009EBF C60021                  	mov byte [rax], T_pair
 12576 00009EC2 4889C1                  	mov rcx, rax
 12577 00009EC5 48FFC6                  	inc rsi
 12578 00009EC8 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0077
 12579                                  .L_lambda_opt_stack_shrink_loop_exit_0077:
 12580 00009ECA 48890B                  	mov qword [rbx], rcx
 12581 00009ECD 4883EB08                	sub rbx, 8
 12582 00009ED1 4889E7                  	mov rdi, rsp
 12583 00009ED4 4883C710                	add rdi, 16
 12584 00009ED8 BE03000000              	mov rsi, 3
 12585                                  .L_lambda_opt_stack_shrink_loop_0078:
 12586 00009EDD 4883FE00                	cmp rsi,0
 12587 00009EE1 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0078
 12588 00009EE3 488B0F                  	mov rcx, qword [rdi]
 12589 00009EE6 48890B                  	mov [rbx], rcx
 12590 00009EE9 48FFCE                  	dec rsi
 12591 00009EEC 4883EB08                	sub rbx, 8
 12592 00009EF0 4883EF08                	sub rdi, 8
 12593 00009EF4 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0078
 12594                                  .L_lambda_opt_stack_shrink_loop_exit_0078:
 12595 00009EF6 4883C308                	add rbx, 8
 12596 00009EFA 4889DC                  	mov rsp, rbx
 12597                                  .L_lambda_opt_stack_adjusted_0028:
 12598 00009EFD C8000000                	enter 0, 0
 12599 00009F01 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12600 00009F05 50                      	push rax
 12601 00009F06 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12602 00009F0B E8CD5A0000              	call malloc
 12603 00009F10 50                      	push rax
 12604 00009F11 BF08000000              	mov rdi, 8 * 1	; new rib
 12605 00009F16 E8C25A0000              	call malloc
 12606 00009F1B 50                      	push rax
 12607 00009F1C BF18000000              	mov rdi, 8 * 3	; extended env
 12608 00009F21 E8B75A0000              	call malloc
 12609 00009F26 488B7D10                	mov rdi, ENV
 12610 00009F2A BE00000000              	mov rsi, 0
 12611 00009F2F BA01000000              	mov rdx, 1
 12612                                  .L_lambda_simple_env_loop_00fe:	; ext_env[i + 1] <-- env[i]
 12613 00009F34 4883FE02                	cmp rsi, 2
 12614 00009F38 7410                    	je .L_lambda_simple_env_end_00fe
 12615 00009F3A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12616 00009F3E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12617 00009F42 48FFC6                  	inc rsi
 12618 00009F45 48FFC2                  	inc rdx
 12619 00009F48 EBEA                    	jmp .L_lambda_simple_env_loop_00fe
 12620                                  .L_lambda_simple_env_end_00fe:
 12621 00009F4A 5B                      	pop rbx
 12622 00009F4B BE00000000              	mov rsi, 0
 12623                                  .L_lambda_simple_params_loop_00fe:	; copy params
 12624 00009F50 4883FE01                	cmp rsi, 1
 12625 00009F54 740E                    	je .L_lambda_simple_params_end_00fe
 12626 00009F56 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12627 00009F5B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12628 00009F5F 48FFC6                  	inc rsi
 12629 00009F62 EBEC                    	jmp .L_lambda_simple_params_loop_00fe
 12630                                  .L_lambda_simple_params_end_00fe:
 12631 00009F64 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12632 00009F67 4889C3                  	mov rbx, rax
 12633 00009F6A 58                      	pop rax
 12634 00009F6B C60005                  	mov byte [rax], T_closure
 12635 00009F6E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12636 00009F72 48C74009[7F9F0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fe
 12637 00009F7A E982000000              	jmp .L_lambda_simple_end_00fe
 12638                                  .L_lambda_simple_code_00fe:	; lambda-simple body
 12639 00009F7F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12640 00009F85 740B                    	je .L_lambda_simple_arity_check_ok_00fe
 12641 00009F87 FF742410                	push qword [rsp + 8 * 2]
 12642 00009F8B 6A01                    	push 1
 12643 00009F8D E9045A0000              	jmp L_error_incorrect_arity_simple
 12644                                  .L_lambda_simple_arity_check_ok_00fe:
 12645 00009F92 C8000000                	enter 0, 0
 12646 00009F96 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12647 00009F9A 50                      	push rax
 12648 00009F9B 6A01                    	push 1
 12649 00009F9D 488B0425[88030000]      	mov rax, qword [free_var_113]
 12650                                  	assert_closure(rax)
    42 00009FA5 803805              <1>  cmp byte [%1], %2
    43 00009FA8 0F8523720000        <1>  jne L_error_incorrect_type
 12651 00009FAE FF7001                  	push SOB_CLOSURE_ENV(rax)
 12652 00009FB1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12653 00009FB4 50                      	push rax
 12654 00009FB5 6A01                    	push 1
 12655 00009FB7 488B0425[C0000000]      	mov rax, qword [free_var_24]
 12656                                  	assert_closure(rax)
    42 00009FBF 803805              <1>  cmp byte [%1], %2
    43 00009FC2 0F8509720000        <1>  jne L_error_incorrect_type
 12657 00009FC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12658 00009FCB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12659 00009FCE FF7500                  	push qword [rbp] ; same the old rbp
 12660 00009FD1 BA04000000              	mov rdx, 1 + 3
 12661 00009FD6 488B4D00                	mov rcx, [rbp]
 12662 00009FDA 4889EF                  	mov rdi, rbp
 12663                                  .L_tc_recycle_frame_loop_0134:
 12664 00009FDD 4883FA00                	cmp rdx, 0
 12665 00009FE1 7413                    	je .L_tc_recycle_frame_done_0134
 12666 00009FE3 4883E908                	sub rcx, 8
 12667 00009FE7 4883EF08                	sub rdi, 8
 12668 00009FEB 488B37                  	mov rsi, [rdi]
 12669 00009FEE 488931                  	mov qword [rcx], rsi
 12670 00009FF1 48FFCA                  	dec rdx
 12671 00009FF4 EBE7                    	jmp .L_tc_recycle_frame_loop_0134
 12672                                  .L_tc_recycle_frame_done_0134:
 12673 00009FF6 5D                      	pop rbp ; restore the old rbp
 12674 00009FF7 4889CC                  	mov rsp, rcx
 12675 00009FFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12676 00009FFD C9                      	leave
 12677 00009FFE C21800                  	ret 8 * (2 + 1)
 12678                                  .L_lambda_simple_end_00fe:	; new closure is in rax
 12679 0000A001 50                      	push rax
 12680 0000A002 6A02                    	push 2
 12681 0000A004 488B0425[D8020000]      	mov rax, qword [free_var_91]
 12682                                  	assert_closure(rax)
    42 0000A00C 803805              <1>  cmp byte [%1], %2
    43 0000A00F 0F85BC710000        <1>  jne L_error_incorrect_type
 12683 0000A015 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12684 0000A018 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12685 0000A01B 50                      	push rax
 12686 0000A01C 488B4510                	mov rax, qword [rbp + 8 * 2]
 12687 0000A020 488B00                  	mov rax, qword [rax + 8 * 0]
 12688 0000A023 488B00                  	mov rax, qword [rax + 8 * 0]
 12689 0000A026 50                      	push rax
 12690 0000A027 6A02                    	push 2
 12691 0000A029 488B0425[C8020000]      	mov rax, qword [free_var_89]
 12692                                  	assert_closure(rax)
    42 0000A031 803805              <1>  cmp byte [%1], %2
    43 0000A034 0F8597710000        <1>  jne L_error_incorrect_type
 12693 0000A03A FF7001                  	push SOB_CLOSURE_ENV(rax)
 12694 0000A03D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12695 0000A040 FF7500                  	push qword [rbp] ; same the old rbp
 12696 0000A043 BA05000000              	mov rdx, 2 + 3
 12697 0000A048 488B4D00                	mov rcx, [rbp]
 12698 0000A04C 4889EF                  	mov rdi, rbp
 12699                                  .L_tc_recycle_frame_loop_0133:
 12700 0000A04F 4883FA00                	cmp rdx, 0
 12701 0000A053 7413                    	je .L_tc_recycle_frame_done_0133
 12702 0000A055 4883E908                	sub rcx, 8
 12703 0000A059 4883EF08                	sub rdi, 8
 12704 0000A05D 488B37                  	mov rsi, [rdi]
 12705 0000A060 488931                  	mov qword [rcx], rsi
 12706 0000A063 48FFCA                  	dec rdx
 12707 0000A066 EBE7                    	jmp .L_tc_recycle_frame_loop_0133
 12708                                  .L_tc_recycle_frame_done_0133:
 12709 0000A068 5D                      	pop rbp ; restore the old rbp
 12710 0000A069 4889CC                  	mov rsp, rcx
 12711 0000A06C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12712 0000A06F C9                      	leave
 12713 0000A070 C21800                  	ret 8 * (2 + 1)
 12714                                  .L_lambda_opt_end_0028:	; new closure is in rax
 12715 0000A073 C9                      	leave
 12716 0000A074 C21800                  	ret 8 * (2 + 1)
 12717                                  .L_lambda_simple_end_00fd:	; new closure is in rax
 12718 0000A077 50                      	push rax
 12719 0000A078 6A01                    	push 1
 12720 0000A07A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12721 0000A07F E859590000              	call malloc
 12722 0000A084 50                      	push rax
 12723 0000A085 BF00000000              	mov rdi, 8 * 0	; new rib
 12724 0000A08A E84E590000              	call malloc
 12725 0000A08F 50                      	push rax
 12726 0000A090 BF08000000              	mov rdi, 8 * 1	; extended env
 12727 0000A095 E843590000              	call malloc
 12728 0000A09A 488B7D10                	mov rdi, ENV
 12729 0000A09E BE00000000              	mov rsi, 0
 12730 0000A0A3 BA01000000              	mov rdx, 1
 12731                                  .L_lambda_simple_env_loop_00fc:	; ext_env[i + 1] <-- env[i]
 12732 0000A0A8 4883FE00                	cmp rsi, 0
 12733 0000A0AC 7410                    	je .L_lambda_simple_env_end_00fc
 12734 0000A0AE 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12735 0000A0B2 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12736 0000A0B6 48FFC6                  	inc rsi
 12737 0000A0B9 48FFC2                  	inc rdx
 12738 0000A0BC EBEA                    	jmp .L_lambda_simple_env_loop_00fc
 12739                                  .L_lambda_simple_env_end_00fc:
 12740 0000A0BE 5B                      	pop rbx
 12741 0000A0BF BE00000000              	mov rsi, 0
 12742                                  .L_lambda_simple_params_loop_00fc:	; copy params
 12743 0000A0C4 4883FE00                	cmp rsi, 0
 12744 0000A0C8 740E                    	je .L_lambda_simple_params_end_00fc
 12745 0000A0CA 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12746 0000A0CF 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12747 0000A0D3 48FFC6                  	inc rsi
 12748 0000A0D6 EBEC                    	jmp .L_lambda_simple_params_loop_00fc
 12749                                  .L_lambda_simple_params_end_00fc:
 12750 0000A0D8 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12751 0000A0DB 4889C3                  	mov rbx, rax
 12752 0000A0DE 58                      	pop rax
 12753 0000A0DF C60005                  	mov byte [rax], T_closure
 12754 0000A0E2 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12755 0000A0E6 48C74009[F3A00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00fc
 12756 0000A0EE E90B010000              	jmp .L_lambda_simple_end_00fc
 12757                                  .L_lambda_simple_code_00fc:	; lambda-simple body
 12758 0000A0F3 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12759 0000A0F9 740B                    	je .L_lambda_simple_arity_check_ok_00fc
 12760 0000A0FB FF742410                	push qword [rsp + 8 * 2]
 12761 0000A0FF 6A01                    	push 1
 12762 0000A101 E990580000              	jmp L_error_incorrect_arity_simple
 12763                                  .L_lambda_simple_arity_check_ok_00fc:
 12764 0000A106 C8000000                	enter 0, 0
 12765 0000A10A 488B0425[30030000]      	mov rax, qword [free_var_102]
 12766 0000A112 50                      	push rax
 12767 0000A113 6A01                    	push 1
 12768 0000A115 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12769                                  	assert_closure(rax)
    42 0000A119 803805              <1>  cmp byte [%1], %2
    43 0000A11C 0F85AF700000        <1>  jne L_error_incorrect_type
 12770 0000A122 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12771 0000A125 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12772 0000A128 48890425[98030000]      	mov qword [free_var_115], rax
 12773 0000A130 48B8-                   	mov rax, sob_void
 12773 0000A132 [0000000000000000] 
 12774                                  
 12775 0000A13A 488B0425[38030000]      	mov rax, qword [free_var_103]
 12776 0000A142 50                      	push rax
 12777 0000A143 6A01                    	push 1
 12778 0000A145 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12779                                  	assert_closure(rax)
    42 0000A149 803805              <1>  cmp byte [%1], %2
    43 0000A14C 0F857F700000        <1>  jne L_error_incorrect_type
 12780 0000A152 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12781 0000A155 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12782 0000A158 48890425[A0030000]      	mov qword [free_var_116], rax
 12783 0000A160 48B8-                   	mov rax, sob_void
 12783 0000A162 [0000000000000000] 
 12784                                  
 12785 0000A16A 488B0425[50030000]      	mov rax, qword [free_var_106]
 12786 0000A172 50                      	push rax
 12787 0000A173 6A01                    	push 1
 12788 0000A175 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12789                                  	assert_closure(rax)
    42 0000A179 803805              <1>  cmp byte [%1], %2
    43 0000A17C 0F854F700000        <1>  jne L_error_incorrect_type
 12790 0000A182 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12791 0000A185 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12792 0000A188 48890425[A8030000]      	mov qword [free_var_117], rax
 12793 0000A190 48B8-                   	mov rax, sob_void
 12793 0000A192 [0000000000000000] 
 12794                                  
 12795 0000A19A 488B0425[40030000]      	mov rax, qword [free_var_104]
 12796 0000A1A2 50                      	push rax
 12797 0000A1A3 6A01                    	push 1
 12798 0000A1A5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12799                                  	assert_closure(rax)
    42 0000A1A9 803805              <1>  cmp byte [%1], %2
    43 0000A1AC 0F851F700000        <1>  jne L_error_incorrect_type
 12800 0000A1B2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12801 0000A1B5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12802 0000A1B8 48890425[B0030000]      	mov qword [free_var_118], rax
 12803 0000A1C0 48B8-                   	mov rax, sob_void
 12803 0000A1C2 [0000000000000000] 
 12804                                  
 12805 0000A1CA 488B0425[48030000]      	mov rax, qword [free_var_105]
 12806 0000A1D2 50                      	push rax
 12807 0000A1D3 6A01                    	push 1
 12808 0000A1D5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12809                                  	assert_closure(rax)
    42 0000A1D9 803805              <1>  cmp byte [%1], %2
    43 0000A1DC 0F85EF6F0000        <1>  jne L_error_incorrect_type
 12810 0000A1E2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12811 0000A1E5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12812 0000A1E8 48890425[B8030000]      	mov qword [free_var_119], rax
 12813 0000A1F0 48B8-                   	mov rax, sob_void
 12813 0000A1F2 [0000000000000000] 
 12814 0000A1FA C9                      	leave
 12815 0000A1FB C21800                  	ret 8 * (2 + 1)
 12816                                  .L_lambda_simple_end_00fc:	; new closure is in rax
 12817                                  	assert_closure(rax)
    42 0000A1FE 803805              <1>  cmp byte [%1], %2
    43 0000A201 0F85CA6F0000        <1>  jne L_error_incorrect_type
 12818 0000A207 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12819 0000A20A FF5009                  	call SOB_CLOSURE_CODE(rax)
 12820                                  
 12821 0000A20D 4889C7                  	mov rdi, rax
 12822 0000A210 E8D9570000              	call print_sexpr_if_not_void
 12823                                  
 12824 0000A215 48B8-                   	mov rax, L_constants + 0
 12824 0000A217 [0000000000000000] 
 12825 0000A21F 48890425[C0030000]      	mov qword [free_var_120], rax
 12826 0000A227 48B8-                   	mov rax, sob_void
 12826 0000A229 [0000000000000000] 
 12827                                  
 12828 0000A231 4889C7                  	mov rdi, rax
 12829 0000A234 E8B5570000              	call print_sexpr_if_not_void
 12830                                  
 12831 0000A239 48B8-                   	mov rax, L_constants + 0
 12831 0000A23B [0000000000000000] 
 12832 0000A243 48890425[C8030000]      	mov qword [free_var_121], rax
 12833 0000A24B 48B8-                   	mov rax, sob_void
 12833 0000A24D [0000000000000000] 
 12834                                  
 12835 0000A255 4889C7                  	mov rdi, rax
 12836 0000A258 E891570000              	call print_sexpr_if_not_void
 12837                                  
 12838 0000A25D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12839 0000A262 E876570000              	call malloc
 12840 0000A267 50                      	push rax
 12841 0000A268 BF00000000              	mov rdi, 8 * 0	; new rib
 12842 0000A26D E86B570000              	call malloc
 12843 0000A272 50                      	push rax
 12844 0000A273 BF08000000              	mov rdi, 8 * 1	; extended env
 12845 0000A278 E860570000              	call malloc
 12846 0000A27D 488B7D10                	mov rdi, ENV
 12847 0000A281 BE00000000              	mov rsi, 0
 12848 0000A286 BA01000000              	mov rdx, 1
 12849                                  .L_lambda_simple_env_loop_0100:	; ext_env[i + 1] <-- env[i]
 12850 0000A28B 4883FE00                	cmp rsi, 0
 12851 0000A28F 7410                    	je .L_lambda_simple_env_end_0100
 12852 0000A291 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12853 0000A295 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12854 0000A299 48FFC6                  	inc rsi
 12855 0000A29C 48FFC2                  	inc rdx
 12856 0000A29F EBEA                    	jmp .L_lambda_simple_env_loop_0100
 12857                                  .L_lambda_simple_env_end_0100:
 12858 0000A2A1 5B                      	pop rbx
 12859 0000A2A2 BE00000000              	mov rsi, 0
 12860                                  .L_lambda_simple_params_loop_0100:	; copy params
 12861 0000A2A7 4883FE00                	cmp rsi, 0
 12862 0000A2AB 740E                    	je .L_lambda_simple_params_end_0100
 12863 0000A2AD 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12864 0000A2B2 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12865 0000A2B6 48FFC6                  	inc rsi
 12866 0000A2B9 EBEC                    	jmp .L_lambda_simple_params_loop_0100
 12867                                  .L_lambda_simple_params_end_0100:
 12868 0000A2BB 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12869 0000A2BE 4889C3                  	mov rbx, rax
 12870 0000A2C1 58                      	pop rax
 12871 0000A2C2 C60005                  	mov byte [rax], T_closure
 12872 0000A2C5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12873 0000A2C9 48C74009[D6A20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0100
 12874 0000A2D1 E93B010000              	jmp .L_lambda_simple_end_0100
 12875                                  .L_lambda_simple_code_0100:	; lambda-simple body
 12876 0000A2D6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12877 0000A2DC 740B                    	je .L_lambda_simple_arity_check_ok_0100
 12878 0000A2DE FF742410                	push qword [rsp + 8 * 2]
 12879 0000A2E2 6A01                    	push 1
 12880 0000A2E4 E9AD560000              	jmp L_error_incorrect_arity_simple
 12881                                  .L_lambda_simple_arity_check_ok_0100:
 12882 0000A2E9 C8000000                	enter 0, 0
 12883 0000A2ED BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12884 0000A2F2 E8E6560000              	call malloc
 12885 0000A2F7 50                      	push rax
 12886 0000A2F8 BF08000000              	mov rdi, 8 * 1	; new rib
 12887 0000A2FD E8DB560000              	call malloc
 12888 0000A302 50                      	push rax
 12889 0000A303 BF10000000              	mov rdi, 8 * 2	; extended env
 12890 0000A308 E8D0560000              	call malloc
 12891 0000A30D 488B7D10                	mov rdi, ENV
 12892 0000A311 BE00000000              	mov rsi, 0
 12893 0000A316 BA01000000              	mov rdx, 1
 12894                                  .L_lambda_simple_env_loop_0101:	; ext_env[i + 1] <-- env[i]
 12895 0000A31B 4883FE01                	cmp rsi, 1
 12896 0000A31F 7410                    	je .L_lambda_simple_env_end_0101
 12897 0000A321 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12898 0000A325 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12899 0000A329 48FFC6                  	inc rsi
 12900 0000A32C 48FFC2                  	inc rdx
 12901 0000A32F EBEA                    	jmp .L_lambda_simple_env_loop_0101
 12902                                  .L_lambda_simple_env_end_0101:
 12903 0000A331 5B                      	pop rbx
 12904 0000A332 BE00000000              	mov rsi, 0
 12905                                  .L_lambda_simple_params_loop_0101:	; copy params
 12906 0000A337 4883FE01                	cmp rsi, 1
 12907 0000A33B 740E                    	je .L_lambda_simple_params_end_0101
 12908 0000A33D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 12909 0000A342 488914F3                	mov qword [rbx + 8 * rsi], rdx
 12910 0000A346 48FFC6                  	inc rsi
 12911 0000A349 EBEC                    	jmp .L_lambda_simple_params_loop_0101
 12912                                  .L_lambda_simple_params_end_0101:
 12913 0000A34B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 12914 0000A34E 4889C3                  	mov rbx, rax
 12915 0000A351 58                      	pop rax
 12916 0000A352 C60005                  	mov byte [rax], T_closure
 12917 0000A355 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 12918 0000A359 48C74009[66A30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0101
 12919 0000A361 E9A7000000              	jmp .L_lambda_simple_end_0101
 12920                                  .L_lambda_simple_code_0101:	; lambda-simple body
 12921 0000A366 48837C241001            	cmp qword [rsp + 8 * 2], 1
 12922 0000A36C 740B                    	je .L_lambda_simple_arity_check_ok_0101
 12923 0000A36E FF742410                	push qword [rsp + 8 * 2]
 12924 0000A372 6A01                    	push 1
 12925 0000A374 E91D560000              	jmp L_error_incorrect_arity_simple
 12926                                  .L_lambda_simple_arity_check_ok_0101:
 12927 0000A379 C8000000                	enter 0, 0
 12928 0000A37D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 12929 0000A381 50                      	push rax
 12930 0000A382 6A01                    	push 1
 12931 0000A384 488B0425[D8030000]      	mov rax, qword [free_var_123]
 12932                                  	assert_closure(rax)
    42 0000A38C 803805              <1>  cmp byte [%1], %2
    43 0000A38F 0F853C6E0000        <1>  jne L_error_incorrect_type
 12933 0000A395 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12934 0000A398 FF5009                  	call SOB_CLOSURE_CODE(rax)
 12935 0000A39B 50                      	push rax
 12936 0000A39C 488B4510                	mov rax, qword [rbp + 8 * 2]
 12937 0000A3A0 488B00                  	mov rax, qword [rax + 8 * 0]
 12938 0000A3A3 488B00                  	mov rax, qword [rax + 8 * 0]
 12939 0000A3A6 50                      	push rax
 12940 0000A3A7 6A02                    	push 2
 12941 0000A3A9 488B0425[D8020000]      	mov rax, qword [free_var_91]
 12942                                  	assert_closure(rax)
    42 0000A3B1 803805              <1>  cmp byte [%1], %2
    43 0000A3B4 0F85176E0000        <1>  jne L_error_incorrect_type
 12943 0000A3BA FF7001                  	push SOB_CLOSURE_ENV(rax)
 12944 0000A3BD FF5009                  	call SOB_CLOSURE_CODE(rax)
 12945 0000A3C0 50                      	push rax
 12946 0000A3C1 6A01                    	push 1
 12947 0000A3C3 488B0425[D0030000]      	mov rax, qword [free_var_122]
 12948                                  	assert_closure(rax)
    42 0000A3CB 803805              <1>  cmp byte [%1], %2
    43 0000A3CE 0F85FD6D0000        <1>  jne L_error_incorrect_type
 12949 0000A3D4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 12950 0000A3D7 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 12951 0000A3DA FF7500                  	push qword [rbp] ; same the old rbp
 12952 0000A3DD BA04000000              	mov rdx, 1 + 3
 12953 0000A3E2 488B4D00                	mov rcx, [rbp]
 12954 0000A3E6 4889EF                  	mov rdi, rbp
 12955                                  .L_tc_recycle_frame_loop_0135:
 12956 0000A3E9 4883FA00                	cmp rdx, 0
 12957 0000A3ED 7413                    	je .L_tc_recycle_frame_done_0135
 12958 0000A3EF 4883E908                	sub rcx, 8
 12959 0000A3F3 4883EF08                	sub rdi, 8
 12960 0000A3F7 488B37                  	mov rsi, [rdi]
 12961 0000A3FA 488931                  	mov qword [rcx], rsi
 12962 0000A3FD 48FFCA                  	dec rdx
 12963 0000A400 EBE7                    	jmp .L_tc_recycle_frame_loop_0135
 12964                                  .L_tc_recycle_frame_done_0135:
 12965 0000A402 5D                      	pop rbp ; restore the old rbp
 12966 0000A403 4889CC                  	mov rsp, rcx
 12967 0000A406 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 12968 0000A409 C9                      	leave
 12969 0000A40A C21800                  	ret 8 * (2 + 1)
 12970                                  .L_lambda_simple_end_0101:	; new closure is in rax
 12971 0000A40D C9                      	leave
 12972 0000A40E C21800                  	ret 8 * (2 + 1)
 12973                                  .L_lambda_simple_end_0100:	; new closure is in rax
 12974 0000A411 50                      	push rax
 12975 0000A412 6A01                    	push 1
 12976 0000A414 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 12977 0000A419 E8BF550000              	call malloc
 12978 0000A41E 50                      	push rax
 12979 0000A41F BF00000000              	mov rdi, 8 * 0	; new rib
 12980 0000A424 E8B4550000              	call malloc
 12981 0000A429 50                      	push rax
 12982 0000A42A BF08000000              	mov rdi, 8 * 1	; extended env
 12983 0000A42F E8A9550000              	call malloc
 12984 0000A434 488B7D10                	mov rdi, ENV
 12985 0000A438 BE00000000              	mov rsi, 0
 12986 0000A43D BA01000000              	mov rdx, 1
 12987                                  .L_lambda_simple_env_loop_00ff:	; ext_env[i + 1] <-- env[i]
 12988 0000A442 4883FE00                	cmp rsi, 0
 12989 0000A446 7410                    	je .L_lambda_simple_env_end_00ff
 12990 0000A448 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 12991 0000A44C 48890CD0                	mov qword [rax + 8 * rdx], rcx
 12992 0000A450 48FFC6                  	inc rsi
 12993 0000A453 48FFC2                  	inc rdx
 12994 0000A456 EBEA                    	jmp .L_lambda_simple_env_loop_00ff
 12995                                  .L_lambda_simple_env_end_00ff:
 12996 0000A458 5B                      	pop rbx
 12997 0000A459 BE00000000              	mov rsi, 0
 12998                                  .L_lambda_simple_params_loop_00ff:	; copy params
 12999 0000A45E 4883FE00                	cmp rsi, 0
 13000 0000A462 740E                    	je .L_lambda_simple_params_end_00ff
 13001 0000A464 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13002 0000A469 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13003 0000A46D 48FFC6                  	inc rsi
 13004 0000A470 EBEC                    	jmp .L_lambda_simple_params_loop_00ff
 13005                                  .L_lambda_simple_params_end_00ff:
 13006 0000A472 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13007 0000A475 4889C3                  	mov rbx, rax
 13008 0000A478 58                      	pop rax
 13009 0000A479 C60005                  	mov byte [rax], T_closure
 13010 0000A47C 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13011 0000A480 48C74009[8AA40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_00ff
 13012 0000A488 EB7B                    	jmp .L_lambda_simple_end_00ff
 13013                                  .L_lambda_simple_code_00ff:	; lambda-simple body
 13014 0000A48A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13015 0000A490 740B                    	je .L_lambda_simple_arity_check_ok_00ff
 13016 0000A492 FF742410                	push qword [rsp + 8 * 2]
 13017 0000A496 6A01                    	push 1
 13018 0000A498 E9F9540000              	jmp L_error_incorrect_arity_simple
 13019                                  .L_lambda_simple_arity_check_ok_00ff:
 13020 0000A49D C8000000                	enter 0, 0
 13021 0000A4A1 488B0425[88030000]      	mov rax, qword [free_var_113]
 13022 0000A4A9 50                      	push rax
 13023 0000A4AA 6A01                    	push 1
 13024 0000A4AC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13025                                  	assert_closure(rax)
    42 0000A4B0 803805              <1>  cmp byte [%1], %2
    43 0000A4B3 0F85186D0000        <1>  jne L_error_incorrect_type
 13026 0000A4B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13027 0000A4BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 13028 0000A4BF 48890425[C0030000]      	mov qword [free_var_120], rax
 13029 0000A4C7 48B8-                   	mov rax, sob_void
 13029 0000A4C9 [0000000000000000] 
 13030                                  
 13031 0000A4D1 488B0425[90030000]      	mov rax, qword [free_var_114]
 13032 0000A4D9 50                      	push rax
 13033 0000A4DA 6A01                    	push 1
 13034 0000A4DC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13035                                  	assert_closure(rax)
    42 0000A4E0 803805              <1>  cmp byte [%1], %2
    43 0000A4E3 0F85E86C0000        <1>  jne L_error_incorrect_type
 13036 0000A4E9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13037 0000A4EC FF5009                  	call SOB_CLOSURE_CODE(rax)
 13038 0000A4EF 48890425[C8030000]      	mov qword [free_var_121], rax
 13039 0000A4F7 48B8-                   	mov rax, sob_void
 13039 0000A4F9 [0000000000000000] 
 13040 0000A501 C9                      	leave
 13041 0000A502 C21800                  	ret 8 * (2 + 1)
 13042                                  .L_lambda_simple_end_00ff:	; new closure is in rax
 13043                                  	assert_closure(rax)
    42 0000A505 803805              <1>  cmp byte [%1], %2
    43 0000A508 0F85C36C0000        <1>  jne L_error_incorrect_type
 13044 0000A50E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13045 0000A511 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13046                                  
 13047 0000A514 4889C7                  	mov rdi, rax
 13048 0000A517 E8D2540000              	call print_sexpr_if_not_void
 13049                                  
 13050 0000A51C 48B8-                   	mov rax, L_constants + 0
 13050 0000A51E [0000000000000000] 
 13051 0000A526 48890425[E0030000]      	mov qword [free_var_124], rax
 13052 0000A52E 48B8-                   	mov rax, sob_void
 13052 0000A530 [0000000000000000] 
 13053                                  
 13054 0000A538 4889C7                  	mov rdi, rax
 13055 0000A53B E8AE540000              	call print_sexpr_if_not_void
 13056                                  
 13057 0000A540 48B8-                   	mov rax, L_constants + 0
 13057 0000A542 [0000000000000000] 
 13058 0000A54A 48890425[E8030000]      	mov qword [free_var_125], rax
 13059 0000A552 48B8-                   	mov rax, sob_void
 13059 0000A554 [0000000000000000] 
 13060                                  
 13061 0000A55C 4889C7                  	mov rdi, rax
 13062 0000A55F E88A540000              	call print_sexpr_if_not_void
 13063                                  
 13064 0000A564 48B8-                   	mov rax, L_constants + 0
 13064 0000A566 [0000000000000000] 
 13065 0000A56E 48890425[F0030000]      	mov qword [free_var_126], rax
 13066 0000A576 48B8-                   	mov rax, sob_void
 13066 0000A578 [0000000000000000] 
 13067                                  
 13068 0000A580 4889C7                  	mov rdi, rax
 13069 0000A583 E866540000              	call print_sexpr_if_not_void
 13070                                  
 13071 0000A588 48B8-                   	mov rax, L_constants + 0
 13071 0000A58A [0000000000000000] 
 13072 0000A592 48890425[F8030000]      	mov qword [free_var_127], rax
 13073 0000A59A 48B8-                   	mov rax, sob_void
 13073 0000A59C [0000000000000000] 
 13074                                  
 13075 0000A5A4 4889C7                  	mov rdi, rax
 13076 0000A5A7 E842540000              	call print_sexpr_if_not_void
 13077                                  
 13078 0000A5AC 48B8-                   	mov rax, L_constants + 0
 13078 0000A5AE [0000000000000000] 
 13079 0000A5B6 48890425[00040000]      	mov qword [free_var_128], rax
 13080 0000A5BE 48B8-                   	mov rax, sob_void
 13080 0000A5C0 [0000000000000000] 
 13081                                  
 13082 0000A5C8 4889C7                  	mov rdi, rax
 13083 0000A5CB E81E540000              	call print_sexpr_if_not_void
 13084                                  
 13085 0000A5D0 48B8-                   	mov rax, L_constants + 0
 13085 0000A5D2 [0000000000000000] 
 13086 0000A5DA 48890425[08040000]      	mov qword [free_var_129], rax
 13087 0000A5E2 48B8-                   	mov rax, sob_void
 13087 0000A5E4 [0000000000000000] 
 13088                                  
 13089 0000A5EC 4889C7                  	mov rdi, rax
 13090 0000A5EF E8FA530000              	call print_sexpr_if_not_void
 13091                                  
 13092 0000A5F4 48B8-                   	mov rax, L_constants + 0
 13092 0000A5F6 [0000000000000000] 
 13093 0000A5FE 48890425[10040000]      	mov qword [free_var_130], rax
 13094 0000A606 48B8-                   	mov rax, sob_void
 13094 0000A608 [0000000000000000] 
 13095                                  
 13096 0000A610 4889C7                  	mov rdi, rax
 13097 0000A613 E8D6530000              	call print_sexpr_if_not_void
 13098                                  
 13099 0000A618 48B8-                   	mov rax, L_constants + 0
 13099 0000A61A [0000000000000000] 
 13100 0000A622 48890425[18040000]      	mov qword [free_var_131], rax
 13101 0000A62A 48B8-                   	mov rax, sob_void
 13101 0000A62C [0000000000000000] 
 13102                                  
 13103 0000A634 4889C7                  	mov rdi, rax
 13104 0000A637 E8B2530000              	call print_sexpr_if_not_void
 13105                                  
 13106 0000A63C 48B8-                   	mov rax, L_constants + 0
 13106 0000A63E [0000000000000000] 
 13107 0000A646 48890425[20040000]      	mov qword [free_var_132], rax
 13108 0000A64E 48B8-                   	mov rax, sob_void
 13108 0000A650 [0000000000000000] 
 13109                                  
 13110 0000A658 4889C7                  	mov rdi, rax
 13111 0000A65B E88E530000              	call print_sexpr_if_not_void
 13112                                  
 13113 0000A660 48B8-                   	mov rax, L_constants + 0
 13113 0000A662 [0000000000000000] 
 13114 0000A66A 48890425[28040000]      	mov qword [free_var_133], rax
 13115 0000A672 48B8-                   	mov rax, sob_void
 13115 0000A674 [0000000000000000] 
 13116                                  
 13117 0000A67C 4889C7                  	mov rdi, rax
 13118 0000A67F E86A530000              	call print_sexpr_if_not_void
 13119                                  
 13120 0000A684 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13121 0000A689 E84F530000              	call malloc
 13122 0000A68E 50                      	push rax
 13123 0000A68F BF00000000              	mov rdi, 8 * 0	; new rib
 13124 0000A694 E844530000              	call malloc
 13125 0000A699 50                      	push rax
 13126 0000A69A BF08000000              	mov rdi, 8 * 1	; extended env
 13127 0000A69F E839530000              	call malloc
 13128 0000A6A4 488B7D10                	mov rdi, ENV
 13129 0000A6A8 BE00000000              	mov rsi, 0
 13130 0000A6AD BA01000000              	mov rdx, 1
 13131                                  .L_lambda_simple_env_loop_0103:	; ext_env[i + 1] <-- env[i]
 13132 0000A6B2 4883FE00                	cmp rsi, 0
 13133 0000A6B6 7410                    	je .L_lambda_simple_env_end_0103
 13134 0000A6B8 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13135 0000A6BC 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13136 0000A6C0 48FFC6                  	inc rsi
 13137 0000A6C3 48FFC2                  	inc rdx
 13138 0000A6C6 EBEA                    	jmp .L_lambda_simple_env_loop_0103
 13139                                  .L_lambda_simple_env_end_0103:
 13140 0000A6C8 5B                      	pop rbx
 13141 0000A6C9 BE00000000              	mov rsi, 0
 13142                                  .L_lambda_simple_params_loop_0103:	; copy params
 13143 0000A6CE 4883FE00                	cmp rsi, 0
 13144 0000A6D2 740E                    	je .L_lambda_simple_params_end_0103
 13145 0000A6D4 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13146 0000A6D9 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13147 0000A6DD 48FFC6                  	inc rsi
 13148 0000A6E0 EBEC                    	jmp .L_lambda_simple_params_loop_0103
 13149                                  .L_lambda_simple_params_end_0103:
 13150 0000A6E2 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13151 0000A6E5 4889C3                  	mov rbx, rax
 13152 0000A6E8 58                      	pop rax
 13153 0000A6E9 C60005                  	mov byte [rax], T_closure
 13154 0000A6EC 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13155 0000A6F0 48C74009[FDA60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0103
 13156 0000A6F8 E9D70B0000              	jmp .L_lambda_simple_end_0103
 13157                                  .L_lambda_simple_code_0103:	; lambda-simple body
 13158 0000A6FD 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13159 0000A703 740B                    	je .L_lambda_simple_arity_check_ok_0103
 13160 0000A705 FF742410                	push qword [rsp + 8 * 2]
 13161 0000A709 6A02                    	push 2
 13162 0000A70B E986520000              	jmp L_error_incorrect_arity_simple
 13163                                  .L_lambda_simple_arity_check_ok_0103:
 13164 0000A710 C8000000                	enter 0, 0
 13165 0000A714 48B8-                   	mov rax, L_constants + 23
 13165 0000A716 [1700000000000000] 
 13166 0000A71E 50                      	push rax
 13167 0000A71F 6A01                    	push 1
 13168 0000A721 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13169 0000A726 E8B2520000              	call malloc
 13170 0000A72B 50                      	push rax
 13171 0000A72C BF10000000              	mov rdi, 8 * 2	; new rib
 13172 0000A731 E8A7520000              	call malloc
 13173 0000A736 50                      	push rax
 13174 0000A737 BF10000000              	mov rdi, 8 * 2	; extended env
 13175 0000A73C E89C520000              	call malloc
 13176 0000A741 488B7D10                	mov rdi, ENV
 13177 0000A745 BE00000000              	mov rsi, 0
 13178 0000A74A BA01000000              	mov rdx, 1
 13179                                  .L_lambda_simple_env_loop_0104:	; ext_env[i + 1] <-- env[i]
 13180 0000A74F 4883FE01                	cmp rsi, 1
 13181 0000A753 7410                    	je .L_lambda_simple_env_end_0104
 13182 0000A755 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13183 0000A759 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13184 0000A75D 48FFC6                  	inc rsi
 13185 0000A760 48FFC2                  	inc rdx
 13186 0000A763 EBEA                    	jmp .L_lambda_simple_env_loop_0104
 13187                                  .L_lambda_simple_env_end_0104:
 13188 0000A765 5B                      	pop rbx
 13189 0000A766 BE00000000              	mov rsi, 0
 13190                                  .L_lambda_simple_params_loop_0104:	; copy params
 13191 0000A76B 4883FE02                	cmp rsi, 2
 13192 0000A76F 740E                    	je .L_lambda_simple_params_end_0104
 13193 0000A771 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13194 0000A776 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13195 0000A77A 48FFC6                  	inc rsi
 13196 0000A77D EBEC                    	jmp .L_lambda_simple_params_loop_0104
 13197                                  .L_lambda_simple_params_end_0104:
 13198 0000A77F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13199 0000A782 4889C3                  	mov rbx, rax
 13200 0000A785 58                      	pop rax
 13201 0000A786 C60005                  	mov byte [rax], T_closure
 13202 0000A789 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13203 0000A78D 48C74009[9AA70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0104
 13204 0000A795 E9F80A0000              	jmp .L_lambda_simple_end_0104
 13205                                  .L_lambda_simple_code_0104:	; lambda-simple body
 13206 0000A79A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13207 0000A7A0 740B                    	je .L_lambda_simple_arity_check_ok_0104
 13208 0000A7A2 FF742410                	push qword [rsp + 8 * 2]
 13209 0000A7A6 6A01                    	push 1
 13210 0000A7A8 E9E9510000              	jmp L_error_incorrect_arity_simple
 13211                                  .L_lambda_simple_arity_check_ok_0104:
 13212 0000A7AD C8000000                	enter 0, 0
 13213 0000A7B1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13214 0000A7B5 4889C2                  	mov rdx, rax
 13215 0000A7B8 BF08000000              	mov rdi, 8
 13216 0000A7BD E81B520000              	call malloc
 13217 0000A7C2 488910                  	mov qword[rax], rdx
 13218 0000A7C5 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13219 0000A7C9 48B8-                   	mov rax, sob_void
 13219 0000A7CB [0000000000000000] 
 13220                                  
 13221 0000A7D3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13222 0000A7D8 E800520000              	call malloc
 13223 0000A7DD 50                      	push rax
 13224 0000A7DE BF08000000              	mov rdi, 8 * 1	; new rib
 13225 0000A7E3 E8F5510000              	call malloc
 13226 0000A7E8 50                      	push rax
 13227 0000A7E9 BF18000000              	mov rdi, 8 * 3	; extended env
 13228 0000A7EE E8EA510000              	call malloc
 13229 0000A7F3 488B7D10                	mov rdi, ENV
 13230 0000A7F7 BE00000000              	mov rsi, 0
 13231 0000A7FC BA01000000              	mov rdx, 1
 13232                                  .L_lambda_simple_env_loop_0105:	; ext_env[i + 1] <-- env[i]
 13233 0000A801 4883FE02                	cmp rsi, 2
 13234 0000A805 7410                    	je .L_lambda_simple_env_end_0105
 13235 0000A807 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13236 0000A80B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13237 0000A80F 48FFC6                  	inc rsi
 13238 0000A812 48FFC2                  	inc rdx
 13239 0000A815 EBEA                    	jmp .L_lambda_simple_env_loop_0105
 13240                                  .L_lambda_simple_env_end_0105:
 13241 0000A817 5B                      	pop rbx
 13242 0000A818 BE00000000              	mov rsi, 0
 13243                                  .L_lambda_simple_params_loop_0105:	; copy params
 13244 0000A81D 4883FE01                	cmp rsi, 1
 13245 0000A821 740E                    	je .L_lambda_simple_params_end_0105
 13246 0000A823 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13247 0000A828 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13248 0000A82C 48FFC6                  	inc rsi
 13249 0000A82F EBEC                    	jmp .L_lambda_simple_params_loop_0105
 13250                                  .L_lambda_simple_params_end_0105:
 13251 0000A831 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13252 0000A834 4889C3                  	mov rbx, rax
 13253 0000A837 58                      	pop rax
 13254 0000A838 C60005                  	mov byte [rax], T_closure
 13255 0000A83B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13256 0000A83F 48C74009[4CA80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0105
 13257 0000A847 E934020000              	jmp .L_lambda_simple_end_0105
 13258                                  .L_lambda_simple_code_0105:	; lambda-simple body
 13259 0000A84C 48837C241005            	cmp qword [rsp + 8 * 2], 5
 13260 0000A852 740B                    	je .L_lambda_simple_arity_check_ok_0105
 13261 0000A854 FF742410                	push qword [rsp + 8 * 2]
 13262 0000A858 6A05                    	push 5
 13263 0000A85A E937510000              	jmp L_error_incorrect_arity_simple
 13264                                  .L_lambda_simple_arity_check_ok_0105:
 13265 0000A85F C8000000                	enter 0, 0
 13266 0000A863 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13267 0000A867 50                      	push rax
 13268 0000A868 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13269 0000A86C 50                      	push rax
 13270 0000A86D 6A02                    	push 2
 13271 0000A86F 488B0425[50030000]      	mov rax, qword [free_var_106]
 13272                                  	assert_closure(rax)
    42 0000A877 803805              <1>  cmp byte [%1], %2
    43 0000A87A 0F8551690000        <1>  jne L_error_incorrect_type
 13273 0000A880 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13274 0000A883 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13275 0000A886 483D[02000000]          	cmp rax, sob_boolean_false
 13276 0000A88C 7425                              	je .L_if_else_0098
 13277 0000A88E 488B4540                          	mov rax, qword [rbp + 8 * (4 + 4)]
 13278 0000A892 50                      	push rax
 13279 0000A893 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13280 0000A897 50                      	push rax
 13281 0000A898 6A02                    	push 2
 13282 0000A89A 488B0425[30030000]      	mov rax, qword [free_var_102]
 13283                                  	assert_closure(rax)
    42 0000A8A2 803805              <1>  cmp byte [%1], %2
    43 0000A8A5 0F8526690000        <1>  jne L_error_incorrect_type
 13284 0000A8AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 13285 0000A8AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 13286 0000A8B1 EB0A                    	jmp .L_if_end_0098
 13287                                            .L_if_else_0098:
 13288 0000A8B3 48B8-                             	mov rax, L_constants + 2
 13288 0000A8B5 [0200000000000000] 
 13289                                  .L_if_end_0098:
 13290 0000A8BD 483D[02000000]          	cmp rax, sob_boolean_false
 13291 0000A8C3 0F85B3010000            	jne .L_or_end_0011
 13292 0000A8C9 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13293 0000A8CD 50                      	push rax
 13294 0000A8CE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13295 0000A8D2 50                      	push rax
 13296 0000A8D3 6A02                    	push 2
 13297 0000A8D5 488B0425[30030000]      	mov rax, qword [free_var_102]
 13298                                  	assert_closure(rax)
    42 0000A8DD 803805              <1>  cmp byte [%1], %2
    43 0000A8E0 0F85EB680000        <1>  jne L_error_incorrect_type
 13299 0000A8E6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13300 0000A8E9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13301 0000A8EC 483D[02000000]          	cmp rax, sob_boolean_false
 13302 0000A8F2 0F847A010000                      	je .L_if_else_009a
 13303 0000A8F8 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 13304 0000A8FC 50                      	push rax
 13305 0000A8FD 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 13306 0000A901 50                      	push rax
 13307 0000A902 6A02                    	push 2
 13308 0000A904 488B0425[78010000]      	mov rax, qword [free_var_47]
 13309                                  	assert_closure(rax)
    42 0000A90C 803805              <1>  cmp byte [%1], %2
    43 0000A90F 0F85BC680000        <1>  jne L_error_incorrect_type
 13310 0000A915 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13311 0000A918 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13312 0000A91B 50                      	push rax
 13313 0000A91C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13314 0000A920 50                      	push rax
 13315 0000A921 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13316 0000A925 50                      	push rax
 13317 0000A926 6A02                    	push 2
 13318 0000A928 488B0425[78010000]      	mov rax, qword [free_var_47]
 13319                                  	assert_closure(rax)
    42 0000A930 803805              <1>  cmp byte [%1], %2
    43 0000A933 0F8598680000        <1>  jne L_error_incorrect_type
 13320 0000A939 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13321 0000A93C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13322 0000A93F 50                      	push rax
 13323 0000A940 6A02                    	push 2
 13324 0000A942 488B4510                	mov rax, qword [rbp + 8 * 2]
 13325 0000A946 488B4008                	mov rax, qword [rax + 8 * 1]
 13326 0000A94A 488B00                  	mov rax, qword [rax + 8 * 0]
 13327                                  	assert_closure(rax)
    42 0000A94D 803805              <1>  cmp byte [%1], %2
    43 0000A950 0F857B680000        <1>  jne L_error_incorrect_type
 13328 0000A956 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13329 0000A959 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13330 0000A95C 483D[02000000]          	cmp rax, sob_boolean_false
 13331 0000A962 0F8508010000            	jne .L_or_end_0012
 13332 0000A968 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13333 0000A96C 50                      	push rax
 13334 0000A96D 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 13335 0000A971 50                      	push rax
 13336 0000A972 6A02                    	push 2
 13337 0000A974 488B0425[78010000]      	mov rax, qword [free_var_47]
 13338                                  	assert_closure(rax)
    42 0000A97C 803805              <1>  cmp byte [%1], %2
    43 0000A97F 0F854C680000        <1>  jne L_error_incorrect_type
 13339 0000A985 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13340 0000A988 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13341 0000A98B 50                      	push rax
 13342 0000A98C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13343 0000A990 50                      	push rax
 13344 0000A991 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13345 0000A995 50                      	push rax
 13346 0000A996 6A02                    	push 2
 13347 0000A998 488B0425[78010000]      	mov rax, qword [free_var_47]
 13348                                  	assert_closure(rax)
    42 0000A9A0 803805              <1>  cmp byte [%1], %2
    43 0000A9A3 0F8528680000        <1>  jne L_error_incorrect_type
 13349 0000A9A9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13350 0000A9AC FF5009                  	call SOB_CLOSURE_CODE(rax)
 13351 0000A9AF 50                      	push rax
 13352 0000A9B0 6A02                    	push 2
 13353 0000A9B2 488B4510                	mov rax, qword [rbp + 8 * 2]
 13354 0000A9B6 488B4008                	mov rax, qword [rax + 8 * 1]
 13355 0000A9BA 488B4008                	mov rax, qword [rax + 8 * 1]
 13356                                  	assert_closure(rax)
    42 0000A9BE 803805              <1>  cmp byte [%1], %2
    43 0000A9C1 0F850A680000        <1>  jne L_error_incorrect_type
 13357 0000A9C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13358 0000A9CA FF5009                  	call SOB_CLOSURE_CODE(rax)
 13359 0000A9CD 483D[02000000]          	cmp rax, sob_boolean_false
 13360 0000A9D3 0F848D000000                      	je .L_if_else_0099
 13361 0000A9D9 488B4540                          	mov rax, qword [rbp + 8 * (4 + 4)]
 13362 0000A9DD 50                      	push rax
 13363 0000A9DE 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 13364 0000A9E2 50                      	push rax
 13365 0000A9E3 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 13366 0000A9E7 50                      	push rax
 13367 0000A9E8 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13368 0000A9EC 50                      	push rax
 13369 0000A9ED 48B8-                   	mov rax, L_constants + 128
 13369 0000A9EF [8000000000000000] 
 13370 0000A9F7 50                      	push rax
 13371 0000A9F8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13372 0000A9FC 50                      	push rax
 13373 0000A9FD 6A02                    	push 2
 13374 0000A9FF 488B0425[08030000]      	mov rax, qword [free_var_97]
 13375                                  	assert_closure(rax)
    42 0000AA07 803805              <1>  cmp byte [%1], %2
    43 0000AA0A 0F85C1670000        <1>  jne L_error_incorrect_type
 13376 0000AA10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13377 0000AA13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13378 0000AA16 50                      	push rax
 13379 0000AA17 6A05                    	push 5
 13380 0000AA19 488B4510                	mov rax, qword [rbp + 8 * 2]
 13381 0000AA1D 488B00                  	mov rax, qword [rax + 8 * 0]
 13382 0000AA20 488B00                  	mov rax, qword [rax + 8 * 0]
 13383 0000AA23 488B00                  	mov rax, qword [rax]
 13384                                  	assert_closure(rax)
    42 0000AA26 803805              <1>  cmp byte [%1], %2
    43 0000AA29 0F85A2670000        <1>  jne L_error_incorrect_type
 13385 0000AA2F FF7001                  	push SOB_CLOSURE_ENV(rax)
 13386 0000AA32 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13387 0000AA35 FF7500                  	push qword [rbp] ; same the old rbp
 13388 0000AA38 BA08000000              	mov rdx, 5 + 3
 13389 0000AA3D 488B4D00                	mov rcx, [rbp]
 13390 0000AA41 4889EF                  	mov rdi, rbp
 13391                                  .L_tc_recycle_frame_loop_0137:
 13392 0000AA44 4883FA00                	cmp rdx, 0
 13393 0000AA48 7413                    	je .L_tc_recycle_frame_done_0137
 13394 0000AA4A 4883E908                	sub rcx, 8
 13395 0000AA4E 4883EF08                	sub rdi, 8
 13396 0000AA52 488B37                  	mov rsi, [rdi]
 13397 0000AA55 488931                  	mov qword [rcx], rsi
 13398 0000AA58 48FFCA                  	dec rdx
 13399 0000AA5B EBE7                    	jmp .L_tc_recycle_frame_loop_0137
 13400                                  .L_tc_recycle_frame_done_0137:
 13401 0000AA5D 5D                      	pop rbp ; restore the old rbp
 13402 0000AA5E 4889CC                  	mov rsp, rcx
 13403 0000AA61 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13404 0000AA64 EB0A                    	jmp .L_if_end_0099
 13405                                            .L_if_else_0099:
 13406 0000AA66 48B8-                             	mov rax, L_constants + 2
 13406 0000AA68 [0200000000000000] 
 13407                                  .L_if_end_0099:
 13408                                  .L_or_end_0012:
 13409 0000AA70 EB0A                    	jmp .L_if_end_009a
 13410                                            .L_if_else_009a:
 13411 0000AA72 48B8-                             	mov rax, L_constants + 2
 13411 0000AA74 [0200000000000000] 
 13412                                  .L_if_end_009a:
 13413                                  .L_or_end_0011:
 13414 0000AA7C C9                      	leave
 13415 0000AA7D C23800                  	ret 8 * (2 + 5)
 13416                                  .L_lambda_simple_end_0105:	; new closure is in rax
 13417 0000AA80 50                      	push rax
 13418 0000AA81 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13419 0000AA85 8F00                    	pop qword [rax]
 13420 0000AA87 48B8-                   	mov rax, sob_void
 13420 0000AA89 [0000000000000000] 
 13421                                  
 13422 0000AA91 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13423 0000AA96 E8424F0000              	call malloc
 13424 0000AA9B 50                      	push rax
 13425 0000AA9C BF08000000              	mov rdi, 8 * 1	; new rib
 13426 0000AAA1 E8374F0000              	call malloc
 13427 0000AAA6 50                      	push rax
 13428 0000AAA7 BF18000000              	mov rdi, 8 * 3	; extended env
 13429 0000AAAC E82C4F0000              	call malloc
 13430 0000AAB1 488B7D10                	mov rdi, ENV
 13431 0000AAB5 BE00000000              	mov rsi, 0
 13432 0000AABA BA01000000              	mov rdx, 1
 13433                                  .L_lambda_simple_env_loop_0109:	; ext_env[i + 1] <-- env[i]
 13434 0000AABF 4883FE02                	cmp rsi, 2
 13435 0000AAC3 7410                    	je .L_lambda_simple_env_end_0109
 13436 0000AAC5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13437 0000AAC9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13438 0000AACD 48FFC6                  	inc rsi
 13439 0000AAD0 48FFC2                  	inc rdx
 13440 0000AAD3 EBEA                    	jmp .L_lambda_simple_env_loop_0109
 13441                                  .L_lambda_simple_env_end_0109:
 13442 0000AAD5 5B                      	pop rbx
 13443 0000AAD6 BE00000000              	mov rsi, 0
 13444                                  .L_lambda_simple_params_loop_0109:	; copy params
 13445 0000AADB 4883FE01                	cmp rsi, 1
 13446 0000AADF 740E                    	je .L_lambda_simple_params_end_0109
 13447 0000AAE1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13448 0000AAE6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13449 0000AAEA 48FFC6                  	inc rsi
 13450 0000AAED EBEC                    	jmp .L_lambda_simple_params_loop_0109
 13451                                  .L_lambda_simple_params_end_0109:
 13452 0000AAEF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13453 0000AAF2 4889C3                  	mov rbx, rax
 13454 0000AAF5 58                      	pop rax
 13455 0000AAF6 C60005                  	mov byte [rax], T_closure
 13456 0000AAF9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13457 0000AAFD 48C74009[0AAB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0109
 13458 0000AB05 E952020000              	jmp .L_lambda_simple_end_0109
 13459                                  .L_lambda_simple_code_0109:	; lambda-simple body
 13460 0000AB0A 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13461 0000AB10 740B                    	je .L_lambda_simple_arity_check_ok_0109
 13462 0000AB12 FF742410                	push qword [rsp + 8 * 2]
 13463 0000AB16 6A02                    	push 2
 13464 0000AB18 E9794E0000              	jmp L_error_incorrect_arity_simple
 13465                                  .L_lambda_simple_arity_check_ok_0109:
 13466 0000AB1D C8000000                	enter 0, 0
 13467 0000AB21 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13468 0000AB25 50                      	push rax
 13469 0000AB26 6A01                    	push 1
 13470 0000AB28 488B0425[90000000]      	mov rax, qword [free_var_18]
 13471                                  	assert_closure(rax)
    42 0000AB30 803805              <1>  cmp byte [%1], %2
    43 0000AB33 0F8598660000        <1>  jne L_error_incorrect_type
 13472 0000AB39 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13473 0000AB3C FF5009                  	call SOB_CLOSURE_CODE(rax)
 13474 0000AB3F 50                      	push rax
 13475 0000AB40 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13476 0000AB44 50                      	push rax
 13477 0000AB45 6A01                    	push 1
 13478 0000AB47 488B0425[90000000]      	mov rax, qword [free_var_18]
 13479                                  	assert_closure(rax)
    42 0000AB4F 803805              <1>  cmp byte [%1], %2
    43 0000AB52 0F8579660000        <1>  jne L_error_incorrect_type
 13480 0000AB58 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13481 0000AB5B FF5009                  	call SOB_CLOSURE_CODE(rax)
 13482 0000AB5E 50                      	push rax
 13483 0000AB5F 6A02                    	push 2
 13484 0000AB61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13485 0000AB66 E8724E0000              	call malloc
 13486 0000AB6B 50                      	push rax
 13487 0000AB6C BF10000000              	mov rdi, 8 * 2	; new rib
 13488 0000AB71 E8674E0000              	call malloc
 13489 0000AB76 50                      	push rax
 13490 0000AB77 BF20000000              	mov rdi, 8 * 4	; extended env
 13491 0000AB7C E85C4E0000              	call malloc
 13492 0000AB81 488B7D10                	mov rdi, ENV
 13493 0000AB85 BE00000000              	mov rsi, 0
 13494 0000AB8A BA01000000              	mov rdx, 1
 13495                                  .L_lambda_simple_env_loop_010a:	; ext_env[i + 1] <-- env[i]
 13496 0000AB8F 4883FE03                	cmp rsi, 3
 13497 0000AB93 7410                    	je .L_lambda_simple_env_end_010a
 13498 0000AB95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13499 0000AB99 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13500 0000AB9D 48FFC6                  	inc rsi
 13501 0000ABA0 48FFC2                  	inc rdx
 13502 0000ABA3 EBEA                    	jmp .L_lambda_simple_env_loop_010a
 13503                                  .L_lambda_simple_env_end_010a:
 13504 0000ABA5 5B                      	pop rbx
 13505 0000ABA6 BE00000000              	mov rsi, 0
 13506                                  .L_lambda_simple_params_loop_010a:	; copy params
 13507 0000ABAB 4883FE02                	cmp rsi, 2
 13508 0000ABAF 740E                    	je .L_lambda_simple_params_end_010a
 13509 0000ABB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13510 0000ABB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13511 0000ABBA 48FFC6                  	inc rsi
 13512 0000ABBD EBEC                    	jmp .L_lambda_simple_params_loop_010a
 13513                                  .L_lambda_simple_params_end_010a:
 13514 0000ABBF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13515 0000ABC2 4889C3                  	mov rbx, rax
 13516 0000ABC5 58                      	pop rax
 13517 0000ABC6 C60005                  	mov byte [rax], T_closure
 13518 0000ABC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13519 0000ABCD 48C74009[DAAB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010a
 13520 0000ABD5 E940010000              	jmp .L_lambda_simple_end_010a
 13521                                  .L_lambda_simple_code_010a:	; lambda-simple body
 13522 0000ABDA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13523 0000ABE0 740B                    	je .L_lambda_simple_arity_check_ok_010a
 13524 0000ABE2 FF742410                	push qword [rsp + 8 * 2]
 13525 0000ABE6 6A02                    	push 2
 13526 0000ABE8 E9A94D0000              	jmp L_error_incorrect_arity_simple
 13527                                  .L_lambda_simple_arity_check_ok_010a:
 13528 0000ABED C8000000                	enter 0, 0
 13529 0000ABF1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13530 0000ABF5 50                      	push rax
 13531 0000ABF6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13532 0000ABFA 50                      	push rax
 13533 0000ABFB 6A02                    	push 2
 13534 0000ABFD 488B0425[38030000]      	mov rax, qword [free_var_103]
 13535                                  	assert_closure(rax)
    42 0000AC05 803805              <1>  cmp byte [%1], %2
    43 0000AC08 0F85C3650000        <1>  jne L_error_incorrect_type
 13536 0000AC0E FF7001                  	push SOB_CLOSURE_ENV(rax)
 13537 0000AC11 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13538 0000AC14 483D[02000000]          	cmp rax, sob_boolean_false
 13539 0000AC1A 0F847C000000                      	je .L_if_else_009c
 13540 0000AC20 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 13541 0000AC24 50                      	push rax
 13542 0000AC25 488B4510                	mov rax, qword [rbp + 8 * 2]
 13543 0000AC29 488B00                  	mov rax, qword [rax + 8 * 0]
 13544 0000AC2C 488B4008                	mov rax, qword [rax + 8 * 1]
 13545 0000AC30 50                      	push rax
 13546 0000AC31 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13547 0000AC35 50                      	push rax
 13548 0000AC36 488B4510                	mov rax, qword [rbp + 8 * 2]
 13549 0000AC3A 488B00                  	mov rax, qword [rax + 8 * 0]
 13550 0000AC3D 488B00                  	mov rax, qword [rax + 8 * 0]
 13551 0000AC40 50                      	push rax
 13552 0000AC41 48B8-                   	mov rax, L_constants + 32
 13552 0000AC43 [2000000000000000] 
 13553 0000AC4B 50                      	push rax
 13554 0000AC4C 6A05                    	push 5
 13555 0000AC4E 488B4510                	mov rax, qword [rbp + 8 * 2]
 13556 0000AC52 488B4008                	mov rax, qword [rax + 8 * 1]
 13557 0000AC56 488B00                  	mov rax, qword [rax + 8 * 0]
 13558 0000AC59 488B00                  	mov rax, qword [rax]
 13559                                  	assert_closure(rax)
    42 0000AC5C 803805              <1>  cmp byte [%1], %2
    43 0000AC5F 0F856C650000        <1>  jne L_error_incorrect_type
 13560 0000AC65 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13561 0000AC68 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13562 0000AC6B FF7500                  	push qword [rbp] ; same the old rbp
 13563 0000AC6E BA08000000              	mov rdx, 5 + 3
 13564 0000AC73 488B4D00                	mov rcx, [rbp]
 13565 0000AC77 4889EF                  	mov rdi, rbp
 13566                                  .L_tc_recycle_frame_loop_013d:
 13567 0000AC7A 4883FA00                	cmp rdx, 0
 13568 0000AC7E 7413                    	je .L_tc_recycle_frame_done_013d
 13569 0000AC80 4883E908                	sub rcx, 8
 13570 0000AC84 4883EF08                	sub rdi, 8
 13571 0000AC88 488B37                  	mov rsi, [rdi]
 13572 0000AC8B 488931                  	mov qword [rcx], rsi
 13573 0000AC8E 48FFCA                  	dec rdx
 13574 0000AC91 EBE7                    	jmp .L_tc_recycle_frame_loop_013d
 13575                                  .L_tc_recycle_frame_done_013d:
 13576 0000AC93 5D                      	pop rbp ; restore the old rbp
 13577 0000AC94 4889CC                  	mov rsp, rcx
 13578 0000AC97 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13579 0000AC9A EB7A                    	jmp .L_if_end_009c
 13580                                            .L_if_else_009c:
 13581 0000AC9C 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 13582 0000ACA0 50                      	push rax
 13583 0000ACA1 488B4510                	mov rax, qword [rbp + 8 * 2]
 13584 0000ACA5 488B00                  	mov rax, qword [rax + 8 * 0]
 13585 0000ACA8 488B00                  	mov rax, qword [rax + 8 * 0]
 13586 0000ACAB 50                      	push rax
 13587 0000ACAC 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13588 0000ACB0 50                      	push rax
 13589 0000ACB1 488B4510                	mov rax, qword [rbp + 8 * 2]
 13590 0000ACB5 488B00                  	mov rax, qword [rax + 8 * 0]
 13591 0000ACB8 488B4008                	mov rax, qword [rax + 8 * 1]
 13592 0000ACBC 50                      	push rax
 13593 0000ACBD 48B8-                   	mov rax, L_constants + 32
 13593 0000ACBF [2000000000000000] 
 13594 0000ACC7 50                      	push rax
 13595 0000ACC8 6A05                    	push 5
 13596 0000ACCA 488B4510                	mov rax, qword [rbp + 8 * 2]
 13597 0000ACCE 488B4008                	mov rax, qword [rax + 8 * 1]
 13598 0000ACD2 488B00                  	mov rax, qword [rax + 8 * 0]
 13599 0000ACD5 488B00                  	mov rax, qword [rax]
 13600                                  	assert_closure(rax)
    42 0000ACD8 803805              <1>  cmp byte [%1], %2
    43 0000ACDB 0F85F0640000        <1>  jne L_error_incorrect_type
 13601 0000ACE1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13602 0000ACE4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13603 0000ACE7 FF7500                  	push qword [rbp] ; same the old rbp
 13604 0000ACEA BA08000000              	mov rdx, 5 + 3
 13605 0000ACEF 488B4D00                	mov rcx, [rbp]
 13606 0000ACF3 4889EF                  	mov rdi, rbp
 13607                                  .L_tc_recycle_frame_loop_013e:
 13608 0000ACF6 4883FA00                	cmp rdx, 0
 13609 0000ACFA 7413                    	je .L_tc_recycle_frame_done_013e
 13610 0000ACFC 4883E908                	sub rcx, 8
 13611 0000AD00 4883EF08                	sub rdi, 8
 13612 0000AD04 488B37                  	mov rsi, [rdi]
 13613 0000AD07 488931                  	mov qword [rcx], rsi
 13614 0000AD0A 48FFCA                  	dec rdx
 13615 0000AD0D EBE7                    	jmp .L_tc_recycle_frame_loop_013e
 13616                                  .L_tc_recycle_frame_done_013e:
 13617 0000AD0F 5D                      	pop rbp ; restore the old rbp
 13618 0000AD10 4889CC                  	mov rsp, rcx
 13619 0000AD13 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13620                                  .L_if_end_009c:
 13621 0000AD16 C9                      	leave
 13622 0000AD17 C22000                  	ret 8 * (2 + 2)
 13623                                  .L_lambda_simple_end_010a:	; new closure is in rax
 13624                                  	assert_closure(rax)
    42 0000AD1A 803805              <1>  cmp byte [%1], %2
    43 0000AD1D 0F85AE640000        <1>  jne L_error_incorrect_type
 13625 0000AD23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13626 0000AD26 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13627 0000AD29 FF7500                  	push qword [rbp] ; same the old rbp
 13628 0000AD2C BA05000000              	mov rdx, 2 + 3
 13629 0000AD31 488B4D00                	mov rcx, [rbp]
 13630 0000AD35 4889EF                  	mov rdi, rbp
 13631                                  .L_tc_recycle_frame_loop_013c:
 13632 0000AD38 4883FA00                	cmp rdx, 0
 13633 0000AD3C 7413                    	je .L_tc_recycle_frame_done_013c
 13634 0000AD3E 4883E908                	sub rcx, 8
 13635 0000AD42 4883EF08                	sub rdi, 8
 13636 0000AD46 488B37                  	mov rsi, [rdi]
 13637 0000AD49 488931                  	mov qword [rcx], rsi
 13638 0000AD4C 48FFCA                  	dec rdx
 13639 0000AD4F EBE7                    	jmp .L_tc_recycle_frame_loop_013c
 13640                                  .L_tc_recycle_frame_done_013c:
 13641 0000AD51 5D                      	pop rbp ; restore the old rbp
 13642 0000AD52 4889CC                  	mov rsp, rcx
 13643 0000AD55 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13644 0000AD58 C9                      	leave
 13645 0000AD59 C22000                  	ret 8 * (2 + 2)
 13646                                  .L_lambda_simple_end_0109:	; new closure is in rax
 13647 0000AD5C 50                      	push rax
 13648 0000AD5D 6A01                    	push 1
 13649 0000AD5F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13650 0000AD64 E8744C0000              	call malloc
 13651 0000AD69 50                      	push rax
 13652 0000AD6A BF08000000              	mov rdi, 8 * 1	; new rib
 13653 0000AD6F E8694C0000              	call malloc
 13654 0000AD74 50                      	push rax
 13655 0000AD75 BF18000000              	mov rdi, 8 * 3	; extended env
 13656 0000AD7A E85E4C0000              	call malloc
 13657 0000AD7F 488B7D10                	mov rdi, ENV
 13658 0000AD83 BE00000000              	mov rsi, 0
 13659 0000AD88 BA01000000              	mov rdx, 1
 13660                                  .L_lambda_simple_env_loop_0106:	; ext_env[i + 1] <-- env[i]
 13661 0000AD8D 4883FE02                	cmp rsi, 2
 13662 0000AD91 7410                    	je .L_lambda_simple_env_end_0106
 13663 0000AD93 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13664 0000AD97 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13665 0000AD9B 48FFC6                  	inc rsi
 13666 0000AD9E 48FFC2                  	inc rdx
 13667 0000ADA1 EBEA                    	jmp .L_lambda_simple_env_loop_0106
 13668                                  .L_lambda_simple_env_end_0106:
 13669 0000ADA3 5B                      	pop rbx
 13670 0000ADA4 BE00000000              	mov rsi, 0
 13671                                  .L_lambda_simple_params_loop_0106:	; copy params
 13672 0000ADA9 4883FE01                	cmp rsi, 1
 13673 0000ADAD 740E                    	je .L_lambda_simple_params_end_0106
 13674 0000ADAF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13675 0000ADB4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13676 0000ADB8 48FFC6                  	inc rsi
 13677 0000ADBB EBEC                    	jmp .L_lambda_simple_params_loop_0106
 13678                                  .L_lambda_simple_params_end_0106:
 13679 0000ADBD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13680 0000ADC0 4889C3                  	mov rbx, rax
 13681 0000ADC3 58                      	pop rax
 13682 0000ADC4 C60005                  	mov byte [rax], T_closure
 13683 0000ADC7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13684 0000ADCB 48C74009[D8AD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0106
 13685 0000ADD3 E978040000              	jmp .L_lambda_simple_end_0106
 13686                                  .L_lambda_simple_code_0106:	; lambda-simple body
 13687 0000ADD8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13688 0000ADDE 740B                    	je .L_lambda_simple_arity_check_ok_0106
 13689 0000ADE0 FF742410                	push qword [rsp + 8 * 2]
 13690 0000ADE4 6A01                    	push 1
 13691 0000ADE6 E9AB4B0000              	jmp L_error_incorrect_arity_simple
 13692                                  .L_lambda_simple_arity_check_ok_0106:
 13693 0000ADEB C8000000                	enter 0, 0
 13694 0000ADEF 48B8-                   	mov rax, L_constants + 23
 13694 0000ADF1 [1700000000000000] 
 13695 0000ADF9 50                      	push rax
 13696 0000ADFA 6A01                    	push 1
 13697 0000ADFC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13698 0000AE01 E8D74B0000              	call malloc
 13699 0000AE06 50                      	push rax
 13700 0000AE07 BF08000000              	mov rdi, 8 * 1	; new rib
 13701 0000AE0C E8CC4B0000              	call malloc
 13702 0000AE11 50                      	push rax
 13703 0000AE12 BF20000000              	mov rdi, 8 * 4	; extended env
 13704 0000AE17 E8C14B0000              	call malloc
 13705 0000AE1C 488B7D10                	mov rdi, ENV
 13706 0000AE20 BE00000000              	mov rsi, 0
 13707 0000AE25 BA01000000              	mov rdx, 1
 13708                                  .L_lambda_simple_env_loop_0107:	; ext_env[i + 1] <-- env[i]
 13709 0000AE2A 4883FE03                	cmp rsi, 3
 13710 0000AE2E 7410                    	je .L_lambda_simple_env_end_0107
 13711 0000AE30 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13712 0000AE34 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13713 0000AE38 48FFC6                  	inc rsi
 13714 0000AE3B 48FFC2                  	inc rdx
 13715 0000AE3E EBEA                    	jmp .L_lambda_simple_env_loop_0107
 13716                                  .L_lambda_simple_env_end_0107:
 13717 0000AE40 5B                      	pop rbx
 13718 0000AE41 BE00000000              	mov rsi, 0
 13719                                  .L_lambda_simple_params_loop_0107:	; copy params
 13720 0000AE46 4883FE01                	cmp rsi, 1
 13721 0000AE4A 740E                    	je .L_lambda_simple_params_end_0107
 13722 0000AE4C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13723 0000AE51 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13724 0000AE55 48FFC6                  	inc rsi
 13725 0000AE58 EBEC                    	jmp .L_lambda_simple_params_loop_0107
 13726                                  .L_lambda_simple_params_end_0107:
 13727 0000AE5A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13728 0000AE5D 4889C3                  	mov rbx, rax
 13729 0000AE60 58                      	pop rax
 13730 0000AE61 C60005                  	mov byte [rax], T_closure
 13731 0000AE64 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13732 0000AE68 48C74009[75AE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0107
 13733 0000AE70 E999030000              	jmp .L_lambda_simple_end_0107
 13734                                  .L_lambda_simple_code_0107:	; lambda-simple body
 13735 0000AE75 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13736 0000AE7B 740B                    	je .L_lambda_simple_arity_check_ok_0107
 13737 0000AE7D FF742410                	push qword [rsp + 8 * 2]
 13738 0000AE81 6A01                    	push 1
 13739 0000AE83 E90E4B0000              	jmp L_error_incorrect_arity_simple
 13740                                  .L_lambda_simple_arity_check_ok_0107:
 13741 0000AE88 C8000000                	enter 0, 0
 13742 0000AE8C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13743 0000AE90 4889C2                  	mov rdx, rax
 13744 0000AE93 BF08000000              	mov rdi, 8
 13745 0000AE98 E8404B0000              	call malloc
 13746 0000AE9D 488910                  	mov qword[rax], rdx
 13747 0000AEA0 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 13748 0000AEA4 48B8-                   	mov rax, sob_void
 13748 0000AEA6 [0000000000000000] 
 13749                                  
 13750 0000AEAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13751 0000AEB3 E8254B0000              	call malloc
 13752 0000AEB8 50                      	push rax
 13753 0000AEB9 BF08000000              	mov rdi, 8 * 1	; new rib
 13754 0000AEBE E81A4B0000              	call malloc
 13755 0000AEC3 50                      	push rax
 13756 0000AEC4 BF28000000              	mov rdi, 8 * 5	; extended env
 13757 0000AEC9 E80F4B0000              	call malloc
 13758 0000AECE 488B7D10                	mov rdi, ENV
 13759 0000AED2 BE00000000              	mov rsi, 0
 13760 0000AED7 BA01000000              	mov rdx, 1
 13761                                  .L_lambda_simple_env_loop_0108:	; ext_env[i + 1] <-- env[i]
 13762 0000AEDC 4883FE04                	cmp rsi, 4
 13763 0000AEE0 7410                    	je .L_lambda_simple_env_end_0108
 13764 0000AEE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13765 0000AEE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13766 0000AEEA 48FFC6                  	inc rsi
 13767 0000AEED 48FFC2                  	inc rdx
 13768 0000AEF0 EBEA                    	jmp .L_lambda_simple_env_loop_0108
 13769                                  .L_lambda_simple_env_end_0108:
 13770 0000AEF2 5B                      	pop rbx
 13771 0000AEF3 BE00000000              	mov rsi, 0
 13772                                  .L_lambda_simple_params_loop_0108:	; copy params
 13773 0000AEF8 4883FE01                	cmp rsi, 1
 13774 0000AEFC 740E                    	je .L_lambda_simple_params_end_0108
 13775 0000AEFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13776 0000AF03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13777 0000AF07 48FFC6                  	inc rsi
 13778 0000AF0A EBEC                    	jmp .L_lambda_simple_params_loop_0108
 13779                                  .L_lambda_simple_params_end_0108:
 13780 0000AF0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13781 0000AF0F 4889C3                  	mov rbx, rax
 13782 0000AF12 58                      	pop rax
 13783 0000AF13 C60005                  	mov byte [rax], T_closure
 13784 0000AF16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13785 0000AF1A 48C74009[27AF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0108
 13786 0000AF22 E928010000              	jmp .L_lambda_simple_end_0108
 13787                                  .L_lambda_simple_code_0108:	; lambda-simple body
 13788 0000AF27 48837C241002            	cmp qword [rsp + 8 * 2], 2
 13789 0000AF2D 740B                    	je .L_lambda_simple_arity_check_ok_0108
 13790 0000AF2F FF742410                	push qword [rsp + 8 * 2]
 13791 0000AF33 6A02                    	push 2
 13792 0000AF35 E95C4A0000              	jmp L_error_incorrect_arity_simple
 13793                                  .L_lambda_simple_arity_check_ok_0108:
 13794 0000AF3A C8000000                	enter 0, 0
 13795 0000AF3E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13796 0000AF42 50                      	push rax
 13797 0000AF43 6A01                    	push 1
 13798 0000AF45 488B0425[00000000]      	mov rax, qword [free_var_0]
 13799                                  	assert_closure(rax)
    42 0000AF4D 803805              <1>  cmp byte [%1], %2
    43 0000AF50 0F857B620000        <1>  jne L_error_incorrect_type
 13800 0000AF56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13801 0000AF59 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13802 0000AF5C 483D[02000000]          	cmp rax, sob_boolean_false
 13803 0000AF62 0F85E3000000            	jne .L_or_end_0013
 13804 0000AF68 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13805 0000AF6C 50                      	push rax
 13806 0000AF6D 6A01                    	push 1
 13807 0000AF6F 488B0425[80000000]      	mov rax, qword [free_var_16]
 13808                                  	assert_closure(rax)
    42 0000AF77 803805              <1>  cmp byte [%1], %2
    43 0000AF7A 0F8551620000        <1>  jne L_error_incorrect_type
 13809 0000AF80 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13810 0000AF83 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13811 0000AF86 50                      	push rax
 13812 0000AF87 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13813 0000AF8B 50                      	push rax
 13814 0000AF8C 6A02                    	push 2
 13815 0000AF8E 488B4510                	mov rax, qword [rbp + 8 * 2]
 13816 0000AF92 488B4008                	mov rax, qword [rax + 8 * 1]
 13817 0000AF96 488B00                  	mov rax, qword [rax + 8 * 0]
 13818                                  	assert_closure(rax)
    42 0000AF99 803805              <1>  cmp byte [%1], %2
    43 0000AF9C 0F852F620000        <1>  jne L_error_incorrect_type
 13819 0000AFA2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13820 0000AFA5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 13821 0000AFA8 483D[02000000]          	cmp rax, sob_boolean_false
 13822 0000AFAE 0F848D000000                      	je .L_if_else_009b
 13823 0000AFB4 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 13824 0000AFB8 50                      	push rax
 13825 0000AFB9 6A01                    	push 1
 13826 0000AFBB 488B0425[88000000]      	mov rax, qword [free_var_17]
 13827                                  	assert_closure(rax)
    42 0000AFC3 803805              <1>  cmp byte [%1], %2
    43 0000AFC6 0F8505620000        <1>  jne L_error_incorrect_type
 13828 0000AFCC FF7001                  	push SOB_CLOSURE_ENV(rax)
 13829 0000AFCF FF5009                  	call SOB_CLOSURE_CODE(rax)
 13830 0000AFD2 50                      	push rax
 13831 0000AFD3 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13832 0000AFD7 50                      	push rax
 13833 0000AFD8 6A01                    	push 1
 13834 0000AFDA 488B0425[80000000]      	mov rax, qword [free_var_16]
 13835                                  	assert_closure(rax)
    42 0000AFE2 803805              <1>  cmp byte [%1], %2
    43 0000AFE5 0F85E6610000        <1>  jne L_error_incorrect_type
 13836 0000AFEB FF7001                  	push SOB_CLOSURE_ENV(rax)
 13837 0000AFEE FF5009                  	call SOB_CLOSURE_CODE(rax)
 13838 0000AFF1 50                      	push rax
 13839 0000AFF2 6A02                    	push 2
 13840 0000AFF4 488B4510                	mov rax, qword [rbp + 8 * 2]
 13841 0000AFF8 488B00                  	mov rax, qword [rax + 8 * 0]
 13842 0000AFFB 488B00                  	mov rax, qword [rax + 8 * 0]
 13843 0000AFFE 488B00                  	mov rax, qword [rax]
 13844                                  	assert_closure(rax)
    42 0000B001 803805              <1>  cmp byte [%1], %2
    43 0000B004 0F85C7610000        <1>  jne L_error_incorrect_type
 13845 0000B00A FF7001                  	push SOB_CLOSURE_ENV(rax)
 13846 0000B00D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13847 0000B010 FF7500                  	push qword [rbp] ; same the old rbp
 13848 0000B013 BA05000000              	mov rdx, 2 + 3
 13849 0000B018 488B4D00                	mov rcx, [rbp]
 13850 0000B01C 4889EF                  	mov rdi, rbp
 13851                                  .L_tc_recycle_frame_loop_013a:
 13852 0000B01F 4883FA00                	cmp rdx, 0
 13853 0000B023 7413                    	je .L_tc_recycle_frame_done_013a
 13854 0000B025 4883E908                	sub rcx, 8
 13855 0000B029 4883EF08                	sub rdi, 8
 13856 0000B02D 488B37                  	mov rsi, [rdi]
 13857 0000B030 488931                  	mov qword [rcx], rsi
 13858 0000B033 48FFCA                  	dec rdx
 13859 0000B036 EBE7                    	jmp .L_tc_recycle_frame_loop_013a
 13860                                  .L_tc_recycle_frame_done_013a:
 13861 0000B038 5D                      	pop rbp ; restore the old rbp
 13862 0000B039 4889CC                  	mov rsp, rcx
 13863 0000B03C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 13864 0000B03F EB0A                    	jmp .L_if_end_009b
 13865                                            .L_if_else_009b:
 13866 0000B041 48B8-                             	mov rax, L_constants + 2
 13866 0000B043 [0200000000000000] 
 13867                                  .L_if_end_009b:
 13868                                  .L_or_end_0013:
 13869 0000B04B C9                      	leave
 13870 0000B04C C22000                  	ret 8 * (2 + 2)
 13871                                  .L_lambda_simple_end_0108:	; new closure is in rax
 13872 0000B04F 50                      	push rax
 13873 0000B050 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13874 0000B054 8F00                    	pop qword [rax]
 13875 0000B056 48B8-                   	mov rax, sob_void
 13875 0000B058 [0000000000000000] 
 13876                                  
 13877 0000B060 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 13878 0000B065 E873490000              	call malloc
 13879 0000B06A 50                      	push rax
 13880 0000B06B BF08000000              	mov rdi, 8 * 1	; new rib
 13881 0000B070 E868490000              	call malloc
 13882 0000B075 50                      	push rax
 13883 0000B076 BF28000000              	mov rdi, 8 * 5	; extended env
 13884 0000B07B E85D490000              	call malloc
 13885 0000B080 488B7D10                	mov rdi, ENV
 13886 0000B084 BE00000000              	mov rsi, 0
 13887 0000B089 BA01000000              	mov rdx, 1
 13888                                  .L_lambda_opt_env_loop_0029:	; ext_env[i + 1] <-- env[i]
 13889 0000B08E 4883FE04                	cmp rsi, 4
 13890 0000B092 7410                    	je .L_lambda_opt_env_end_0029
 13891 0000B094 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 13892 0000B098 48890CD0                	mov qword [rax + 8 * rdx], rcx
 13893 0000B09C 48FFC6                  	inc rsi
 13894 0000B09F 48FFC2                  	inc rdx
 13895 0000B0A2 EBEA                    	jmp .L_lambda_opt_env_loop_0029
 13896                                  .L_lambda_opt_env_end_0029:
 13897 0000B0A4 5B                      	pop rbx
 13898 0000B0A5 BE00000000              	mov rsi, 0
 13899                                  .L_lambda_opt_params_loop_0029:	; copy params
 13900 0000B0AA 4883FE01                	cmp rsi, 1
 13901 0000B0AE 740E                    	je .L_lambda_opt_params_end_0029
 13902 0000B0B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 13903 0000B0B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 13904 0000B0B9 48FFC6                  	inc rsi
 13905 0000B0BC EBEC                    	jmp .L_lambda_opt_params_loop_0029
 13906                                  .L_lambda_opt_params_end_0029:
 13907 0000B0BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 13908 0000B0C1 4889C3                  	mov rbx, rax
 13909 0000B0C4 58                      	pop rax
 13910 0000B0C5 C60005                  	mov byte [rax], T_closure
 13911 0000B0C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 13912 0000B0CC 48C74009[D9B00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_0029
 13913 0000B0D4 E931010000              	jmp .L_lambda_opt_end_0029
 13914                                  .L_lambda_opt_code_0029:	; lambda-opt body
 13915 0000B0D9 48837C241001            	cmp qword [rsp + 8 * 2], 1
 13916 0000B0DF 740D                    	je .L_lambda_opt_arity_check_exact_0029
 13917 0000B0E1 7F43                    	jg .L_lambda_opt_arity_check_more_0029
 13918 0000B0E3 FF742410                	push qword [rsp + 8 * 2]
 13919 0000B0E7 6A01                    	push 1
 13920 0000B0E9 E9BC480000              	jmp L_error_incorrect_arity_opt
 13921                                  .L_lambda_opt_arity_check_exact_0029:
 13922 0000B0EE 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 13923 0000B0F7 BA04000000              	mov rdx, 4
 13924 0000B0FC FF3424                  	push qword [rsp]
 13925 0000B0FF BE01000000              	mov rsi, 1
 13926                                  .L_lambda_opt_stack_shrink_loop_0079:
 13927 0000B104 4839D6                  	cmp rsi, rdx
 13928 0000B107 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0079
 13929 0000B109 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 13930 0000B10E 488B0B                  	mov rcx, [rbx]
 13931 0000B111 48894BF8                	mov qword [rbx - 8], rcx
 13932 0000B115 48FFC6                  	inc rsi
 13933 0000B118 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0079
 13934                                  .L_lambda_opt_stack_shrink_loop_exit_0079:
 13935 0000B11A 48C703[01000000]        	mov qword [rbx], sob_nil
 13936 0000B121 E985000000              	jmp .L_lambda_opt_stack_adjusted_0029
 13937                                  .L_lambda_opt_arity_check_more_0029:
 13938 0000B126 488B542410              	mov rdx, qword [rsp + 8 * 2]
 13939 0000B12B 4883EA01                	sub rdx, 1
 13940 0000B12F 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 13941 0000B138 BE00000000              	mov rsi, 0
 13942 0000B13D 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 13943 0000B142 48B9-                   	mov rcx, sob_nil
 13943 0000B144 [0100000000000000] 
 13944                                  .L_lambda_opt_stack_shrink_loop_007a:
 13945 0000B14C 4839D6                  	cmp rsi, rdx
 13946 0000B14F 7427                    je .L_lambda_opt_stack_shrink_loop_exit_007a
 13947 0000B151 BF11000000              	mov rdi, 17 ; 1+8+8
 13948 0000B156 E882480000              	call malloc
 13949 0000B15B 48894809                	mov SOB_PAIR_CDR(rax), rcx
 13950 0000B15F 48F7DE                  	neg rsi
 13951 0000B162 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 13952 0000B166 48F7DE                  	neg rsi
 13953 0000B169 48894801                	mov SOB_PAIR_CAR(rax), rcx
 13954 0000B16D C60021                  	mov byte [rax], T_pair
 13955 0000B170 4889C1                  	mov rcx, rax
 13956 0000B173 48FFC6                  	inc rsi
 13957 0000B176 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_007a
 13958                                  .L_lambda_opt_stack_shrink_loop_exit_007a:
 13959 0000B178 48890B                  	mov qword [rbx], rcx
 13960 0000B17B 4883EB08                	sub rbx, 8
 13961 0000B17F 4889E7                  	mov rdi, rsp
 13962 0000B182 4883C718                	add rdi, 24
 13963 0000B186 BE04000000              	mov rsi, 4
 13964                                  .L_lambda_opt_stack_shrink_loop_007b:
 13965 0000B18B 4883FE00                	cmp rsi,0
 13966 0000B18F 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_007b
 13967 0000B191 488B0F                  	mov rcx, qword [rdi]
 13968 0000B194 48890B                  	mov [rbx], rcx
 13969 0000B197 48FFCE                  	dec rsi
 13970 0000B19A 4883EB08                	sub rbx, 8
 13971 0000B19E 4883EF08                	sub rdi, 8
 13972 0000B1A2 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_007b
 13973                                  .L_lambda_opt_stack_shrink_loop_exit_007b:
 13974 0000B1A4 4883C308                	add rbx, 8
 13975 0000B1A8 4889DC                  	mov rsp, rbx
 13976                                  .L_lambda_opt_stack_adjusted_0029:
 13977 0000B1AB C8000000                	enter 0, 0
 13978 0000B1AF 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 13979 0000B1B3 50                      	push rax
 13980 0000B1B4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 13981 0000B1B8 50                      	push rax
 13982 0000B1B9 6A02                    	push 2
 13983 0000B1BB 488B4510                	mov rax, qword [rbp + 8 * 2]
 13984 0000B1BF 488B00                  	mov rax, qword [rax + 8 * 0]
 13985 0000B1C2 488B00                  	mov rax, qword [rax + 8 * 0]
 13986 0000B1C5 488B00                  	mov rax, qword [rax]
 13987                                  	assert_closure(rax)
    42 0000B1C8 803805              <1>  cmp byte [%1], %2
    43 0000B1CB 0F8500600000        <1>  jne L_error_incorrect_type
 13988 0000B1D1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 13989 0000B1D4 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 13990 0000B1D7 FF7500                  	push qword [rbp] ; same the old rbp
 13991 0000B1DA BA05000000              	mov rdx, 2 + 3
 13992 0000B1DF 488B4D00                	mov rcx, [rbp]
 13993 0000B1E3 4889EF                  	mov rdi, rbp
 13994                                  .L_tc_recycle_frame_loop_013b:
 13995 0000B1E6 4883FA00                	cmp rdx, 0
 13996 0000B1EA 7413                    	je .L_tc_recycle_frame_done_013b
 13997 0000B1EC 4883E908                	sub rcx, 8
 13998 0000B1F0 4883EF08                	sub rdi, 8
 13999 0000B1F4 488B37                  	mov rsi, [rdi]
 14000 0000B1F7 488931                  	mov qword [rcx], rsi
 14001 0000B1FA 48FFCA                  	dec rdx
 14002 0000B1FD EBE7                    	jmp .L_tc_recycle_frame_loop_013b
 14003                                  .L_tc_recycle_frame_done_013b:
 14004 0000B1FF 5D                      	pop rbp ; restore the old rbp
 14005 0000B200 4889CC                  	mov rsp, rcx
 14006 0000B203 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14007 0000B206 C9                      	leave
 14008 0000B207 C22000                  	ret 8 * (2 + 2)
 14009                                  .L_lambda_opt_end_0029:	; new closure is in rax
 14010 0000B20A C9                      	leave
 14011 0000B20B C21800                  	ret 8 * (2 + 1)
 14012                                  .L_lambda_simple_end_0107:	; new closure is in rax
 14013                                  	assert_closure(rax)
    42 0000B20E 803805              <1>  cmp byte [%1], %2
    43 0000B211 0F85BA5F0000        <1>  jne L_error_incorrect_type
 14014 0000B217 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14015 0000B21A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14016 0000B21D FF7500                  	push qword [rbp] ; same the old rbp
 14017 0000B220 BA04000000              	mov rdx, 1 + 3
 14018 0000B225 488B4D00                	mov rcx, [rbp]
 14019 0000B229 4889EF                  	mov rdi, rbp
 14020                                  .L_tc_recycle_frame_loop_0139:
 14021 0000B22C 4883FA00                	cmp rdx, 0
 14022 0000B230 7413                    	je .L_tc_recycle_frame_done_0139
 14023 0000B232 4883E908                	sub rcx, 8
 14024 0000B236 4883EF08                	sub rdi, 8
 14025 0000B23A 488B37                  	mov rsi, [rdi]
 14026 0000B23D 488931                  	mov qword [rcx], rsi
 14027 0000B240 48FFCA                  	dec rdx
 14028 0000B243 EBE7                    	jmp .L_tc_recycle_frame_loop_0139
 14029                                  .L_tc_recycle_frame_done_0139:
 14030 0000B245 5D                      	pop rbp ; restore the old rbp
 14031 0000B246 4889CC                  	mov rsp, rcx
 14032 0000B249 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14033 0000B24C C9                      	leave
 14034 0000B24D C21800                  	ret 8 * (2 + 1)
 14035                                  .L_lambda_simple_end_0106:	; new closure is in rax
 14036                                  	assert_closure(rax)
    42 0000B250 803805              <1>  cmp byte [%1], %2
    43 0000B253 0F85785F0000        <1>  jne L_error_incorrect_type
 14037 0000B259 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14038 0000B25C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14039 0000B25F FF7500                  	push qword [rbp] ; same the old rbp
 14040 0000B262 BA04000000              	mov rdx, 1 + 3
 14041 0000B267 488B4D00                	mov rcx, [rbp]
 14042 0000B26B 4889EF                  	mov rdi, rbp
 14043                                  .L_tc_recycle_frame_loop_0138:
 14044 0000B26E 4883FA00                	cmp rdx, 0
 14045 0000B272 7413                    	je .L_tc_recycle_frame_done_0138
 14046 0000B274 4883E908                	sub rcx, 8
 14047 0000B278 4883EF08                	sub rdi, 8
 14048 0000B27C 488B37                  	mov rsi, [rdi]
 14049 0000B27F 488931                  	mov qword [rcx], rsi
 14050 0000B282 48FFCA                  	dec rdx
 14051 0000B285 EBE7                    	jmp .L_tc_recycle_frame_loop_0138
 14052                                  .L_tc_recycle_frame_done_0138:
 14053 0000B287 5D                      	pop rbp ; restore the old rbp
 14054 0000B288 4889CC                  	mov rsp, rcx
 14055 0000B28B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14056 0000B28E C9                      	leave
 14057 0000B28F C21800                  	ret 8 * (2 + 1)
 14058                                  .L_lambda_simple_end_0104:	; new closure is in rax
 14059                                  	assert_closure(rax)
    42 0000B292 803805              <1>  cmp byte [%1], %2
    43 0000B295 0F85365F0000        <1>  jne L_error_incorrect_type
 14060 0000B29B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14061 0000B29E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14062 0000B2A1 FF7500                  	push qword [rbp] ; same the old rbp
 14063 0000B2A4 BA04000000              	mov rdx, 1 + 3
 14064 0000B2A9 488B4D00                	mov rcx, [rbp]
 14065 0000B2AD 4889EF                  	mov rdi, rbp
 14066                                  .L_tc_recycle_frame_loop_0136:
 14067 0000B2B0 4883FA00                	cmp rdx, 0
 14068 0000B2B4 7413                    	je .L_tc_recycle_frame_done_0136
 14069 0000B2B6 4883E908                	sub rcx, 8
 14070 0000B2BA 4883EF08                	sub rdi, 8
 14071 0000B2BE 488B37                  	mov rsi, [rdi]
 14072 0000B2C1 488931                  	mov qword [rcx], rsi
 14073 0000B2C4 48FFCA                  	dec rdx
 14074 0000B2C7 EBE7                    	jmp .L_tc_recycle_frame_loop_0136
 14075                                  .L_tc_recycle_frame_done_0136:
 14076 0000B2C9 5D                      	pop rbp ; restore the old rbp
 14077 0000B2CA 4889CC                  	mov rsp, rcx
 14078 0000B2CD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14079 0000B2D0 C9                      	leave
 14080 0000B2D1 C22000                  	ret 8 * (2 + 2)
 14081                                  .L_lambda_simple_end_0103:	; new closure is in rax
 14082 0000B2D4 50                      	push rax
 14083 0000B2D5 6A01                    	push 1
 14084 0000B2D7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14085 0000B2DC E8FC460000              	call malloc
 14086 0000B2E1 50                      	push rax
 14087 0000B2E2 BF00000000              	mov rdi, 8 * 0	; new rib
 14088 0000B2E7 E8F1460000              	call malloc
 14089 0000B2EC 50                      	push rax
 14090 0000B2ED BF08000000              	mov rdi, 8 * 1	; extended env
 14091 0000B2F2 E8E6460000              	call malloc
 14092 0000B2F7 488B7D10                	mov rdi, ENV
 14093 0000B2FB BE00000000              	mov rsi, 0
 14094 0000B300 BA01000000              	mov rdx, 1
 14095                                  .L_lambda_simple_env_loop_0102:	; ext_env[i + 1] <-- env[i]
 14096 0000B305 4883FE00                	cmp rsi, 0
 14097 0000B309 7410                    	je .L_lambda_simple_env_end_0102
 14098 0000B30B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14099 0000B30F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14100 0000B313 48FFC6                  	inc rsi
 14101 0000B316 48FFC2                  	inc rdx
 14102 0000B319 EBEA                    	jmp .L_lambda_simple_env_loop_0102
 14103                                  .L_lambda_simple_env_end_0102:
 14104 0000B31B 5B                      	pop rbx
 14105 0000B31C BE00000000              	mov rsi, 0
 14106                                  .L_lambda_simple_params_loop_0102:	; copy params
 14107 0000B321 4883FE00                	cmp rsi, 0
 14108 0000B325 740E                    	je .L_lambda_simple_params_end_0102
 14109 0000B327 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14110 0000B32C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14111 0000B330 48FFC6                  	inc rsi
 14112 0000B333 EBEC                    	jmp .L_lambda_simple_params_loop_0102
 14113                                  .L_lambda_simple_params_end_0102:
 14114 0000B335 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14115 0000B338 4889C3                  	mov rbx, rax
 14116 0000B33B 58                      	pop rax
 14117 0000B33C C60005                  	mov byte [rax], T_closure
 14118 0000B33F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14119 0000B343 48C74009[50B30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0102
 14120 0000B34B E9FF000000              	jmp .L_lambda_simple_end_0102
 14121                                  .L_lambda_simple_code_0102:	; lambda-simple body
 14122 0000B350 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14123 0000B356 740B                    	je .L_lambda_simple_arity_check_ok_0102
 14124 0000B358 FF742410                	push qword [rsp + 8 * 2]
 14125 0000B35C 6A01                    	push 1
 14126 0000B35E E933460000              	jmp L_error_incorrect_arity_simple
 14127                                  .L_lambda_simple_arity_check_ok_0102:
 14128 0000B363 C8000000                	enter 0, 0
 14129 0000B367 488B0425[70030000]      	mov rax, qword [free_var_110]
 14130 0000B36F 50                      	push rax
 14131 0000B370 488B0425[60030000]      	mov rax, qword [free_var_108]
 14132 0000B378 50                      	push rax
 14133 0000B379 6A02                    	push 2
 14134 0000B37B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14135                                  	assert_closure(rax)
    42 0000B37F 803805              <1>  cmp byte [%1], %2
    43 0000B382 0F85495E0000        <1>  jne L_error_incorrect_type
 14136 0000B388 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14137 0000B38B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14138 0000B38E 48890425[E0030000]      	mov qword [free_var_124], rax
 14139 0000B396 48B8-                   	mov rax, sob_void
 14139 0000B398 [0000000000000000] 
 14140                                  
 14141 0000B3A0 488B0425[A8030000]      	mov rax, qword [free_var_117]
 14142 0000B3A8 50                      	push rax
 14143 0000B3A9 488B0425[98030000]      	mov rax, qword [free_var_115]
 14144 0000B3B1 50                      	push rax
 14145 0000B3B2 6A02                    	push 2
 14146 0000B3B4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14147                                  	assert_closure(rax)
    42 0000B3B8 803805              <1>  cmp byte [%1], %2
    43 0000B3BB 0F85105E0000        <1>  jne L_error_incorrect_type
 14148 0000B3C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14149 0000B3C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14150 0000B3C7 48890425[08040000]      	mov qword [free_var_129], rax
 14151 0000B3CF 48B8-                   	mov rax, sob_void
 14151 0000B3D1 [0000000000000000] 
 14152                                  
 14153 0000B3D9 488B0425[70030000]      	mov rax, qword [free_var_110]
 14154 0000B3E1 50                      	push rax
 14155 0000B3E2 488B0425[78030000]      	mov rax, qword [free_var_111]
 14156 0000B3EA 50                      	push rax
 14157 0000B3EB 6A02                    	push 2
 14158 0000B3ED 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14159                                  	assert_closure(rax)
    42 0000B3F1 803805              <1>  cmp byte [%1], %2
    43 0000B3F4 0F85D75D0000        <1>  jne L_error_incorrect_type
 14160 0000B3FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14161 0000B3FD FF5009                  	call SOB_CLOSURE_CODE(rax)
 14162 0000B400 48890425[00040000]      	mov qword [free_var_128], rax
 14163 0000B408 48B8-                   	mov rax, sob_void
 14163 0000B40A [0000000000000000] 
 14164                                  
 14165 0000B412 488B0425[A8030000]      	mov rax, qword [free_var_117]
 14166 0000B41A 50                      	push rax
 14167 0000B41B 488B0425[B0030000]      	mov rax, qword [free_var_118]
 14168 0000B423 50                      	push rax
 14169 0000B424 6A02                    	push 2
 14170 0000B426 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14171                                  	assert_closure(rax)
    42 0000B42A 803805              <1>  cmp byte [%1], %2
    43 0000B42D 0F859E5D0000        <1>  jne L_error_incorrect_type
 14172 0000B433 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14173 0000B436 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14174 0000B439 48890425[28040000]      	mov qword [free_var_133], rax
 14175 0000B441 48B8-                   	mov rax, sob_void
 14175 0000B443 [0000000000000000] 
 14176 0000B44B C9                      	leave
 14177 0000B44C C21800                  	ret 8 * (2 + 1)
 14178                                  .L_lambda_simple_end_0102:	; new closure is in rax
 14179                                  	assert_closure(rax)
    42 0000B44F 803805              <1>  cmp byte [%1], %2
    43 0000B452 0F85795D0000        <1>  jne L_error_incorrect_type
 14180 0000B458 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14181 0000B45B FF5009                  	call SOB_CLOSURE_CODE(rax)
 14182                                  
 14183 0000B45E 4889C7                  	mov rdi, rax
 14184 0000B461 E888450000              	call print_sexpr_if_not_void
 14185                                  
 14186 0000B466 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14187 0000B46B E86D450000              	call malloc
 14188 0000B470 50                      	push rax
 14189 0000B471 BF00000000              	mov rdi, 8 * 0	; new rib
 14190 0000B476 E862450000              	call malloc
 14191 0000B47B 50                      	push rax
 14192 0000B47C BF08000000              	mov rdi, 8 * 1	; extended env
 14193 0000B481 E857450000              	call malloc
 14194 0000B486 488B7D10                	mov rdi, ENV
 14195 0000B48A BE00000000              	mov rsi, 0
 14196 0000B48F BA01000000              	mov rdx, 1
 14197                                  .L_lambda_simple_env_loop_010c:	; ext_env[i + 1] <-- env[i]
 14198 0000B494 4883FE00                	cmp rsi, 0
 14199 0000B498 7410                    	je .L_lambda_simple_env_end_010c
 14200 0000B49A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14201 0000B49E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14202 0000B4A2 48FFC6                  	inc rsi
 14203 0000B4A5 48FFC2                  	inc rdx
 14204 0000B4A8 EBEA                    	jmp .L_lambda_simple_env_loop_010c
 14205                                  .L_lambda_simple_env_end_010c:
 14206 0000B4AA 5B                      	pop rbx
 14207 0000B4AB BE00000000              	mov rsi, 0
 14208                                  .L_lambda_simple_params_loop_010c:	; copy params
 14209 0000B4B0 4883FE00                	cmp rsi, 0
 14210 0000B4B4 740E                    	je .L_lambda_simple_params_end_010c
 14211 0000B4B6 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14212 0000B4BB 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14213 0000B4BF 48FFC6                  	inc rsi
 14214 0000B4C2 EBEC                    	jmp .L_lambda_simple_params_loop_010c
 14215                                  .L_lambda_simple_params_end_010c:
 14216 0000B4C4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14217 0000B4C7 4889C3                  	mov rbx, rax
 14218 0000B4CA 58                      	pop rax
 14219 0000B4CB C60005                  	mov byte [rax], T_closure
 14220 0000B4CE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14221 0000B4D2 48C74009[DFB40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010c
 14222 0000B4DA E9A00B0000              	jmp .L_lambda_simple_end_010c
 14223                                  .L_lambda_simple_code_010c:	; lambda-simple body
 14224 0000B4DF 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14225 0000B4E5 740B                    	je .L_lambda_simple_arity_check_ok_010c
 14226 0000B4E7 FF742410                	push qword [rsp + 8 * 2]
 14227 0000B4EB 6A02                    	push 2
 14228 0000B4ED E9A4440000              	jmp L_error_incorrect_arity_simple
 14229                                  .L_lambda_simple_arity_check_ok_010c:
 14230 0000B4F2 C8000000                	enter 0, 0
 14231 0000B4F6 48B8-                   	mov rax, L_constants + 23
 14231 0000B4F8 [1700000000000000] 
 14232 0000B500 50                      	push rax
 14233 0000B501 6A01                    	push 1
 14234 0000B503 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14235 0000B508 E8D0440000              	call malloc
 14236 0000B50D 50                      	push rax
 14237 0000B50E BF10000000              	mov rdi, 8 * 2	; new rib
 14238 0000B513 E8C5440000              	call malloc
 14239 0000B518 50                      	push rax
 14240 0000B519 BF10000000              	mov rdi, 8 * 2	; extended env
 14241 0000B51E E8BA440000              	call malloc
 14242 0000B523 488B7D10                	mov rdi, ENV
 14243 0000B527 BE00000000              	mov rsi, 0
 14244 0000B52C BA01000000              	mov rdx, 1
 14245                                  .L_lambda_simple_env_loop_010d:	; ext_env[i + 1] <-- env[i]
 14246 0000B531 4883FE01                	cmp rsi, 1
 14247 0000B535 7410                    	je .L_lambda_simple_env_end_010d
 14248 0000B537 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14249 0000B53B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14250 0000B53F 48FFC6                  	inc rsi
 14251 0000B542 48FFC2                  	inc rdx
 14252 0000B545 EBEA                    	jmp .L_lambda_simple_env_loop_010d
 14253                                  .L_lambda_simple_env_end_010d:
 14254 0000B547 5B                      	pop rbx
 14255 0000B548 BE00000000              	mov rsi, 0
 14256                                  .L_lambda_simple_params_loop_010d:	; copy params
 14257 0000B54D 4883FE02                	cmp rsi, 2
 14258 0000B551 740E                    	je .L_lambda_simple_params_end_010d
 14259 0000B553 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14260 0000B558 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14261 0000B55C 48FFC6                  	inc rsi
 14262 0000B55F EBEC                    	jmp .L_lambda_simple_params_loop_010d
 14263                                  .L_lambda_simple_params_end_010d:
 14264 0000B561 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14265 0000B564 4889C3                  	mov rbx, rax
 14266 0000B567 58                      	pop rax
 14267 0000B568 C60005                  	mov byte [rax], T_closure
 14268 0000B56B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14269 0000B56F 48C74009[7CB50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010d
 14270 0000B577 E9C10A0000              	jmp .L_lambda_simple_end_010d
 14271                                  .L_lambda_simple_code_010d:	; lambda-simple body
 14272 0000B57C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14273 0000B582 740B                    	je .L_lambda_simple_arity_check_ok_010d
 14274 0000B584 FF742410                	push qword [rsp + 8 * 2]
 14275 0000B588 6A01                    	push 1
 14276 0000B58A E907440000              	jmp L_error_incorrect_arity_simple
 14277                                  .L_lambda_simple_arity_check_ok_010d:
 14278 0000B58F C8000000                	enter 0, 0
 14279 0000B593 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14280 0000B597 4889C2                  	mov rdx, rax
 14281 0000B59A BF08000000              	mov rdi, 8
 14282 0000B59F E839440000              	call malloc
 14283 0000B5A4 488910                  	mov qword[rax], rdx
 14284 0000B5A7 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 14285 0000B5AB 48B8-                   	mov rax, sob_void
 14285 0000B5AD [0000000000000000] 
 14286                                  
 14287 0000B5B5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14288 0000B5BA E81E440000              	call malloc
 14289 0000B5BF 50                      	push rax
 14290 0000B5C0 BF08000000              	mov rdi, 8 * 1	; new rib
 14291 0000B5C5 E813440000              	call malloc
 14292 0000B5CA 50                      	push rax
 14293 0000B5CB BF18000000              	mov rdi, 8 * 3	; extended env
 14294 0000B5D0 E808440000              	call malloc
 14295 0000B5D5 488B7D10                	mov rdi, ENV
 14296 0000B5D9 BE00000000              	mov rsi, 0
 14297 0000B5DE BA01000000              	mov rdx, 1
 14298                                  .L_lambda_simple_env_loop_010e:	; ext_env[i + 1] <-- env[i]
 14299 0000B5E3 4883FE02                	cmp rsi, 2
 14300 0000B5E7 7410                    	je .L_lambda_simple_env_end_010e
 14301 0000B5E9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14302 0000B5ED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14303 0000B5F1 48FFC6                  	inc rsi
 14304 0000B5F4 48FFC2                  	inc rdx
 14305 0000B5F7 EBEA                    	jmp .L_lambda_simple_env_loop_010e
 14306                                  .L_lambda_simple_env_end_010e:
 14307 0000B5F9 5B                      	pop rbx
 14308 0000B5FA BE00000000              	mov rsi, 0
 14309                                  .L_lambda_simple_params_loop_010e:	; copy params
 14310 0000B5FF 4883FE01                	cmp rsi, 1
 14311 0000B603 740E                    	je .L_lambda_simple_params_end_010e
 14312 0000B605 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14313 0000B60A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14314 0000B60E 48FFC6                  	inc rsi
 14315 0000B611 EBEC                    	jmp .L_lambda_simple_params_loop_010e
 14316                                  .L_lambda_simple_params_end_010e:
 14317 0000B613 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14318 0000B616 4889C3                  	mov rbx, rax
 14319 0000B619 58                      	pop rax
 14320 0000B61A C60005                  	mov byte [rax], T_closure
 14321 0000B61D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14322 0000B621 48C74009[2EB60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010e
 14323 0000B629 E9FD010000              	jmp .L_lambda_simple_end_010e
 14324                                  .L_lambda_simple_code_010e:	; lambda-simple body
 14325 0000B62E 48837C241005            	cmp qword [rsp + 8 * 2], 5
 14326 0000B634 740B                    	je .L_lambda_simple_arity_check_ok_010e
 14327 0000B636 FF742410                	push qword [rsp + 8 * 2]
 14328 0000B63A 6A05                    	push 5
 14329 0000B63C E955430000              	jmp L_error_incorrect_arity_simple
 14330                                  .L_lambda_simple_arity_check_ok_010e:
 14331 0000B641 C8000000                	enter 0, 0
 14332 0000B645 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 14333 0000B649 50                      	push rax
 14334 0000B64A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14335 0000B64E 50                      	push rax
 14336 0000B64F 6A02                    	push 2
 14337 0000B651 488B0425[50030000]      	mov rax, qword [free_var_106]
 14338                                  	assert_closure(rax)
    42 0000B659 803805              <1>  cmp byte [%1], %2
    43 0000B65C 0F856F5B0000        <1>  jne L_error_incorrect_type
 14339 0000B662 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14340 0000B665 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14341 0000B668 483D[02000000]          	cmp rax, sob_boolean_false
 14342 0000B66E 0F85B3010000            	jne .L_or_end_0014
 14343 0000B674 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14344 0000B678 50                      	push rax
 14345 0000B679 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 14346 0000B67D 50                      	push rax
 14347 0000B67E 6A02                    	push 2
 14348 0000B680 488B0425[78010000]      	mov rax, qword [free_var_47]
 14349                                  	assert_closure(rax)
    42 0000B688 803805              <1>  cmp byte [%1], %2
    43 0000B68B 0F85405B0000        <1>  jne L_error_incorrect_type
 14350 0000B691 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14351 0000B694 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14352 0000B697 50                      	push rax
 14353 0000B698 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14354 0000B69C 50                      	push rax
 14355 0000B69D 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14356 0000B6A1 50                      	push rax
 14357 0000B6A2 6A02                    	push 2
 14358 0000B6A4 488B0425[78010000]      	mov rax, qword [free_var_47]
 14359                                  	assert_closure(rax)
    42 0000B6AC 803805              <1>  cmp byte [%1], %2
    43 0000B6AF 0F851C5B0000        <1>  jne L_error_incorrect_type
 14360 0000B6B5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14361 0000B6B8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14362 0000B6BB 50                      	push rax
 14363 0000B6BC 6A02                    	push 2
 14364 0000B6BE 488B4510                	mov rax, qword [rbp + 8 * 2]
 14365 0000B6C2 488B4008                	mov rax, qword [rax + 8 * 1]
 14366 0000B6C6 488B00                  	mov rax, qword [rax + 8 * 0]
 14367                                  	assert_closure(rax)
    42 0000B6C9 803805              <1>  cmp byte [%1], %2
    43 0000B6CC 0F85FF5A0000        <1>  jne L_error_incorrect_type
 14368 0000B6D2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14369 0000B6D5 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14370 0000B6D8 483D[02000000]          	cmp rax, sob_boolean_false
 14371 0000B6DE 0F8543010000            	jne .L_or_end_0014
 14372 0000B6E4 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 14373 0000B6E8 50                      	push rax
 14374 0000B6E9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14375 0000B6ED 50                      	push rax
 14376 0000B6EE 6A02                    	push 2
 14377 0000B6F0 488B0425[30030000]      	mov rax, qword [free_var_102]
 14378                                  	assert_closure(rax)
    42 0000B6F8 803805              <1>  cmp byte [%1], %2
    43 0000B6FB 0F85D05A0000        <1>  jne L_error_incorrect_type
 14379 0000B701 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14380 0000B704 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14381 0000B707 483D[02000000]          	cmp rax, sob_boolean_false
 14382 0000B70D 0F840A010000                      	je .L_if_else_009e
 14383 0000B713 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 14384 0000B717 50                      	push rax
 14385 0000B718 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 14386 0000B71C 50                      	push rax
 14387 0000B71D 6A02                    	push 2
 14388 0000B71F 488B0425[78010000]      	mov rax, qword [free_var_47]
 14389                                  	assert_closure(rax)
    42 0000B727 803805              <1>  cmp byte [%1], %2
    43 0000B72A 0F85A15A0000        <1>  jne L_error_incorrect_type
 14390 0000B730 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14391 0000B733 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14392 0000B736 50                      	push rax
 14393 0000B737 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14394 0000B73B 50                      	push rax
 14395 0000B73C 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14396 0000B740 50                      	push rax
 14397 0000B741 6A02                    	push 2
 14398 0000B743 488B0425[78010000]      	mov rax, qword [free_var_47]
 14399                                  	assert_closure(rax)
    42 0000B74B 803805              <1>  cmp byte [%1], %2
    43 0000B74E 0F857D5A0000        <1>  jne L_error_incorrect_type
 14400 0000B754 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14401 0000B757 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14402 0000B75A 50                      	push rax
 14403 0000B75B 6A02                    	push 2
 14404 0000B75D 488B4510                	mov rax, qword [rbp + 8 * 2]
 14405 0000B761 488B4008                	mov rax, qword [rax + 8 * 1]
 14406 0000B765 488B4008                	mov rax, qword [rax + 8 * 1]
 14407                                  	assert_closure(rax)
    42 0000B769 803805              <1>  cmp byte [%1], %2
    43 0000B76C 0F855F5A0000        <1>  jne L_error_incorrect_type
 14408 0000B772 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14409 0000B775 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14410 0000B778 483D[02000000]          	cmp rax, sob_boolean_false
 14411 0000B77E 0F848D000000                      	je .L_if_else_009d
 14412 0000B784 488B4540                          	mov rax, qword [rbp + 8 * (4 + 4)]
 14413 0000B788 50                      	push rax
 14414 0000B789 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 14415 0000B78D 50                      	push rax
 14416 0000B78E 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 14417 0000B792 50                      	push rax
 14418 0000B793 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14419 0000B797 50                      	push rax
 14420 0000B798 48B8-                   	mov rax, L_constants + 128
 14420 0000B79A [8000000000000000] 
 14421 0000B7A2 50                      	push rax
 14422 0000B7A3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14423 0000B7A7 50                      	push rax
 14424 0000B7A8 6A02                    	push 2
 14425 0000B7AA 488B0425[08030000]      	mov rax, qword [free_var_97]
 14426                                  	assert_closure(rax)
    42 0000B7B2 803805              <1>  cmp byte [%1], %2
    43 0000B7B5 0F85165A0000        <1>  jne L_error_incorrect_type
 14427 0000B7BB FF7001                  	push SOB_CLOSURE_ENV(rax)
 14428 0000B7BE FF5009                  	call SOB_CLOSURE_CODE(rax)
 14429 0000B7C1 50                      	push rax
 14430 0000B7C2 6A05                    	push 5
 14431 0000B7C4 488B4510                	mov rax, qword [rbp + 8 * 2]
 14432 0000B7C8 488B00                  	mov rax, qword [rax + 8 * 0]
 14433 0000B7CB 488B00                  	mov rax, qword [rax + 8 * 0]
 14434 0000B7CE 488B00                  	mov rax, qword [rax]
 14435                                  	assert_closure(rax)
    42 0000B7D1 803805              <1>  cmp byte [%1], %2
    43 0000B7D4 0F85F7590000        <1>  jne L_error_incorrect_type
 14436 0000B7DA FF7001                  	push SOB_CLOSURE_ENV(rax)
 14437 0000B7DD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14438 0000B7E0 FF7500                  	push qword [rbp] ; same the old rbp
 14439 0000B7E3 BA08000000              	mov rdx, 5 + 3
 14440 0000B7E8 488B4D00                	mov rcx, [rbp]
 14441 0000B7EC 4889EF                  	mov rdi, rbp
 14442                                  .L_tc_recycle_frame_loop_0140:
 14443 0000B7EF 4883FA00                	cmp rdx, 0
 14444 0000B7F3 7413                    	je .L_tc_recycle_frame_done_0140
 14445 0000B7F5 4883E908                	sub rcx, 8
 14446 0000B7F9 4883EF08                	sub rdi, 8
 14447 0000B7FD 488B37                  	mov rsi, [rdi]
 14448 0000B800 488931                  	mov qword [rcx], rsi
 14449 0000B803 48FFCA                  	dec rdx
 14450 0000B806 EBE7                    	jmp .L_tc_recycle_frame_loop_0140
 14451                                  .L_tc_recycle_frame_done_0140:
 14452 0000B808 5D                      	pop rbp ; restore the old rbp
 14453 0000B809 4889CC                  	mov rsp, rcx
 14454 0000B80C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14455 0000B80F EB0A                    	jmp .L_if_end_009d
 14456                                            .L_if_else_009d:
 14457 0000B811 48B8-                             	mov rax, L_constants + 2
 14457 0000B813 [0200000000000000] 
 14458                                  .L_if_end_009d:
 14459 0000B81B EB0A                    	jmp .L_if_end_009e
 14460                                            .L_if_else_009e:
 14461 0000B81D 48B8-                             	mov rax, L_constants + 2
 14461 0000B81F [0200000000000000] 
 14462                                  .L_if_end_009e:
 14463                                  .L_or_end_0014:
 14464 0000B827 C9                      	leave
 14465 0000B828 C23800                  	ret 8 * (2 + 5)
 14466                                  .L_lambda_simple_end_010e:	; new closure is in rax
 14467 0000B82B 50                      	push rax
 14468 0000B82C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14469 0000B830 8F00                    	pop qword [rax]
 14470 0000B832 48B8-                   	mov rax, sob_void
 14470 0000B834 [0000000000000000] 
 14471                                  
 14472 0000B83C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14473 0000B841 E897410000              	call malloc
 14474 0000B846 50                      	push rax
 14475 0000B847 BF08000000              	mov rdi, 8 * 1	; new rib
 14476 0000B84C E88C410000              	call malloc
 14477 0000B851 50                      	push rax
 14478 0000B852 BF18000000              	mov rdi, 8 * 3	; extended env
 14479 0000B857 E881410000              	call malloc
 14480 0000B85C 488B7D10                	mov rdi, ENV
 14481 0000B860 BE00000000              	mov rsi, 0
 14482 0000B865 BA01000000              	mov rdx, 1
 14483                                  .L_lambda_simple_env_loop_0112:	; ext_env[i + 1] <-- env[i]
 14484 0000B86A 4883FE02                	cmp rsi, 2
 14485 0000B86E 7410                    	je .L_lambda_simple_env_end_0112
 14486 0000B870 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14487 0000B874 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14488 0000B878 48FFC6                  	inc rsi
 14489 0000B87B 48FFC2                  	inc rdx
 14490 0000B87E EBEA                    	jmp .L_lambda_simple_env_loop_0112
 14491                                  .L_lambda_simple_env_end_0112:
 14492 0000B880 5B                      	pop rbx
 14493 0000B881 BE00000000              	mov rsi, 0
 14494                                  .L_lambda_simple_params_loop_0112:	; copy params
 14495 0000B886 4883FE01                	cmp rsi, 1
 14496 0000B88A 740E                    	je .L_lambda_simple_params_end_0112
 14497 0000B88C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14498 0000B891 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14499 0000B895 48FFC6                  	inc rsi
 14500 0000B898 EBEC                    	jmp .L_lambda_simple_params_loop_0112
 14501                                  .L_lambda_simple_params_end_0112:
 14502 0000B89A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14503 0000B89D 4889C3                  	mov rbx, rax
 14504 0000B8A0 58                      	pop rax
 14505 0000B8A1 C60005                  	mov byte [rax], T_closure
 14506 0000B8A4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14507 0000B8A8 48C74009[B5B80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0112
 14508 0000B8B0 E952020000              	jmp .L_lambda_simple_end_0112
 14509                                  .L_lambda_simple_code_0112:	; lambda-simple body
 14510 0000B8B5 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14511 0000B8BB 740B                    	je .L_lambda_simple_arity_check_ok_0112
 14512 0000B8BD FF742410                	push qword [rsp + 8 * 2]
 14513 0000B8C1 6A02                    	push 2
 14514 0000B8C3 E9CE400000              	jmp L_error_incorrect_arity_simple
 14515                                  .L_lambda_simple_arity_check_ok_0112:
 14516 0000B8C8 C8000000                	enter 0, 0
 14517 0000B8CC 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14518 0000B8D0 50                      	push rax
 14519 0000B8D1 6A01                    	push 1
 14520 0000B8D3 488B0425[90000000]      	mov rax, qword [free_var_18]
 14521                                  	assert_closure(rax)
    42 0000B8DB 803805              <1>  cmp byte [%1], %2
    43 0000B8DE 0F85ED580000        <1>  jne L_error_incorrect_type
 14522 0000B8E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14523 0000B8E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14524 0000B8EA 50                      	push rax
 14525 0000B8EB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14526 0000B8EF 50                      	push rax
 14527 0000B8F0 6A01                    	push 1
 14528 0000B8F2 488B0425[90000000]      	mov rax, qword [free_var_18]
 14529                                  	assert_closure(rax)
    42 0000B8FA 803805              <1>  cmp byte [%1], %2
    43 0000B8FD 0F85CE580000        <1>  jne L_error_incorrect_type
 14530 0000B903 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14531 0000B906 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14532 0000B909 50                      	push rax
 14533 0000B90A 6A02                    	push 2
 14534 0000B90C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14535 0000B911 E8C7400000              	call malloc
 14536 0000B916 50                      	push rax
 14537 0000B917 BF10000000              	mov rdi, 8 * 2	; new rib
 14538 0000B91C E8BC400000              	call malloc
 14539 0000B921 50                      	push rax
 14540 0000B922 BF20000000              	mov rdi, 8 * 4	; extended env
 14541 0000B927 E8B1400000              	call malloc
 14542 0000B92C 488B7D10                	mov rdi, ENV
 14543 0000B930 BE00000000              	mov rsi, 0
 14544 0000B935 BA01000000              	mov rdx, 1
 14545                                  .L_lambda_simple_env_loop_0113:	; ext_env[i + 1] <-- env[i]
 14546 0000B93A 4883FE03                	cmp rsi, 3
 14547 0000B93E 7410                    	je .L_lambda_simple_env_end_0113
 14548 0000B940 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14549 0000B944 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14550 0000B948 48FFC6                  	inc rsi
 14551 0000B94B 48FFC2                  	inc rdx
 14552 0000B94E EBEA                    	jmp .L_lambda_simple_env_loop_0113
 14553                                  .L_lambda_simple_env_end_0113:
 14554 0000B950 5B                      	pop rbx
 14555 0000B951 BE00000000              	mov rsi, 0
 14556                                  .L_lambda_simple_params_loop_0113:	; copy params
 14557 0000B956 4883FE02                	cmp rsi, 2
 14558 0000B95A 740E                    	je .L_lambda_simple_params_end_0113
 14559 0000B95C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14560 0000B961 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14561 0000B965 48FFC6                  	inc rsi
 14562 0000B968 EBEC                    	jmp .L_lambda_simple_params_loop_0113
 14563                                  .L_lambda_simple_params_end_0113:
 14564 0000B96A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14565 0000B96D 4889C3                  	mov rbx, rax
 14566 0000B970 58                      	pop rax
 14567 0000B971 C60005                  	mov byte [rax], T_closure
 14568 0000B974 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14569 0000B978 48C74009[85B90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0113
 14570 0000B980 E940010000              	jmp .L_lambda_simple_end_0113
 14571                                  .L_lambda_simple_code_0113:	; lambda-simple body
 14572 0000B985 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14573 0000B98B 740B                    	je .L_lambda_simple_arity_check_ok_0113
 14574 0000B98D FF742410                	push qword [rsp + 8 * 2]
 14575 0000B991 6A02                    	push 2
 14576 0000B993 E9FE3F0000              	jmp L_error_incorrect_arity_simple
 14577                                  .L_lambda_simple_arity_check_ok_0113:
 14578 0000B998 C8000000                	enter 0, 0
 14579 0000B99C 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14580 0000B9A0 50                      	push rax
 14581 0000B9A1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14582 0000B9A5 50                      	push rax
 14583 0000B9A6 6A02                    	push 2
 14584 0000B9A8 488B0425[38030000]      	mov rax, qword [free_var_103]
 14585                                  	assert_closure(rax)
    42 0000B9B0 803805              <1>  cmp byte [%1], %2
    43 0000B9B3 0F8518580000        <1>  jne L_error_incorrect_type
 14586 0000B9B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14587 0000B9BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 14588 0000B9BF 483D[02000000]          	cmp rax, sob_boolean_false
 14589 0000B9C5 0F847C000000                      	je .L_if_else_00a0
 14590 0000B9CB 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 14591 0000B9CF 50                      	push rax
 14592 0000B9D0 488B4510                	mov rax, qword [rbp + 8 * 2]
 14593 0000B9D4 488B00                  	mov rax, qword [rax + 8 * 0]
 14594 0000B9D7 488B4008                	mov rax, qword [rax + 8 * 1]
 14595 0000B9DB 50                      	push rax
 14596 0000B9DC 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14597 0000B9E0 50                      	push rax
 14598 0000B9E1 488B4510                	mov rax, qword [rbp + 8 * 2]
 14599 0000B9E5 488B00                  	mov rax, qword [rax + 8 * 0]
 14600 0000B9E8 488B00                  	mov rax, qword [rax + 8 * 0]
 14601 0000B9EB 50                      	push rax
 14602 0000B9EC 48B8-                   	mov rax, L_constants + 32
 14602 0000B9EE [2000000000000000] 
 14603 0000B9F6 50                      	push rax
 14604 0000B9F7 6A05                    	push 5
 14605 0000B9F9 488B4510                	mov rax, qword [rbp + 8 * 2]
 14606 0000B9FD 488B4008                	mov rax, qword [rax + 8 * 1]
 14607 0000BA01 488B00                  	mov rax, qword [rax + 8 * 0]
 14608 0000BA04 488B00                  	mov rax, qword [rax]
 14609                                  	assert_closure(rax)
    42 0000BA07 803805              <1>  cmp byte [%1], %2
    43 0000BA0A 0F85C1570000        <1>  jne L_error_incorrect_type
 14610 0000BA10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14611 0000BA13 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14612 0000BA16 FF7500                  	push qword [rbp] ; same the old rbp
 14613 0000BA19 BA08000000              	mov rdx, 5 + 3
 14614 0000BA1E 488B4D00                	mov rcx, [rbp]
 14615 0000BA22 4889EF                  	mov rdi, rbp
 14616                                  .L_tc_recycle_frame_loop_0146:
 14617 0000BA25 4883FA00                	cmp rdx, 0
 14618 0000BA29 7413                    	je .L_tc_recycle_frame_done_0146
 14619 0000BA2B 4883E908                	sub rcx, 8
 14620 0000BA2F 4883EF08                	sub rdi, 8
 14621 0000BA33 488B37                  	mov rsi, [rdi]
 14622 0000BA36 488931                  	mov qword [rcx], rsi
 14623 0000BA39 48FFCA                  	dec rdx
 14624 0000BA3C EBE7                    	jmp .L_tc_recycle_frame_loop_0146
 14625                                  .L_tc_recycle_frame_done_0146:
 14626 0000BA3E 5D                      	pop rbp ; restore the old rbp
 14627 0000BA3F 4889CC                  	mov rsp, rcx
 14628 0000BA42 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14629 0000BA45 EB7A                    	jmp .L_if_end_00a0
 14630                                            .L_if_else_00a0:
 14631 0000BA47 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 14632 0000BA4B 50                      	push rax
 14633 0000BA4C 488B4510                	mov rax, qword [rbp + 8 * 2]
 14634 0000BA50 488B00                  	mov rax, qword [rax + 8 * 0]
 14635 0000BA53 488B00                  	mov rax, qword [rax + 8 * 0]
 14636 0000BA56 50                      	push rax
 14637 0000BA57 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14638 0000BA5B 50                      	push rax
 14639 0000BA5C 488B4510                	mov rax, qword [rbp + 8 * 2]
 14640 0000BA60 488B00                  	mov rax, qword [rax + 8 * 0]
 14641 0000BA63 488B4008                	mov rax, qword [rax + 8 * 1]
 14642 0000BA67 50                      	push rax
 14643 0000BA68 48B8-                   	mov rax, L_constants + 32
 14643 0000BA6A [2000000000000000] 
 14644 0000BA72 50                      	push rax
 14645 0000BA73 6A05                    	push 5
 14646 0000BA75 488B4510                	mov rax, qword [rbp + 8 * 2]
 14647 0000BA79 488B4008                	mov rax, qword [rax + 8 * 1]
 14648 0000BA7D 488B00                  	mov rax, qword [rax + 8 * 0]
 14649 0000BA80 488B00                  	mov rax, qword [rax]
 14650                                  	assert_closure(rax)
    42 0000BA83 803805              <1>  cmp byte [%1], %2
    43 0000BA86 0F8545570000        <1>  jne L_error_incorrect_type
 14651 0000BA8C FF7001                  	push SOB_CLOSURE_ENV(rax)
 14652 0000BA8F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14653 0000BA92 FF7500                  	push qword [rbp] ; same the old rbp
 14654 0000BA95 BA08000000              	mov rdx, 5 + 3
 14655 0000BA9A 488B4D00                	mov rcx, [rbp]
 14656 0000BA9E 4889EF                  	mov rdi, rbp
 14657                                  .L_tc_recycle_frame_loop_0147:
 14658 0000BAA1 4883FA00                	cmp rdx, 0
 14659 0000BAA5 7413                    	je .L_tc_recycle_frame_done_0147
 14660 0000BAA7 4883E908                	sub rcx, 8
 14661 0000BAAB 4883EF08                	sub rdi, 8
 14662 0000BAAF 488B37                  	mov rsi, [rdi]
 14663 0000BAB2 488931                  	mov qword [rcx], rsi
 14664 0000BAB5 48FFCA                  	dec rdx
 14665 0000BAB8 EBE7                    	jmp .L_tc_recycle_frame_loop_0147
 14666                                  .L_tc_recycle_frame_done_0147:
 14667 0000BABA 5D                      	pop rbp ; restore the old rbp
 14668 0000BABB 4889CC                  	mov rsp, rcx
 14669 0000BABE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14670                                  .L_if_end_00a0:
 14671 0000BAC1 C9                      	leave
 14672 0000BAC2 C22000                  	ret 8 * (2 + 2)
 14673                                  .L_lambda_simple_end_0113:	; new closure is in rax
 14674                                  	assert_closure(rax)
    42 0000BAC5 803805              <1>  cmp byte [%1], %2
    43 0000BAC8 0F8503570000        <1>  jne L_error_incorrect_type
 14675 0000BACE FF7001                  	push SOB_CLOSURE_ENV(rax)
 14676 0000BAD1 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14677 0000BAD4 FF7500                  	push qword [rbp] ; same the old rbp
 14678 0000BAD7 BA05000000              	mov rdx, 2 + 3
 14679 0000BADC 488B4D00                	mov rcx, [rbp]
 14680 0000BAE0 4889EF                  	mov rdi, rbp
 14681                                  .L_tc_recycle_frame_loop_0145:
 14682 0000BAE3 4883FA00                	cmp rdx, 0
 14683 0000BAE7 7413                    	je .L_tc_recycle_frame_done_0145
 14684 0000BAE9 4883E908                	sub rcx, 8
 14685 0000BAED 4883EF08                	sub rdi, 8
 14686 0000BAF1 488B37                  	mov rsi, [rdi]
 14687 0000BAF4 488931                  	mov qword [rcx], rsi
 14688 0000BAF7 48FFCA                  	dec rdx
 14689 0000BAFA EBE7                    	jmp .L_tc_recycle_frame_loop_0145
 14690                                  .L_tc_recycle_frame_done_0145:
 14691 0000BAFC 5D                      	pop rbp ; restore the old rbp
 14692 0000BAFD 4889CC                  	mov rsp, rcx
 14693 0000BB00 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14694 0000BB03 C9                      	leave
 14695 0000BB04 C22000                  	ret 8 * (2 + 2)
 14696                                  .L_lambda_simple_end_0112:	; new closure is in rax
 14697 0000BB07 50                      	push rax
 14698 0000BB08 6A01                    	push 1
 14699 0000BB0A BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14700 0000BB0F E8C93E0000              	call malloc
 14701 0000BB14 50                      	push rax
 14702 0000BB15 BF08000000              	mov rdi, 8 * 1	; new rib
 14703 0000BB1A E8BE3E0000              	call malloc
 14704 0000BB1F 50                      	push rax
 14705 0000BB20 BF18000000              	mov rdi, 8 * 3	; extended env
 14706 0000BB25 E8B33E0000              	call malloc
 14707 0000BB2A 488B7D10                	mov rdi, ENV
 14708 0000BB2E BE00000000              	mov rsi, 0
 14709 0000BB33 BA01000000              	mov rdx, 1
 14710                                  .L_lambda_simple_env_loop_010f:	; ext_env[i + 1] <-- env[i]
 14711 0000BB38 4883FE02                	cmp rsi, 2
 14712 0000BB3C 7410                    	je .L_lambda_simple_env_end_010f
 14713 0000BB3E 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14714 0000BB42 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14715 0000BB46 48FFC6                  	inc rsi
 14716 0000BB49 48FFC2                  	inc rdx
 14717 0000BB4C EBEA                    	jmp .L_lambda_simple_env_loop_010f
 14718                                  .L_lambda_simple_env_end_010f:
 14719 0000BB4E 5B                      	pop rbx
 14720 0000BB4F BE00000000              	mov rsi, 0
 14721                                  .L_lambda_simple_params_loop_010f:	; copy params
 14722 0000BB54 4883FE01                	cmp rsi, 1
 14723 0000BB58 740E                    	je .L_lambda_simple_params_end_010f
 14724 0000BB5A 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14725 0000BB5F 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14726 0000BB63 48FFC6                  	inc rsi
 14727 0000BB66 EBEC                    	jmp .L_lambda_simple_params_loop_010f
 14728                                  .L_lambda_simple_params_end_010f:
 14729 0000BB68 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14730 0000BB6B 4889C3                  	mov rbx, rax
 14731 0000BB6E 58                      	pop rax
 14732 0000BB6F C60005                  	mov byte [rax], T_closure
 14733 0000BB72 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14734 0000BB76 48C74009[83BB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010f
 14735 0000BB7E E978040000              	jmp .L_lambda_simple_end_010f
 14736                                  .L_lambda_simple_code_010f:	; lambda-simple body
 14737 0000BB83 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14738 0000BB89 740B                    	je .L_lambda_simple_arity_check_ok_010f
 14739 0000BB8B FF742410                	push qword [rsp + 8 * 2]
 14740 0000BB8F 6A01                    	push 1
 14741 0000BB91 E9003E0000              	jmp L_error_incorrect_arity_simple
 14742                                  .L_lambda_simple_arity_check_ok_010f:
 14743 0000BB96 C8000000                	enter 0, 0
 14744 0000BB9A 48B8-                   	mov rax, L_constants + 23
 14744 0000BB9C [1700000000000000] 
 14745 0000BBA4 50                      	push rax
 14746 0000BBA5 6A01                    	push 1
 14747 0000BBA7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14748 0000BBAC E82C3E0000              	call malloc
 14749 0000BBB1 50                      	push rax
 14750 0000BBB2 BF08000000              	mov rdi, 8 * 1	; new rib
 14751 0000BBB7 E8213E0000              	call malloc
 14752 0000BBBC 50                      	push rax
 14753 0000BBBD BF20000000              	mov rdi, 8 * 4	; extended env
 14754 0000BBC2 E8163E0000              	call malloc
 14755 0000BBC7 488B7D10                	mov rdi, ENV
 14756 0000BBCB BE00000000              	mov rsi, 0
 14757 0000BBD0 BA01000000              	mov rdx, 1
 14758                                  .L_lambda_simple_env_loop_0110:	; ext_env[i + 1] <-- env[i]
 14759 0000BBD5 4883FE03                	cmp rsi, 3
 14760 0000BBD9 7410                    	je .L_lambda_simple_env_end_0110
 14761 0000BBDB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14762 0000BBDF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14763 0000BBE3 48FFC6                  	inc rsi
 14764 0000BBE6 48FFC2                  	inc rdx
 14765 0000BBE9 EBEA                    	jmp .L_lambda_simple_env_loop_0110
 14766                                  .L_lambda_simple_env_end_0110:
 14767 0000BBEB 5B                      	pop rbx
 14768 0000BBEC BE00000000              	mov rsi, 0
 14769                                  .L_lambda_simple_params_loop_0110:	; copy params
 14770 0000BBF1 4883FE01                	cmp rsi, 1
 14771 0000BBF5 740E                    	je .L_lambda_simple_params_end_0110
 14772 0000BBF7 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14773 0000BBFC 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14774 0000BC00 48FFC6                  	inc rsi
 14775 0000BC03 EBEC                    	jmp .L_lambda_simple_params_loop_0110
 14776                                  .L_lambda_simple_params_end_0110:
 14777 0000BC05 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14778 0000BC08 4889C3                  	mov rbx, rax
 14779 0000BC0B 58                      	pop rax
 14780 0000BC0C C60005                  	mov byte [rax], T_closure
 14781 0000BC0F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14782 0000BC13 48C74009[20BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0110
 14783 0000BC1B E999030000              	jmp .L_lambda_simple_end_0110
 14784                                  .L_lambda_simple_code_0110:	; lambda-simple body
 14785 0000BC20 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14786 0000BC26 740B                    	je .L_lambda_simple_arity_check_ok_0110
 14787 0000BC28 FF742410                	push qword [rsp + 8 * 2]
 14788 0000BC2C 6A01                    	push 1
 14789 0000BC2E E9633D0000              	jmp L_error_incorrect_arity_simple
 14790                                  .L_lambda_simple_arity_check_ok_0110:
 14791 0000BC33 C8000000                	enter 0, 0
 14792 0000BC37 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14793 0000BC3B 4889C2                  	mov rdx, rax
 14794 0000BC3E BF08000000              	mov rdi, 8
 14795 0000BC43 E8953D0000              	call malloc
 14796 0000BC48 488910                  	mov qword[rax], rdx
 14797 0000BC4B 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 14798 0000BC4F 48B8-                   	mov rax, sob_void
 14798 0000BC51 [0000000000000000] 
 14799                                  
 14800 0000BC59 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14801 0000BC5E E87A3D0000              	call malloc
 14802 0000BC63 50                      	push rax
 14803 0000BC64 BF08000000              	mov rdi, 8 * 1	; new rib
 14804 0000BC69 E86F3D0000              	call malloc
 14805 0000BC6E 50                      	push rax
 14806 0000BC6F BF28000000              	mov rdi, 8 * 5	; extended env
 14807 0000BC74 E8643D0000              	call malloc
 14808 0000BC79 488B7D10                	mov rdi, ENV
 14809 0000BC7D BE00000000              	mov rsi, 0
 14810 0000BC82 BA01000000              	mov rdx, 1
 14811                                  .L_lambda_simple_env_loop_0111:	; ext_env[i + 1] <-- env[i]
 14812 0000BC87 4883FE04                	cmp rsi, 4
 14813 0000BC8B 7410                    	je .L_lambda_simple_env_end_0111
 14814 0000BC8D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14815 0000BC91 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14816 0000BC95 48FFC6                  	inc rsi
 14817 0000BC98 48FFC2                  	inc rdx
 14818 0000BC9B EBEA                    	jmp .L_lambda_simple_env_loop_0111
 14819                                  .L_lambda_simple_env_end_0111:
 14820 0000BC9D 5B                      	pop rbx
 14821 0000BC9E BE00000000              	mov rsi, 0
 14822                                  .L_lambda_simple_params_loop_0111:	; copy params
 14823 0000BCA3 4883FE01                	cmp rsi, 1
 14824 0000BCA7 740E                    	je .L_lambda_simple_params_end_0111
 14825 0000BCA9 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14826 0000BCAE 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14827 0000BCB2 48FFC6                  	inc rsi
 14828 0000BCB5 EBEC                    	jmp .L_lambda_simple_params_loop_0111
 14829                                  .L_lambda_simple_params_end_0111:
 14830 0000BCB7 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14831 0000BCBA 4889C3                  	mov rbx, rax
 14832 0000BCBD 58                      	pop rax
 14833 0000BCBE C60005                  	mov byte [rax], T_closure
 14834 0000BCC1 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14835 0000BCC5 48C74009[D2BC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0111
 14836 0000BCCD E928010000              	jmp .L_lambda_simple_end_0111
 14837                                  .L_lambda_simple_code_0111:	; lambda-simple body
 14838 0000BCD2 48837C241002            	cmp qword [rsp + 8 * 2], 2
 14839 0000BCD8 740B                    	je .L_lambda_simple_arity_check_ok_0111
 14840 0000BCDA FF742410                	push qword [rsp + 8 * 2]
 14841 0000BCDE 6A02                    	push 2
 14842 0000BCE0 E9B13C0000              	jmp L_error_incorrect_arity_simple
 14843                                  .L_lambda_simple_arity_check_ok_0111:
 14844 0000BCE5 C8000000                	enter 0, 0
 14845 0000BCE9 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14846 0000BCED 50                      	push rax
 14847 0000BCEE 6A01                    	push 1
 14848 0000BCF0 488B0425[00000000]      	mov rax, qword [free_var_0]
 14849                                  	assert_closure(rax)
    42 0000BCF8 803805              <1>  cmp byte [%1], %2
    43 0000BCFB 0F85D0540000        <1>  jne L_error_incorrect_type
 14850 0000BD01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14851 0000BD04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14852 0000BD07 483D[02000000]          	cmp rax, sob_boolean_false
 14853 0000BD0D 0F85E3000000            	jne .L_or_end_0015
 14854 0000BD13 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14855 0000BD17 50                      	push rax
 14856 0000BD18 6A01                    	push 1
 14857 0000BD1A 488B0425[80000000]      	mov rax, qword [free_var_16]
 14858                                  	assert_closure(rax)
    42 0000BD22 803805              <1>  cmp byte [%1], %2
    43 0000BD25 0F85A6540000        <1>  jne L_error_incorrect_type
 14859 0000BD2B FF7001                  	push SOB_CLOSURE_ENV(rax)
 14860 0000BD2E FF5009                  	call SOB_CLOSURE_CODE(rax)
 14861 0000BD31 50                      	push rax
 14862 0000BD32 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14863 0000BD36 50                      	push rax
 14864 0000BD37 6A02                    	push 2
 14865 0000BD39 488B4510                	mov rax, qword [rbp + 8 * 2]
 14866 0000BD3D 488B4008                	mov rax, qword [rax + 8 * 1]
 14867 0000BD41 488B00                  	mov rax, qword [rax + 8 * 0]
 14868                                  	assert_closure(rax)
    42 0000BD44 803805              <1>  cmp byte [%1], %2
    43 0000BD47 0F8584540000        <1>  jne L_error_incorrect_type
 14869 0000BD4D FF7001                  	push SOB_CLOSURE_ENV(rax)
 14870 0000BD50 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14871 0000BD53 483D[02000000]          	cmp rax, sob_boolean_false
 14872 0000BD59 0F848D000000                      	je .L_if_else_009f
 14873 0000BD5F 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 14874 0000BD63 50                      	push rax
 14875 0000BD64 6A01                    	push 1
 14876 0000BD66 488B0425[88000000]      	mov rax, qword [free_var_17]
 14877                                  	assert_closure(rax)
    42 0000BD6E 803805              <1>  cmp byte [%1], %2
    43 0000BD71 0F855A540000        <1>  jne L_error_incorrect_type
 14878 0000BD77 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14879 0000BD7A FF5009                  	call SOB_CLOSURE_CODE(rax)
 14880 0000BD7D 50                      	push rax
 14881 0000BD7E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 14882 0000BD82 50                      	push rax
 14883 0000BD83 6A01                    	push 1
 14884 0000BD85 488B0425[80000000]      	mov rax, qword [free_var_16]
 14885                                  	assert_closure(rax)
    42 0000BD8D 803805              <1>  cmp byte [%1], %2
    43 0000BD90 0F853B540000        <1>  jne L_error_incorrect_type
 14886 0000BD96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14887 0000BD99 FF5009                  	call SOB_CLOSURE_CODE(rax)
 14888 0000BD9C 50                      	push rax
 14889 0000BD9D 6A02                    	push 2
 14890 0000BD9F 488B4510                	mov rax, qword [rbp + 8 * 2]
 14891 0000BDA3 488B00                  	mov rax, qword [rax + 8 * 0]
 14892 0000BDA6 488B00                  	mov rax, qword [rax + 8 * 0]
 14893 0000BDA9 488B00                  	mov rax, qword [rax]
 14894                                  	assert_closure(rax)
    42 0000BDAC 803805              <1>  cmp byte [%1], %2
    43 0000BDAF 0F851C540000        <1>  jne L_error_incorrect_type
 14895 0000BDB5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 14896 0000BDB8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 14897 0000BDBB FF7500                  	push qword [rbp] ; same the old rbp
 14898 0000BDBE BA05000000              	mov rdx, 2 + 3
 14899 0000BDC3 488B4D00                	mov rcx, [rbp]
 14900 0000BDC7 4889EF                  	mov rdi, rbp
 14901                                  .L_tc_recycle_frame_loop_0143:
 14902 0000BDCA 4883FA00                	cmp rdx, 0
 14903 0000BDCE 7413                    	je .L_tc_recycle_frame_done_0143
 14904 0000BDD0 4883E908                	sub rcx, 8
 14905 0000BDD4 4883EF08                	sub rdi, 8
 14906 0000BDD8 488B37                  	mov rsi, [rdi]
 14907 0000BDDB 488931                  	mov qword [rcx], rsi
 14908 0000BDDE 48FFCA                  	dec rdx
 14909 0000BDE1 EBE7                    	jmp .L_tc_recycle_frame_loop_0143
 14910                                  .L_tc_recycle_frame_done_0143:
 14911 0000BDE3 5D                      	pop rbp ; restore the old rbp
 14912 0000BDE4 4889CC                  	mov rsp, rcx
 14913 0000BDE7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 14914 0000BDEA EB0A                    	jmp .L_if_end_009f
 14915                                            .L_if_else_009f:
 14916 0000BDEC 48B8-                             	mov rax, L_constants + 2
 14916 0000BDEE [0200000000000000] 
 14917                                  .L_if_end_009f:
 14918                                  .L_or_end_0015:
 14919 0000BDF6 C9                      	leave
 14920 0000BDF7 C22000                  	ret 8 * (2 + 2)
 14921                                  .L_lambda_simple_end_0111:	; new closure is in rax
 14922 0000BDFA 50                      	push rax
 14923 0000BDFB 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 14924 0000BDFF 8F00                    	pop qword [rax]
 14925 0000BE01 48B8-                   	mov rax, sob_void
 14925 0000BE03 [0000000000000000] 
 14926                                  
 14927 0000BE0B BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 14928 0000BE10 E8C83B0000              	call malloc
 14929 0000BE15 50                      	push rax
 14930 0000BE16 BF08000000              	mov rdi, 8 * 1	; new rib
 14931 0000BE1B E8BD3B0000              	call malloc
 14932 0000BE20 50                      	push rax
 14933 0000BE21 BF28000000              	mov rdi, 8 * 5	; extended env
 14934 0000BE26 E8B23B0000              	call malloc
 14935 0000BE2B 488B7D10                	mov rdi, ENV
 14936 0000BE2F BE00000000              	mov rsi, 0
 14937 0000BE34 BA01000000              	mov rdx, 1
 14938                                  .L_lambda_opt_env_loop_002a:	; ext_env[i + 1] <-- env[i]
 14939 0000BE39 4883FE04                	cmp rsi, 4
 14940 0000BE3D 7410                    	je .L_lambda_opt_env_end_002a
 14941 0000BE3F 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 14942 0000BE43 48890CD0                	mov qword [rax + 8 * rdx], rcx
 14943 0000BE47 48FFC6                  	inc rsi
 14944 0000BE4A 48FFC2                  	inc rdx
 14945 0000BE4D EBEA                    	jmp .L_lambda_opt_env_loop_002a
 14946                                  .L_lambda_opt_env_end_002a:
 14947 0000BE4F 5B                      	pop rbx
 14948 0000BE50 BE00000000              	mov rsi, 0
 14949                                  .L_lambda_opt_params_loop_002a:	; copy params
 14950 0000BE55 4883FE01                	cmp rsi, 1
 14951 0000BE59 740E                    	je .L_lambda_opt_params_end_002a
 14952 0000BE5B 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 14953 0000BE60 488914F3                	mov qword [rbx + 8 * rsi], rdx
 14954 0000BE64 48FFC6                  	inc rsi
 14955 0000BE67 EBEC                    	jmp .L_lambda_opt_params_loop_002a
 14956                                  .L_lambda_opt_params_end_002a:
 14957 0000BE69 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 14958 0000BE6C 4889C3                  	mov rbx, rax
 14959 0000BE6F 58                      	pop rax
 14960 0000BE70 C60005                  	mov byte [rax], T_closure
 14961 0000BE73 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 14962 0000BE77 48C74009[84BE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002a
 14963 0000BE7F E931010000              	jmp .L_lambda_opt_end_002a
 14964                                  .L_lambda_opt_code_002a:	; lambda-opt body
 14965 0000BE84 48837C241001            	cmp qword [rsp + 8 * 2], 1
 14966 0000BE8A 740D                    	je .L_lambda_opt_arity_check_exact_002a
 14967 0000BE8C 7F43                    	jg .L_lambda_opt_arity_check_more_002a
 14968 0000BE8E FF742410                	push qword [rsp + 8 * 2]
 14969 0000BE92 6A01                    	push 1
 14970 0000BE94 E9113B0000              	jmp L_error_incorrect_arity_opt
 14971                                  .L_lambda_opt_arity_check_exact_002a:
 14972 0000BE99 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 14973 0000BEA2 BA04000000              	mov rdx, 4
 14974 0000BEA7 FF3424                  	push qword [rsp]
 14975 0000BEAA BE01000000              	mov rsi, 1
 14976                                  .L_lambda_opt_stack_shrink_loop_007c:
 14977 0000BEAF 4839D6                  	cmp rsi, rdx
 14978 0000BEB2 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_007c
 14979 0000BEB4 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 14980 0000BEB9 488B0B                  	mov rcx, [rbx]
 14981 0000BEBC 48894BF8                	mov qword [rbx - 8], rcx
 14982 0000BEC0 48FFC6                  	inc rsi
 14983 0000BEC3 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_007c
 14984                                  .L_lambda_opt_stack_shrink_loop_exit_007c:
 14985 0000BEC5 48C703[01000000]        	mov qword [rbx], sob_nil
 14986 0000BECC E985000000              	jmp .L_lambda_opt_stack_adjusted_002a
 14987                                  .L_lambda_opt_arity_check_more_002a:
 14988 0000BED1 488B542410              	mov rdx, qword [rsp + 8 * 2]
 14989 0000BED6 4883EA01                	sub rdx, 1
 14990 0000BEDA 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 14991 0000BEE3 BE00000000              	mov rsi, 0
 14992 0000BEE8 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 14993 0000BEED 48B9-                   	mov rcx, sob_nil
 14993 0000BEEF [0100000000000000] 
 14994                                  .L_lambda_opt_stack_shrink_loop_007d:
 14995 0000BEF7 4839D6                  	cmp rsi, rdx
 14996 0000BEFA 7427                    je .L_lambda_opt_stack_shrink_loop_exit_007d
 14997 0000BEFC BF11000000              	mov rdi, 17 ; 1+8+8
 14998 0000BF01 E8D73A0000              	call malloc
 14999 0000BF06 48894809                	mov SOB_PAIR_CDR(rax), rcx
 15000 0000BF0A 48F7DE                  	neg rsi
 15001 0000BF0D 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 15002 0000BF11 48F7DE                  	neg rsi
 15003 0000BF14 48894801                	mov SOB_PAIR_CAR(rax), rcx
 15004 0000BF18 C60021                  	mov byte [rax], T_pair
 15005 0000BF1B 4889C1                  	mov rcx, rax
 15006 0000BF1E 48FFC6                  	inc rsi
 15007 0000BF21 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_007d
 15008                                  .L_lambda_opt_stack_shrink_loop_exit_007d:
 15009 0000BF23 48890B                  	mov qword [rbx], rcx
 15010 0000BF26 4883EB08                	sub rbx, 8
 15011 0000BF2A 4889E7                  	mov rdi, rsp
 15012 0000BF2D 4883C718                	add rdi, 24
 15013 0000BF31 BE04000000              	mov rsi, 4
 15014                                  .L_lambda_opt_stack_shrink_loop_007e:
 15015 0000BF36 4883FE00                	cmp rsi,0
 15016 0000BF3A 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_007e
 15017 0000BF3C 488B0F                  	mov rcx, qword [rdi]
 15018 0000BF3F 48890B                  	mov [rbx], rcx
 15019 0000BF42 48FFCE                  	dec rsi
 15020 0000BF45 4883EB08                	sub rbx, 8
 15021 0000BF49 4883EF08                	sub rdi, 8
 15022 0000BF4D EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_007e
 15023                                  .L_lambda_opt_stack_shrink_loop_exit_007e:
 15024 0000BF4F 4883C308                	add rbx, 8
 15025 0000BF53 4889DC                  	mov rsp, rbx
 15026                                  .L_lambda_opt_stack_adjusted_002a:
 15027 0000BF56 C8000000                	enter 0, 0
 15028 0000BF5A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15029 0000BF5E 50                      	push rax
 15030 0000BF5F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15031 0000BF63 50                      	push rax
 15032 0000BF64 6A02                    	push 2
 15033 0000BF66 488B4510                	mov rax, qword [rbp + 8 * 2]
 15034 0000BF6A 488B00                  	mov rax, qword [rax + 8 * 0]
 15035 0000BF6D 488B00                  	mov rax, qword [rax + 8 * 0]
 15036 0000BF70 488B00                  	mov rax, qword [rax]
 15037                                  	assert_closure(rax)
    42 0000BF73 803805              <1>  cmp byte [%1], %2
    43 0000BF76 0F8555520000        <1>  jne L_error_incorrect_type
 15038 0000BF7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 15039 0000BF7F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15040 0000BF82 FF7500                  	push qword [rbp] ; same the old rbp
 15041 0000BF85 BA05000000              	mov rdx, 2 + 3
 15042 0000BF8A 488B4D00                	mov rcx, [rbp]
 15043 0000BF8E 4889EF                  	mov rdi, rbp
 15044                                  .L_tc_recycle_frame_loop_0144:
 15045 0000BF91 4883FA00                	cmp rdx, 0
 15046 0000BF95 7413                    	je .L_tc_recycle_frame_done_0144
 15047 0000BF97 4883E908                	sub rcx, 8
 15048 0000BF9B 4883EF08                	sub rdi, 8
 15049 0000BF9F 488B37                  	mov rsi, [rdi]
 15050 0000BFA2 488931                  	mov qword [rcx], rsi
 15051 0000BFA5 48FFCA                  	dec rdx
 15052 0000BFA8 EBE7                    	jmp .L_tc_recycle_frame_loop_0144
 15053                                  .L_tc_recycle_frame_done_0144:
 15054 0000BFAA 5D                      	pop rbp ; restore the old rbp
 15055 0000BFAB 4889CC                  	mov rsp, rcx
 15056 0000BFAE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15057 0000BFB1 C9                      	leave
 15058 0000BFB2 C22000                  	ret 8 * (2 + 2)
 15059                                  .L_lambda_opt_end_002a:	; new closure is in rax
 15060 0000BFB5 C9                      	leave
 15061 0000BFB6 C21800                  	ret 8 * (2 + 1)
 15062                                  .L_lambda_simple_end_0110:	; new closure is in rax
 15063                                  	assert_closure(rax)
    42 0000BFB9 803805              <1>  cmp byte [%1], %2
    43 0000BFBC 0F850F520000        <1>  jne L_error_incorrect_type
 15064 0000BFC2 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15065 0000BFC5 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15066 0000BFC8 FF7500                  	push qword [rbp] ; same the old rbp
 15067 0000BFCB BA04000000              	mov rdx, 1 + 3
 15068 0000BFD0 488B4D00                	mov rcx, [rbp]
 15069 0000BFD4 4889EF                  	mov rdi, rbp
 15070                                  .L_tc_recycle_frame_loop_0142:
 15071 0000BFD7 4883FA00                	cmp rdx, 0
 15072 0000BFDB 7413                    	je .L_tc_recycle_frame_done_0142
 15073 0000BFDD 4883E908                	sub rcx, 8
 15074 0000BFE1 4883EF08                	sub rdi, 8
 15075 0000BFE5 488B37                  	mov rsi, [rdi]
 15076 0000BFE8 488931                  	mov qword [rcx], rsi
 15077 0000BFEB 48FFCA                  	dec rdx
 15078 0000BFEE EBE7                    	jmp .L_tc_recycle_frame_loop_0142
 15079                                  .L_tc_recycle_frame_done_0142:
 15080 0000BFF0 5D                      	pop rbp ; restore the old rbp
 15081 0000BFF1 4889CC                  	mov rsp, rcx
 15082 0000BFF4 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15083 0000BFF7 C9                      	leave
 15084 0000BFF8 C21800                  	ret 8 * (2 + 1)
 15085                                  .L_lambda_simple_end_010f:	; new closure is in rax
 15086                                  	assert_closure(rax)
    42 0000BFFB 803805              <1>  cmp byte [%1], %2
    43 0000BFFE 0F85CD510000        <1>  jne L_error_incorrect_type
 15087 0000C004 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15088 0000C007 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15089 0000C00A FF7500                  	push qword [rbp] ; same the old rbp
 15090 0000C00D BA04000000              	mov rdx, 1 + 3
 15091 0000C012 488B4D00                	mov rcx, [rbp]
 15092 0000C016 4889EF                  	mov rdi, rbp
 15093                                  .L_tc_recycle_frame_loop_0141:
 15094 0000C019 4883FA00                	cmp rdx, 0
 15095 0000C01D 7413                    	je .L_tc_recycle_frame_done_0141
 15096 0000C01F 4883E908                	sub rcx, 8
 15097 0000C023 4883EF08                	sub rdi, 8
 15098 0000C027 488B37                  	mov rsi, [rdi]
 15099 0000C02A 488931                  	mov qword [rcx], rsi
 15100 0000C02D 48FFCA                  	dec rdx
 15101 0000C030 EBE7                    	jmp .L_tc_recycle_frame_loop_0141
 15102                                  .L_tc_recycle_frame_done_0141:
 15103 0000C032 5D                      	pop rbp ; restore the old rbp
 15104 0000C033 4889CC                  	mov rsp, rcx
 15105 0000C036 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15106 0000C039 C9                      	leave
 15107 0000C03A C21800                  	ret 8 * (2 + 1)
 15108                                  .L_lambda_simple_end_010d:	; new closure is in rax
 15109                                  	assert_closure(rax)
    42 0000C03D 803805              <1>  cmp byte [%1], %2
    43 0000C040 0F858B510000        <1>  jne L_error_incorrect_type
 15110 0000C046 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15111 0000C049 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15112 0000C04C FF7500                  	push qword [rbp] ; same the old rbp
 15113 0000C04F BA04000000              	mov rdx, 1 + 3
 15114 0000C054 488B4D00                	mov rcx, [rbp]
 15115 0000C058 4889EF                  	mov rdi, rbp
 15116                                  .L_tc_recycle_frame_loop_013f:
 15117 0000C05B 4883FA00                	cmp rdx, 0
 15118 0000C05F 7413                    	je .L_tc_recycle_frame_done_013f
 15119 0000C061 4883E908                	sub rcx, 8
 15120 0000C065 4883EF08                	sub rdi, 8
 15121 0000C069 488B37                  	mov rsi, [rdi]
 15122 0000C06C 488931                  	mov qword [rcx], rsi
 15123 0000C06F 48FFCA                  	dec rdx
 15124 0000C072 EBE7                    	jmp .L_tc_recycle_frame_loop_013f
 15125                                  .L_tc_recycle_frame_done_013f:
 15126 0000C074 5D                      	pop rbp ; restore the old rbp
 15127 0000C075 4889CC                  	mov rsp, rcx
 15128 0000C078 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15129 0000C07B C9                      	leave
 15130 0000C07C C22000                  	ret 8 * (2 + 2)
 15131                                  .L_lambda_simple_end_010c:	; new closure is in rax
 15132 0000C07F 50                      	push rax
 15133 0000C080 6A01                    	push 1
 15134 0000C082 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15135 0000C087 E851390000              	call malloc
 15136 0000C08C 50                      	push rax
 15137 0000C08D BF00000000              	mov rdi, 8 * 0	; new rib
 15138 0000C092 E846390000              	call malloc
 15139 0000C097 50                      	push rax
 15140 0000C098 BF08000000              	mov rdi, 8 * 1	; extended env
 15141 0000C09D E83B390000              	call malloc
 15142 0000C0A2 488B7D10                	mov rdi, ENV
 15143 0000C0A6 BE00000000              	mov rsi, 0
 15144 0000C0AB BA01000000              	mov rdx, 1
 15145                                  .L_lambda_simple_env_loop_010b:	; ext_env[i + 1] <-- env[i]
 15146 0000C0B0 4883FE00                	cmp rsi, 0
 15147 0000C0B4 7410                    	je .L_lambda_simple_env_end_010b
 15148 0000C0B6 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15149 0000C0BA 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15150 0000C0BE 48FFC6                  	inc rsi
 15151 0000C0C1 48FFC2                  	inc rdx
 15152 0000C0C4 EBEA                    	jmp .L_lambda_simple_env_loop_010b
 15153                                  .L_lambda_simple_env_end_010b:
 15154 0000C0C6 5B                      	pop rbx
 15155 0000C0C7 BE00000000              	mov rsi, 0
 15156                                  .L_lambda_simple_params_loop_010b:	; copy params
 15157 0000C0CC 4883FE00                	cmp rsi, 0
 15158 0000C0D0 740E                    	je .L_lambda_simple_params_end_010b
 15159 0000C0D2 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15160 0000C0D7 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15161 0000C0DB 48FFC6                  	inc rsi
 15162 0000C0DE EBEC                    	jmp .L_lambda_simple_params_loop_010b
 15163                                  .L_lambda_simple_params_end_010b:
 15164 0000C0E0 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15165 0000C0E3 4889C3                  	mov rbx, rax
 15166 0000C0E6 58                      	pop rax
 15167 0000C0E7 C60005                  	mov byte [rax], T_closure
 15168 0000C0EA 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15169 0000C0EE 48C74009[FBC00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_010b
 15170 0000C0F6 E9FF000000              	jmp .L_lambda_simple_end_010b
 15171                                  .L_lambda_simple_code_010b:	; lambda-simple body
 15172 0000C0FB 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15173 0000C101 740B                    	je .L_lambda_simple_arity_check_ok_010b
 15174 0000C103 FF742410                	push qword [rsp + 8 * 2]
 15175 0000C107 6A01                    	push 1
 15176 0000C109 E988380000              	jmp L_error_incorrect_arity_simple
 15177                                  .L_lambda_simple_arity_check_ok_010b:
 15178 0000C10E C8000000                	enter 0, 0
 15179 0000C112 488B0425[70030000]      	mov rax, qword [free_var_110]
 15180 0000C11A 50                      	push rax
 15181 0000C11B 488B0425[60030000]      	mov rax, qword [free_var_108]
 15182 0000C123 50                      	push rax
 15183 0000C124 6A02                    	push 2
 15184 0000C126 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15185                                  	assert_closure(rax)
    42 0000C12A 803805              <1>  cmp byte [%1], %2
    43 0000C12D 0F859E500000        <1>  jne L_error_incorrect_type
 15186 0000C133 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15187 0000C136 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15188 0000C139 48890425[E8030000]      	mov qword [free_var_125], rax
 15189 0000C141 48B8-                   	mov rax, sob_void
 15189 0000C143 [0000000000000000] 
 15190                                  
 15191 0000C14B 488B0425[70030000]      	mov rax, qword [free_var_110]
 15192 0000C153 50                      	push rax
 15193 0000C154 488B0425[60030000]      	mov rax, qword [free_var_108]
 15194 0000C15C 50                      	push rax
 15195 0000C15D 6A02                    	push 2
 15196 0000C15F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15197                                  	assert_closure(rax)
    42 0000C163 803805              <1>  cmp byte [%1], %2
    43 0000C166 0F8565500000        <1>  jne L_error_incorrect_type
 15198 0000C16C FF7001                  	push SOB_CLOSURE_ENV(rax)
 15199 0000C16F FF5009                  	call SOB_CLOSURE_CODE(rax)
 15200 0000C172 48890425[10040000]      	mov qword [free_var_130], rax
 15201 0000C17A 48B8-                   	mov rax, sob_void
 15201 0000C17C [0000000000000000] 
 15202                                  
 15203 0000C184 488B0425[70030000]      	mov rax, qword [free_var_110]
 15204 0000C18C 50                      	push rax
 15205 0000C18D 488B0425[78030000]      	mov rax, qword [free_var_111]
 15206 0000C195 50                      	push rax
 15207 0000C196 6A02                    	push 2
 15208 0000C198 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15209                                  	assert_closure(rax)
    42 0000C19C 803805              <1>  cmp byte [%1], %2
    43 0000C19F 0F852C500000        <1>  jne L_error_incorrect_type
 15210 0000C1A5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15211 0000C1A8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15212 0000C1AB 48890425[F8030000]      	mov qword [free_var_127], rax
 15213 0000C1B3 48B8-                   	mov rax, sob_void
 15213 0000C1B5 [0000000000000000] 
 15214                                  
 15215 0000C1BD 488B0425[A8030000]      	mov rax, qword [free_var_117]
 15216 0000C1C5 50                      	push rax
 15217 0000C1C6 488B0425[B0030000]      	mov rax, qword [free_var_118]
 15218 0000C1CE 50                      	push rax
 15219 0000C1CF 6A02                    	push 2
 15220 0000C1D1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15221                                  	assert_closure(rax)
    42 0000C1D5 803805              <1>  cmp byte [%1], %2
    43 0000C1D8 0F85F34F0000        <1>  jne L_error_incorrect_type
 15222 0000C1DE FF7001                  	push SOB_CLOSURE_ENV(rax)
 15223 0000C1E1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15224 0000C1E4 48890425[20040000]      	mov qword [free_var_132], rax
 15225 0000C1EC 48B8-                   	mov rax, sob_void
 15225 0000C1EE [0000000000000000] 
 15226 0000C1F6 C9                      	leave
 15227 0000C1F7 C21800                  	ret 8 * (2 + 1)
 15228                                  .L_lambda_simple_end_010b:	; new closure is in rax
 15229                                  	assert_closure(rax)
    42 0000C1FA 803805              <1>  cmp byte [%1], %2
    43 0000C1FD 0F85CE4F0000        <1>  jne L_error_incorrect_type
 15230 0000C203 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15231 0000C206 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15232                                  
 15233 0000C209 4889C7                  	mov rdi, rax
 15234 0000C20C E8DD370000              	call print_sexpr_if_not_void
 15235                                  
 15236 0000C211 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15237 0000C216 E8C2370000              	call malloc
 15238 0000C21B 50                      	push rax
 15239 0000C21C BF00000000              	mov rdi, 8 * 0	; new rib
 15240 0000C221 E8B7370000              	call malloc
 15241 0000C226 50                      	push rax
 15242 0000C227 BF08000000              	mov rdi, 8 * 1	; extended env
 15243 0000C22C E8AC370000              	call malloc
 15244 0000C231 488B7D10                	mov rdi, ENV
 15245 0000C235 BE00000000              	mov rsi, 0
 15246 0000C23A BA01000000              	mov rdx, 1
 15247                                  .L_lambda_simple_env_loop_0115:	; ext_env[i + 1] <-- env[i]
 15248 0000C23F 4883FE00                	cmp rsi, 0
 15249 0000C243 7410                    	je .L_lambda_simple_env_end_0115
 15250 0000C245 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15251 0000C249 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15252 0000C24D 48FFC6                  	inc rsi
 15253 0000C250 48FFC2                  	inc rdx
 15254 0000C253 EBEA                    	jmp .L_lambda_simple_env_loop_0115
 15255                                  .L_lambda_simple_env_end_0115:
 15256 0000C255 5B                      	pop rbx
 15257 0000C256 BE00000000              	mov rsi, 0
 15258                                  .L_lambda_simple_params_loop_0115:	; copy params
 15259 0000C25B 4883FE00                	cmp rsi, 0
 15260 0000C25F 740E                    	je .L_lambda_simple_params_end_0115
 15261 0000C261 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15262 0000C266 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15263 0000C26A 48FFC6                  	inc rsi
 15264 0000C26D EBEC                    	jmp .L_lambda_simple_params_loop_0115
 15265                                  .L_lambda_simple_params_end_0115:
 15266 0000C26F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15267 0000C272 4889C3                  	mov rbx, rax
 15268 0000C275 58                      	pop rax
 15269 0000C276 C60005                  	mov byte [rax], T_closure
 15270 0000C279 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15271 0000C27D 48C74009[8AC20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0115
 15272 0000C285 E9B10A0000              	jmp .L_lambda_simple_end_0115
 15273                                  .L_lambda_simple_code_0115:	; lambda-simple body
 15274 0000C28A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15275 0000C290 740B                    	je .L_lambda_simple_arity_check_ok_0115
 15276 0000C292 FF742410                	push qword [rsp + 8 * 2]
 15277 0000C296 6A01                    	push 1
 15278 0000C298 E9F9360000              	jmp L_error_incorrect_arity_simple
 15279                                  .L_lambda_simple_arity_check_ok_0115:
 15280 0000C29D C8000000                	enter 0, 0
 15281 0000C2A1 48B8-                   	mov rax, L_constants + 23
 15281 0000C2A3 [1700000000000000] 
 15282 0000C2AB 50                      	push rax
 15283 0000C2AC 6A01                    	push 1
 15284 0000C2AE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15285 0000C2B3 E825370000              	call malloc
 15286 0000C2B8 50                      	push rax
 15287 0000C2B9 BF08000000              	mov rdi, 8 * 1	; new rib
 15288 0000C2BE E81A370000              	call malloc
 15289 0000C2C3 50                      	push rax
 15290 0000C2C4 BF10000000              	mov rdi, 8 * 2	; extended env
 15291 0000C2C9 E80F370000              	call malloc
 15292 0000C2CE 488B7D10                	mov rdi, ENV
 15293 0000C2D2 BE00000000              	mov rsi, 0
 15294 0000C2D7 BA01000000              	mov rdx, 1
 15295                                  .L_lambda_simple_env_loop_0116:	; ext_env[i + 1] <-- env[i]
 15296 0000C2DC 4883FE01                	cmp rsi, 1
 15297 0000C2E0 7410                    	je .L_lambda_simple_env_end_0116
 15298 0000C2E2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15299 0000C2E6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15300 0000C2EA 48FFC6                  	inc rsi
 15301 0000C2ED 48FFC2                  	inc rdx
 15302 0000C2F0 EBEA                    	jmp .L_lambda_simple_env_loop_0116
 15303                                  .L_lambda_simple_env_end_0116:
 15304 0000C2F2 5B                      	pop rbx
 15305 0000C2F3 BE00000000              	mov rsi, 0
 15306                                  .L_lambda_simple_params_loop_0116:	; copy params
 15307 0000C2F8 4883FE01                	cmp rsi, 1
 15308 0000C2FC 740E                    	je .L_lambda_simple_params_end_0116
 15309 0000C2FE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15310 0000C303 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15311 0000C307 48FFC6                  	inc rsi
 15312 0000C30A EBEC                    	jmp .L_lambda_simple_params_loop_0116
 15313                                  .L_lambda_simple_params_end_0116:
 15314 0000C30C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15315 0000C30F 4889C3                  	mov rbx, rax
 15316 0000C312 58                      	pop rax
 15317 0000C313 C60005                  	mov byte [rax], T_closure
 15318 0000C316 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15319 0000C31A 48C74009[27C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0116
 15320 0000C322 E9D2090000              	jmp .L_lambda_simple_end_0116
 15321                                  .L_lambda_simple_code_0116:	; lambda-simple body
 15322 0000C327 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15323 0000C32D 740B                    	je .L_lambda_simple_arity_check_ok_0116
 15324 0000C32F FF742410                	push qword [rsp + 8 * 2]
 15325 0000C333 6A01                    	push 1
 15326 0000C335 E95C360000              	jmp L_error_incorrect_arity_simple
 15327                                  .L_lambda_simple_arity_check_ok_0116:
 15328 0000C33A C8000000                	enter 0, 0
 15329 0000C33E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15330 0000C342 4889C2                  	mov rdx, rax
 15331 0000C345 BF08000000              	mov rdi, 8
 15332 0000C34A E88E360000              	call malloc
 15333 0000C34F 488910                  	mov qword[rax], rdx
 15334 0000C352 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15335 0000C356 48B8-                   	mov rax, sob_void
 15335 0000C358 [0000000000000000] 
 15336                                  
 15337 0000C360 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15338 0000C365 E873360000              	call malloc
 15339 0000C36A 50                      	push rax
 15340 0000C36B BF08000000              	mov rdi, 8 * 1	; new rib
 15341 0000C370 E868360000              	call malloc
 15342 0000C375 50                      	push rax
 15343 0000C376 BF18000000              	mov rdi, 8 * 3	; extended env
 15344 0000C37B E85D360000              	call malloc
 15345 0000C380 488B7D10                	mov rdi, ENV
 15346 0000C384 BE00000000              	mov rsi, 0
 15347 0000C389 BA01000000              	mov rdx, 1
 15348                                  .L_lambda_simple_env_loop_0117:	; ext_env[i + 1] <-- env[i]
 15349 0000C38E 4883FE02                	cmp rsi, 2
 15350 0000C392 7410                    	je .L_lambda_simple_env_end_0117
 15351 0000C394 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15352 0000C398 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15353 0000C39C 48FFC6                  	inc rsi
 15354 0000C39F 48FFC2                  	inc rdx
 15355 0000C3A2 EBEA                    	jmp .L_lambda_simple_env_loop_0117
 15356                                  .L_lambda_simple_env_end_0117:
 15357 0000C3A4 5B                      	pop rbx
 15358 0000C3A5 BE00000000              	mov rsi, 0
 15359                                  .L_lambda_simple_params_loop_0117:	; copy params
 15360 0000C3AA 4883FE01                	cmp rsi, 1
 15361 0000C3AE 740E                    	je .L_lambda_simple_params_end_0117
 15362 0000C3B0 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15363 0000C3B5 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15364 0000C3B9 48FFC6                  	inc rsi
 15365 0000C3BC EBEC                    	jmp .L_lambda_simple_params_loop_0117
 15366                                  .L_lambda_simple_params_end_0117:
 15367 0000C3BE 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15368 0000C3C1 4889C3                  	mov rbx, rax
 15369 0000C3C4 58                      	pop rax
 15370 0000C3C5 C60005                  	mov byte [rax], T_closure
 15371 0000C3C8 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15372 0000C3CC 48C74009[D9C30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0117
 15373 0000C3D4 E987010000              	jmp .L_lambda_simple_end_0117
 15374                                  .L_lambda_simple_code_0117:	; lambda-simple body
 15375 0000C3D9 48837C241004            	cmp qword [rsp + 8 * 2], 4
 15376 0000C3DF 740B                    	je .L_lambda_simple_arity_check_ok_0117
 15377 0000C3E1 FF742410                	push qword [rsp + 8 * 2]
 15378 0000C3E5 6A04                    	push 4
 15379 0000C3E7 E9AA350000              	jmp L_error_incorrect_arity_simple
 15380                                  .L_lambda_simple_arity_check_ok_0117:
 15381 0000C3EC C8000000                	enter 0, 0
 15382 0000C3F0 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 15383 0000C3F4 50                      	push rax
 15384 0000C3F5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15385 0000C3F9 50                      	push rax
 15386 0000C3FA 6A02                    	push 2
 15387 0000C3FC 488B0425[50030000]      	mov rax, qword [free_var_106]
 15388                                  	assert_closure(rax)
    42 0000C404 803805              <1>  cmp byte [%1], %2
    43 0000C407 0F85C44D0000        <1>  jne L_error_incorrect_type
 15389 0000C40D FF7001                  	push SOB_CLOSURE_ENV(rax)
 15390 0000C410 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15391 0000C413 483D[02000000]          	cmp rax, sob_boolean_false
 15392 0000C419 0F853D010000            	jne .L_or_end_0016
 15393 0000C41F 488B4538                	mov rax, qword [rbp + 8 * (4 + 3)]
 15394 0000C423 50                      	push rax
 15395 0000C424 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15396 0000C428 50                      	push rax
 15397 0000C429 6A02                    	push 2
 15398 0000C42B 488B0425[30030000]      	mov rax, qword [free_var_102]
 15399                                  	assert_closure(rax)
    42 0000C433 803805              <1>  cmp byte [%1], %2
    43 0000C436 0F85954D0000        <1>  jne L_error_incorrect_type
 15400 0000C43C FF7001                  	push SOB_CLOSURE_ENV(rax)
 15401 0000C43F FF5009                  	call SOB_CLOSURE_CODE(rax)
 15402 0000C442 483D[02000000]          	cmp rax, sob_boolean_false
 15403 0000C448 0F8404010000                      	je .L_if_else_00a2
 15404 0000C44E 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 15405 0000C452 50                      	push rax
 15406 0000C453 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 15407 0000C457 50                      	push rax
 15408 0000C458 6A02                    	push 2
 15409 0000C45A 488B0425[78010000]      	mov rax, qword [free_var_47]
 15410                                  	assert_closure(rax)
    42 0000C462 803805              <1>  cmp byte [%1], %2
    43 0000C465 0F85664D0000        <1>  jne L_error_incorrect_type
 15411 0000C46B FF7001                  	push SOB_CLOSURE_ENV(rax)
 15412 0000C46E FF5009                  	call SOB_CLOSURE_CODE(rax)
 15413 0000C471 50                      	push rax
 15414 0000C472 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15415 0000C476 50                      	push rax
 15416 0000C477 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15417 0000C47B 50                      	push rax
 15418 0000C47C 6A02                    	push 2
 15419 0000C47E 488B0425[78010000]      	mov rax, qword [free_var_47]
 15420                                  	assert_closure(rax)
    42 0000C486 803805              <1>  cmp byte [%1], %2
    43 0000C489 0F85424D0000        <1>  jne L_error_incorrect_type
 15421 0000C48F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15422 0000C492 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15423 0000C495 50                      	push rax
 15424 0000C496 6A02                    	push 2
 15425 0000C498 488B4510                	mov rax, qword [rbp + 8 * 2]
 15426 0000C49C 488B4008                	mov rax, qword [rax + 8 * 1]
 15427 0000C4A0 488B00                  	mov rax, qword [rax + 8 * 0]
 15428                                  	assert_closure(rax)
    42 0000C4A3 803805              <1>  cmp byte [%1], %2
    43 0000C4A6 0F85254D0000        <1>  jne L_error_incorrect_type
 15429 0000C4AC FF7001                  	push SOB_CLOSURE_ENV(rax)
 15430 0000C4AF FF5009                  	call SOB_CLOSURE_CODE(rax)
 15431 0000C4B2 483D[02000000]          	cmp rax, sob_boolean_false
 15432 0000C4B8 0F8488000000                      	je .L_if_else_00a1
 15433 0000C4BE 488B4538                          	mov rax, qword [rbp + 8 * (4 + 3)]
 15434 0000C4C2 50                      	push rax
 15435 0000C4C3 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 15436 0000C4C7 50                      	push rax
 15437 0000C4C8 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15438 0000C4CC 50                      	push rax
 15439 0000C4CD 48B8-                   	mov rax, L_constants + 128
 15439 0000C4CF [8000000000000000] 
 15440 0000C4D7 50                      	push rax
 15441 0000C4D8 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15442 0000C4DC 50                      	push rax
 15443 0000C4DD 6A02                    	push 2
 15444 0000C4DF 488B0425[08030000]      	mov rax, qword [free_var_97]
 15445                                  	assert_closure(rax)
    42 0000C4E7 803805              <1>  cmp byte [%1], %2
    43 0000C4EA 0F85E14C0000        <1>  jne L_error_incorrect_type
 15446 0000C4F0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15447 0000C4F3 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15448 0000C4F6 50                      	push rax
 15449 0000C4F7 6A04                    	push 4
 15450 0000C4F9 488B4510                	mov rax, qword [rbp + 8 * 2]
 15451 0000C4FD 488B00                  	mov rax, qword [rax + 8 * 0]
 15452 0000C500 488B00                  	mov rax, qword [rax + 8 * 0]
 15453 0000C503 488B00                  	mov rax, qword [rax]
 15454                                  	assert_closure(rax)
    42 0000C506 803805              <1>  cmp byte [%1], %2
    43 0000C509 0F85C24C0000        <1>  jne L_error_incorrect_type
 15455 0000C50F FF7001                  	push SOB_CLOSURE_ENV(rax)
 15456 0000C512 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15457 0000C515 FF7500                  	push qword [rbp] ; same the old rbp
 15458 0000C518 BA07000000              	mov rdx, 4 + 3
 15459 0000C51D 488B4D00                	mov rcx, [rbp]
 15460 0000C521 4889EF                  	mov rdi, rbp
 15461                                  .L_tc_recycle_frame_loop_0149:
 15462 0000C524 4883FA00                	cmp rdx, 0
 15463 0000C528 7413                    	je .L_tc_recycle_frame_done_0149
 15464 0000C52A 4883E908                	sub rcx, 8
 15465 0000C52E 4883EF08                	sub rdi, 8
 15466 0000C532 488B37                  	mov rsi, [rdi]
 15467 0000C535 488931                  	mov qword [rcx], rsi
 15468 0000C538 48FFCA                  	dec rdx
 15469 0000C53B EBE7                    	jmp .L_tc_recycle_frame_loop_0149
 15470                                  .L_tc_recycle_frame_done_0149:
 15471 0000C53D 5D                      	pop rbp ; restore the old rbp
 15472 0000C53E 4889CC                  	mov rsp, rcx
 15473 0000C541 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15474 0000C544 EB0A                    	jmp .L_if_end_00a1
 15475                                            .L_if_else_00a1:
 15476 0000C546 48B8-                             	mov rax, L_constants + 2
 15476 0000C548 [0200000000000000] 
 15477                                  .L_if_end_00a1:
 15478 0000C550 EB0A                    	jmp .L_if_end_00a2
 15479                                            .L_if_else_00a2:
 15480 0000C552 48B8-                             	mov rax, L_constants + 2
 15480 0000C554 [0200000000000000] 
 15481                                  .L_if_end_00a2:
 15482                                  .L_or_end_0016:
 15483 0000C55C C9                      	leave
 15484 0000C55D C23000                  	ret 8 * (2 + 4)
 15485                                  .L_lambda_simple_end_0117:	; new closure is in rax
 15486 0000C560 50                      	push rax
 15487 0000C561 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15488 0000C565 8F00                    	pop qword [rax]
 15489 0000C567 48B8-                   	mov rax, sob_void
 15489 0000C569 [0000000000000000] 
 15490                                  
 15491 0000C571 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15492 0000C576 E862340000              	call malloc
 15493 0000C57B 50                      	push rax
 15494 0000C57C BF08000000              	mov rdi, 8 * 1	; new rib
 15495 0000C581 E857340000              	call malloc
 15496 0000C586 50                      	push rax
 15497 0000C587 BF18000000              	mov rdi, 8 * 3	; extended env
 15498 0000C58C E84C340000              	call malloc
 15499 0000C591 488B7D10                	mov rdi, ENV
 15500 0000C595 BE00000000              	mov rsi, 0
 15501 0000C59A BA01000000              	mov rdx, 1
 15502                                  .L_lambda_simple_env_loop_011b:	; ext_env[i + 1] <-- env[i]
 15503 0000C59F 4883FE02                	cmp rsi, 2
 15504 0000C5A3 7410                    	je .L_lambda_simple_env_end_011b
 15505 0000C5A5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15506 0000C5A9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15507 0000C5AD 48FFC6                  	inc rsi
 15508 0000C5B0 48FFC2                  	inc rdx
 15509 0000C5B3 EBEA                    	jmp .L_lambda_simple_env_loop_011b
 15510                                  .L_lambda_simple_env_end_011b:
 15511 0000C5B5 5B                      	pop rbx
 15512 0000C5B6 BE00000000              	mov rsi, 0
 15513                                  .L_lambda_simple_params_loop_011b:	; copy params
 15514 0000C5BB 4883FE01                	cmp rsi, 1
 15515 0000C5BF 740E                    	je .L_lambda_simple_params_end_011b
 15516 0000C5C1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15517 0000C5C6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15518 0000C5CA 48FFC6                  	inc rsi
 15519 0000C5CD EBEC                    	jmp .L_lambda_simple_params_loop_011b
 15520                                  .L_lambda_simple_params_end_011b:
 15521 0000C5CF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15522 0000C5D2 4889C3                  	mov rbx, rax
 15523 0000C5D5 58                      	pop rax
 15524 0000C5D6 C60005                  	mov byte [rax], T_closure
 15525 0000C5D9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15526 0000C5DD 48C74009[EAC50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011b
 15527 0000C5E5 E9D9010000              	jmp .L_lambda_simple_end_011b
 15528                                  .L_lambda_simple_code_011b:	; lambda-simple body
 15529 0000C5EA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15530 0000C5F0 740B                    	je .L_lambda_simple_arity_check_ok_011b
 15531 0000C5F2 FF742410                	push qword [rsp + 8 * 2]
 15532 0000C5F6 6A02                    	push 2
 15533 0000C5F8 E999330000              	jmp L_error_incorrect_arity_simple
 15534                                  .L_lambda_simple_arity_check_ok_011b:
 15535 0000C5FD C8000000                	enter 0, 0
 15536 0000C601 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15537 0000C605 50                      	push rax
 15538 0000C606 6A01                    	push 1
 15539 0000C608 488B0425[90000000]      	mov rax, qword [free_var_18]
 15540                                  	assert_closure(rax)
    42 0000C610 803805              <1>  cmp byte [%1], %2
    43 0000C613 0F85B84B0000        <1>  jne L_error_incorrect_type
 15541 0000C619 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15542 0000C61C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15543 0000C61F 50                      	push rax
 15544 0000C620 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15545 0000C624 50                      	push rax
 15546 0000C625 6A01                    	push 1
 15547 0000C627 488B0425[90000000]      	mov rax, qword [free_var_18]
 15548                                  	assert_closure(rax)
    42 0000C62F 803805              <1>  cmp byte [%1], %2
    43 0000C632 0F85994B0000        <1>  jne L_error_incorrect_type
 15549 0000C638 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15550 0000C63B FF5009                  	call SOB_CLOSURE_CODE(rax)
 15551 0000C63E 50                      	push rax
 15552 0000C63F 6A02                    	push 2
 15553 0000C641 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15554 0000C646 E892330000              	call malloc
 15555 0000C64B 50                      	push rax
 15556 0000C64C BF10000000              	mov rdi, 8 * 2	; new rib
 15557 0000C651 E887330000              	call malloc
 15558 0000C656 50                      	push rax
 15559 0000C657 BF20000000              	mov rdi, 8 * 4	; extended env
 15560 0000C65C E87C330000              	call malloc
 15561 0000C661 488B7D10                	mov rdi, ENV
 15562 0000C665 BE00000000              	mov rsi, 0
 15563 0000C66A BA01000000              	mov rdx, 1
 15564                                  .L_lambda_simple_env_loop_011c:	; ext_env[i + 1] <-- env[i]
 15565 0000C66F 4883FE03                	cmp rsi, 3
 15566 0000C673 7410                    	je .L_lambda_simple_env_end_011c
 15567 0000C675 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15568 0000C679 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15569 0000C67D 48FFC6                  	inc rsi
 15570 0000C680 48FFC2                  	inc rdx
 15571 0000C683 EBEA                    	jmp .L_lambda_simple_env_loop_011c
 15572                                  .L_lambda_simple_env_end_011c:
 15573 0000C685 5B                      	pop rbx
 15574 0000C686 BE00000000              	mov rsi, 0
 15575                                  .L_lambda_simple_params_loop_011c:	; copy params
 15576 0000C68B 4883FE02                	cmp rsi, 2
 15577 0000C68F 740E                    	je .L_lambda_simple_params_end_011c
 15578 0000C691 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15579 0000C696 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15580 0000C69A 48FFC6                  	inc rsi
 15581 0000C69D EBEC                    	jmp .L_lambda_simple_params_loop_011c
 15582                                  .L_lambda_simple_params_end_011c:
 15583 0000C69F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15584 0000C6A2 4889C3                  	mov rbx, rax
 15585 0000C6A5 58                      	pop rax
 15586 0000C6A6 C60005                  	mov byte [rax], T_closure
 15587 0000C6A9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15588 0000C6AD 48C74009[BAC60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011c
 15589 0000C6B5 E9C7000000              	jmp .L_lambda_simple_end_011c
 15590                                  .L_lambda_simple_code_011c:	; lambda-simple body
 15591 0000C6BA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15592 0000C6C0 740B                    	je .L_lambda_simple_arity_check_ok_011c
 15593 0000C6C2 FF742410                	push qword [rsp + 8 * 2]
 15594 0000C6C6 6A02                    	push 2
 15595 0000C6C8 E9C9320000              	jmp L_error_incorrect_arity_simple
 15596                                  .L_lambda_simple_arity_check_ok_011c:
 15597 0000C6CD C8000000                	enter 0, 0
 15598 0000C6D1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15599 0000C6D5 50                      	push rax
 15600 0000C6D6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15601 0000C6DA 50                      	push rax
 15602 0000C6DB 6A02                    	push 2
 15603 0000C6DD 488B0425[50030000]      	mov rax, qword [free_var_106]
 15604                                  	assert_closure(rax)
    42 0000C6E5 803805              <1>  cmp byte [%1], %2
    43 0000C6E8 0F85E34A0000        <1>  jne L_error_incorrect_type
 15605 0000C6EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 15606 0000C6F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15607 0000C6F4 483D[02000000]          	cmp rax, sob_boolean_false
 15608 0000C6FA 7477                              	je .L_if_else_00a4
 15609 0000C6FC 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 15610 0000C700 50                      	push rax
 15611 0000C701 488B4510                	mov rax, qword [rbp + 8 * 2]
 15612 0000C705 488B00                  	mov rax, qword [rax + 8 * 0]
 15613 0000C708 488B4008                	mov rax, qword [rax + 8 * 1]
 15614 0000C70C 50                      	push rax
 15615 0000C70D 488B4510                	mov rax, qword [rbp + 8 * 2]
 15616 0000C711 488B00                  	mov rax, qword [rax + 8 * 0]
 15617 0000C714 488B00                  	mov rax, qword [rax + 8 * 0]
 15618 0000C717 50                      	push rax
 15619 0000C718 48B8-                   	mov rax, L_constants + 32
 15619 0000C71A [2000000000000000] 
 15620 0000C722 50                      	push rax
 15621 0000C723 6A04                    	push 4
 15622 0000C725 488B4510                	mov rax, qword [rbp + 8 * 2]
 15623 0000C729 488B4008                	mov rax, qword [rax + 8 * 1]
 15624 0000C72D 488B00                  	mov rax, qword [rax + 8 * 0]
 15625 0000C730 488B00                  	mov rax, qword [rax]
 15626                                  	assert_closure(rax)
    42 0000C733 803805              <1>  cmp byte [%1], %2
    43 0000C736 0F85954A0000        <1>  jne L_error_incorrect_type
 15627 0000C73C FF7001                  	push SOB_CLOSURE_ENV(rax)
 15628 0000C73F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15629 0000C742 FF7500                  	push qword [rbp] ; same the old rbp
 15630 0000C745 BA07000000              	mov rdx, 4 + 3
 15631 0000C74A 488B4D00                	mov rcx, [rbp]
 15632 0000C74E 4889EF                  	mov rdi, rbp
 15633                                  .L_tc_recycle_frame_loop_014f:
 15634 0000C751 4883FA00                	cmp rdx, 0
 15635 0000C755 7413                    	je .L_tc_recycle_frame_done_014f
 15636 0000C757 4883E908                	sub rcx, 8
 15637 0000C75B 4883EF08                	sub rdi, 8
 15638 0000C75F 488B37                  	mov rsi, [rdi]
 15639 0000C762 488931                  	mov qword [rcx], rsi
 15640 0000C765 48FFCA                  	dec rdx
 15641 0000C768 EBE7                    	jmp .L_tc_recycle_frame_loop_014f
 15642                                  .L_tc_recycle_frame_done_014f:
 15643 0000C76A 5D                      	pop rbp ; restore the old rbp
 15644 0000C76B 4889CC                  	mov rsp, rcx
 15645 0000C76E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15646 0000C771 EB0A                    	jmp .L_if_end_00a4
 15647                                            .L_if_else_00a4:
 15648 0000C773 48B8-                             	mov rax, L_constants + 2
 15648 0000C775 [0200000000000000] 
 15649                                  .L_if_end_00a4:
 15650 0000C77D C9                      	leave
 15651 0000C77E C22000                  	ret 8 * (2 + 2)
 15652                                  .L_lambda_simple_end_011c:	; new closure is in rax
 15653                                  	assert_closure(rax)
    42 0000C781 803805              <1>  cmp byte [%1], %2
    43 0000C784 0F85474A0000        <1>  jne L_error_incorrect_type
 15654 0000C78A FF7001                  	push SOB_CLOSURE_ENV(rax)
 15655 0000C78D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15656 0000C790 FF7500                  	push qword [rbp] ; same the old rbp
 15657 0000C793 BA05000000              	mov rdx, 2 + 3
 15658 0000C798 488B4D00                	mov rcx, [rbp]
 15659 0000C79C 4889EF                  	mov rdi, rbp
 15660                                  .L_tc_recycle_frame_loop_014e:
 15661 0000C79F 4883FA00                	cmp rdx, 0
 15662 0000C7A3 7413                    	je .L_tc_recycle_frame_done_014e
 15663 0000C7A5 4883E908                	sub rcx, 8
 15664 0000C7A9 4883EF08                	sub rdi, 8
 15665 0000C7AD 488B37                  	mov rsi, [rdi]
 15666 0000C7B0 488931                  	mov qword [rcx], rsi
 15667 0000C7B3 48FFCA                  	dec rdx
 15668 0000C7B6 EBE7                    	jmp .L_tc_recycle_frame_loop_014e
 15669                                  .L_tc_recycle_frame_done_014e:
 15670 0000C7B8 5D                      	pop rbp ; restore the old rbp
 15671 0000C7B9 4889CC                  	mov rsp, rcx
 15672 0000C7BC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15673 0000C7BF C9                      	leave
 15674 0000C7C0 C22000                  	ret 8 * (2 + 2)
 15675                                  .L_lambda_simple_end_011b:	; new closure is in rax
 15676 0000C7C3 50                      	push rax
 15677 0000C7C4 6A01                    	push 1
 15678 0000C7C6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15679 0000C7CB E80D320000              	call malloc
 15680 0000C7D0 50                      	push rax
 15681 0000C7D1 BF08000000              	mov rdi, 8 * 1	; new rib
 15682 0000C7D6 E802320000              	call malloc
 15683 0000C7DB 50                      	push rax
 15684 0000C7DC BF18000000              	mov rdi, 8 * 3	; extended env
 15685 0000C7E1 E8F7310000              	call malloc
 15686 0000C7E6 488B7D10                	mov rdi, ENV
 15687 0000C7EA BE00000000              	mov rsi, 0
 15688 0000C7EF BA01000000              	mov rdx, 1
 15689                                  .L_lambda_simple_env_loop_0118:	; ext_env[i + 1] <-- env[i]
 15690 0000C7F4 4883FE02                	cmp rsi, 2
 15691 0000C7F8 7410                    	je .L_lambda_simple_env_end_0118
 15692 0000C7FA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15693 0000C7FE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15694 0000C802 48FFC6                  	inc rsi
 15695 0000C805 48FFC2                  	inc rdx
 15696 0000C808 EBEA                    	jmp .L_lambda_simple_env_loop_0118
 15697                                  .L_lambda_simple_env_end_0118:
 15698 0000C80A 5B                      	pop rbx
 15699 0000C80B BE00000000              	mov rsi, 0
 15700                                  .L_lambda_simple_params_loop_0118:	; copy params
 15701 0000C810 4883FE01                	cmp rsi, 1
 15702 0000C814 740E                    	je .L_lambda_simple_params_end_0118
 15703 0000C816 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15704 0000C81B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15705 0000C81F 48FFC6                  	inc rsi
 15706 0000C822 EBEC                    	jmp .L_lambda_simple_params_loop_0118
 15707                                  .L_lambda_simple_params_end_0118:
 15708 0000C824 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15709 0000C827 4889C3                  	mov rbx, rax
 15710 0000C82A 58                      	pop rax
 15711 0000C82B C60005                  	mov byte [rax], T_closure
 15712 0000C82E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15713 0000C832 48C74009[3FC80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0118
 15714 0000C83A E978040000              	jmp .L_lambda_simple_end_0118
 15715                                  .L_lambda_simple_code_0118:	; lambda-simple body
 15716 0000C83F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15717 0000C845 740B                    	je .L_lambda_simple_arity_check_ok_0118
 15718 0000C847 FF742410                	push qword [rsp + 8 * 2]
 15719 0000C84B 6A01                    	push 1
 15720 0000C84D E944310000              	jmp L_error_incorrect_arity_simple
 15721                                  .L_lambda_simple_arity_check_ok_0118:
 15722 0000C852 C8000000                	enter 0, 0
 15723 0000C856 48B8-                   	mov rax, L_constants + 23
 15723 0000C858 [1700000000000000] 
 15724 0000C860 50                      	push rax
 15725 0000C861 6A01                    	push 1
 15726 0000C863 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15727 0000C868 E870310000              	call malloc
 15728 0000C86D 50                      	push rax
 15729 0000C86E BF08000000              	mov rdi, 8 * 1	; new rib
 15730 0000C873 E865310000              	call malloc
 15731 0000C878 50                      	push rax
 15732 0000C879 BF20000000              	mov rdi, 8 * 4	; extended env
 15733 0000C87E E85A310000              	call malloc
 15734 0000C883 488B7D10                	mov rdi, ENV
 15735 0000C887 BE00000000              	mov rsi, 0
 15736 0000C88C BA01000000              	mov rdx, 1
 15737                                  .L_lambda_simple_env_loop_0119:	; ext_env[i + 1] <-- env[i]
 15738 0000C891 4883FE03                	cmp rsi, 3
 15739 0000C895 7410                    	je .L_lambda_simple_env_end_0119
 15740 0000C897 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15741 0000C89B 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15742 0000C89F 48FFC6                  	inc rsi
 15743 0000C8A2 48FFC2                  	inc rdx
 15744 0000C8A5 EBEA                    	jmp .L_lambda_simple_env_loop_0119
 15745                                  .L_lambda_simple_env_end_0119:
 15746 0000C8A7 5B                      	pop rbx
 15747 0000C8A8 BE00000000              	mov rsi, 0
 15748                                  .L_lambda_simple_params_loop_0119:	; copy params
 15749 0000C8AD 4883FE01                	cmp rsi, 1
 15750 0000C8B1 740E                    	je .L_lambda_simple_params_end_0119
 15751 0000C8B3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15752 0000C8B8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15753 0000C8BC 48FFC6                  	inc rsi
 15754 0000C8BF EBEC                    	jmp .L_lambda_simple_params_loop_0119
 15755                                  .L_lambda_simple_params_end_0119:
 15756 0000C8C1 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15757 0000C8C4 4889C3                  	mov rbx, rax
 15758 0000C8C7 58                      	pop rax
 15759 0000C8C8 C60005                  	mov byte [rax], T_closure
 15760 0000C8CB 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15761 0000C8CF 48C74009[DCC80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0119
 15762 0000C8D7 E999030000              	jmp .L_lambda_simple_end_0119
 15763                                  .L_lambda_simple_code_0119:	; lambda-simple body
 15764 0000C8DC 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15765 0000C8E2 740B                    	je .L_lambda_simple_arity_check_ok_0119
 15766 0000C8E4 FF742410                	push qword [rsp + 8 * 2]
 15767 0000C8E8 6A01                    	push 1
 15768 0000C8EA E9A7300000              	jmp L_error_incorrect_arity_simple
 15769                                  .L_lambda_simple_arity_check_ok_0119:
 15770 0000C8EF C8000000                	enter 0, 0
 15771 0000C8F3 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15772 0000C8F7 4889C2                  	mov rdx, rax
 15773 0000C8FA BF08000000              	mov rdi, 8
 15774 0000C8FF E8D9300000              	call malloc
 15775 0000C904 488910                  	mov qword[rax], rdx
 15776 0000C907 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 15777 0000C90B 48B8-                   	mov rax, sob_void
 15777 0000C90D [0000000000000000] 
 15778                                  
 15779 0000C915 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15780 0000C91A E8BE300000              	call malloc
 15781 0000C91F 50                      	push rax
 15782 0000C920 BF08000000              	mov rdi, 8 * 1	; new rib
 15783 0000C925 E8B3300000              	call malloc
 15784 0000C92A 50                      	push rax
 15785 0000C92B BF28000000              	mov rdi, 8 * 5	; extended env
 15786 0000C930 E8A8300000              	call malloc
 15787 0000C935 488B7D10                	mov rdi, ENV
 15788 0000C939 BE00000000              	mov rsi, 0
 15789 0000C93E BA01000000              	mov rdx, 1
 15790                                  .L_lambda_simple_env_loop_011a:	; ext_env[i + 1] <-- env[i]
 15791 0000C943 4883FE04                	cmp rsi, 4
 15792 0000C947 7410                    	je .L_lambda_simple_env_end_011a
 15793 0000C949 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15794 0000C94D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15795 0000C951 48FFC6                  	inc rsi
 15796 0000C954 48FFC2                  	inc rdx
 15797 0000C957 EBEA                    	jmp .L_lambda_simple_env_loop_011a
 15798                                  .L_lambda_simple_env_end_011a:
 15799 0000C959 5B                      	pop rbx
 15800 0000C95A BE00000000              	mov rsi, 0
 15801                                  .L_lambda_simple_params_loop_011a:	; copy params
 15802 0000C95F 4883FE01                	cmp rsi, 1
 15803 0000C963 740E                    	je .L_lambda_simple_params_end_011a
 15804 0000C965 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15805 0000C96A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15806 0000C96E 48FFC6                  	inc rsi
 15807 0000C971 EBEC                    	jmp .L_lambda_simple_params_loop_011a
 15808                                  .L_lambda_simple_params_end_011a:
 15809 0000C973 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15810 0000C976 4889C3                  	mov rbx, rax
 15811 0000C979 58                      	pop rax
 15812 0000C97A C60005                  	mov byte [rax], T_closure
 15813 0000C97D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15814 0000C981 48C74009[8EC90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011a
 15815 0000C989 E928010000              	jmp .L_lambda_simple_end_011a
 15816                                  .L_lambda_simple_code_011a:	; lambda-simple body
 15817 0000C98E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 15818 0000C994 740B                    	je .L_lambda_simple_arity_check_ok_011a
 15819 0000C996 FF742410                	push qword [rsp + 8 * 2]
 15820 0000C99A 6A02                    	push 2
 15821 0000C99C E9F52F0000              	jmp L_error_incorrect_arity_simple
 15822                                  .L_lambda_simple_arity_check_ok_011a:
 15823 0000C9A1 C8000000                	enter 0, 0
 15824 0000C9A5 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15825 0000C9A9 50                      	push rax
 15826 0000C9AA 6A01                    	push 1
 15827 0000C9AC 488B0425[00000000]      	mov rax, qword [free_var_0]
 15828                                  	assert_closure(rax)
    42 0000C9B4 803805              <1>  cmp byte [%1], %2
    43 0000C9B7 0F8514480000        <1>  jne L_error_incorrect_type
 15829 0000C9BD FF7001                  	push SOB_CLOSURE_ENV(rax)
 15830 0000C9C0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15831 0000C9C3 483D[02000000]          	cmp rax, sob_boolean_false
 15832 0000C9C9 0F85E3000000            	jne .L_or_end_0017
 15833 0000C9CF 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15834 0000C9D3 50                      	push rax
 15835 0000C9D4 6A01                    	push 1
 15836 0000C9D6 488B0425[80000000]      	mov rax, qword [free_var_16]
 15837                                  	assert_closure(rax)
    42 0000C9DE 803805              <1>  cmp byte [%1], %2
    43 0000C9E1 0F85EA470000        <1>  jne L_error_incorrect_type
 15838 0000C9E7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15839 0000C9EA FF5009                  	call SOB_CLOSURE_CODE(rax)
 15840 0000C9ED 50                      	push rax
 15841 0000C9EE 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15842 0000C9F2 50                      	push rax
 15843 0000C9F3 6A02                    	push 2
 15844 0000C9F5 488B4510                	mov rax, qword [rbp + 8 * 2]
 15845 0000C9F9 488B4008                	mov rax, qword [rax + 8 * 1]
 15846 0000C9FD 488B00                  	mov rax, qword [rax + 8 * 0]
 15847                                  	assert_closure(rax)
    42 0000CA00 803805              <1>  cmp byte [%1], %2
    43 0000CA03 0F85C8470000        <1>  jne L_error_incorrect_type
 15848 0000CA09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15849 0000CA0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 15850 0000CA0F 483D[02000000]          	cmp rax, sob_boolean_false
 15851 0000CA15 0F848D000000                      	je .L_if_else_00a3
 15852 0000CA1B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 15853 0000CA1F 50                      	push rax
 15854 0000CA20 6A01                    	push 1
 15855 0000CA22 488B0425[88000000]      	mov rax, qword [free_var_17]
 15856                                  	assert_closure(rax)
    42 0000CA2A 803805              <1>  cmp byte [%1], %2
    43 0000CA2D 0F859E470000        <1>  jne L_error_incorrect_type
 15857 0000CA33 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15858 0000CA36 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15859 0000CA39 50                      	push rax
 15860 0000CA3A 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 15861 0000CA3E 50                      	push rax
 15862 0000CA3F 6A01                    	push 1
 15863 0000CA41 488B0425[80000000]      	mov rax, qword [free_var_16]
 15864                                  	assert_closure(rax)
    42 0000CA49 803805              <1>  cmp byte [%1], %2
    43 0000CA4C 0F857F470000        <1>  jne L_error_incorrect_type
 15865 0000CA52 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15866 0000CA55 FF5009                  	call SOB_CLOSURE_CODE(rax)
 15867 0000CA58 50                      	push rax
 15868 0000CA59 6A02                    	push 2
 15869 0000CA5B 488B4510                	mov rax, qword [rbp + 8 * 2]
 15870 0000CA5F 488B00                  	mov rax, qword [rax + 8 * 0]
 15871 0000CA62 488B00                  	mov rax, qword [rax + 8 * 0]
 15872 0000CA65 488B00                  	mov rax, qword [rax]
 15873                                  	assert_closure(rax)
    42 0000CA68 803805              <1>  cmp byte [%1], %2
    43 0000CA6B 0F8560470000        <1>  jne L_error_incorrect_type
 15874 0000CA71 FF7001                  	push SOB_CLOSURE_ENV(rax)
 15875 0000CA74 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 15876 0000CA77 FF7500                  	push qword [rbp] ; same the old rbp
 15877 0000CA7A BA05000000              	mov rdx, 2 + 3
 15878 0000CA7F 488B4D00                	mov rcx, [rbp]
 15879 0000CA83 4889EF                  	mov rdi, rbp
 15880                                  .L_tc_recycle_frame_loop_014c:
 15881 0000CA86 4883FA00                	cmp rdx, 0
 15882 0000CA8A 7413                    	je .L_tc_recycle_frame_done_014c
 15883 0000CA8C 4883E908                	sub rcx, 8
 15884 0000CA90 4883EF08                	sub rdi, 8
 15885 0000CA94 488B37                  	mov rsi, [rdi]
 15886 0000CA97 488931                  	mov qword [rcx], rsi
 15887 0000CA9A 48FFCA                  	dec rdx
 15888 0000CA9D EBE7                    	jmp .L_tc_recycle_frame_loop_014c
 15889                                  .L_tc_recycle_frame_done_014c:
 15890 0000CA9F 5D                      	pop rbp ; restore the old rbp
 15891 0000CAA0 4889CC                  	mov rsp, rcx
 15892 0000CAA3 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 15893 0000CAA6 EB0A                    	jmp .L_if_end_00a3
 15894                                            .L_if_else_00a3:
 15895 0000CAA8 48B8-                             	mov rax, L_constants + 2
 15895 0000CAAA [0200000000000000] 
 15896                                  .L_if_end_00a3:
 15897                                  .L_or_end_0017:
 15898 0000CAB2 C9                      	leave
 15899 0000CAB3 C22000                  	ret 8 * (2 + 2)
 15900                                  .L_lambda_simple_end_011a:	; new closure is in rax
 15901 0000CAB6 50                      	push rax
 15902 0000CAB7 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 15903 0000CABB 8F00                    	pop qword [rax]
 15904 0000CABD 48B8-                   	mov rax, sob_void
 15904 0000CABF [0000000000000000] 
 15905                                  
 15906 0000CAC7 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 15907 0000CACC E80C2F0000              	call malloc
 15908 0000CAD1 50                      	push rax
 15909 0000CAD2 BF08000000              	mov rdi, 8 * 1	; new rib
 15910 0000CAD7 E8012F0000              	call malloc
 15911 0000CADC 50                      	push rax
 15912 0000CADD BF28000000              	mov rdi, 8 * 5	; extended env
 15913 0000CAE2 E8F62E0000              	call malloc
 15914 0000CAE7 488B7D10                	mov rdi, ENV
 15915 0000CAEB BE00000000              	mov rsi, 0
 15916 0000CAF0 BA01000000              	mov rdx, 1
 15917                                  .L_lambda_opt_env_loop_002b:	; ext_env[i + 1] <-- env[i]
 15918 0000CAF5 4883FE04                	cmp rsi, 4
 15919 0000CAF9 7410                    	je .L_lambda_opt_env_end_002b
 15920 0000CAFB 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 15921 0000CAFF 48890CD0                	mov qword [rax + 8 * rdx], rcx
 15922 0000CB03 48FFC6                  	inc rsi
 15923 0000CB06 48FFC2                  	inc rdx
 15924 0000CB09 EBEA                    	jmp .L_lambda_opt_env_loop_002b
 15925                                  .L_lambda_opt_env_end_002b:
 15926 0000CB0B 5B                      	pop rbx
 15927 0000CB0C BE00000000              	mov rsi, 0
 15928                                  .L_lambda_opt_params_loop_002b:	; copy params
 15929 0000CB11 4883FE01                	cmp rsi, 1
 15930 0000CB15 740E                    	je .L_lambda_opt_params_end_002b
 15931 0000CB17 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 15932 0000CB1C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 15933 0000CB20 48FFC6                  	inc rsi
 15934 0000CB23 EBEC                    	jmp .L_lambda_opt_params_loop_002b
 15935                                  .L_lambda_opt_params_end_002b:
 15936 0000CB25 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 15937 0000CB28 4889C3                  	mov rbx, rax
 15938 0000CB2B 58                      	pop rax
 15939 0000CB2C C60005                  	mov byte [rax], T_closure
 15940 0000CB2F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 15941 0000CB33 48C74009[40CB0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002b
 15942 0000CB3B E931010000              	jmp .L_lambda_opt_end_002b
 15943                                  .L_lambda_opt_code_002b:	; lambda-opt body
 15944 0000CB40 48837C241001            	cmp qword [rsp + 8 * 2], 1
 15945 0000CB46 740D                    	je .L_lambda_opt_arity_check_exact_002b
 15946 0000CB48 7F43                    	jg .L_lambda_opt_arity_check_more_002b
 15947 0000CB4A FF742410                	push qword [rsp + 8 * 2]
 15948 0000CB4E 6A01                    	push 1
 15949 0000CB50 E9552E0000              	jmp L_error_incorrect_arity_opt
 15950                                  .L_lambda_opt_arity_check_exact_002b:
 15951 0000CB55 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 15952 0000CB5E BA04000000              	mov rdx, 4
 15953 0000CB63 FF3424                  	push qword [rsp]
 15954 0000CB66 BE01000000              	mov rsi, 1
 15955                                  .L_lambda_opt_stack_shrink_loop_007f:
 15956 0000CB6B 4839D6                  	cmp rsi, rdx
 15957 0000CB6E 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_007f
 15958 0000CB70 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 15959 0000CB75 488B0B                  	mov rcx, [rbx]
 15960 0000CB78 48894BF8                	mov qword [rbx - 8], rcx
 15961 0000CB7C 48FFC6                  	inc rsi
 15962 0000CB7F EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_007f
 15963                                  .L_lambda_opt_stack_shrink_loop_exit_007f:
 15964 0000CB81 48C703[01000000]        	mov qword [rbx], sob_nil
 15965 0000CB88 E985000000              	jmp .L_lambda_opt_stack_adjusted_002b
 15966                                  .L_lambda_opt_arity_check_more_002b:
 15967 0000CB8D 488B542410              	mov rdx, qword [rsp + 8 * 2]
 15968 0000CB92 4883EA01                	sub rdx, 1
 15969 0000CB96 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 15970 0000CB9F BE00000000              	mov rsi, 0
 15971 0000CBA4 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 15972 0000CBA9 48B9-                   	mov rcx, sob_nil
 15972 0000CBAB [0100000000000000] 
 15973                                  .L_lambda_opt_stack_shrink_loop_0080:
 15974 0000CBB3 4839D6                  	cmp rsi, rdx
 15975 0000CBB6 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0080
 15976 0000CBB8 BF11000000              	mov rdi, 17 ; 1+8+8
 15977 0000CBBD E81B2E0000              	call malloc
 15978 0000CBC2 48894809                	mov SOB_PAIR_CDR(rax), rcx
 15979 0000CBC6 48F7DE                  	neg rsi
 15980 0000CBC9 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 15981 0000CBCD 48F7DE                  	neg rsi
 15982 0000CBD0 48894801                	mov SOB_PAIR_CAR(rax), rcx
 15983 0000CBD4 C60021                  	mov byte [rax], T_pair
 15984 0000CBD7 4889C1                  	mov rcx, rax
 15985 0000CBDA 48FFC6                  	inc rsi
 15986 0000CBDD EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0080
 15987                                  .L_lambda_opt_stack_shrink_loop_exit_0080:
 15988 0000CBDF 48890B                  	mov qword [rbx], rcx
 15989 0000CBE2 4883EB08                	sub rbx, 8
 15990 0000CBE6 4889E7                  	mov rdi, rsp
 15991 0000CBE9 4883C718                	add rdi, 24
 15992 0000CBED BE04000000              	mov rsi, 4
 15993                                  .L_lambda_opt_stack_shrink_loop_0081:
 15994 0000CBF2 4883FE00                	cmp rsi,0
 15995 0000CBF6 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0081
 15996 0000CBF8 488B0F                  	mov rcx, qword [rdi]
 15997 0000CBFB 48890B                  	mov [rbx], rcx
 15998 0000CBFE 48FFCE                  	dec rsi
 15999 0000CC01 4883EB08                	sub rbx, 8
 16000 0000CC05 4883EF08                	sub rdi, 8
 16001 0000CC09 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0081
 16002                                  .L_lambda_opt_stack_shrink_loop_exit_0081:
 16003 0000CC0B 4883C308                	add rbx, 8
 16004 0000CC0F 4889DC                  	mov rsp, rbx
 16005                                  .L_lambda_opt_stack_adjusted_002b:
 16006 0000CC12 C8000000                	enter 0, 0
 16007 0000CC16 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 16008 0000CC1A 50                      	push rax
 16009 0000CC1B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16010 0000CC1F 50                      	push rax
 16011 0000CC20 6A02                    	push 2
 16012 0000CC22 488B4510                	mov rax, qword [rbp + 8 * 2]
 16013 0000CC26 488B00                  	mov rax, qword [rax + 8 * 0]
 16014 0000CC29 488B00                  	mov rax, qword [rax + 8 * 0]
 16015 0000CC2C 488B00                  	mov rax, qword [rax]
 16016                                  	assert_closure(rax)
    42 0000CC2F 803805              <1>  cmp byte [%1], %2
    43 0000CC32 0F8599450000        <1>  jne L_error_incorrect_type
 16017 0000CC38 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16018 0000CC3B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16019 0000CC3E FF7500                  	push qword [rbp] ; same the old rbp
 16020 0000CC41 BA05000000              	mov rdx, 2 + 3
 16021 0000CC46 488B4D00                	mov rcx, [rbp]
 16022 0000CC4A 4889EF                  	mov rdi, rbp
 16023                                  .L_tc_recycle_frame_loop_014d:
 16024 0000CC4D 4883FA00                	cmp rdx, 0
 16025 0000CC51 7413                    	je .L_tc_recycle_frame_done_014d
 16026 0000CC53 4883E908                	sub rcx, 8
 16027 0000CC57 4883EF08                	sub rdi, 8
 16028 0000CC5B 488B37                  	mov rsi, [rdi]
 16029 0000CC5E 488931                  	mov qword [rcx], rsi
 16030 0000CC61 48FFCA                  	dec rdx
 16031 0000CC64 EBE7                    	jmp .L_tc_recycle_frame_loop_014d
 16032                                  .L_tc_recycle_frame_done_014d:
 16033 0000CC66 5D                      	pop rbp ; restore the old rbp
 16034 0000CC67 4889CC                  	mov rsp, rcx
 16035 0000CC6A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16036 0000CC6D C9                      	leave
 16037 0000CC6E C22000                  	ret 8 * (2 + 2)
 16038                                  .L_lambda_opt_end_002b:	; new closure is in rax
 16039 0000CC71 C9                      	leave
 16040 0000CC72 C21800                  	ret 8 * (2 + 1)
 16041                                  .L_lambda_simple_end_0119:	; new closure is in rax
 16042                                  	assert_closure(rax)
    42 0000CC75 803805              <1>  cmp byte [%1], %2
    43 0000CC78 0F8553450000        <1>  jne L_error_incorrect_type
 16043 0000CC7E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16044 0000CC81 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16045 0000CC84 FF7500                  	push qword [rbp] ; same the old rbp
 16046 0000CC87 BA04000000              	mov rdx, 1 + 3
 16047 0000CC8C 488B4D00                	mov rcx, [rbp]
 16048 0000CC90 4889EF                  	mov rdi, rbp
 16049                                  .L_tc_recycle_frame_loop_014b:
 16050 0000CC93 4883FA00                	cmp rdx, 0
 16051 0000CC97 7413                    	je .L_tc_recycle_frame_done_014b
 16052 0000CC99 4883E908                	sub rcx, 8
 16053 0000CC9D 4883EF08                	sub rdi, 8
 16054 0000CCA1 488B37                  	mov rsi, [rdi]
 16055 0000CCA4 488931                  	mov qword [rcx], rsi
 16056 0000CCA7 48FFCA                  	dec rdx
 16057 0000CCAA EBE7                    	jmp .L_tc_recycle_frame_loop_014b
 16058                                  .L_tc_recycle_frame_done_014b:
 16059 0000CCAC 5D                      	pop rbp ; restore the old rbp
 16060 0000CCAD 4889CC                  	mov rsp, rcx
 16061 0000CCB0 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16062 0000CCB3 C9                      	leave
 16063 0000CCB4 C21800                  	ret 8 * (2 + 1)
 16064                                  .L_lambda_simple_end_0118:	; new closure is in rax
 16065                                  	assert_closure(rax)
    42 0000CCB7 803805              <1>  cmp byte [%1], %2
    43 0000CCBA 0F8511450000        <1>  jne L_error_incorrect_type
 16066 0000CCC0 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16067 0000CCC3 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16068 0000CCC6 FF7500                  	push qword [rbp] ; same the old rbp
 16069 0000CCC9 BA04000000              	mov rdx, 1 + 3
 16070 0000CCCE 488B4D00                	mov rcx, [rbp]
 16071 0000CCD2 4889EF                  	mov rdi, rbp
 16072                                  .L_tc_recycle_frame_loop_014a:
 16073 0000CCD5 4883FA00                	cmp rdx, 0
 16074 0000CCD9 7413                    	je .L_tc_recycle_frame_done_014a
 16075 0000CCDB 4883E908                	sub rcx, 8
 16076 0000CCDF 4883EF08                	sub rdi, 8
 16077 0000CCE3 488B37                  	mov rsi, [rdi]
 16078 0000CCE6 488931                  	mov qword [rcx], rsi
 16079 0000CCE9 48FFCA                  	dec rdx
 16080 0000CCEC EBE7                    	jmp .L_tc_recycle_frame_loop_014a
 16081                                  .L_tc_recycle_frame_done_014a:
 16082 0000CCEE 5D                      	pop rbp ; restore the old rbp
 16083 0000CCEF 4889CC                  	mov rsp, rcx
 16084 0000CCF2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16085 0000CCF5 C9                      	leave
 16086 0000CCF6 C21800                  	ret 8 * (2 + 1)
 16087                                  .L_lambda_simple_end_0116:	; new closure is in rax
 16088                                  	assert_closure(rax)
    42 0000CCF9 803805              <1>  cmp byte [%1], %2
    43 0000CCFC 0F85CF440000        <1>  jne L_error_incorrect_type
 16089 0000CD02 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16090 0000CD05 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16091 0000CD08 FF7500                  	push qword [rbp] ; same the old rbp
 16092 0000CD0B BA04000000              	mov rdx, 1 + 3
 16093 0000CD10 488B4D00                	mov rcx, [rbp]
 16094 0000CD14 4889EF                  	mov rdi, rbp
 16095                                  .L_tc_recycle_frame_loop_0148:
 16096 0000CD17 4883FA00                	cmp rdx, 0
 16097 0000CD1B 7413                    	je .L_tc_recycle_frame_done_0148
 16098 0000CD1D 4883E908                	sub rcx, 8
 16099 0000CD21 4883EF08                	sub rdi, 8
 16100 0000CD25 488B37                  	mov rsi, [rdi]
 16101 0000CD28 488931                  	mov qword [rcx], rsi
 16102 0000CD2B 48FFCA                  	dec rdx
 16103 0000CD2E EBE7                    	jmp .L_tc_recycle_frame_loop_0148
 16104                                  .L_tc_recycle_frame_done_0148:
 16105 0000CD30 5D                      	pop rbp ; restore the old rbp
 16106 0000CD31 4889CC                  	mov rsp, rcx
 16107 0000CD34 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16108 0000CD37 C9                      	leave
 16109 0000CD38 C21800                  	ret 8 * (2 + 1)
 16110                                  .L_lambda_simple_end_0115:	; new closure is in rax
 16111 0000CD3B 50                      	push rax
 16112 0000CD3C 6A01                    	push 1
 16113 0000CD3E BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16114 0000CD43 E8952C0000              	call malloc
 16115 0000CD48 50                      	push rax
 16116 0000CD49 BF00000000              	mov rdi, 8 * 0	; new rib
 16117 0000CD4E E88A2C0000              	call malloc
 16118 0000CD53 50                      	push rax
 16119 0000CD54 BF08000000              	mov rdi, 8 * 1	; extended env
 16120 0000CD59 E87F2C0000              	call malloc
 16121 0000CD5E 488B7D10                	mov rdi, ENV
 16122 0000CD62 BE00000000              	mov rsi, 0
 16123 0000CD67 BA01000000              	mov rdx, 1
 16124                                  .L_lambda_simple_env_loop_0114:	; ext_env[i + 1] <-- env[i]
 16125 0000CD6C 4883FE00                	cmp rsi, 0
 16126 0000CD70 7410                    	je .L_lambda_simple_env_end_0114
 16127 0000CD72 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16128 0000CD76 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16129 0000CD7A 48FFC6                  	inc rsi
 16130 0000CD7D 48FFC2                  	inc rdx
 16131 0000CD80 EBEA                    	jmp .L_lambda_simple_env_loop_0114
 16132                                  .L_lambda_simple_env_end_0114:
 16133 0000CD82 5B                      	pop rbx
 16134 0000CD83 BE00000000              	mov rsi, 0
 16135                                  .L_lambda_simple_params_loop_0114:	; copy params
 16136 0000CD88 4883FE00                	cmp rsi, 0
 16137 0000CD8C 740E                    	je .L_lambda_simple_params_end_0114
 16138 0000CD8E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16139 0000CD93 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16140 0000CD97 48FFC6                  	inc rsi
 16141 0000CD9A EBEC                    	jmp .L_lambda_simple_params_loop_0114
 16142                                  .L_lambda_simple_params_end_0114:
 16143 0000CD9C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16144 0000CD9F 4889C3                  	mov rbx, rax
 16145 0000CDA2 58                      	pop rax
 16146 0000CDA3 C60005                  	mov byte [rax], T_closure
 16147 0000CDA6 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16148 0000CDAA 48C74009[B4CD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0114
 16149 0000CDB2 EB7B                    	jmp .L_lambda_simple_end_0114
 16150                                  .L_lambda_simple_code_0114:	; lambda-simple body
 16151 0000CDB4 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16152 0000CDBA 740B                    	je .L_lambda_simple_arity_check_ok_0114
 16153 0000CDBC FF742410                	push qword [rsp + 8 * 2]
 16154 0000CDC0 6A01                    	push 1
 16155 0000CDC2 E9CF2B0000              	jmp L_error_incorrect_arity_simple
 16156                                  .L_lambda_simple_arity_check_ok_0114:
 16157 0000CDC7 C8000000                	enter 0, 0
 16158 0000CDCB 488B0425[70030000]      	mov rax, qword [free_var_110]
 16159 0000CDD3 50                      	push rax
 16160 0000CDD4 6A01                    	push 1
 16161 0000CDD6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16162                                  	assert_closure(rax)
    42 0000CDDA 803805              <1>  cmp byte [%1], %2
    43 0000CDDD 0F85EE430000        <1>  jne L_error_incorrect_type
 16163 0000CDE3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16164 0000CDE6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16165 0000CDE9 48890425[F0030000]      	mov qword [free_var_126], rax
 16166 0000CDF1 48B8-                   	mov rax, sob_void
 16166 0000CDF3 [0000000000000000] 
 16167                                  
 16168 0000CDFB 488B0425[A8030000]      	mov rax, qword [free_var_117]
 16169 0000CE03 50                      	push rax
 16170 0000CE04 6A01                    	push 1
 16171 0000CE06 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16172                                  	assert_closure(rax)
    42 0000CE0A 803805              <1>  cmp byte [%1], %2
    43 0000CE0D 0F85BE430000        <1>  jne L_error_incorrect_type
 16173 0000CE13 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16174 0000CE16 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16175 0000CE19 48890425[18040000]      	mov qword [free_var_131], rax
 16176 0000CE21 48B8-                   	mov rax, sob_void
 16176 0000CE23 [0000000000000000] 
 16177 0000CE2B C9                      	leave
 16178 0000CE2C C21800                  	ret 8 * (2 + 1)
 16179                                  .L_lambda_simple_end_0114:	; new closure is in rax
 16180                                  	assert_closure(rax)
    42 0000CE2F 803805              <1>  cmp byte [%1], %2
    43 0000CE32 0F8599430000        <1>  jne L_error_incorrect_type
 16181 0000CE38 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16182 0000CE3B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16183                                  
 16184 0000CE3E 4889C7                  	mov rdi, rax
 16185 0000CE41 E8A82B0000              	call print_sexpr_if_not_void
 16186                                  
 16187 0000CE46 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16188 0000CE4B E88D2B0000              	call malloc
 16189 0000CE50 50                      	push rax
 16190 0000CE51 BF00000000              	mov rdi, 8 * 0	; new rib
 16191 0000CE56 E8822B0000              	call malloc
 16192 0000CE5B 50                      	push rax
 16193 0000CE5C BF08000000              	mov rdi, 8 * 1	; extended env
 16194 0000CE61 E8772B0000              	call malloc
 16195 0000CE66 488B7D10                	mov rdi, ENV
 16196 0000CE6A BE00000000              	mov rsi, 0
 16197 0000CE6F BA01000000              	mov rdx, 1
 16198                                  .L_lambda_simple_env_loop_011d:	; ext_env[i + 1] <-- env[i]
 16199 0000CE74 4883FE00                	cmp rsi, 0
 16200 0000CE78 7410                    	je .L_lambda_simple_env_end_011d
 16201 0000CE7A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16202 0000CE7E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16203 0000CE82 48FFC6                  	inc rsi
 16204 0000CE85 48FFC2                  	inc rdx
 16205 0000CE88 EBEA                    	jmp .L_lambda_simple_env_loop_011d
 16206                                  .L_lambda_simple_env_end_011d:
 16207 0000CE8A 5B                      	pop rbx
 16208 0000CE8B BE00000000              	mov rsi, 0
 16209                                  .L_lambda_simple_params_loop_011d:	; copy params
 16210 0000CE90 4883FE00                	cmp rsi, 0
 16211 0000CE94 740E                    	je .L_lambda_simple_params_end_011d
 16212 0000CE96 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16213 0000CE9B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16214 0000CE9F 48FFC6                  	inc rsi
 16215 0000CEA2 EBEC                    	jmp .L_lambda_simple_params_loop_011d
 16216                                  .L_lambda_simple_params_end_011d:
 16217 0000CEA4 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16218 0000CEA7 4889C3                  	mov rbx, rax
 16219 0000CEAA 58                      	pop rax
 16220 0000CEAB C60005                  	mov byte [rax], T_closure
 16221 0000CEAE 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16222 0000CEB2 48C74009[BFCE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011d
 16223 0000CEBA E9DC000000              	jmp .L_lambda_simple_end_011d
 16224                                  .L_lambda_simple_code_011d:	; lambda-simple body
 16225 0000CEBF 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16226 0000CEC5 740B                    	je .L_lambda_simple_arity_check_ok_011d
 16227 0000CEC7 FF742410                	push qword [rsp + 8 * 2]
 16228 0000CECB 6A01                    	push 1
 16229 0000CECD E9C42A0000              	jmp L_error_incorrect_arity_simple
 16230                                  .L_lambda_simple_arity_check_ok_011d:
 16231 0000CED2 C8000000                	enter 0, 0
 16232 0000CED6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16233 0000CEDA 50                      	push rax
 16234 0000CEDB 6A01                    	push 1
 16235 0000CEDD 488B0425[00000000]      	mov rax, qword [free_var_0]
 16236                                  	assert_closure(rax)
    42 0000CEE5 803805              <1>  cmp byte [%1], %2
    43 0000CEE8 0F85E3420000        <1>  jne L_error_incorrect_type
 16237 0000CEEE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16238 0000CEF1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16239 0000CEF4 483D[02000000]          	cmp rax, sob_boolean_false
 16240 0000CEFA 740F                              	je .L_if_else_00a5
 16241 0000CEFC 48B8-                             	mov rax, L_constants + 32
 16241 0000CEFE [2000000000000000] 
 16242 0000CF06 E98C000000              	jmp .L_if_end_00a5
 16243                                            .L_if_else_00a5:
 16244 0000CF0B 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 16245 0000CF0F 50                      	push rax
 16246 0000CF10 6A01                    	push 1
 16247 0000CF12 488B0425[88000000]      	mov rax, qword [free_var_17]
 16248                                  	assert_closure(rax)
    42 0000CF1A 803805              <1>  cmp byte [%1], %2
    43 0000CF1D 0F85AE420000        <1>  jne L_error_incorrect_type
 16249 0000CF23 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16250 0000CF26 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16251 0000CF29 50                      	push rax
 16252 0000CF2A 6A01                    	push 1
 16253 0000CF2C 488B0425[30040000]      	mov rax, qword [free_var_134]
 16254                                  	assert_closure(rax)
    42 0000CF34 803805              <1>  cmp byte [%1], %2
    43 0000CF37 0F8594420000        <1>  jne L_error_incorrect_type
 16255 0000CF3D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16256 0000CF40 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16257 0000CF43 50                      	push rax
 16258 0000CF44 48B8-                   	mov rax, L_constants + 128
 16258 0000CF46 [8000000000000000] 
 16259 0000CF4E 50                      	push rax
 16260 0000CF4F 6A02                    	push 2
 16261 0000CF51 488B0425[08030000]      	mov rax, qword [free_var_97]
 16262                                  	assert_closure(rax)
    42 0000CF59 803805              <1>  cmp byte [%1], %2
    43 0000CF5C 0F856F420000        <1>  jne L_error_incorrect_type
 16263 0000CF62 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16264 0000CF65 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16265 0000CF68 FF7500                  	push qword [rbp] ; same the old rbp
 16266 0000CF6B BA05000000              	mov rdx, 2 + 3
 16267 0000CF70 488B4D00                	mov rcx, [rbp]
 16268 0000CF74 4889EF                  	mov rdi, rbp
 16269                                  .L_tc_recycle_frame_loop_0150:
 16270 0000CF77 4883FA00                	cmp rdx, 0
 16271 0000CF7B 7413                    	je .L_tc_recycle_frame_done_0150
 16272 0000CF7D 4883E908                	sub rcx, 8
 16273 0000CF81 4883EF08                	sub rdi, 8
 16274 0000CF85 488B37                  	mov rsi, [rdi]
 16275 0000CF88 488931                  	mov qword [rcx], rsi
 16276 0000CF8B 48FFCA                  	dec rdx
 16277 0000CF8E EBE7                    	jmp .L_tc_recycle_frame_loop_0150
 16278                                  .L_tc_recycle_frame_done_0150:
 16279 0000CF90 5D                      	pop rbp ; restore the old rbp
 16280 0000CF91 4889CC                  	mov rsp, rcx
 16281 0000CF94 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16282                                  .L_if_end_00a5:
 16283 0000CF97 C9                      	leave
 16284 0000CF98 C21800                  	ret 8 * (2 + 1)
 16285                                  .L_lambda_simple_end_011d:	; new closure is in rax
 16286 0000CF9B 48890425[30040000]      	mov qword [free_var_134], rax
 16287 0000CFA3 48B8-                   	mov rax, sob_void
 16287 0000CFA5 [0000000000000000] 
 16288                                  
 16289 0000CFAD 4889C7                  	mov rdi, rax
 16290 0000CFB0 E8392A0000              	call print_sexpr_if_not_void
 16291                                  
 16292 0000CFB5 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16293 0000CFBA E81E2A0000              	call malloc
 16294 0000CFBF 50                      	push rax
 16295 0000CFC0 BF00000000              	mov rdi, 8 * 0	; new rib
 16296 0000CFC5 E8132A0000              	call malloc
 16297 0000CFCA 50                      	push rax
 16298 0000CFCB BF08000000              	mov rdi, 8 * 1	; extended env
 16299 0000CFD0 E8082A0000              	call malloc
 16300 0000CFD5 488B7D10                	mov rdi, ENV
 16301 0000CFD9 BE00000000              	mov rsi, 0
 16302 0000CFDE BA01000000              	mov rdx, 1
 16303                                  .L_lambda_simple_env_loop_011e:	; ext_env[i + 1] <-- env[i]
 16304 0000CFE3 4883FE00                	cmp rsi, 0
 16305 0000CFE7 7410                    	je .L_lambda_simple_env_end_011e
 16306 0000CFE9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16307 0000CFED 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16308 0000CFF1 48FFC6                  	inc rsi
 16309 0000CFF4 48FFC2                  	inc rdx
 16310 0000CFF7 EBEA                    	jmp .L_lambda_simple_env_loop_011e
 16311                                  .L_lambda_simple_env_end_011e:
 16312 0000CFF9 5B                      	pop rbx
 16313 0000CFFA BE00000000              	mov rsi, 0
 16314                                  .L_lambda_simple_params_loop_011e:	; copy params
 16315 0000CFFF 4883FE00                	cmp rsi, 0
 16316 0000D003 740E                    	je .L_lambda_simple_params_end_011e
 16317 0000D005 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16318 0000D00A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16319 0000D00E 48FFC6                  	inc rsi
 16320 0000D011 EBEC                    	jmp .L_lambda_simple_params_loop_011e
 16321                                  .L_lambda_simple_params_end_011e:
 16322 0000D013 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16323 0000D016 4889C3                  	mov rbx, rax
 16324 0000D019 58                      	pop rax
 16325 0000D01A C60005                  	mov byte [rax], T_closure
 16326 0000D01D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16327 0000D021 48C74009[2ED00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011e
 16328 0000D029 E9DE000000              	jmp .L_lambda_simple_end_011e
 16329                                  .L_lambda_simple_code_011e:	; lambda-simple body
 16330 0000D02E 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16331 0000D034 740B                    	je .L_lambda_simple_arity_check_ok_011e
 16332 0000D036 FF742410                	push qword [rsp + 8 * 2]
 16333 0000D03A 6A01                    	push 1
 16334 0000D03C E955290000              	jmp L_error_incorrect_arity_simple
 16335                                  .L_lambda_simple_arity_check_ok_011e:
 16336 0000D041 C8000000                	enter 0, 0
 16337 0000D045 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16338 0000D049 50                      	push rax
 16339 0000D04A 6A01                    	push 1
 16340 0000D04C 488B0425[00000000]      	mov rax, qword [free_var_0]
 16341                                  	assert_closure(rax)
    42 0000D054 803805              <1>  cmp byte [%1], %2
    43 0000D057 0F8574410000        <1>  jne L_error_incorrect_type
 16342 0000D05D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16343 0000D060 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16344 0000D063 483D[02000000]          	cmp rax, sob_boolean_false
 16345 0000D069 0F8599000000            	jne .L_or_end_0018
 16346 0000D06F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16347 0000D073 50                      	push rax
 16348 0000D074 6A01                    	push 1
 16349 0000D076 488B0425[08000000]      	mov rax, qword [free_var_1]
 16350                                  	assert_closure(rax)
    42 0000D07E 803805              <1>  cmp byte [%1], %2
    43 0000D081 0F854A410000        <1>  jne L_error_incorrect_type
 16351 0000D087 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16352 0000D08A FF5009                  	call SOB_CLOSURE_CODE(rax)
 16353 0000D08D 483D[02000000]          	cmp rax, sob_boolean_false
 16354 0000D093 7469                              	je .L_if_else_00a6
 16355 0000D095 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 16356 0000D099 50                      	push rax
 16357 0000D09A 6A01                    	push 1
 16358 0000D09C 488B0425[88000000]      	mov rax, qword [free_var_17]
 16359                                  	assert_closure(rax)
    42 0000D0A4 803805              <1>  cmp byte [%1], %2
    43 0000D0A7 0F8524410000        <1>  jne L_error_incorrect_type
 16360 0000D0AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 16361 0000D0B0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16362 0000D0B3 50                      	push rax
 16363 0000D0B4 6A01                    	push 1
 16364 0000D0B6 488B0425[A0020000]      	mov rax, qword [free_var_84]
 16365                                  	assert_closure(rax)
    42 0000D0BE 803805              <1>  cmp byte [%1], %2
    43 0000D0C1 0F850A410000        <1>  jne L_error_incorrect_type
 16366 0000D0C7 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16367 0000D0CA FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16368 0000D0CD FF7500                  	push qword [rbp] ; same the old rbp
 16369 0000D0D0 BA04000000              	mov rdx, 1 + 3
 16370 0000D0D5 488B4D00                	mov rcx, [rbp]
 16371 0000D0D9 4889EF                  	mov rdi, rbp
 16372                                  .L_tc_recycle_frame_loop_0151:
 16373 0000D0DC 4883FA00                	cmp rdx, 0
 16374 0000D0E0 7413                    	je .L_tc_recycle_frame_done_0151
 16375 0000D0E2 4883E908                	sub rcx, 8
 16376 0000D0E6 4883EF08                	sub rdi, 8
 16377 0000D0EA 488B37                  	mov rsi, [rdi]
 16378 0000D0ED 488931                  	mov qword [rcx], rsi
 16379 0000D0F0 48FFCA                  	dec rdx
 16380 0000D0F3 EBE7                    	jmp .L_tc_recycle_frame_loop_0151
 16381                                  .L_tc_recycle_frame_done_0151:
 16382 0000D0F5 5D                      	pop rbp ; restore the old rbp
 16383 0000D0F6 4889CC                  	mov rsp, rcx
 16384 0000D0F9 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16385 0000D0FC EB0A                    	jmp .L_if_end_00a6
 16386                                            .L_if_else_00a6:
 16387 0000D0FE 48B8-                             	mov rax, L_constants + 2
 16387 0000D100 [0200000000000000] 
 16388                                  .L_if_end_00a6:
 16389                                  .L_or_end_0018:
 16390 0000D108 C9                      	leave
 16391 0000D109 C21800                  	ret 8 * (2 + 1)
 16392                                  .L_lambda_simple_end_011e:	; new closure is in rax
 16393 0000D10C 48890425[A0020000]      	mov qword [free_var_84], rax
 16394 0000D114 48B8-                   	mov rax, sob_void
 16394 0000D116 [0000000000000000] 
 16395                                  
 16396 0000D11E 4889C7                  	mov rdi, rax
 16397 0000D121 E8C8280000              	call print_sexpr_if_not_void
 16398                                  
 16399 0000D126 488B0425[98010000]      	mov rax, qword [free_var_51]
 16400 0000D12E 50                      	push rax
 16401 0000D12F 6A01                    	push 1
 16402 0000D131 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16403 0000D136 E8A2280000              	call malloc
 16404 0000D13B 50                      	push rax
 16405 0000D13C BF00000000              	mov rdi, 8 * 0	; new rib
 16406 0000D141 E897280000              	call malloc
 16407 0000D146 50                      	push rax
 16408 0000D147 BF08000000              	mov rdi, 8 * 1	; extended env
 16409 0000D14C E88C280000              	call malloc
 16410 0000D151 488B7D10                	mov rdi, ENV
 16411 0000D155 BE00000000              	mov rsi, 0
 16412 0000D15A BA01000000              	mov rdx, 1
 16413                                  .L_lambda_simple_env_loop_011f:	; ext_env[i + 1] <-- env[i]
 16414 0000D15F 4883FE00                	cmp rsi, 0
 16415 0000D163 7410                    	je .L_lambda_simple_env_end_011f
 16416 0000D165 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16417 0000D169 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16418 0000D16D 48FFC6                  	inc rsi
 16419 0000D170 48FFC2                  	inc rdx
 16420 0000D173 EBEA                    	jmp .L_lambda_simple_env_loop_011f
 16421                                  .L_lambda_simple_env_end_011f:
 16422 0000D175 5B                      	pop rbx
 16423 0000D176 BE00000000              	mov rsi, 0
 16424                                  .L_lambda_simple_params_loop_011f:	; copy params
 16425 0000D17B 4883FE00                	cmp rsi, 0
 16426 0000D17F 740E                    	je .L_lambda_simple_params_end_011f
 16427 0000D181 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16428 0000D186 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16429 0000D18A 48FFC6                  	inc rsi
 16430 0000D18D EBEC                    	jmp .L_lambda_simple_params_loop_011f
 16431                                  .L_lambda_simple_params_end_011f:
 16432 0000D18F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16433 0000D192 4889C3                  	mov rbx, rax
 16434 0000D195 58                      	pop rax
 16435 0000D196 C60005                  	mov byte [rax], T_closure
 16436 0000D199 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16437 0000D19D 48C74009[AAD10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_011f
 16438 0000D1A5 E991030000              	jmp .L_lambda_simple_end_011f
 16439                                  .L_lambda_simple_code_011f:	; lambda-simple body
 16440 0000D1AA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16441 0000D1B0 740B                    	je .L_lambda_simple_arity_check_ok_011f
 16442 0000D1B2 FF742410                	push qword [rsp + 8 * 2]
 16443 0000D1B6 6A01                    	push 1
 16444 0000D1B8 E9D9270000              	jmp L_error_incorrect_arity_simple
 16445                                  .L_lambda_simple_arity_check_ok_011f:
 16446 0000D1BD C8000000                	enter 0, 0
 16447 0000D1C1 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16448 0000D1C6 E812280000              	call malloc
 16449 0000D1CB 50                      	push rax
 16450 0000D1CC BF08000000              	mov rdi, 8 * 1	; new rib
 16451 0000D1D1 E807280000              	call malloc
 16452 0000D1D6 50                      	push rax
 16453 0000D1D7 BF10000000              	mov rdi, 8 * 2	; extended env
 16454 0000D1DC E8FC270000              	call malloc
 16455 0000D1E1 488B7D10                	mov rdi, ENV
 16456 0000D1E5 BE00000000              	mov rsi, 0
 16457 0000D1EA BA01000000              	mov rdx, 1
 16458                                  .L_lambda_opt_env_loop_002c:	; ext_env[i + 1] <-- env[i]
 16459 0000D1EF 4883FE01                	cmp rsi, 1
 16460 0000D1F3 7410                    	je .L_lambda_opt_env_end_002c
 16461 0000D1F5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16462 0000D1F9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16463 0000D1FD 48FFC6                  	inc rsi
 16464 0000D200 48FFC2                  	inc rdx
 16465 0000D203 EBEA                    	jmp .L_lambda_opt_env_loop_002c
 16466                                  .L_lambda_opt_env_end_002c:
 16467 0000D205 5B                      	pop rbx
 16468 0000D206 BE00000000              	mov rsi, 0
 16469                                  .L_lambda_opt_params_loop_002c:	; copy params
 16470 0000D20B 4883FE01                	cmp rsi, 1
 16471 0000D20F 740E                    	je .L_lambda_opt_params_end_002c
 16472 0000D211 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16473 0000D216 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16474 0000D21A 48FFC6                  	inc rsi
 16475 0000D21D EBEC                    	jmp .L_lambda_opt_params_loop_002c
 16476                                  .L_lambda_opt_params_end_002c:
 16477 0000D21F 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16478 0000D222 4889C3                  	mov rbx, rax
 16479 0000D225 58                      	pop rax
 16480 0000D226 C60005                  	mov byte [rax], T_closure
 16481 0000D229 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16482 0000D22D 48C74009[3AD20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002c
 16483 0000D235 E9FD020000              	jmp .L_lambda_opt_end_002c
 16484                                  .L_lambda_opt_code_002c:	; lambda-opt body
 16485 0000D23A 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16486 0000D240 740D                    	je .L_lambda_opt_arity_check_exact_002c
 16487 0000D242 7F43                    	jg .L_lambda_opt_arity_check_more_002c
 16488 0000D244 FF742410                	push qword [rsp + 8 * 2]
 16489 0000D248 6A01                    	push 1
 16490 0000D24A E95B270000              	jmp L_error_incorrect_arity_opt
 16491                                  .L_lambda_opt_arity_check_exact_002c:
 16492 0000D24F 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16493 0000D258 BA04000000              	mov rdx, 4
 16494 0000D25D FF3424                  	push qword [rsp]
 16495 0000D260 BE01000000              	mov rsi, 1
 16496                                  .L_lambda_opt_stack_shrink_loop_0082:
 16497 0000D265 4839D6                  	cmp rsi, rdx
 16498 0000D268 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0082
 16499 0000D26A 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 16500 0000D26F 488B0B                  	mov rcx, [rbx]
 16501 0000D272 48894BF8                	mov qword [rbx - 8], rcx
 16502 0000D276 48FFC6                  	inc rsi
 16503 0000D279 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0082
 16504                                  .L_lambda_opt_stack_shrink_loop_exit_0082:
 16505 0000D27B 48C703[01000000]        	mov qword [rbx], sob_nil
 16506 0000D282 E985000000              	jmp .L_lambda_opt_stack_adjusted_002c
 16507                                  .L_lambda_opt_arity_check_more_002c:
 16508 0000D287 488B542410              	mov rdx, qword [rsp + 8 * 2]
 16509 0000D28C 4883EA01                	sub rdx, 1
 16510 0000D290 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16511 0000D299 BE00000000              	mov rsi, 0
 16512 0000D29E 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 16513 0000D2A3 48B9-                   	mov rcx, sob_nil
 16513 0000D2A5 [0100000000000000] 
 16514                                  .L_lambda_opt_stack_shrink_loop_0083:
 16515 0000D2AD 4839D6                  	cmp rsi, rdx
 16516 0000D2B0 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0083
 16517 0000D2B2 BF11000000              	mov rdi, 17 ; 1+8+8
 16518 0000D2B7 E821270000              	call malloc
 16519 0000D2BC 48894809                	mov SOB_PAIR_CDR(rax), rcx
 16520 0000D2C0 48F7DE                  	neg rsi
 16521 0000D2C3 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 16522 0000D2C7 48F7DE                  	neg rsi
 16523 0000D2CA 48894801                	mov SOB_PAIR_CAR(rax), rcx
 16524 0000D2CE C60021                  	mov byte [rax], T_pair
 16525 0000D2D1 4889C1                  	mov rcx, rax
 16526 0000D2D4 48FFC6                  	inc rsi
 16527 0000D2D7 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0083
 16528                                  .L_lambda_opt_stack_shrink_loop_exit_0083:
 16529 0000D2D9 48890B                  	mov qword [rbx], rcx
 16530 0000D2DC 4883EB08                	sub rbx, 8
 16531 0000D2E0 4889E7                  	mov rdi, rsp
 16532 0000D2E3 4883C718                	add rdi, 24
 16533 0000D2E7 BE04000000              	mov rsi, 4
 16534                                  .L_lambda_opt_stack_shrink_loop_0084:
 16535 0000D2EC 4883FE00                	cmp rsi,0
 16536 0000D2F0 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0084
 16537 0000D2F2 488B0F                  	mov rcx, qword [rdi]
 16538 0000D2F5 48890B                  	mov [rbx], rcx
 16539 0000D2F8 48FFCE                  	dec rsi
 16540 0000D2FB 4883EB08                	sub rbx, 8
 16541 0000D2FF 4883EF08                	sub rdi, 8
 16542 0000D303 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0084
 16543                                  .L_lambda_opt_stack_shrink_loop_exit_0084:
 16544 0000D305 4883C308                	add rbx, 8
 16545 0000D309 4889DC                  	mov rsp, rbx
 16546                                  .L_lambda_opt_stack_adjusted_002c:
 16547 0000D30C C8000000                	enter 0, 0
 16548 0000D310 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 16549 0000D314 50                      	push rax
 16550 0000D315 6A01                    	push 1
 16551 0000D317 488B0425[00000000]      	mov rax, qword [free_var_0]
 16552                                  	assert_closure(rax)
    42 0000D31F 803805              <1>  cmp byte [%1], %2
    43 0000D322 0F85A93E0000        <1>  jne L_error_incorrect_type
 16553 0000D328 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16554 0000D32B FF5009                  	call SOB_CLOSURE_CODE(rax)
 16555 0000D32E 483D[02000000]          	cmp rax, sob_boolean_false
 16556 0000D334 740F                              	je .L_if_else_00a9
 16557 0000D336 48B8-                             	mov rax, L_constants + 0
 16557 0000D338 [0000000000000000] 
 16558 0000D340 E9C1000000              	jmp .L_if_end_00a9
 16559                                            .L_if_else_00a9:
 16560 0000D345 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16561 0000D349 50                      	push rax
 16562 0000D34A 6A01                    	push 1
 16563 0000D34C 488B0425[08000000]      	mov rax, qword [free_var_1]
 16564                                  	assert_closure(rax)
    42 0000D354 803805              <1>  cmp byte [%1], %2
    43 0000D357 0F85743E0000        <1>  jne L_error_incorrect_type
 16565 0000D35D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16566 0000D360 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16567 0000D363 483D[02000000]          	cmp rax, sob_boolean_false
 16568 0000D369 743A                              	je .L_if_else_00a7
 16569 0000D36B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16570 0000D36F 50                      	push rax
 16571 0000D370 6A01                    	push 1
 16572 0000D372 488B0425[88000000]      	mov rax, qword [free_var_17]
 16573                                  	assert_closure(rax)
    42 0000D37A 803805              <1>  cmp byte [%1], %2
    43 0000D37D 0F854E3E0000        <1>  jne L_error_incorrect_type
 16574 0000D383 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16575 0000D386 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16576 0000D389 50                      	push rax
 16577 0000D38A 6A01                    	push 1
 16578 0000D38C 488B0425[00000000]      	mov rax, qword [free_var_0]
 16579                                  	assert_closure(rax)
    42 0000D394 803805              <1>  cmp byte [%1], %2
    43 0000D397 0F85343E0000        <1>  jne L_error_incorrect_type
 16580 0000D39D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16581 0000D3A0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16582 0000D3A3 EB0A                    	jmp .L_if_end_00a7
 16583                                            .L_if_else_00a7:
 16584 0000D3A5 48B8-                             	mov rax, L_constants + 2
 16584 0000D3A7 [0200000000000000] 
 16585                                  .L_if_end_00a7:
 16586 0000D3AF 483D[02000000]          	cmp rax, sob_boolean_false
 16587 0000D3B5 7420                              	je .L_if_else_00a8
 16588 0000D3B7 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16589 0000D3BB 50                      	push rax
 16590 0000D3BC 6A01                    	push 1
 16591 0000D3BE 488B0425[80000000]      	mov rax, qword [free_var_16]
 16592                                  	assert_closure(rax)
    42 0000D3C6 803805              <1>  cmp byte [%1], %2
    43 0000D3C9 0F85023E0000        <1>  jne L_error_incorrect_type
 16593 0000D3CF FF7001                  	push SOB_CLOSURE_ENV(rax)
 16594 0000D3D2 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16595 0000D3D5 EB2F                    	jmp .L_if_end_00a8
 16596                                            .L_if_else_00a8:
 16597 0000D3D7 48B8-                             	mov rax, L_constants + 379
 16597 0000D3D9 [7B01000000000000] 
 16598 0000D3E1 50                      	push rax
 16599 0000D3E2 48B8-                   	mov rax, L_constants + 370
 16599 0000D3E4 [7201000000000000] 
 16600 0000D3EC 50                      	push rax
 16601 0000D3ED 6A02                    	push 2
 16602 0000D3EF 488B0425[30010000]      	mov rax, qword [free_var_38]
 16603                                  	assert_closure(rax)
    42 0000D3F7 803805              <1>  cmp byte [%1], %2
    43 0000D3FA 0F85D13D0000        <1>  jne L_error_incorrect_type
 16604 0000D400 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16605 0000D403 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16606                                  .L_if_end_00a8:
 16607                                  .L_if_end_00a9:
 16608 0000D406 50                      	push rax
 16609 0000D407 6A01                    	push 1
 16610 0000D409 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16611 0000D40E E8CA250000              	call malloc
 16612 0000D413 50                      	push rax
 16613 0000D414 BF10000000              	mov rdi, 8 * 2	; new rib
 16614 0000D419 E8BF250000              	call malloc
 16615 0000D41E 50                      	push rax
 16616 0000D41F BF18000000              	mov rdi, 8 * 3	; extended env
 16617 0000D424 E8B4250000              	call malloc
 16618 0000D429 488B7D10                	mov rdi, ENV
 16619 0000D42D BE00000000              	mov rsi, 0
 16620 0000D432 BA01000000              	mov rdx, 1
 16621                                  .L_lambda_simple_env_loop_0120:	; ext_env[i + 1] <-- env[i]
 16622 0000D437 4883FE02                	cmp rsi, 2
 16623 0000D43B 7410                    	je .L_lambda_simple_env_end_0120
 16624 0000D43D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16625 0000D441 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16626 0000D445 48FFC6                  	inc rsi
 16627 0000D448 48FFC2                  	inc rdx
 16628 0000D44B EBEA                    	jmp .L_lambda_simple_env_loop_0120
 16629                                  .L_lambda_simple_env_end_0120:
 16630 0000D44D 5B                      	pop rbx
 16631 0000D44E BE00000000              	mov rsi, 0
 16632                                  .L_lambda_simple_params_loop_0120:	; copy params
 16633 0000D453 4883FE02                	cmp rsi, 2
 16634 0000D457 740E                    	je .L_lambda_simple_params_end_0120
 16635 0000D459 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16636 0000D45E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16637 0000D462 48FFC6                  	inc rsi
 16638 0000D465 EBEC                    	jmp .L_lambda_simple_params_loop_0120
 16639                                  .L_lambda_simple_params_end_0120:
 16640 0000D467 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16641 0000D46A 4889C3                  	mov rbx, rax
 16642 0000D46D 58                      	pop rax
 16643 0000D46E C60005                  	mov byte [rax], T_closure
 16644 0000D471 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16645 0000D475 48C74009[7FD40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0120
 16646 0000D47D EB76                    	jmp .L_lambda_simple_end_0120
 16647                                  .L_lambda_simple_code_0120:	; lambda-simple body
 16648 0000D47F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16649 0000D485 740B                    	je .L_lambda_simple_arity_check_ok_0120
 16650 0000D487 FF742410                	push qword [rsp + 8 * 2]
 16651 0000D48B 6A01                    	push 1
 16652 0000D48D E904250000              	jmp L_error_incorrect_arity_simple
 16653                                  .L_lambda_simple_arity_check_ok_0120:
 16654 0000D492 C8000000                	enter 0, 0
 16655 0000D496 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16656 0000D49A 50                      	push rax
 16657 0000D49B 488B4510                	mov rax, qword [rbp + 8 * 2]
 16658 0000D49F 488B00                  	mov rax, qword [rax + 8 * 0]
 16659 0000D4A2 488B00                  	mov rax, qword [rax + 8 * 0]
 16660 0000D4A5 50                      	push rax
 16661 0000D4A6 6A02                    	push 2
 16662 0000D4A8 488B4510                	mov rax, qword [rbp + 8 * 2]
 16663 0000D4AC 488B4008                	mov rax, qword [rax + 8 * 1]
 16664 0000D4B0 488B00                  	mov rax, qword [rax + 8 * 0]
 16665                                  	assert_closure(rax)
    42 0000D4B3 803805              <1>  cmp byte [%1], %2
    43 0000D4B6 0F85153D0000        <1>  jne L_error_incorrect_type
 16666 0000D4BC FF7001                  	push SOB_CLOSURE_ENV(rax)
 16667 0000D4BF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16668 0000D4C2 FF7500                  	push qword [rbp] ; same the old rbp
 16669 0000D4C5 BA05000000              	mov rdx, 2 + 3
 16670 0000D4CA 488B4D00                	mov rcx, [rbp]
 16671 0000D4CE 4889EF                  	mov rdi, rbp
 16672                                  .L_tc_recycle_frame_loop_0153:
 16673 0000D4D1 4883FA00                	cmp rdx, 0
 16674 0000D4D5 7413                    	je .L_tc_recycle_frame_done_0153
 16675 0000D4D7 4883E908                	sub rcx, 8
 16676 0000D4DB 4883EF08                	sub rdi, 8
 16677 0000D4DF 488B37                  	mov rsi, [rdi]
 16678 0000D4E2 488931                  	mov qword [rcx], rsi
 16679 0000D4E5 48FFCA                  	dec rdx
 16680 0000D4E8 EBE7                    	jmp .L_tc_recycle_frame_loop_0153
 16681                                  .L_tc_recycle_frame_done_0153:
 16682 0000D4EA 5D                      	pop rbp ; restore the old rbp
 16683 0000D4EB 4889CC                  	mov rsp, rcx
 16684 0000D4EE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16685 0000D4F1 C9                      	leave
 16686 0000D4F2 C21800                  	ret 8 * (2 + 1)
 16687                                  .L_lambda_simple_end_0120:	; new closure is in rax
 16688                                  	assert_closure(rax)
    42 0000D4F5 803805              <1>  cmp byte [%1], %2
    43 0000D4F8 0F85D33C0000        <1>  jne L_error_incorrect_type
 16689 0000D4FE FF7001                  	push SOB_CLOSURE_ENV(rax)
 16690 0000D501 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16691 0000D504 FF7500                  	push qword [rbp] ; same the old rbp
 16692 0000D507 BA04000000              	mov rdx, 1 + 3
 16693 0000D50C 488B4D00                	mov rcx, [rbp]
 16694 0000D510 4889EF                  	mov rdi, rbp
 16695                                  .L_tc_recycle_frame_loop_0152:
 16696 0000D513 4883FA00                	cmp rdx, 0
 16697 0000D517 7413                    	je .L_tc_recycle_frame_done_0152
 16698 0000D519 4883E908                	sub rcx, 8
 16699 0000D51D 4883EF08                	sub rdi, 8
 16700 0000D521 488B37                  	mov rsi, [rdi]
 16701 0000D524 488931                  	mov qword [rcx], rsi
 16702 0000D527 48FFCA                  	dec rdx
 16703 0000D52A EBE7                    	jmp .L_tc_recycle_frame_loop_0152
 16704                                  .L_tc_recycle_frame_done_0152:
 16705 0000D52C 5D                      	pop rbp ; restore the old rbp
 16706 0000D52D 4889CC                  	mov rsp, rcx
 16707 0000D530 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 16708 0000D533 C9                      	leave
 16709 0000D534 C22000                  	ret 8 * (2 + 2)
 16710                                  .L_lambda_opt_end_002c:	; new closure is in rax
 16711 0000D537 C9                      	leave
 16712 0000D538 C21800                  	ret 8 * (2 + 1)
 16713                                  .L_lambda_simple_end_011f:	; new closure is in rax
 16714                                  	assert_closure(rax)
    42 0000D53B 803805              <1>  cmp byte [%1], %2
    43 0000D53E 0F858D3C0000        <1>  jne L_error_incorrect_type
 16715 0000D544 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16716 0000D547 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16717 0000D54A 48890425[98010000]      	mov qword [free_var_51], rax
 16718 0000D552 48B8-                   	mov rax, sob_void
 16718 0000D554 [0000000000000000] 
 16719                                  
 16720 0000D55C 4889C7                  	mov rdi, rax
 16721 0000D55F E88A240000              	call print_sexpr_if_not_void
 16722                                  
 16723 0000D564 488B0425[A0010000]      	mov rax, qword [free_var_52]
 16724 0000D56C 50                      	push rax
 16725 0000D56D 6A01                    	push 1
 16726 0000D56F BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16727 0000D574 E864240000              	call malloc
 16728 0000D579 50                      	push rax
 16729 0000D57A BF00000000              	mov rdi, 8 * 0	; new rib
 16730 0000D57F E859240000              	call malloc
 16731 0000D584 50                      	push rax
 16732 0000D585 BF08000000              	mov rdi, 8 * 1	; extended env
 16733 0000D58A E84E240000              	call malloc
 16734 0000D58F 488B7D10                	mov rdi, ENV
 16735 0000D593 BE00000000              	mov rsi, 0
 16736 0000D598 BA01000000              	mov rdx, 1
 16737                                  .L_lambda_simple_env_loop_0121:	; ext_env[i + 1] <-- env[i]
 16738 0000D59D 4883FE00                	cmp rsi, 0
 16739 0000D5A1 7410                    	je .L_lambda_simple_env_end_0121
 16740 0000D5A3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16741 0000D5A7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16742 0000D5AB 48FFC6                  	inc rsi
 16743 0000D5AE 48FFC2                  	inc rdx
 16744 0000D5B1 EBEA                    	jmp .L_lambda_simple_env_loop_0121
 16745                                  .L_lambda_simple_env_end_0121:
 16746 0000D5B3 5B                      	pop rbx
 16747 0000D5B4 BE00000000              	mov rsi, 0
 16748                                  .L_lambda_simple_params_loop_0121:	; copy params
 16749 0000D5B9 4883FE00                	cmp rsi, 0
 16750 0000D5BD 740E                    	je .L_lambda_simple_params_end_0121
 16751 0000D5BF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16752 0000D5C4 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16753 0000D5C8 48FFC6                  	inc rsi
 16754 0000D5CB EBEC                    	jmp .L_lambda_simple_params_loop_0121
 16755                                  .L_lambda_simple_params_end_0121:
 16756 0000D5CD 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16757 0000D5D0 4889C3                  	mov rbx, rax
 16758 0000D5D3 58                      	pop rax
 16759 0000D5D4 C60005                  	mov byte [rax], T_closure
 16760 0000D5D7 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16761 0000D5DB 48C74009[E8D50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0121
 16762 0000D5E3 E991030000              	jmp .L_lambda_simple_end_0121
 16763                                  .L_lambda_simple_code_0121:	; lambda-simple body
 16764 0000D5E8 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16765 0000D5EE 740B                    	je .L_lambda_simple_arity_check_ok_0121
 16766 0000D5F0 FF742410                	push qword [rsp + 8 * 2]
 16767 0000D5F4 6A01                    	push 1
 16768 0000D5F6 E99B230000              	jmp L_error_incorrect_arity_simple
 16769                                  .L_lambda_simple_arity_check_ok_0121:
 16770 0000D5FB C8000000                	enter 0, 0
 16771 0000D5FF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16772 0000D604 E8D4230000              	call malloc
 16773 0000D609 50                      	push rax
 16774 0000D60A BF08000000              	mov rdi, 8 * 1	; new rib
 16775 0000D60F E8C9230000              	call malloc
 16776 0000D614 50                      	push rax
 16777 0000D615 BF10000000              	mov rdi, 8 * 2	; extended env
 16778 0000D61A E8BE230000              	call malloc
 16779 0000D61F 488B7D10                	mov rdi, ENV
 16780 0000D623 BE00000000              	mov rsi, 0
 16781 0000D628 BA01000000              	mov rdx, 1
 16782                                  .L_lambda_opt_env_loop_002d:	; ext_env[i + 1] <-- env[i]
 16783 0000D62D 4883FE01                	cmp rsi, 1
 16784 0000D631 7410                    	je .L_lambda_opt_env_end_002d
 16785 0000D633 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16786 0000D637 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16787 0000D63B 48FFC6                  	inc rsi
 16788 0000D63E 48FFC2                  	inc rdx
 16789 0000D641 EBEA                    	jmp .L_lambda_opt_env_loop_002d
 16790                                  .L_lambda_opt_env_end_002d:
 16791 0000D643 5B                      	pop rbx
 16792 0000D644 BE00000000              	mov rsi, 0
 16793                                  .L_lambda_opt_params_loop_002d:	; copy params
 16794 0000D649 4883FE01                	cmp rsi, 1
 16795 0000D64D 740E                    	je .L_lambda_opt_params_end_002d
 16796 0000D64F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16797 0000D654 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16798 0000D658 48FFC6                  	inc rsi
 16799 0000D65B EBEC                    	jmp .L_lambda_opt_params_loop_002d
 16800                                  .L_lambda_opt_params_end_002d:
 16801 0000D65D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16802 0000D660 4889C3                  	mov rbx, rax
 16803 0000D663 58                      	pop rax
 16804 0000D664 C60005                  	mov byte [rax], T_closure
 16805 0000D667 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16806 0000D66B 48C74009[78D60000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002d
 16807 0000D673 E9FD020000              	jmp .L_lambda_opt_end_002d
 16808                                  .L_lambda_opt_code_002d:	; lambda-opt body
 16809 0000D678 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16810 0000D67E 740D                    	je .L_lambda_opt_arity_check_exact_002d
 16811 0000D680 7F43                    	jg .L_lambda_opt_arity_check_more_002d
 16812 0000D682 FF742410                	push qword [rsp + 8 * 2]
 16813 0000D686 6A01                    	push 1
 16814 0000D688 E91D230000              	jmp L_error_incorrect_arity_opt
 16815                                  .L_lambda_opt_arity_check_exact_002d:
 16816 0000D68D 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16817 0000D696 BA04000000              	mov rdx, 4
 16818 0000D69B FF3424                  	push qword [rsp]
 16819 0000D69E BE01000000              	mov rsi, 1
 16820                                  .L_lambda_opt_stack_shrink_loop_0085:
 16821 0000D6A3 4839D6                  	cmp rsi, rdx
 16822 0000D6A6 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0085
 16823 0000D6A8 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 16824 0000D6AD 488B0B                  	mov rcx, [rbx]
 16825 0000D6B0 48894BF8                	mov qword [rbx - 8], rcx
 16826 0000D6B4 48FFC6                  	inc rsi
 16827 0000D6B7 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0085
 16828                                  .L_lambda_opt_stack_shrink_loop_exit_0085:
 16829 0000D6B9 48C703[01000000]        	mov qword [rbx], sob_nil
 16830 0000D6C0 E985000000              	jmp .L_lambda_opt_stack_adjusted_002d
 16831                                  .L_lambda_opt_arity_check_more_002d:
 16832 0000D6C5 488B542410              	mov rdx, qword [rsp + 8 * 2]
 16833 0000D6CA 4883EA01                	sub rdx, 1
 16834 0000D6CE 48C744241002000000      	mov qword [rsp + 8 * 2], 2
 16835 0000D6D7 BE00000000              	mov rsi, 0
 16836 0000D6DC 488D5CD418              	lea rbx, [rsp + 2 * 8 + 1 * 8 + rdx * 8]
 16837 0000D6E1 48B9-                   	mov rcx, sob_nil
 16837 0000D6E3 [0100000000000000] 
 16838                                  .L_lambda_opt_stack_shrink_loop_0086:
 16839 0000D6EB 4839D6                  	cmp rsi, rdx
 16840 0000D6EE 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0086
 16841 0000D6F0 BF11000000              	mov rdi, 17 ; 1+8+8
 16842 0000D6F5 E8E3220000              	call malloc
 16843 0000D6FA 48894809                	mov SOB_PAIR_CDR(rax), rcx
 16844 0000D6FE 48F7DE                  	neg rsi
 16845 0000D701 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 16846 0000D705 48F7DE                  	neg rsi
 16847 0000D708 48894801                	mov SOB_PAIR_CAR(rax), rcx
 16848 0000D70C C60021                  	mov byte [rax], T_pair
 16849 0000D70F 4889C1                  	mov rcx, rax
 16850 0000D712 48FFC6                  	inc rsi
 16851 0000D715 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0086
 16852                                  .L_lambda_opt_stack_shrink_loop_exit_0086:
 16853 0000D717 48890B                  	mov qword [rbx], rcx
 16854 0000D71A 4883EB08                	sub rbx, 8
 16855 0000D71E 4889E7                  	mov rdi, rsp
 16856 0000D721 4883C718                	add rdi, 24
 16857 0000D725 BE04000000              	mov rsi, 4
 16858                                  .L_lambda_opt_stack_shrink_loop_0087:
 16859 0000D72A 4883FE00                	cmp rsi,0
 16860 0000D72E 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_0087
 16861 0000D730 488B0F                  	mov rcx, qword [rdi]
 16862 0000D733 48890B                  	mov [rbx], rcx
 16863 0000D736 48FFCE                  	dec rsi
 16864 0000D739 4883EB08                	sub rbx, 8
 16865 0000D73D 4883EF08                	sub rdi, 8
 16866 0000D741 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_0087
 16867                                  .L_lambda_opt_stack_shrink_loop_exit_0087:
 16868 0000D743 4883C308                	add rbx, 8
 16869 0000D747 4889DC                  	mov rsp, rbx
 16870                                  .L_lambda_opt_stack_adjusted_002d:
 16871 0000D74A C8000000                	enter 0, 0
 16872 0000D74E 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 16873 0000D752 50                      	push rax
 16874 0000D753 6A01                    	push 1
 16875 0000D755 488B0425[00000000]      	mov rax, qword [free_var_0]
 16876                                  	assert_closure(rax)
    42 0000D75D 803805              <1>  cmp byte [%1], %2
    43 0000D760 0F856B3A0000        <1>  jne L_error_incorrect_type
 16877 0000D766 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16878 0000D769 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16879 0000D76C 483D[02000000]          	cmp rax, sob_boolean_false
 16880 0000D772 740F                              	je .L_if_else_00ac
 16881 0000D774 48B8-                             	mov rax, L_constants + 4
 16881 0000D776 [0400000000000000] 
 16882 0000D77E E9C1000000              	jmp .L_if_end_00ac
 16883                                            .L_if_else_00ac:
 16884 0000D783 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16885 0000D787 50                      	push rax
 16886 0000D788 6A01                    	push 1
 16887 0000D78A 488B0425[08000000]      	mov rax, qword [free_var_1]
 16888                                  	assert_closure(rax)
    42 0000D792 803805              <1>  cmp byte [%1], %2
    43 0000D795 0F85363A0000        <1>  jne L_error_incorrect_type
 16889 0000D79B FF7001                  	push SOB_CLOSURE_ENV(rax)
 16890 0000D79E FF5009                  	call SOB_CLOSURE_CODE(rax)
 16891 0000D7A1 483D[02000000]          	cmp rax, sob_boolean_false
 16892 0000D7A7 743A                              	je .L_if_else_00aa
 16893 0000D7A9 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16894 0000D7AD 50                      	push rax
 16895 0000D7AE 6A01                    	push 1
 16896 0000D7B0 488B0425[88000000]      	mov rax, qword [free_var_17]
 16897                                  	assert_closure(rax)
    42 0000D7B8 803805              <1>  cmp byte [%1], %2
    43 0000D7BB 0F85103A0000        <1>  jne L_error_incorrect_type
 16898 0000D7C1 FF7001                  	push SOB_CLOSURE_ENV(rax)
 16899 0000D7C4 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16900 0000D7C7 50                      	push rax
 16901 0000D7C8 6A01                    	push 1
 16902 0000D7CA 488B0425[00000000]      	mov rax, qword [free_var_0]
 16903                                  	assert_closure(rax)
    42 0000D7D2 803805              <1>  cmp byte [%1], %2
    43 0000D7D5 0F85F6390000        <1>  jne L_error_incorrect_type
 16904 0000D7DB FF7001                  	push SOB_CLOSURE_ENV(rax)
 16905 0000D7DE FF5009                  	call SOB_CLOSURE_CODE(rax)
 16906 0000D7E1 EB0A                    	jmp .L_if_end_00aa
 16907                                            .L_if_else_00aa:
 16908 0000D7E3 48B8-                             	mov rax, L_constants + 2
 16908 0000D7E5 [0200000000000000] 
 16909                                  .L_if_end_00aa:
 16910 0000D7ED 483D[02000000]          	cmp rax, sob_boolean_false
 16911 0000D7F3 7420                              	je .L_if_else_00ab
 16912 0000D7F5 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 16913 0000D7F9 50                      	push rax
 16914 0000D7FA 6A01                    	push 1
 16915 0000D7FC 488B0425[80000000]      	mov rax, qword [free_var_16]
 16916                                  	assert_closure(rax)
    42 0000D804 803805              <1>  cmp byte [%1], %2
    43 0000D807 0F85C4390000        <1>  jne L_error_incorrect_type
 16917 0000D80D FF7001                  	push SOB_CLOSURE_ENV(rax)
 16918 0000D810 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16919 0000D813 EB2F                    	jmp .L_if_end_00ab
 16920                                            .L_if_else_00ab:
 16921 0000D815 48B8-                             	mov rax, L_constants + 460
 16921 0000D817 [CC01000000000000] 
 16922 0000D81F 50                      	push rax
 16923 0000D820 48B8-                   	mov rax, L_constants + 451
 16923 0000D822 [C301000000000000] 
 16924 0000D82A 50                      	push rax
 16925 0000D82B 6A02                    	push 2
 16926 0000D82D 488B0425[30010000]      	mov rax, qword [free_var_38]
 16927                                  	assert_closure(rax)
    42 0000D835 803805              <1>  cmp byte [%1], %2
    43 0000D838 0F8593390000        <1>  jne L_error_incorrect_type
 16928 0000D83E FF7001                  	push SOB_CLOSURE_ENV(rax)
 16929 0000D841 FF5009                  	call SOB_CLOSURE_CODE(rax)
 16930                                  .L_if_end_00ab:
 16931                                  .L_if_end_00ac:
 16932 0000D844 50                      	push rax
 16933 0000D845 6A01                    	push 1
 16934 0000D847 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 16935 0000D84C E88C210000              	call malloc
 16936 0000D851 50                      	push rax
 16937 0000D852 BF10000000              	mov rdi, 8 * 2	; new rib
 16938 0000D857 E881210000              	call malloc
 16939 0000D85C 50                      	push rax
 16940 0000D85D BF18000000              	mov rdi, 8 * 3	; extended env
 16941 0000D862 E876210000              	call malloc
 16942 0000D867 488B7D10                	mov rdi, ENV
 16943 0000D86B BE00000000              	mov rsi, 0
 16944 0000D870 BA01000000              	mov rdx, 1
 16945                                  .L_lambda_simple_env_loop_0122:	; ext_env[i + 1] <-- env[i]
 16946 0000D875 4883FE02                	cmp rsi, 2
 16947 0000D879 7410                    	je .L_lambda_simple_env_end_0122
 16948 0000D87B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 16949 0000D87F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 16950 0000D883 48FFC6                  	inc rsi
 16951 0000D886 48FFC2                  	inc rdx
 16952 0000D889 EBEA                    	jmp .L_lambda_simple_env_loop_0122
 16953                                  .L_lambda_simple_env_end_0122:
 16954 0000D88B 5B                      	pop rbx
 16955 0000D88C BE00000000              	mov rsi, 0
 16956                                  .L_lambda_simple_params_loop_0122:	; copy params
 16957 0000D891 4883FE02                	cmp rsi, 2
 16958 0000D895 740E                    	je .L_lambda_simple_params_end_0122
 16959 0000D897 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 16960 0000D89C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 16961 0000D8A0 48FFC6                  	inc rsi
 16962 0000D8A3 EBEC                    	jmp .L_lambda_simple_params_loop_0122
 16963                                  .L_lambda_simple_params_end_0122:
 16964 0000D8A5 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 16965 0000D8A8 4889C3                  	mov rbx, rax
 16966 0000D8AB 58                      	pop rax
 16967 0000D8AC C60005                  	mov byte [rax], T_closure
 16968 0000D8AF 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 16969 0000D8B3 48C74009[BDD80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0122
 16970 0000D8BB EB76                    	jmp .L_lambda_simple_end_0122
 16971                                  .L_lambda_simple_code_0122:	; lambda-simple body
 16972 0000D8BD 48837C241001            	cmp qword [rsp + 8 * 2], 1
 16973 0000D8C3 740B                    	je .L_lambda_simple_arity_check_ok_0122
 16974 0000D8C5 FF742410                	push qword [rsp + 8 * 2]
 16975 0000D8C9 6A01                    	push 1
 16976 0000D8CB E9C6200000              	jmp L_error_incorrect_arity_simple
 16977                                  .L_lambda_simple_arity_check_ok_0122:
 16978 0000D8D0 C8000000                	enter 0, 0
 16979 0000D8D4 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 16980 0000D8D8 50                      	push rax
 16981 0000D8D9 488B4510                	mov rax, qword [rbp + 8 * 2]
 16982 0000D8DD 488B00                  	mov rax, qword [rax + 8 * 0]
 16983 0000D8E0 488B00                  	mov rax, qword [rax + 8 * 0]
 16984 0000D8E3 50                      	push rax
 16985 0000D8E4 6A02                    	push 2
 16986 0000D8E6 488B4510                	mov rax, qword [rbp + 8 * 2]
 16987 0000D8EA 488B4008                	mov rax, qword [rax + 8 * 1]
 16988 0000D8EE 488B00                  	mov rax, qword [rax + 8 * 0]
 16989                                  	assert_closure(rax)
    42 0000D8F1 803805              <1>  cmp byte [%1], %2
    43 0000D8F4 0F85D7380000        <1>  jne L_error_incorrect_type
 16990 0000D8FA FF7001                  	push SOB_CLOSURE_ENV(rax)
 16991 0000D8FD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 16992 0000D900 FF7500                  	push qword [rbp] ; same the old rbp
 16993 0000D903 BA05000000              	mov rdx, 2 + 3
 16994 0000D908 488B4D00                	mov rcx, [rbp]
 16995 0000D90C 4889EF                  	mov rdi, rbp
 16996                                  .L_tc_recycle_frame_loop_0155:
 16997 0000D90F 4883FA00                	cmp rdx, 0
 16998 0000D913 7413                    	je .L_tc_recycle_frame_done_0155
 16999 0000D915 4883E908                	sub rcx, 8
 17000 0000D919 4883EF08                	sub rdi, 8
 17001 0000D91D 488B37                  	mov rsi, [rdi]
 17002 0000D920 488931                  	mov qword [rcx], rsi
 17003 0000D923 48FFCA                  	dec rdx
 17004 0000D926 EBE7                    	jmp .L_tc_recycle_frame_loop_0155
 17005                                  .L_tc_recycle_frame_done_0155:
 17006 0000D928 5D                      	pop rbp ; restore the old rbp
 17007 0000D929 4889CC                  	mov rsp, rcx
 17008 0000D92C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17009 0000D92F C9                      	leave
 17010 0000D930 C21800                  	ret 8 * (2 + 1)
 17011                                  .L_lambda_simple_end_0122:	; new closure is in rax
 17012                                  	assert_closure(rax)
    42 0000D933 803805              <1>  cmp byte [%1], %2
    43 0000D936 0F8595380000        <1>  jne L_error_incorrect_type
 17013 0000D93C FF7001                  	push SOB_CLOSURE_ENV(rax)
 17014 0000D93F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17015 0000D942 FF7500                  	push qword [rbp] ; same the old rbp
 17016 0000D945 BA04000000              	mov rdx, 1 + 3
 17017 0000D94A 488B4D00                	mov rcx, [rbp]
 17018 0000D94E 4889EF                  	mov rdi, rbp
 17019                                  .L_tc_recycle_frame_loop_0154:
 17020 0000D951 4883FA00                	cmp rdx, 0
 17021 0000D955 7413                    	je .L_tc_recycle_frame_done_0154
 17022 0000D957 4883E908                	sub rcx, 8
 17023 0000D95B 4883EF08                	sub rdi, 8
 17024 0000D95F 488B37                  	mov rsi, [rdi]
 17025 0000D962 488931                  	mov qword [rcx], rsi
 17026 0000D965 48FFCA                  	dec rdx
 17027 0000D968 EBE7                    	jmp .L_tc_recycle_frame_loop_0154
 17028                                  .L_tc_recycle_frame_done_0154:
 17029 0000D96A 5D                      	pop rbp ; restore the old rbp
 17030 0000D96B 4889CC                  	mov rsp, rcx
 17031 0000D96E FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17032 0000D971 C9                      	leave
 17033 0000D972 C22000                  	ret 8 * (2 + 2)
 17034                                  .L_lambda_opt_end_002d:	; new closure is in rax
 17035 0000D975 C9                      	leave
 17036 0000D976 C21800                  	ret 8 * (2 + 1)
 17037                                  .L_lambda_simple_end_0121:	; new closure is in rax
 17038                                  	assert_closure(rax)
    42 0000D979 803805              <1>  cmp byte [%1], %2
    43 0000D97C 0F854F380000        <1>  jne L_error_incorrect_type
 17039 0000D982 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17040 0000D985 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17041 0000D988 48890425[A0010000]      	mov qword [free_var_52], rax
 17042 0000D990 48B8-                   	mov rax, sob_void
 17042 0000D992 [0000000000000000] 
 17043                                  
 17044 0000D99A 4889C7                  	mov rdi, rax
 17045 0000D99D E84C200000              	call print_sexpr_if_not_void
 17046                                  
 17047 0000D9A2 48B8-                   	mov rax, L_constants + 23
 17047 0000D9A4 [1700000000000000] 
 17048 0000D9AC 50                      	push rax
 17049 0000D9AD 6A01                    	push 1
 17050 0000D9AF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17051 0000D9B4 E824200000              	call malloc
 17052 0000D9B9 50                      	push rax
 17053 0000D9BA BF00000000              	mov rdi, 8 * 0	; new rib
 17054 0000D9BF E819200000              	call malloc
 17055 0000D9C4 50                      	push rax
 17056 0000D9C5 BF08000000              	mov rdi, 8 * 1	; extended env
 17057 0000D9CA E80E200000              	call malloc
 17058 0000D9CF 488B7D10                	mov rdi, ENV
 17059 0000D9D3 BE00000000              	mov rsi, 0
 17060 0000D9D8 BA01000000              	mov rdx, 1
 17061                                  .L_lambda_simple_env_loop_0123:	; ext_env[i + 1] <-- env[i]
 17062 0000D9DD 4883FE00                	cmp rsi, 0
 17063 0000D9E1 7410                    	je .L_lambda_simple_env_end_0123
 17064 0000D9E3 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17065 0000D9E7 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17066 0000D9EB 48FFC6                  	inc rsi
 17067 0000D9EE 48FFC2                  	inc rdx
 17068 0000D9F1 EBEA                    	jmp .L_lambda_simple_env_loop_0123
 17069                                  .L_lambda_simple_env_end_0123:
 17070 0000D9F3 5B                      	pop rbx
 17071 0000D9F4 BE00000000              	mov rsi, 0
 17072                                  .L_lambda_simple_params_loop_0123:	; copy params
 17073 0000D9F9 4883FE00                	cmp rsi, 0
 17074 0000D9FD 740E                    	je .L_lambda_simple_params_end_0123
 17075 0000D9FF 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17076 0000DA04 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17077 0000DA08 48FFC6                  	inc rsi
 17078 0000DA0B EBEC                    	jmp .L_lambda_simple_params_loop_0123
 17079                                  .L_lambda_simple_params_end_0123:
 17080 0000DA0D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17081 0000DA10 4889C3                  	mov rbx, rax
 17082 0000DA13 58                      	pop rax
 17083 0000DA14 C60005                  	mov byte [rax], T_closure
 17084 0000DA17 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17085 0000DA1B 48C74009[28DA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0123
 17086 0000DA23 E9DF030000              	jmp .L_lambda_simple_end_0123
 17087                                  .L_lambda_simple_code_0123:	; lambda-simple body
 17088 0000DA28 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17089 0000DA2E 740B                    	je .L_lambda_simple_arity_check_ok_0123
 17090 0000DA30 FF742410                	push qword [rsp + 8 * 2]
 17091 0000DA34 6A01                    	push 1
 17092 0000DA36 E95B1F0000              	jmp L_error_incorrect_arity_simple
 17093                                  .L_lambda_simple_arity_check_ok_0123:
 17094 0000DA3B C8000000                	enter 0, 0
 17095 0000DA3F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17096 0000DA43 4889C2                  	mov rdx, rax
 17097 0000DA46 BF08000000              	mov rdi, 8
 17098 0000DA4B E88D1F0000              	call malloc
 17099 0000DA50 488910                  	mov qword[rax], rdx
 17100 0000DA53 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17101 0000DA57 48B8-                   	mov rax, sob_void
 17101 0000DA59 [0000000000000000] 
 17102                                  
 17103 0000DA61 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17104 0000DA66 E8721F0000              	call malloc
 17105 0000DA6B 50                      	push rax
 17106 0000DA6C BF08000000              	mov rdi, 8 * 1	; new rib
 17107 0000DA71 E8671F0000              	call malloc
 17108 0000DA76 50                      	push rax
 17109 0000DA77 BF10000000              	mov rdi, 8 * 2	; extended env
 17110 0000DA7C E85C1F0000              	call malloc
 17111 0000DA81 488B7D10                	mov rdi, ENV
 17112 0000DA85 BE00000000              	mov rsi, 0
 17113 0000DA8A BA01000000              	mov rdx, 1
 17114                                  .L_lambda_simple_env_loop_0124:	; ext_env[i + 1] <-- env[i]
 17115 0000DA8F 4883FE01                	cmp rsi, 1
 17116 0000DA93 7410                    	je .L_lambda_simple_env_end_0124
 17117 0000DA95 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17118 0000DA99 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17119 0000DA9D 48FFC6                  	inc rsi
 17120 0000DAA0 48FFC2                  	inc rdx
 17121 0000DAA3 EBEA                    	jmp .L_lambda_simple_env_loop_0124
 17122                                  .L_lambda_simple_env_end_0124:
 17123 0000DAA5 5B                      	pop rbx
 17124 0000DAA6 BE00000000              	mov rsi, 0
 17125                                  .L_lambda_simple_params_loop_0124:	; copy params
 17126 0000DAAB 4883FE01                	cmp rsi, 1
 17127 0000DAAF 740E                    	je .L_lambda_simple_params_end_0124
 17128 0000DAB1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17129 0000DAB6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17130 0000DABA 48FFC6                  	inc rsi
 17131 0000DABD EBEC                    	jmp .L_lambda_simple_params_loop_0124
 17132                                  .L_lambda_simple_params_end_0124:
 17133 0000DABF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17134 0000DAC2 4889C3                  	mov rbx, rax
 17135 0000DAC5 58                      	pop rax
 17136 0000DAC6 C60005                  	mov byte [rax], T_closure
 17137 0000DAC9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17138 0000DACD 48C74009[DADA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0124
 17139 0000DAD5 E92A020000              	jmp .L_lambda_simple_end_0124
 17140                                  .L_lambda_simple_code_0124:	; lambda-simple body
 17141 0000DADA 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17142 0000DAE0 740B                    	je .L_lambda_simple_arity_check_ok_0124
 17143 0000DAE2 FF742410                	push qword [rsp + 8 * 2]
 17144 0000DAE6 6A02                    	push 2
 17145 0000DAE8 E9A91E0000              	jmp L_error_incorrect_arity_simple
 17146                                  .L_lambda_simple_arity_check_ok_0124:
 17147 0000DAED C8000000                	enter 0, 0
 17148 0000DAF1 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17149 0000DAF5 50                      	push rax
 17150 0000DAF6 6A01                    	push 1
 17151 0000DAF8 488B0425[00000000]      	mov rax, qword [free_var_0]
 17152                                  	assert_closure(rax)
    42 0000DB00 803805              <1>  cmp byte [%1], %2
    43 0000DB03 0F85C8360000        <1>  jne L_error_incorrect_type
 17153 0000DB09 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17154 0000DB0C FF5009                  	call SOB_CLOSURE_CODE(rax)
 17155 0000DB0F 483D[02000000]          	cmp rax, sob_boolean_false
 17156 0000DB15 745D                              	je .L_if_else_00ad
 17157 0000DB17 48B8-                             	mov rax, L_constants + 0
 17157 0000DB19 [0000000000000000] 
 17158 0000DB21 50                      	push rax
 17159 0000DB22 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17160 0000DB26 50                      	push rax
 17161 0000DB27 6A02                    	push 2
 17162 0000DB29 488B0425[98010000]      	mov rax, qword [free_var_51]
 17163                                  	assert_closure(rax)
    42 0000DB31 803805              <1>  cmp byte [%1], %2
    43 0000DB34 0F8597360000        <1>  jne L_error_incorrect_type
 17164 0000DB3A FF7001                  	push SOB_CLOSURE_ENV(rax)
 17165 0000DB3D FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17166 0000DB40 FF7500                  	push qword [rbp] ; same the old rbp
 17167 0000DB43 BA05000000              	mov rdx, 2 + 3
 17168 0000DB48 488B4D00                	mov rcx, [rbp]
 17169 0000DB4C 4889EF                  	mov rdi, rbp
 17170                                  .L_tc_recycle_frame_loop_0156:
 17171 0000DB4F 4883FA00                	cmp rdx, 0
 17172 0000DB53 7413                    	je .L_tc_recycle_frame_done_0156
 17173 0000DB55 4883E908                	sub rcx, 8
 17174 0000DB59 4883EF08                	sub rdi, 8
 17175 0000DB5D 488B37                  	mov rsi, [rdi]
 17176 0000DB60 488931                  	mov qword [rcx], rsi
 17177 0000DB63 48FFCA                  	dec rdx
 17178 0000DB66 EBE7                    	jmp .L_tc_recycle_frame_loop_0156
 17179                                  .L_tc_recycle_frame_done_0156:
 17180 0000DB68 5D                      	pop rbp ; restore the old rbp
 17181 0000DB69 4889CC                  	mov rsp, rcx
 17182 0000DB6C FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17183 0000DB6F E98C010000              	jmp .L_if_end_00ad
 17184                                            .L_if_else_00ad:
 17185 0000DB74 48B8-                             	mov rax, L_constants + 128
 17185 0000DB76 [8000000000000000] 
 17186 0000DB7E 50                      	push rax
 17187 0000DB7F 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17188 0000DB83 50                      	push rax
 17189 0000DB84 6A02                    	push 2
 17190 0000DB86 488B0425[08030000]      	mov rax, qword [free_var_97]
 17191                                  	assert_closure(rax)
    42 0000DB8E 803805              <1>  cmp byte [%1], %2
    43 0000DB91 0F853A360000        <1>  jne L_error_incorrect_type
 17192 0000DB97 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17193 0000DB9A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17194 0000DB9D 50                      	push rax
 17195 0000DB9E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17196 0000DBA2 50                      	push rax
 17197 0000DBA3 6A01                    	push 1
 17198 0000DBA5 488B0425[88000000]      	mov rax, qword [free_var_17]
 17199                                  	assert_closure(rax)
    42 0000DBAD 803805              <1>  cmp byte [%1], %2
    43 0000DBB0 0F851B360000        <1>  jne L_error_incorrect_type
 17200 0000DBB6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17201 0000DBB9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17202 0000DBBC 50                      	push rax
 17203 0000DBBD 6A02                    	push 2
 17204 0000DBBF 488B4510                	mov rax, qword [rbp + 8 * 2]
 17205 0000DBC3 488B00                  	mov rax, qword [rax + 8 * 0]
 17206 0000DBC6 488B00                  	mov rax, qword [rax + 8 * 0]
 17207 0000DBC9 488B00                  	mov rax, qword [rax]
 17208                                  	assert_closure(rax)
    42 0000DBCC 803805              <1>  cmp byte [%1], %2
    43 0000DBCF 0F85FC350000        <1>  jne L_error_incorrect_type
 17209 0000DBD5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17210 0000DBD8 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17211 0000DBDB 50                      	push rax
 17212 0000DBDC 6A01                    	push 1
 17213 0000DBDE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17214 0000DBE3 E8F51D0000              	call malloc
 17215 0000DBE8 50                      	push rax
 17216 0000DBE9 BF10000000              	mov rdi, 8 * 2	; new rib
 17217 0000DBEE E8EA1D0000              	call malloc
 17218 0000DBF3 50                      	push rax
 17219 0000DBF4 BF18000000              	mov rdi, 8 * 3	; extended env
 17220 0000DBF9 E8DF1D0000              	call malloc
 17221 0000DBFE 488B7D10                	mov rdi, ENV
 17222 0000DC02 BE00000000              	mov rsi, 0
 17223 0000DC07 BA01000000              	mov rdx, 1
 17224                                  .L_lambda_simple_env_loop_0125:	; ext_env[i + 1] <-- env[i]
 17225 0000DC0C 4883FE02                	cmp rsi, 2
 17226 0000DC10 7410                    	je .L_lambda_simple_env_end_0125
 17227 0000DC12 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17228 0000DC16 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17229 0000DC1A 48FFC6                  	inc rsi
 17230 0000DC1D 48FFC2                  	inc rdx
 17231 0000DC20 EBEA                    	jmp .L_lambda_simple_env_loop_0125
 17232                                  .L_lambda_simple_env_end_0125:
 17233 0000DC22 5B                      	pop rbx
 17234 0000DC23 BE00000000              	mov rsi, 0
 17235                                  .L_lambda_simple_params_loop_0125:	; copy params
 17236 0000DC28 4883FE02                	cmp rsi, 2
 17237 0000DC2C 740E                    	je .L_lambda_simple_params_end_0125
 17238 0000DC2E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17239 0000DC33 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17240 0000DC37 48FFC6                  	inc rsi
 17241 0000DC3A EBEC                    	jmp .L_lambda_simple_params_loop_0125
 17242                                  .L_lambda_simple_params_end_0125:
 17243 0000DC3C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17244 0000DC3F 4889C3                  	mov rbx, rax
 17245 0000DC42 58                      	pop rax
 17246 0000DC43 C60005                  	mov byte [rax], T_closure
 17247 0000DC46 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17248 0000DC4A 48C74009[54DC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0125
 17249 0000DC52 EB6E                    	jmp .L_lambda_simple_end_0125
 17250                                  .L_lambda_simple_code_0125:	; lambda-simple body
 17251 0000DC54 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17252 0000DC5A 740B                    	je .L_lambda_simple_arity_check_ok_0125
 17253 0000DC5C FF742410                	push qword [rsp + 8 * 2]
 17254 0000DC60 6A01                    	push 1
 17255 0000DC62 E92F1D0000              	jmp L_error_incorrect_arity_simple
 17256                                  .L_lambda_simple_arity_check_ok_0125:
 17257 0000DC67 C8000000                	enter 0, 0
 17258 0000DC6B 488B4510                	mov rax, qword [rbp + 8 * 2]
 17259 0000DC6F 488B00                  	mov rax, qword [rax + 8 * 0]
 17260 0000DC72 488B00                  	mov rax, qword [rax + 8 * 0]
 17261 0000DC75 50                      	push rax
 17262 0000DC76 6A01                    	push 1
 17263 0000DC78 488B0425[80000000]      	mov rax, qword [free_var_16]
 17264                                  	assert_closure(rax)
    42 0000DC80 803805              <1>  cmp byte [%1], %2
    43 0000DC83 0F8548350000        <1>  jne L_error_incorrect_type
 17265 0000DC89 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17266 0000DC8C FF5009                  	call SOB_CLOSURE_CODE(rax)
 17267 0000DC8F 50                      	push rax
 17268 0000DC90 488B4510                	mov rax, qword [rbp + 8 * 2]
 17269 0000DC94 488B00                  	mov rax, qword [rax + 8 * 0]
 17270 0000DC97 488B4008                	mov rax, qword [rax + 8 * 1]
 17271 0000DC9B 50                      	push rax
 17272 0000DC9C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17273 0000DCA0 50                      	push rax
 17274 0000DCA1 6A03                    	push 3
 17275 0000DCA3 488B0425[88010000]      	mov rax, qword [free_var_49]
 17276                                  	assert_closure(rax)
    42 0000DCAB 803805              <1>  cmp byte [%1], %2
    43 0000DCAE 0F851D350000        <1>  jne L_error_incorrect_type
 17277 0000DCB4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17278 0000DCB7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17279                                  
 17280 0000DCBA 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17281 0000DCBE C9                      	leave
 17282 0000DCBF C21800                  	ret 8 * (2 + 1)
 17283                                  .L_lambda_simple_end_0125:	; new closure is in rax
 17284                                  	assert_closure(rax)
    42 0000DCC2 803805              <1>  cmp byte [%1], %2
    43 0000DCC5 0F8506350000        <1>  jne L_error_incorrect_type
 17285 0000DCCB FF7001                  	push SOB_CLOSURE_ENV(rax)
 17286 0000DCCE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17287 0000DCD1 FF7500                  	push qword [rbp] ; same the old rbp
 17288 0000DCD4 BA04000000              	mov rdx, 1 + 3
 17289 0000DCD9 488B4D00                	mov rcx, [rbp]
 17290 0000DCDD 4889EF                  	mov rdi, rbp
 17291                                  .L_tc_recycle_frame_loop_0157:
 17292 0000DCE0 4883FA00                	cmp rdx, 0
 17293 0000DCE4 7413                    	je .L_tc_recycle_frame_done_0157
 17294 0000DCE6 4883E908                	sub rcx, 8
 17295 0000DCEA 4883EF08                	sub rdi, 8
 17296 0000DCEE 488B37                  	mov rsi, [rdi]
 17297 0000DCF1 488931                  	mov qword [rcx], rsi
 17298 0000DCF4 48FFCA                  	dec rdx
 17299 0000DCF7 EBE7                    	jmp .L_tc_recycle_frame_loop_0157
 17300                                  .L_tc_recycle_frame_done_0157:
 17301 0000DCF9 5D                      	pop rbp ; restore the old rbp
 17302 0000DCFA 4889CC                  	mov rsp, rcx
 17303 0000DCFD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17304                                  .L_if_end_00ad:
 17305 0000DD00 C9                      	leave
 17306 0000DD01 C22000                  	ret 8 * (2 + 2)
 17307                                  .L_lambda_simple_end_0124:	; new closure is in rax
 17308 0000DD04 50                      	push rax
 17309 0000DD05 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17310 0000DD09 8F00                    	pop qword [rax]
 17311 0000DD0B 48B8-                   	mov rax, sob_void
 17311 0000DD0D [0000000000000000] 
 17312                                  
 17313 0000DD15 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17314 0000DD1A E8BE1C0000              	call malloc
 17315 0000DD1F 50                      	push rax
 17316 0000DD20 BF08000000              	mov rdi, 8 * 1	; new rib
 17317 0000DD25 E8B31C0000              	call malloc
 17318 0000DD2A 50                      	push rax
 17319 0000DD2B BF10000000              	mov rdi, 8 * 2	; extended env
 17320 0000DD30 E8A81C0000              	call malloc
 17321 0000DD35 488B7D10                	mov rdi, ENV
 17322 0000DD39 BE00000000              	mov rsi, 0
 17323 0000DD3E BA01000000              	mov rdx, 1
 17324                                  .L_lambda_simple_env_loop_0126:	; ext_env[i + 1] <-- env[i]
 17325 0000DD43 4883FE01                	cmp rsi, 1
 17326 0000DD47 7410                    	je .L_lambda_simple_env_end_0126
 17327 0000DD49 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17328 0000DD4D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17329 0000DD51 48FFC6                  	inc rsi
 17330 0000DD54 48FFC2                  	inc rdx
 17331 0000DD57 EBEA                    	jmp .L_lambda_simple_env_loop_0126
 17332                                  .L_lambda_simple_env_end_0126:
 17333 0000DD59 5B                      	pop rbx
 17334 0000DD5A BE00000000              	mov rsi, 0
 17335                                  .L_lambda_simple_params_loop_0126:	; copy params
 17336 0000DD5F 4883FE01                	cmp rsi, 1
 17337 0000DD63 740E                    	je .L_lambda_simple_params_end_0126
 17338 0000DD65 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17339 0000DD6A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17340 0000DD6E 48FFC6                  	inc rsi
 17341 0000DD71 EBEC                    	jmp .L_lambda_simple_params_loop_0126
 17342                                  .L_lambda_simple_params_end_0126:
 17343 0000DD73 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17344 0000DD76 4889C3                  	mov rbx, rax
 17345 0000DD79 58                      	pop rax
 17346 0000DD7A C60005                  	mov byte [rax], T_closure
 17347 0000DD7D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17348 0000DD81 48C74009[8BDD0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0126
 17349 0000DD89 EB78                    	jmp .L_lambda_simple_end_0126
 17350                                  .L_lambda_simple_code_0126:	; lambda-simple body
 17351 0000DD8B 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17352 0000DD91 740B                    	je .L_lambda_simple_arity_check_ok_0126
 17353 0000DD93 FF742410                	push qword [rsp + 8 * 2]
 17354 0000DD97 6A01                    	push 1
 17355 0000DD99 E9F81B0000              	jmp L_error_incorrect_arity_simple
 17356                                  .L_lambda_simple_arity_check_ok_0126:
 17357 0000DD9E C8000000                	enter 0, 0
 17358 0000DDA2 48B8-                   	mov rax, L_constants + 32
 17358 0000DDA4 [2000000000000000] 
 17359 0000DDAC 50                      	push rax
 17360 0000DDAD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17361 0000DDB1 50                      	push rax
 17362 0000DDB2 6A02                    	push 2
 17363 0000DDB4 488B4510                	mov rax, qword [rbp + 8 * 2]
 17364 0000DDB8 488B00                  	mov rax, qword [rax + 8 * 0]
 17365 0000DDBB 488B00                  	mov rax, qword [rax + 8 * 0]
 17366 0000DDBE 488B00                  	mov rax, qword [rax]
 17367                                  	assert_closure(rax)
    42 0000DDC1 803805              <1>  cmp byte [%1], %2
    43 0000DDC4 0F8507340000        <1>  jne L_error_incorrect_type
 17368 0000DDCA FF7001                  	push SOB_CLOSURE_ENV(rax)
 17369 0000DDCD FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17370 0000DDD0 FF7500                  	push qword [rbp] ; same the old rbp
 17371 0000DDD3 BA05000000              	mov rdx, 2 + 3
 17372 0000DDD8 488B4D00                	mov rcx, [rbp]
 17373 0000DDDC 4889EF                  	mov rdi, rbp
 17374                                  .L_tc_recycle_frame_loop_0158:
 17375 0000DDDF 4883FA00                	cmp rdx, 0
 17376 0000DDE3 7413                    	je .L_tc_recycle_frame_done_0158
 17377 0000DDE5 4883E908                	sub rcx, 8
 17378 0000DDE9 4883EF08                	sub rdi, 8
 17379 0000DDED 488B37                  	mov rsi, [rdi]
 17380 0000DDF0 488931                  	mov qword [rcx], rsi
 17381 0000DDF3 48FFCA                  	dec rdx
 17382 0000DDF6 EBE7                    	jmp .L_tc_recycle_frame_loop_0158
 17383                                  .L_tc_recycle_frame_done_0158:
 17384 0000DDF8 5D                      	pop rbp ; restore the old rbp
 17385 0000DDF9 4889CC                  	mov rsp, rcx
 17386 0000DDFC FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17387 0000DDFF C9                      	leave
 17388 0000DE00 C21800                  	ret 8 * (2 + 1)
 17389                                  .L_lambda_simple_end_0126:	; new closure is in rax
 17390 0000DE03 C9                      	leave
 17391 0000DE04 C21800                  	ret 8 * (2 + 1)
 17392                                  .L_lambda_simple_end_0123:	; new closure is in rax
 17393                                  	assert_closure(rax)
    42 0000DE07 803805              <1>  cmp byte [%1], %2
    43 0000DE0A 0F85C1330000        <1>  jne L_error_incorrect_type
 17394 0000DE10 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17395 0000DE13 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17396 0000DE16 48890425[38040000]      	mov qword [free_var_135], rax
 17397 0000DE1E 48B8-                   	mov rax, sob_void
 17397 0000DE20 [0000000000000000] 
 17398                                  
 17399 0000DE28 4889C7                  	mov rdi, rax
 17400 0000DE2B E8BE1B0000              	call print_sexpr_if_not_void
 17401                                  
 17402 0000DE30 48B8-                   	mov rax, L_constants + 23
 17402 0000DE32 [1700000000000000] 
 17403 0000DE3A 50                      	push rax
 17404 0000DE3B 6A01                    	push 1
 17405 0000DE3D BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17406 0000DE42 E8961B0000              	call malloc
 17407 0000DE47 50                      	push rax
 17408 0000DE48 BF00000000              	mov rdi, 8 * 0	; new rib
 17409 0000DE4D E88B1B0000              	call malloc
 17410 0000DE52 50                      	push rax
 17411 0000DE53 BF08000000              	mov rdi, 8 * 1	; extended env
 17412 0000DE58 E8801B0000              	call malloc
 17413 0000DE5D 488B7D10                	mov rdi, ENV
 17414 0000DE61 BE00000000              	mov rsi, 0
 17415 0000DE66 BA01000000              	mov rdx, 1
 17416                                  .L_lambda_simple_env_loop_0127:	; ext_env[i + 1] <-- env[i]
 17417 0000DE6B 4883FE00                	cmp rsi, 0
 17418 0000DE6F 7410                    	je .L_lambda_simple_env_end_0127
 17419 0000DE71 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17420 0000DE75 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17421 0000DE79 48FFC6                  	inc rsi
 17422 0000DE7C 48FFC2                  	inc rdx
 17423 0000DE7F EBEA                    	jmp .L_lambda_simple_env_loop_0127
 17424                                  .L_lambda_simple_env_end_0127:
 17425 0000DE81 5B                      	pop rbx
 17426 0000DE82 BE00000000              	mov rsi, 0
 17427                                  .L_lambda_simple_params_loop_0127:	; copy params
 17428 0000DE87 4883FE00                	cmp rsi, 0
 17429 0000DE8B 740E                    	je .L_lambda_simple_params_end_0127
 17430 0000DE8D 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17431 0000DE92 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17432 0000DE96 48FFC6                  	inc rsi
 17433 0000DE99 EBEC                    	jmp .L_lambda_simple_params_loop_0127
 17434                                  .L_lambda_simple_params_end_0127:
 17435 0000DE9B 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17436 0000DE9E 4889C3                  	mov rbx, rax
 17437 0000DEA1 58                      	pop rax
 17438 0000DEA2 C60005                  	mov byte [rax], T_closure
 17439 0000DEA5 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17440 0000DEA9 48C74009[B6DE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0127
 17441 0000DEB1 E9DF030000              	jmp .L_lambda_simple_end_0127
 17442                                  .L_lambda_simple_code_0127:	; lambda-simple body
 17443 0000DEB6 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17444 0000DEBC 740B                    	je .L_lambda_simple_arity_check_ok_0127
 17445 0000DEBE FF742410                	push qword [rsp + 8 * 2]
 17446 0000DEC2 6A01                    	push 1
 17447 0000DEC4 E9CD1A0000              	jmp L_error_incorrect_arity_simple
 17448                                  .L_lambda_simple_arity_check_ok_0127:
 17449 0000DEC9 C8000000                	enter 0, 0
 17450 0000DECD 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17451 0000DED1 4889C2                  	mov rdx, rax
 17452 0000DED4 BF08000000              	mov rdi, 8
 17453 0000DED9 E8FF1A0000              	call malloc
 17454 0000DEDE 488910                  	mov qword[rax], rdx
 17455 0000DEE1 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17456 0000DEE5 48B8-                   	mov rax, sob_void
 17456 0000DEE7 [0000000000000000] 
 17457                                  
 17458 0000DEEF BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17459 0000DEF4 E8E41A0000              	call malloc
 17460 0000DEF9 50                      	push rax
 17461 0000DEFA BF08000000              	mov rdi, 8 * 1	; new rib
 17462 0000DEFF E8D91A0000              	call malloc
 17463 0000DF04 50                      	push rax
 17464 0000DF05 BF10000000              	mov rdi, 8 * 2	; extended env
 17465 0000DF0A E8CE1A0000              	call malloc
 17466 0000DF0F 488B7D10                	mov rdi, ENV
 17467 0000DF13 BE00000000              	mov rsi, 0
 17468 0000DF18 BA01000000              	mov rdx, 1
 17469                                  .L_lambda_simple_env_loop_0128:	; ext_env[i + 1] <-- env[i]
 17470 0000DF1D 4883FE01                	cmp rsi, 1
 17471 0000DF21 7410                    	je .L_lambda_simple_env_end_0128
 17472 0000DF23 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17473 0000DF27 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17474 0000DF2B 48FFC6                  	inc rsi
 17475 0000DF2E 48FFC2                  	inc rdx
 17476 0000DF31 EBEA                    	jmp .L_lambda_simple_env_loop_0128
 17477                                  .L_lambda_simple_env_end_0128:
 17478 0000DF33 5B                      	pop rbx
 17479 0000DF34 BE00000000              	mov rsi, 0
 17480                                  .L_lambda_simple_params_loop_0128:	; copy params
 17481 0000DF39 4883FE01                	cmp rsi, 1
 17482 0000DF3D 740E                    	je .L_lambda_simple_params_end_0128
 17483 0000DF3F 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17484 0000DF44 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17485 0000DF48 48FFC6                  	inc rsi
 17486 0000DF4B EBEC                    	jmp .L_lambda_simple_params_loop_0128
 17487                                  .L_lambda_simple_params_end_0128:
 17488 0000DF4D 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17489 0000DF50 4889C3                  	mov rbx, rax
 17490 0000DF53 58                      	pop rax
 17491 0000DF54 C60005                  	mov byte [rax], T_closure
 17492 0000DF57 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17493 0000DF5B 48C74009[68DF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0128
 17494 0000DF63 E92A020000              	jmp .L_lambda_simple_end_0128
 17495                                  .L_lambda_simple_code_0128:	; lambda-simple body
 17496 0000DF68 48837C241002            	cmp qword [rsp + 8 * 2], 2
 17497 0000DF6E 740B                    	je .L_lambda_simple_arity_check_ok_0128
 17498 0000DF70 FF742410                	push qword [rsp + 8 * 2]
 17499 0000DF74 6A02                    	push 2
 17500 0000DF76 E91B1A0000              	jmp L_error_incorrect_arity_simple
 17501                                  .L_lambda_simple_arity_check_ok_0128:
 17502 0000DF7B C8000000                	enter 0, 0
 17503 0000DF7F 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17504 0000DF83 50                      	push rax
 17505 0000DF84 6A01                    	push 1
 17506 0000DF86 488B0425[00000000]      	mov rax, qword [free_var_0]
 17507                                  	assert_closure(rax)
    42 0000DF8E 803805              <1>  cmp byte [%1], %2
    43 0000DF91 0F853A320000        <1>  jne L_error_incorrect_type
 17508 0000DF97 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17509 0000DF9A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17510 0000DF9D 483D[02000000]          	cmp rax, sob_boolean_false
 17511 0000DFA3 745D                              	je .L_if_else_00ae
 17512 0000DFA5 48B8-                             	mov rax, L_constants + 4
 17512 0000DFA7 [0400000000000000] 
 17513 0000DFAF 50                      	push rax
 17514 0000DFB0 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17515 0000DFB4 50                      	push rax
 17516 0000DFB5 6A02                    	push 2
 17517 0000DFB7 488B0425[A0010000]      	mov rax, qword [free_var_52]
 17518                                  	assert_closure(rax)
    42 0000DFBF 803805              <1>  cmp byte [%1], %2
    43 0000DFC2 0F8509320000        <1>  jne L_error_incorrect_type
 17519 0000DFC8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17520 0000DFCB FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17521 0000DFCE FF7500                  	push qword [rbp] ; same the old rbp
 17522 0000DFD1 BA05000000              	mov rdx, 2 + 3
 17523 0000DFD6 488B4D00                	mov rcx, [rbp]
 17524 0000DFDA 4889EF                  	mov rdi, rbp
 17525                                  .L_tc_recycle_frame_loop_0159:
 17526 0000DFDD 4883FA00                	cmp rdx, 0
 17527 0000DFE1 7413                    	je .L_tc_recycle_frame_done_0159
 17528 0000DFE3 4883E908                	sub rcx, 8
 17529 0000DFE7 4883EF08                	sub rdi, 8
 17530 0000DFEB 488B37                  	mov rsi, [rdi]
 17531 0000DFEE 488931                  	mov qword [rcx], rsi
 17532 0000DFF1 48FFCA                  	dec rdx
 17533 0000DFF4 EBE7                    	jmp .L_tc_recycle_frame_loop_0159
 17534                                  .L_tc_recycle_frame_done_0159:
 17535 0000DFF6 5D                      	pop rbp ; restore the old rbp
 17536 0000DFF7 4889CC                  	mov rsp, rcx
 17537 0000DFFA FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17538 0000DFFD E98C010000              	jmp .L_if_end_00ae
 17539                                            .L_if_else_00ae:
 17540 0000E002 48B8-                             	mov rax, L_constants + 128
 17540 0000E004 [8000000000000000] 
 17541 0000E00C 50                      	push rax
 17542 0000E00D 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17543 0000E011 50                      	push rax
 17544 0000E012 6A02                    	push 2
 17545 0000E014 488B0425[08030000]      	mov rax, qword [free_var_97]
 17546                                  	assert_closure(rax)
    42 0000E01C 803805              <1>  cmp byte [%1], %2
    43 0000E01F 0F85AC310000        <1>  jne L_error_incorrect_type
 17547 0000E025 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17548 0000E028 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17549 0000E02B 50                      	push rax
 17550 0000E02C 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17551 0000E030 50                      	push rax
 17552 0000E031 6A01                    	push 1
 17553 0000E033 488B0425[88000000]      	mov rax, qword [free_var_17]
 17554                                  	assert_closure(rax)
    42 0000E03B 803805              <1>  cmp byte [%1], %2
    43 0000E03E 0F858D310000        <1>  jne L_error_incorrect_type
 17555 0000E044 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17556 0000E047 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17557 0000E04A 50                      	push rax
 17558 0000E04B 6A02                    	push 2
 17559 0000E04D 488B4510                	mov rax, qword [rbp + 8 * 2]
 17560 0000E051 488B00                  	mov rax, qword [rax + 8 * 0]
 17561 0000E054 488B00                  	mov rax, qword [rax + 8 * 0]
 17562 0000E057 488B00                  	mov rax, qword [rax]
 17563                                  	assert_closure(rax)
    42 0000E05A 803805              <1>  cmp byte [%1], %2
    43 0000E05D 0F856E310000        <1>  jne L_error_incorrect_type
 17564 0000E063 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17565 0000E066 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17566 0000E069 50                      	push rax
 17567 0000E06A 6A01                    	push 1
 17568 0000E06C BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17569 0000E071 E867190000              	call malloc
 17570 0000E076 50                      	push rax
 17571 0000E077 BF10000000              	mov rdi, 8 * 2	; new rib
 17572 0000E07C E85C190000              	call malloc
 17573 0000E081 50                      	push rax
 17574 0000E082 BF18000000              	mov rdi, 8 * 3	; extended env
 17575 0000E087 E851190000              	call malloc
 17576 0000E08C 488B7D10                	mov rdi, ENV
 17577 0000E090 BE00000000              	mov rsi, 0
 17578 0000E095 BA01000000              	mov rdx, 1
 17579                                  .L_lambda_simple_env_loop_0129:	; ext_env[i + 1] <-- env[i]
 17580 0000E09A 4883FE02                	cmp rsi, 2
 17581 0000E09E 7410                    	je .L_lambda_simple_env_end_0129
 17582 0000E0A0 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17583 0000E0A4 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17584 0000E0A8 48FFC6                  	inc rsi
 17585 0000E0AB 48FFC2                  	inc rdx
 17586 0000E0AE EBEA                    	jmp .L_lambda_simple_env_loop_0129
 17587                                  .L_lambda_simple_env_end_0129:
 17588 0000E0B0 5B                      	pop rbx
 17589 0000E0B1 BE00000000              	mov rsi, 0
 17590                                  .L_lambda_simple_params_loop_0129:	; copy params
 17591 0000E0B6 4883FE02                	cmp rsi, 2
 17592 0000E0BA 740E                    	je .L_lambda_simple_params_end_0129
 17593 0000E0BC 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17594 0000E0C1 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17595 0000E0C5 48FFC6                  	inc rsi
 17596 0000E0C8 EBEC                    	jmp .L_lambda_simple_params_loop_0129
 17597                                  .L_lambda_simple_params_end_0129:
 17598 0000E0CA 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17599 0000E0CD 4889C3                  	mov rbx, rax
 17600 0000E0D0 58                      	pop rax
 17601 0000E0D1 C60005                  	mov byte [rax], T_closure
 17602 0000E0D4 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17603 0000E0D8 48C74009[E2E00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0129
 17604 0000E0E0 EB6E                    	jmp .L_lambda_simple_end_0129
 17605                                  .L_lambda_simple_code_0129:	; lambda-simple body
 17606 0000E0E2 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17607 0000E0E8 740B                    	je .L_lambda_simple_arity_check_ok_0129
 17608 0000E0EA FF742410                	push qword [rsp + 8 * 2]
 17609 0000E0EE 6A01                    	push 1
 17610 0000E0F0 E9A1180000              	jmp L_error_incorrect_arity_simple
 17611                                  .L_lambda_simple_arity_check_ok_0129:
 17612 0000E0F5 C8000000                	enter 0, 0
 17613 0000E0F9 488B4510                	mov rax, qword [rbp + 8 * 2]
 17614 0000E0FD 488B00                  	mov rax, qword [rax + 8 * 0]
 17615 0000E100 488B00                  	mov rax, qword [rax + 8 * 0]
 17616 0000E103 50                      	push rax
 17617 0000E104 6A01                    	push 1
 17618 0000E106 488B0425[80000000]      	mov rax, qword [free_var_16]
 17619                                  	assert_closure(rax)
    42 0000E10E 803805              <1>  cmp byte [%1], %2
    43 0000E111 0F85BA300000        <1>  jne L_error_incorrect_type
 17620 0000E117 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17621 0000E11A FF5009                  	call SOB_CLOSURE_CODE(rax)
 17622 0000E11D 50                      	push rax
 17623 0000E11E 488B4510                	mov rax, qword [rbp + 8 * 2]
 17624 0000E122 488B00                  	mov rax, qword [rax + 8 * 0]
 17625 0000E125 488B4008                	mov rax, qword [rax + 8 * 1]
 17626 0000E129 50                      	push rax
 17627 0000E12A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17628 0000E12E 50                      	push rax
 17629 0000E12F 6A03                    	push 3
 17630 0000E131 488B0425[90010000]      	mov rax, qword [free_var_50]
 17631                                  	assert_closure(rax)
    42 0000E139 803805              <1>  cmp byte [%1], %2
    43 0000E13C 0F858F300000        <1>  jne L_error_incorrect_type
 17632 0000E142 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17633 0000E145 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17634                                  
 17635 0000E148 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17636 0000E14C C9                      	leave
 17637 0000E14D C21800                  	ret 8 * (2 + 1)
 17638                                  .L_lambda_simple_end_0129:	; new closure is in rax
 17639                                  	assert_closure(rax)
    42 0000E150 803805              <1>  cmp byte [%1], %2
    43 0000E153 0F8578300000        <1>  jne L_error_incorrect_type
 17640 0000E159 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17641 0000E15C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17642 0000E15F FF7500                  	push qword [rbp] ; same the old rbp
 17643 0000E162 BA04000000              	mov rdx, 1 + 3
 17644 0000E167 488B4D00                	mov rcx, [rbp]
 17645 0000E16B 4889EF                  	mov rdi, rbp
 17646                                  .L_tc_recycle_frame_loop_015a:
 17647 0000E16E 4883FA00                	cmp rdx, 0
 17648 0000E172 7413                    	je .L_tc_recycle_frame_done_015a
 17649 0000E174 4883E908                	sub rcx, 8
 17650 0000E178 4883EF08                	sub rdi, 8
 17651 0000E17C 488B37                  	mov rsi, [rdi]
 17652 0000E17F 488931                  	mov qword [rcx], rsi
 17653 0000E182 48FFCA                  	dec rdx
 17654 0000E185 EBE7                    	jmp .L_tc_recycle_frame_loop_015a
 17655                                  .L_tc_recycle_frame_done_015a:
 17656 0000E187 5D                      	pop rbp ; restore the old rbp
 17657 0000E188 4889CC                  	mov rsp, rcx
 17658 0000E18B FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17659                                  .L_if_end_00ae:
 17660 0000E18E C9                      	leave
 17661 0000E18F C22000                  	ret 8 * (2 + 2)
 17662                                  .L_lambda_simple_end_0128:	; new closure is in rax
 17663 0000E192 50                      	push rax
 17664 0000E193 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17665 0000E197 8F00                    	pop qword [rax]
 17666 0000E199 48B8-                   	mov rax, sob_void
 17666 0000E19B [0000000000000000] 
 17667                                  
 17668 0000E1A3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17669 0000E1A8 E830180000              	call malloc
 17670 0000E1AD 50                      	push rax
 17671 0000E1AE BF08000000              	mov rdi, 8 * 1	; new rib
 17672 0000E1B3 E825180000              	call malloc
 17673 0000E1B8 50                      	push rax
 17674 0000E1B9 BF10000000              	mov rdi, 8 * 2	; extended env
 17675 0000E1BE E81A180000              	call malloc
 17676 0000E1C3 488B7D10                	mov rdi, ENV
 17677 0000E1C7 BE00000000              	mov rsi, 0
 17678 0000E1CC BA01000000              	mov rdx, 1
 17679                                  .L_lambda_simple_env_loop_012a:	; ext_env[i + 1] <-- env[i]
 17680 0000E1D1 4883FE01                	cmp rsi, 1
 17681 0000E1D5 7410                    	je .L_lambda_simple_env_end_012a
 17682 0000E1D7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17683 0000E1DB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17684 0000E1DF 48FFC6                  	inc rsi
 17685 0000E1E2 48FFC2                  	inc rdx
 17686 0000E1E5 EBEA                    	jmp .L_lambda_simple_env_loop_012a
 17687                                  .L_lambda_simple_env_end_012a:
 17688 0000E1E7 5B                      	pop rbx
 17689 0000E1E8 BE00000000              	mov rsi, 0
 17690                                  .L_lambda_simple_params_loop_012a:	; copy params
 17691 0000E1ED 4883FE01                	cmp rsi, 1
 17692 0000E1F1 740E                    	je .L_lambda_simple_params_end_012a
 17693 0000E1F3 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17694 0000E1F8 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17695 0000E1FC 48FFC6                  	inc rsi
 17696 0000E1FF EBEC                    	jmp .L_lambda_simple_params_loop_012a
 17697                                  .L_lambda_simple_params_end_012a:
 17698 0000E201 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17699 0000E204 4889C3                  	mov rbx, rax
 17700 0000E207 58                      	pop rax
 17701 0000E208 C60005                  	mov byte [rax], T_closure
 17702 0000E20B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17703 0000E20F 48C74009[19E20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012a
 17704 0000E217 EB78                    	jmp .L_lambda_simple_end_012a
 17705                                  .L_lambda_simple_code_012a:	; lambda-simple body
 17706 0000E219 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17707 0000E21F 740B                    	je .L_lambda_simple_arity_check_ok_012a
 17708 0000E221 FF742410                	push qword [rsp + 8 * 2]
 17709 0000E225 6A01                    	push 1
 17710 0000E227 E96A170000              	jmp L_error_incorrect_arity_simple
 17711                                  .L_lambda_simple_arity_check_ok_012a:
 17712 0000E22C C8000000                	enter 0, 0
 17713 0000E230 48B8-                   	mov rax, L_constants + 32
 17713 0000E232 [2000000000000000] 
 17714 0000E23A 50                      	push rax
 17715 0000E23B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17716 0000E23F 50                      	push rax
 17717 0000E240 6A02                    	push 2
 17718 0000E242 488B4510                	mov rax, qword [rbp + 8 * 2]
 17719 0000E246 488B00                  	mov rax, qword [rax + 8 * 0]
 17720 0000E249 488B00                  	mov rax, qword [rax + 8 * 0]
 17721 0000E24C 488B00                  	mov rax, qword [rax]
 17722                                  	assert_closure(rax)
    42 0000E24F 803805              <1>  cmp byte [%1], %2
    43 0000E252 0F85792F0000        <1>  jne L_error_incorrect_type
 17723 0000E258 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17724 0000E25B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17725 0000E25E FF7500                  	push qword [rbp] ; same the old rbp
 17726 0000E261 BA05000000              	mov rdx, 2 + 3
 17727 0000E266 488B4D00                	mov rcx, [rbp]
 17728 0000E26A 4889EF                  	mov rdi, rbp
 17729                                  .L_tc_recycle_frame_loop_015b:
 17730 0000E26D 4883FA00                	cmp rdx, 0
 17731 0000E271 7413                    	je .L_tc_recycle_frame_done_015b
 17732 0000E273 4883E908                	sub rcx, 8
 17733 0000E277 4883EF08                	sub rdi, 8
 17734 0000E27B 488B37                  	mov rsi, [rdi]
 17735 0000E27E 488931                  	mov qword [rcx], rsi
 17736 0000E281 48FFCA                  	dec rdx
 17737 0000E284 EBE7                    	jmp .L_tc_recycle_frame_loop_015b
 17738                                  .L_tc_recycle_frame_done_015b:
 17739 0000E286 5D                      	pop rbp ; restore the old rbp
 17740 0000E287 4889CC                  	mov rsp, rcx
 17741 0000E28A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17742 0000E28D C9                      	leave
 17743 0000E28E C21800                  	ret 8 * (2 + 1)
 17744                                  .L_lambda_simple_end_012a:	; new closure is in rax
 17745 0000E291 C9                      	leave
 17746 0000E292 C21800                  	ret 8 * (2 + 1)
 17747                                  .L_lambda_simple_end_0127:	; new closure is in rax
 17748                                  	assert_closure(rax)
    42 0000E295 803805              <1>  cmp byte [%1], %2
    43 0000E298 0F85332F0000        <1>  jne L_error_incorrect_type
 17749 0000E29E FF7001                  	push SOB_CLOSURE_ENV(rax)
 17750 0000E2A1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 17751 0000E2A4 48890425[D0030000]      	mov qword [free_var_122], rax
 17752 0000E2AC 48B8-                   	mov rax, sob_void
 17752 0000E2AE [0000000000000000] 
 17753                                  
 17754 0000E2B6 4889C7                  	mov rdi, rax
 17755 0000E2B9 E830170000              	call print_sexpr_if_not_void
 17756                                  
 17757 0000E2BE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17758 0000E2C3 E815170000              	call malloc
 17759 0000E2C8 50                      	push rax
 17760 0000E2C9 BF00000000              	mov rdi, 8 * 0	; new rib
 17761 0000E2CE E80A170000              	call malloc
 17762 0000E2D3 50                      	push rax
 17763 0000E2D4 BF08000000              	mov rdi, 8 * 1	; extended env
 17764 0000E2D9 E8FF160000              	call malloc
 17765 0000E2DE 488B7D10                	mov rdi, ENV
 17766 0000E2E2 BE00000000              	mov rsi, 0
 17767 0000E2E7 BA01000000              	mov rdx, 1
 17768                                  .L_lambda_opt_env_loop_002e:	; ext_env[i + 1] <-- env[i]
 17769 0000E2EC 4883FE00                	cmp rsi, 0
 17770 0000E2F0 7410                    	je .L_lambda_opt_env_end_002e
 17771 0000E2F2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17772 0000E2F6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17773 0000E2FA 48FFC6                  	inc rsi
 17774 0000E2FD 48FFC2                  	inc rdx
 17775 0000E300 EBEA                    	jmp .L_lambda_opt_env_loop_002e
 17776                                  .L_lambda_opt_env_end_002e:
 17777 0000E302 5B                      	pop rbx
 17778 0000E303 BE00000000              	mov rsi, 0
 17779                                  .L_lambda_opt_params_loop_002e:	; copy params
 17780 0000E308 4883FE00                	cmp rsi, 0
 17781 0000E30C 740E                    	je .L_lambda_opt_params_end_002e
 17782 0000E30E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17783 0000E313 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17784 0000E317 48FFC6                  	inc rsi
 17785 0000E31A EBEC                    	jmp .L_lambda_opt_params_loop_002e
 17786                                  .L_lambda_opt_params_end_002e:
 17787 0000E31C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17788 0000E31F 4889C3                  	mov rbx, rax
 17789 0000E322 58                      	pop rax
 17790 0000E323 C60005                  	mov byte [rax], T_closure
 17791 0000E326 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17792 0000E32A 48C74009[37E30000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_opt_code_002e
 17793 0000E332 E927010000              	jmp .L_lambda_opt_end_002e
 17794                                  .L_lambda_opt_code_002e:	; lambda-opt body
 17795 0000E337 48837C241000            	cmp qword [rsp + 8 * 2], 0
 17796 0000E33D 740D                    	je .L_lambda_opt_arity_check_exact_002e
 17797 0000E33F 7F43                    	jg .L_lambda_opt_arity_check_more_002e
 17798 0000E341 FF742410                	push qword [rsp + 8 * 2]
 17799 0000E345 6A00                    	push 0
 17800 0000E347 E95E160000              	jmp L_error_incorrect_arity_opt
 17801                                  .L_lambda_opt_arity_check_exact_002e:
 17802 0000E34C 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 17803 0000E355 BA03000000              	mov rdx, 3
 17804 0000E35A FF3424                  	push qword [rsp]
 17805 0000E35D BE01000000              	mov rsi, 1
 17806                                  .L_lambda_opt_stack_shrink_loop_0088:
 17807 0000E362 4839D6                  	cmp rsi, rdx
 17808 0000E365 7411                    	je .L_lambda_opt_stack_shrink_loop_exit_0088
 17809 0000E367 488D5CF408              	lea rbx, [rsp + 8 + rsi * 8]
 17810 0000E36C 488B0B                  	mov rcx, [rbx]
 17811 0000E36F 48894BF8                	mov qword [rbx - 8], rcx
 17812 0000E373 48FFC6                  	inc rsi
 17813 0000E376 EBEA                    	jmp .L_lambda_opt_stack_shrink_loop_0088
 17814                                  .L_lambda_opt_stack_shrink_loop_exit_0088:
 17815 0000E378 48C703[01000000]        	mov qword [rbx], sob_nil
 17816 0000E37F E985000000              	jmp .L_lambda_opt_stack_adjusted_002e
 17817                                  .L_lambda_opt_arity_check_more_002e:
 17818 0000E384 488B542410              	mov rdx, qword [rsp + 8 * 2]
 17819 0000E389 4883EA00                	sub rdx, 0
 17820 0000E38D 48C744241001000000      	mov qword [rsp + 8 * 2], 1
 17821 0000E396 BE00000000              	mov rsi, 0
 17822 0000E39B 488D5CD410              	lea rbx, [rsp + 2 * 8 + 0 * 8 + rdx * 8]
 17823 0000E3A0 48B9-                   	mov rcx, sob_nil
 17823 0000E3A2 [0100000000000000] 
 17824                                  .L_lambda_opt_stack_shrink_loop_0089:
 17825 0000E3AA 4839D6                  	cmp rsi, rdx
 17826 0000E3AD 7427                    je .L_lambda_opt_stack_shrink_loop_exit_0089
 17827 0000E3AF BF11000000              	mov rdi, 17 ; 1+8+8
 17828 0000E3B4 E824160000              	call malloc
 17829 0000E3B9 48894809                	mov SOB_PAIR_CDR(rax), rcx
 17830 0000E3BD 48F7DE                  	neg rsi
 17831 0000E3C0 488B0CF3                	mov rcx, qword [rbx + rsi * 8]
 17832 0000E3C4 48F7DE                  	neg rsi
 17833 0000E3C7 48894801                	mov SOB_PAIR_CAR(rax), rcx
 17834 0000E3CB C60021                  	mov byte [rax], T_pair
 17835 0000E3CE 4889C1                  	mov rcx, rax
 17836 0000E3D1 48FFC6                  	inc rsi
 17837 0000E3D4 EBD4                    	jmp .L_lambda_opt_stack_shrink_loop_0089
 17838                                  .L_lambda_opt_stack_shrink_loop_exit_0089:
 17839 0000E3D6 48890B                  	mov qword [rbx], rcx
 17840 0000E3D9 4883EB08                	sub rbx, 8
 17841 0000E3DD 4889E7                  	mov rdi, rsp
 17842 0000E3E0 4883C710                	add rdi, 16
 17843 0000E3E4 BE03000000              	mov rsi, 3
 17844                                  .L_lambda_opt_stack_shrink_loop_008a:
 17845 0000E3E9 4883FE00                	cmp rsi,0
 17846 0000E3ED 7413                    	je .L_lambda_opt_stack_shrink_loop_exit_008a
 17847 0000E3EF 488B0F                  	mov rcx, qword [rdi]
 17848 0000E3F2 48890B                  	mov [rbx], rcx
 17849 0000E3F5 48FFCE                  	dec rsi
 17850 0000E3F8 4883EB08                	sub rbx, 8
 17851 0000E3FC 4883EF08                	sub rdi, 8
 17852 0000E400 EBE7                    	jmp .L_lambda_opt_stack_shrink_loop_008a
 17853                                  .L_lambda_opt_stack_shrink_loop_exit_008a:
 17854 0000E402 4883C308                	add rbx, 8
 17855 0000E406 4889DC                  	mov rsp, rbx
 17856                                  .L_lambda_opt_stack_adjusted_002e:
 17857 0000E409 C8000000                	enter 0, 0
 17858 0000E40D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17859 0000E411 50                      	push rax
 17860 0000E412 6A01                    	push 1
 17861 0000E414 488B0425[38040000]      	mov rax, qword [free_var_135]
 17862                                  	assert_closure(rax)
    42 0000E41C 803805              <1>  cmp byte [%1], %2
    43 0000E41F 0F85AC2D0000        <1>  jne L_error_incorrect_type
 17863 0000E425 FF7001                  	push SOB_CLOSURE_ENV(rax)
 17864 0000E428 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 17865 0000E42B FF7500                  	push qword [rbp] ; same the old rbp
 17866 0000E42E BA04000000              	mov rdx, 1 + 3
 17867 0000E433 488B4D00                	mov rcx, [rbp]
 17868 0000E437 4889EF                  	mov rdi, rbp
 17869                                  .L_tc_recycle_frame_loop_015c:
 17870 0000E43A 4883FA00                	cmp rdx, 0
 17871 0000E43E 7413                    	je .L_tc_recycle_frame_done_015c
 17872 0000E440 4883E908                	sub rcx, 8
 17873 0000E444 4883EF08                	sub rdi, 8
 17874 0000E448 488B37                  	mov rsi, [rdi]
 17875 0000E44B 488931                  	mov qword [rcx], rsi
 17876 0000E44E 48FFCA                  	dec rdx
 17877 0000E451 EBE7                    	jmp .L_tc_recycle_frame_loop_015c
 17878                                  .L_tc_recycle_frame_done_015c:
 17879 0000E453 5D                      	pop rbp ; restore the old rbp
 17880 0000E454 4889CC                  	mov rsp, rcx
 17881 0000E457 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 17882 0000E45A C9                      	leave
 17883 0000E45B C21800                  	ret 8 * (2 + 1)
 17884                                  .L_lambda_opt_end_002e:	; new closure is in rax
 17885 0000E45E 48890425[40040000]      	mov qword [free_var_136], rax
 17886 0000E466 48B8-                   	mov rax, sob_void
 17886 0000E468 [0000000000000000] 
 17887                                  
 17888 0000E470 4889C7                  	mov rdi, rax
 17889 0000E473 E876150000              	call print_sexpr_if_not_void
 17890                                  
 17891 0000E478 48B8-                   	mov rax, L_constants + 23
 17891 0000E47A [1700000000000000] 
 17892 0000E482 50                      	push rax
 17893 0000E483 6A01                    	push 1
 17894 0000E485 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17895 0000E48A E84E150000              	call malloc
 17896 0000E48F 50                      	push rax
 17897 0000E490 BF00000000              	mov rdi, 8 * 0	; new rib
 17898 0000E495 E843150000              	call malloc
 17899 0000E49A 50                      	push rax
 17900 0000E49B BF08000000              	mov rdi, 8 * 1	; extended env
 17901 0000E4A0 E838150000              	call malloc
 17902 0000E4A5 488B7D10                	mov rdi, ENV
 17903 0000E4A9 BE00000000              	mov rsi, 0
 17904 0000E4AE BA01000000              	mov rdx, 1
 17905                                  .L_lambda_simple_env_loop_012b:	; ext_env[i + 1] <-- env[i]
 17906 0000E4B3 4883FE00                	cmp rsi, 0
 17907 0000E4B7 7410                    	je .L_lambda_simple_env_end_012b
 17908 0000E4B9 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17909 0000E4BD 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17910 0000E4C1 48FFC6                  	inc rsi
 17911 0000E4C4 48FFC2                  	inc rdx
 17912 0000E4C7 EBEA                    	jmp .L_lambda_simple_env_loop_012b
 17913                                  .L_lambda_simple_env_end_012b:
 17914 0000E4C9 5B                      	pop rbx
 17915 0000E4CA BE00000000              	mov rsi, 0
 17916                                  .L_lambda_simple_params_loop_012b:	; copy params
 17917 0000E4CF 4883FE00                	cmp rsi, 0
 17918 0000E4D3 740E                    	je .L_lambda_simple_params_end_012b
 17919 0000E4D5 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17920 0000E4DA 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17921 0000E4DE 48FFC6                  	inc rsi
 17922 0000E4E1 EBEC                    	jmp .L_lambda_simple_params_loop_012b
 17923                                  .L_lambda_simple_params_end_012b:
 17924 0000E4E3 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17925 0000E4E6 4889C3                  	mov rbx, rax
 17926 0000E4E9 58                      	pop rax
 17927 0000E4EA C60005                  	mov byte [rax], T_closure
 17928 0000E4ED 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17929 0000E4F1 48C74009[FEE40000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012b
 17930 0000E4F9 E9EC020000              	jmp .L_lambda_simple_end_012b
 17931                                  .L_lambda_simple_code_012b:	; lambda-simple body
 17932 0000E4FE 48837C241001            	cmp qword [rsp + 8 * 2], 1
 17933 0000E504 740B                    	je .L_lambda_simple_arity_check_ok_012b
 17934 0000E506 FF742410                	push qword [rsp + 8 * 2]
 17935 0000E50A 6A01                    	push 1
 17936 0000E50C E985140000              	jmp L_error_incorrect_arity_simple
 17937                                  .L_lambda_simple_arity_check_ok_012b:
 17938 0000E511 C8000000                	enter 0, 0
 17939 0000E515 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 17940 0000E519 4889C2                  	mov rdx, rax
 17941 0000E51C BF08000000              	mov rdi, 8
 17942 0000E521 E8B7140000              	call malloc
 17943 0000E526 488910                  	mov qword[rax], rdx
 17944 0000E529 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 17945 0000E52D 48B8-                   	mov rax, sob_void
 17945 0000E52F [0000000000000000] 
 17946                                  
 17947 0000E537 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 17948 0000E53C E89C140000              	call malloc
 17949 0000E541 50                      	push rax
 17950 0000E542 BF08000000              	mov rdi, 8 * 1	; new rib
 17951 0000E547 E891140000              	call malloc
 17952 0000E54C 50                      	push rax
 17953 0000E54D BF10000000              	mov rdi, 8 * 2	; extended env
 17954 0000E552 E886140000              	call malloc
 17955 0000E557 488B7D10                	mov rdi, ENV
 17956 0000E55B BE00000000              	mov rsi, 0
 17957 0000E560 BA01000000              	mov rdx, 1
 17958                                  .L_lambda_simple_env_loop_012c:	; ext_env[i + 1] <-- env[i]
 17959 0000E565 4883FE01                	cmp rsi, 1
 17960 0000E569 7410                    	je .L_lambda_simple_env_end_012c
 17961 0000E56B 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 17962 0000E56F 48890CD0                	mov qword [rax + 8 * rdx], rcx
 17963 0000E573 48FFC6                  	inc rsi
 17964 0000E576 48FFC2                  	inc rdx
 17965 0000E579 EBEA                    	jmp .L_lambda_simple_env_loop_012c
 17966                                  .L_lambda_simple_env_end_012c:
 17967 0000E57B 5B                      	pop rbx
 17968 0000E57C BE00000000              	mov rsi, 0
 17969                                  .L_lambda_simple_params_loop_012c:	; copy params
 17970 0000E581 4883FE01                	cmp rsi, 1
 17971 0000E585 740E                    	je .L_lambda_simple_params_end_012c
 17972 0000E587 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 17973 0000E58C 488914F3                	mov qword [rbx + 8 * rsi], rdx
 17974 0000E590 48FFC6                  	inc rsi
 17975 0000E593 EBEC                    	jmp .L_lambda_simple_params_loop_012c
 17976                                  .L_lambda_simple_params_end_012c:
 17977 0000E595 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 17978 0000E598 4889C3                  	mov rbx, rax
 17979 0000E59B 58                      	pop rax
 17980 0000E59C C60005                  	mov byte [rax], T_closure
 17981 0000E59F 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 17982 0000E5A3 48C74009[B0E50000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012c
 17983 0000E5AB E915010000              	jmp .L_lambda_simple_end_012c
 17984                                  .L_lambda_simple_code_012c:	; lambda-simple body
 17985 0000E5B0 48837C241003            	cmp qword [rsp + 8 * 2], 3
 17986 0000E5B6 740B                    	je .L_lambda_simple_arity_check_ok_012c
 17987 0000E5B8 FF742410                	push qword [rsp + 8 * 2]
 17988 0000E5BC 6A03                    	push 3
 17989 0000E5BE E9D3130000              	jmp L_error_incorrect_arity_simple
 17990                                  .L_lambda_simple_arity_check_ok_012c:
 17991 0000E5C3 C8000000                	enter 0, 0
 17992 0000E5C7 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 17993 0000E5CB 50                      	push rax
 17994 0000E5CC 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 17995 0000E5D0 50                      	push rax
 17996 0000E5D1 6A02                    	push 2
 17997 0000E5D3 488B0425[30030000]      	mov rax, qword [free_var_102]
 17998                                  	assert_closure(rax)
    42 0000E5DB 803805              <1>  cmp byte [%1], %2
    43 0000E5DE 0F85ED2B0000        <1>  jne L_error_incorrect_type
 17999 0000E5E4 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18000 0000E5E7 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18001 0000E5EA 483D[02000000]          	cmp rax, sob_boolean_false
 18002 0000E5F0 0F84C1000000                      	je .L_if_else_00af
 18003 0000E5F6 488B4530                          	mov rax, qword [rbp + 8 * (4 + 2)]
 18004 0000E5FA 50                      	push rax
 18005 0000E5FB 48B8-                   	mov rax, L_constants + 128
 18005 0000E5FD [8000000000000000] 
 18006 0000E605 50                      	push rax
 18007 0000E606 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18008 0000E60A 50                      	push rax
 18009 0000E60B 6A02                    	push 2
 18010 0000E60D 488B0425[08030000]      	mov rax, qword [free_var_97]
 18011                                  	assert_closure(rax)
    42 0000E615 803805              <1>  cmp byte [%1], %2
    43 0000E618 0F85B32B0000        <1>  jne L_error_incorrect_type
 18012 0000E61E FF7001                  	push SOB_CLOSURE_ENV(rax)
 18013 0000E621 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18014 0000E624 50                      	push rax
 18015 0000E625 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18016 0000E629 50                      	push rax
 18017 0000E62A 6A03                    	push 3
 18018 0000E62C 488B4510                	mov rax, qword [rbp + 8 * 2]
 18019 0000E630 488B00                  	mov rax, qword [rax + 8 * 0]
 18020 0000E633 488B00                  	mov rax, qword [rax + 8 * 0]
 18021 0000E636 488B00                  	mov rax, qword [rax]
 18022                                  	assert_closure(rax)
    42 0000E639 803805              <1>  cmp byte [%1], %2
    43 0000E63C 0F858F2B0000        <1>  jne L_error_incorrect_type
 18023 0000E642 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18024 0000E645 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18025 0000E648 50                      	push rax
 18026 0000E649 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18027 0000E64D 50                      	push rax
 18028 0000E64E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18029 0000E652 50                      	push rax
 18030 0000E653 6A02                    	push 2
 18031 0000E655 488B0425[78010000]      	mov rax, qword [free_var_47]
 18032                                  	assert_closure(rax)
    42 0000E65D 803805              <1>  cmp byte [%1], %2
    43 0000E660 0F856B2B0000        <1>  jne L_error_incorrect_type
 18033 0000E666 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18034 0000E669 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18035 0000E66C 50                      	push rax
 18036 0000E66D 6A02                    	push 2
 18037 0000E66F 488B0425[68000000]      	mov rax, qword [free_var_13]
 18038                                  	assert_closure(rax)
    42 0000E677 803805              <1>  cmp byte [%1], %2
    43 0000E67A 0F85512B0000        <1>  jne L_error_incorrect_type
 18039 0000E680 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18040 0000E683 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18041 0000E686 FF7500                  	push qword [rbp] ; same the old rbp
 18042 0000E689 BA05000000              	mov rdx, 2 + 3
 18043 0000E68E 488B4D00                	mov rcx, [rbp]
 18044 0000E692 4889EF                  	mov rdi, rbp
 18045                                  .L_tc_recycle_frame_loop_015d:
 18046 0000E695 4883FA00                	cmp rdx, 0
 18047 0000E699 7413                    	je .L_tc_recycle_frame_done_015d
 18048 0000E69B 4883E908                	sub rcx, 8
 18049 0000E69F 4883EF08                	sub rdi, 8
 18050 0000E6A3 488B37                  	mov rsi, [rdi]
 18051 0000E6A6 488931                  	mov qword [rcx], rsi
 18052 0000E6A9 48FFCA                  	dec rdx
 18053 0000E6AC EBE7                    	jmp .L_tc_recycle_frame_loop_015d
 18054                                  .L_tc_recycle_frame_done_015d:
 18055 0000E6AE 5D                      	pop rbp ; restore the old rbp
 18056 0000E6AF 4889CC                  	mov rsp, rcx
 18057 0000E6B2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18058 0000E6B5 EB0A                    	jmp .L_if_end_00af
 18059                                            .L_if_else_00af:
 18060 0000E6B7 48B8-                             	mov rax, L_constants + 1
 18060 0000E6B9 [0100000000000000] 
 18061                                  .L_if_end_00af:
 18062 0000E6C1 C9                      	leave
 18063 0000E6C2 C22800                  	ret 8 * (2 + 3)
 18064                                  .L_lambda_simple_end_012c:	; new closure is in rax
 18065 0000E6C5 50                      	push rax
 18066 0000E6C6 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18067 0000E6CA 8F00                    	pop qword [rax]
 18068 0000E6CC 48B8-                   	mov rax, sob_void
 18068 0000E6CE [0000000000000000] 
 18069                                  
 18070 0000E6D6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18071 0000E6DB E8FD120000              	call malloc
 18072 0000E6E0 50                      	push rax
 18073 0000E6E1 BF08000000              	mov rdi, 8 * 1	; new rib
 18074 0000E6E6 E8F2120000              	call malloc
 18075 0000E6EB 50                      	push rax
 18076 0000E6EC BF10000000              	mov rdi, 8 * 2	; extended env
 18077 0000E6F1 E8E7120000              	call malloc
 18078 0000E6F6 488B7D10                	mov rdi, ENV
 18079 0000E6FA BE00000000              	mov rsi, 0
 18080 0000E6FF BA01000000              	mov rdx, 1
 18081                                  .L_lambda_simple_env_loop_012d:	; ext_env[i + 1] <-- env[i]
 18082 0000E704 4883FE01                	cmp rsi, 1
 18083 0000E708 7410                    	je .L_lambda_simple_env_end_012d
 18084 0000E70A 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18085 0000E70E 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18086 0000E712 48FFC6                  	inc rsi
 18087 0000E715 48FFC2                  	inc rdx
 18088 0000E718 EBEA                    	jmp .L_lambda_simple_env_loop_012d
 18089                                  .L_lambda_simple_env_end_012d:
 18090 0000E71A 5B                      	pop rbx
 18091 0000E71B BE00000000              	mov rsi, 0
 18092                                  .L_lambda_simple_params_loop_012d:	; copy params
 18093 0000E720 4883FE01                	cmp rsi, 1
 18094 0000E724 740E                    	je .L_lambda_simple_params_end_012d
 18095 0000E726 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18096 0000E72B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18097 0000E72F 48FFC6                  	inc rsi
 18098 0000E732 EBEC                    	jmp .L_lambda_simple_params_loop_012d
 18099                                  .L_lambda_simple_params_end_012d:
 18100 0000E734 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18101 0000E737 4889C3                  	mov rbx, rax
 18102 0000E73A 58                      	pop rax
 18103 0000E73B C60005                  	mov byte [rax], T_closure
 18104 0000E73E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18105 0000E742 48C74009[4FE70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012d
 18106 0000E74A E997000000              	jmp .L_lambda_simple_end_012d
 18107                                  .L_lambda_simple_code_012d:	; lambda-simple body
 18108 0000E74F 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18109 0000E755 740B                    	je .L_lambda_simple_arity_check_ok_012d
 18110 0000E757 FF742410                	push qword [rsp + 8 * 2]
 18111 0000E75B 6A01                    	push 1
 18112 0000E75D E934120000              	jmp L_error_incorrect_arity_simple
 18113                                  .L_lambda_simple_arity_check_ok_012d:
 18114 0000E762 C8000000                	enter 0, 0
 18115 0000E766 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18116 0000E76A 50                      	push rax
 18117 0000E76B 6A01                    	push 1
 18118 0000E76D 488B0425[90000000]      	mov rax, qword [free_var_18]
 18119                                  	assert_closure(rax)
    42 0000E775 803805              <1>  cmp byte [%1], %2
    43 0000E778 0F85532A0000        <1>  jne L_error_incorrect_type
 18120 0000E77E FF7001                  	push SOB_CLOSURE_ENV(rax)
 18121 0000E781 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18122 0000E784 50                      	push rax
 18123 0000E785 48B8-                   	mov rax, L_constants + 32
 18123 0000E787 [2000000000000000] 
 18124 0000E78F 50                      	push rax
 18125 0000E790 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18126 0000E794 50                      	push rax
 18127 0000E795 6A03                    	push 3
 18128 0000E797 488B4510                	mov rax, qword [rbp + 8 * 2]
 18129 0000E79B 488B00                  	mov rax, qword [rax + 8 * 0]
 18130 0000E79E 488B00                  	mov rax, qword [rax + 8 * 0]
 18131 0000E7A1 488B00                  	mov rax, qword [rax]
 18132                                  	assert_closure(rax)
    42 0000E7A4 803805              <1>  cmp byte [%1], %2
    43 0000E7A7 0F85242A0000        <1>  jne L_error_incorrect_type
 18133 0000E7AD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18134 0000E7B0 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18135 0000E7B3 FF7500                  	push qword [rbp] ; same the old rbp
 18136 0000E7B6 BA06000000              	mov rdx, 3 + 3
 18137 0000E7BB 488B4D00                	mov rcx, [rbp]
 18138 0000E7BF 4889EF                  	mov rdi, rbp
 18139                                  .L_tc_recycle_frame_loop_015e:
 18140 0000E7C2 4883FA00                	cmp rdx, 0
 18141 0000E7C6 7413                    	je .L_tc_recycle_frame_done_015e
 18142 0000E7C8 4883E908                	sub rcx, 8
 18143 0000E7CC 4883EF08                	sub rdi, 8
 18144 0000E7D0 488B37                  	mov rsi, [rdi]
 18145 0000E7D3 488931                  	mov qword [rcx], rsi
 18146 0000E7D6 48FFCA                  	dec rdx
 18147 0000E7D9 EBE7                    	jmp .L_tc_recycle_frame_loop_015e
 18148                                  .L_tc_recycle_frame_done_015e:
 18149 0000E7DB 5D                      	pop rbp ; restore the old rbp
 18150 0000E7DC 4889CC                  	mov rsp, rcx
 18151 0000E7DF FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18152 0000E7E2 C9                      	leave
 18153 0000E7E3 C21800                  	ret 8 * (2 + 1)
 18154                                  .L_lambda_simple_end_012d:	; new closure is in rax
 18155 0000E7E6 C9                      	leave
 18156 0000E7E7 C21800                  	ret 8 * (2 + 1)
 18157                                  .L_lambda_simple_end_012b:	; new closure is in rax
 18158                                  	assert_closure(rax)
    42 0000E7EA 803805              <1>  cmp byte [%1], %2
    43 0000E7ED 0F85DE290000        <1>  jne L_error_incorrect_type
 18159 0000E7F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18160 0000E7F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18161 0000E7F9 48890425[D8030000]      	mov qword [free_var_123], rax
 18162 0000E801 48B8-                   	mov rax, sob_void
 18162 0000E803 [0000000000000000] 
 18163                                  
 18164 0000E80B 4889C7                  	mov rdi, rax
 18165 0000E80E E8DB110000              	call print_sexpr_if_not_void
 18166                                  
 18167 0000E813 48B8-                   	mov rax, L_constants + 23
 18167 0000E815 [1700000000000000] 
 18168 0000E81D 50                      	push rax
 18169 0000E81E 6A01                    	push 1
 18170 0000E820 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18171 0000E825 E8B3110000              	call malloc
 18172 0000E82A 50                      	push rax
 18173 0000E82B BF00000000              	mov rdi, 8 * 0	; new rib
 18174 0000E830 E8A8110000              	call malloc
 18175 0000E835 50                      	push rax
 18176 0000E836 BF08000000              	mov rdi, 8 * 1	; extended env
 18177 0000E83B E89D110000              	call malloc
 18178 0000E840 488B7D10                	mov rdi, ENV
 18179 0000E844 BE00000000              	mov rsi, 0
 18180 0000E849 BA01000000              	mov rdx, 1
 18181                                  .L_lambda_simple_env_loop_012e:	; ext_env[i + 1] <-- env[i]
 18182 0000E84E 4883FE00                	cmp rsi, 0
 18183 0000E852 7410                    	je .L_lambda_simple_env_end_012e
 18184 0000E854 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18185 0000E858 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18186 0000E85C 48FFC6                  	inc rsi
 18187 0000E85F 48FFC2                  	inc rdx
 18188 0000E862 EBEA                    	jmp .L_lambda_simple_env_loop_012e
 18189                                  .L_lambda_simple_env_end_012e:
 18190 0000E864 5B                      	pop rbx
 18191 0000E865 BE00000000              	mov rsi, 0
 18192                                  .L_lambda_simple_params_loop_012e:	; copy params
 18193 0000E86A 4883FE00                	cmp rsi, 0
 18194 0000E86E 740E                    	je .L_lambda_simple_params_end_012e
 18195 0000E870 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18196 0000E875 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18197 0000E879 48FFC6                  	inc rsi
 18198 0000E87C EBEC                    	jmp .L_lambda_simple_params_loop_012e
 18199                                  .L_lambda_simple_params_end_012e:
 18200 0000E87E 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18201 0000E881 4889C3                  	mov rbx, rax
 18202 0000E884 58                      	pop rax
 18203 0000E885 C60005                  	mov byte [rax], T_closure
 18204 0000E888 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18205 0000E88C 48C74009[99E80000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012e
 18206 0000E894 E9EC020000              	jmp .L_lambda_simple_end_012e
 18207                                  .L_lambda_simple_code_012e:	; lambda-simple body
 18208 0000E899 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18209 0000E89F 740B                    	je .L_lambda_simple_arity_check_ok_012e
 18210 0000E8A1 FF742410                	push qword [rsp + 8 * 2]
 18211 0000E8A5 6A01                    	push 1
 18212 0000E8A7 E9EA100000              	jmp L_error_incorrect_arity_simple
 18213                                  .L_lambda_simple_arity_check_ok_012e:
 18214 0000E8AC C8000000                	enter 0, 0
 18215 0000E8B0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18216 0000E8B4 4889C2                  	mov rdx, rax
 18217 0000E8B7 BF08000000              	mov rdi, 8
 18218 0000E8BC E81C110000              	call malloc
 18219 0000E8C1 488910                  	mov qword[rax], rdx
 18220 0000E8C4 48894520                	mov qword [rbp + 8 * (4 + 0)], rax
 18221 0000E8C8 48B8-                   	mov rax, sob_void
 18221 0000E8CA [0000000000000000] 
 18222                                  
 18223 0000E8D2 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18224 0000E8D7 E801110000              	call malloc
 18225 0000E8DC 50                      	push rax
 18226 0000E8DD BF08000000              	mov rdi, 8 * 1	; new rib
 18227 0000E8E2 E8F6100000              	call malloc
 18228 0000E8E7 50                      	push rax
 18229 0000E8E8 BF10000000              	mov rdi, 8 * 2	; extended env
 18230 0000E8ED E8EB100000              	call malloc
 18231 0000E8F2 488B7D10                	mov rdi, ENV
 18232 0000E8F6 BE00000000              	mov rsi, 0
 18233 0000E8FB BA01000000              	mov rdx, 1
 18234                                  .L_lambda_simple_env_loop_012f:	; ext_env[i + 1] <-- env[i]
 18235 0000E900 4883FE01                	cmp rsi, 1
 18236 0000E904 7410                    	je .L_lambda_simple_env_end_012f
 18237 0000E906 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18238 0000E90A 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18239 0000E90E 48FFC6                  	inc rsi
 18240 0000E911 48FFC2                  	inc rdx
 18241 0000E914 EBEA                    	jmp .L_lambda_simple_env_loop_012f
 18242                                  .L_lambda_simple_env_end_012f:
 18243 0000E916 5B                      	pop rbx
 18244 0000E917 BE00000000              	mov rsi, 0
 18245                                  .L_lambda_simple_params_loop_012f:	; copy params
 18246 0000E91C 4883FE01                	cmp rsi, 1
 18247 0000E920 740E                    	je .L_lambda_simple_params_end_012f
 18248 0000E922 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18249 0000E927 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18250 0000E92B 48FFC6                  	inc rsi
 18251 0000E92E EBEC                    	jmp .L_lambda_simple_params_loop_012f
 18252                                  .L_lambda_simple_params_end_012f:
 18253 0000E930 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18254 0000E933 4889C3                  	mov rbx, rax
 18255 0000E936 58                      	pop rax
 18256 0000E937 C60005                  	mov byte [rax], T_closure
 18257 0000E93A 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18258 0000E93E 48C74009[4BE90000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_012f
 18259 0000E946 E915010000              	jmp .L_lambda_simple_end_012f
 18260                                  .L_lambda_simple_code_012f:	; lambda-simple body
 18261 0000E94B 48837C241003            	cmp qword [rsp + 8 * 2], 3
 18262 0000E951 740B                    	je .L_lambda_simple_arity_check_ok_012f
 18263 0000E953 FF742410                	push qword [rsp + 8 * 2]
 18264 0000E957 6A03                    	push 3
 18265 0000E959 E938100000              	jmp L_error_incorrect_arity_simple
 18266                                  .L_lambda_simple_arity_check_ok_012f:
 18267 0000E95E C8000000                	enter 0, 0
 18268 0000E962 488B4530                	mov rax, qword [rbp + 8 * (4 + 2)]
 18269 0000E966 50                      	push rax
 18270 0000E967 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18271 0000E96B 50                      	push rax
 18272 0000E96C 6A02                    	push 2
 18273 0000E96E 488B0425[30030000]      	mov rax, qword [free_var_102]
 18274                                  	assert_closure(rax)
    42 0000E976 803805              <1>  cmp byte [%1], %2
    43 0000E979 0F8552280000        <1>  jne L_error_incorrect_type
 18275 0000E97F FF7001                  	push SOB_CLOSURE_ENV(rax)
 18276 0000E982 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18277 0000E985 483D[02000000]          	cmp rax, sob_boolean_false
 18278 0000E98B 0F84C1000000                      	je .L_if_else_00b0
 18279 0000E991 488B4530                          	mov rax, qword [rbp + 8 * (4 + 2)]
 18280 0000E995 50                      	push rax
 18281 0000E996 48B8-                   	mov rax, L_constants + 128
 18281 0000E998 [8000000000000000] 
 18282 0000E9A0 50                      	push rax
 18283 0000E9A1 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18284 0000E9A5 50                      	push rax
 18285 0000E9A6 6A02                    	push 2
 18286 0000E9A8 488B0425[08030000]      	mov rax, qword [free_var_97]
 18287                                  	assert_closure(rax)
    42 0000E9B0 803805              <1>  cmp byte [%1], %2
    43 0000E9B3 0F8518280000        <1>  jne L_error_incorrect_type
 18288 0000E9B9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18289 0000E9BC FF5009                  	call SOB_CLOSURE_CODE(rax)
 18290 0000E9BF 50                      	push rax
 18291 0000E9C0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18292 0000E9C4 50                      	push rax
 18293 0000E9C5 6A03                    	push 3
 18294 0000E9C7 488B4510                	mov rax, qword [rbp + 8 * 2]
 18295 0000E9CB 488B00                  	mov rax, qword [rax + 8 * 0]
 18296 0000E9CE 488B00                  	mov rax, qword [rax + 8 * 0]
 18297 0000E9D1 488B00                  	mov rax, qword [rax]
 18298                                  	assert_closure(rax)
    42 0000E9D4 803805              <1>  cmp byte [%1], %2
    43 0000E9D7 0F85F4270000        <1>  jne L_error_incorrect_type
 18299 0000E9DD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18300 0000E9E0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18301 0000E9E3 50                      	push rax
 18302 0000E9E4 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 18303 0000E9E8 50                      	push rax
 18304 0000E9E9 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18305 0000E9ED 50                      	push rax
 18306 0000E9EE 6A02                    	push 2
 18307 0000E9F0 488B0425[80010000]      	mov rax, qword [free_var_48]
 18308                                  	assert_closure(rax)
    42 0000E9F8 803805              <1>  cmp byte [%1], %2
    43 0000E9FB 0F85D0270000        <1>  jne L_error_incorrect_type
 18309 0000EA01 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18310 0000EA04 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18311 0000EA07 50                      	push rax
 18312 0000EA08 6A02                    	push 2
 18313 0000EA0A 488B0425[68000000]      	mov rax, qword [free_var_13]
 18314                                  	assert_closure(rax)
    42 0000EA12 803805              <1>  cmp byte [%1], %2
    43 0000EA15 0F85B6270000        <1>  jne L_error_incorrect_type
 18315 0000EA1B FF7001                  	push SOB_CLOSURE_ENV(rax)
 18316 0000EA1E FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18317 0000EA21 FF7500                  	push qword [rbp] ; same the old rbp
 18318 0000EA24 BA05000000              	mov rdx, 2 + 3
 18319 0000EA29 488B4D00                	mov rcx, [rbp]
 18320 0000EA2D 4889EF                  	mov rdi, rbp
 18321                                  .L_tc_recycle_frame_loop_015f:
 18322 0000EA30 4883FA00                	cmp rdx, 0
 18323 0000EA34 7413                    	je .L_tc_recycle_frame_done_015f
 18324 0000EA36 4883E908                	sub rcx, 8
 18325 0000EA3A 4883EF08                	sub rdi, 8
 18326 0000EA3E 488B37                  	mov rsi, [rdi]
 18327 0000EA41 488931                  	mov qword [rcx], rsi
 18328 0000EA44 48FFCA                  	dec rdx
 18329 0000EA47 EBE7                    	jmp .L_tc_recycle_frame_loop_015f
 18330                                  .L_tc_recycle_frame_done_015f:
 18331 0000EA49 5D                      	pop rbp ; restore the old rbp
 18332 0000EA4A 4889CC                  	mov rsp, rcx
 18333 0000EA4D FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18334 0000EA50 EB0A                    	jmp .L_if_end_00b0
 18335                                            .L_if_else_00b0:
 18336 0000EA52 48B8-                             	mov rax, L_constants + 1
 18336 0000EA54 [0100000000000000] 
 18337                                  .L_if_end_00b0:
 18338 0000EA5C C9                      	leave
 18339 0000EA5D C22800                  	ret 8 * (2 + 3)
 18340                                  .L_lambda_simple_end_012f:	; new closure is in rax
 18341 0000EA60 50                      	push rax
 18342 0000EA61 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18343 0000EA65 8F00                    	pop qword [rax]
 18344 0000EA67 48B8-                   	mov rax, sob_void
 18344 0000EA69 [0000000000000000] 
 18345                                  
 18346 0000EA71 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18347 0000EA76 E8620F0000              	call malloc
 18348 0000EA7B 50                      	push rax
 18349 0000EA7C BF08000000              	mov rdi, 8 * 1	; new rib
 18350 0000EA81 E8570F0000              	call malloc
 18351 0000EA86 50                      	push rax
 18352 0000EA87 BF10000000              	mov rdi, 8 * 2	; extended env
 18353 0000EA8C E84C0F0000              	call malloc
 18354 0000EA91 488B7D10                	mov rdi, ENV
 18355 0000EA95 BE00000000              	mov rsi, 0
 18356 0000EA9A BA01000000              	mov rdx, 1
 18357                                  .L_lambda_simple_env_loop_0130:	; ext_env[i + 1] <-- env[i]
 18358 0000EA9F 4883FE01                	cmp rsi, 1
 18359 0000EAA3 7410                    	je .L_lambda_simple_env_end_0130
 18360 0000EAA5 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18361 0000EAA9 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18362 0000EAAD 48FFC6                  	inc rsi
 18363 0000EAB0 48FFC2                  	inc rdx
 18364 0000EAB3 EBEA                    	jmp .L_lambda_simple_env_loop_0130
 18365                                  .L_lambda_simple_env_end_0130:
 18366 0000EAB5 5B                      	pop rbx
 18367 0000EAB6 BE00000000              	mov rsi, 0
 18368                                  .L_lambda_simple_params_loop_0130:	; copy params
 18369 0000EABB 4883FE01                	cmp rsi, 1
 18370 0000EABF 740E                    	je .L_lambda_simple_params_end_0130
 18371 0000EAC1 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18372 0000EAC6 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18373 0000EACA 48FFC6                  	inc rsi
 18374 0000EACD EBEC                    	jmp .L_lambda_simple_params_loop_0130
 18375                                  .L_lambda_simple_params_end_0130:
 18376 0000EACF 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18377 0000EAD2 4889C3                  	mov rbx, rax
 18378 0000EAD5 58                      	pop rax
 18379 0000EAD6 C60005                  	mov byte [rax], T_closure
 18380 0000EAD9 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18381 0000EADD 48C74009[EAEA0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0130
 18382 0000EAE5 E997000000              	jmp .L_lambda_simple_end_0130
 18383                                  .L_lambda_simple_code_0130:	; lambda-simple body
 18384 0000EAEA 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18385 0000EAF0 740B                    	je .L_lambda_simple_arity_check_ok_0130
 18386 0000EAF2 FF742410                	push qword [rsp + 8 * 2]
 18387 0000EAF6 6A01                    	push 1
 18388 0000EAF8 E9990E0000              	jmp L_error_incorrect_arity_simple
 18389                                  .L_lambda_simple_arity_check_ok_0130:
 18390 0000EAFD C8000000                	enter 0, 0
 18391 0000EB01 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18392 0000EB05 50                      	push rax
 18393 0000EB06 6A01                    	push 1
 18394 0000EB08 488B0425[98000000]      	mov rax, qword [free_var_19]
 18395                                  	assert_closure(rax)
    42 0000EB10 803805              <1>  cmp byte [%1], %2
    43 0000EB13 0F85B8260000        <1>  jne L_error_incorrect_type
 18396 0000EB19 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18397 0000EB1C FF5009                  	call SOB_CLOSURE_CODE(rax)
 18398 0000EB1F 50                      	push rax
 18399 0000EB20 48B8-                   	mov rax, L_constants + 32
 18399 0000EB22 [2000000000000000] 
 18400 0000EB2A 50                      	push rax
 18401 0000EB2B 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18402 0000EB2F 50                      	push rax
 18403 0000EB30 6A03                    	push 3
 18404 0000EB32 488B4510                	mov rax, qword [rbp + 8 * 2]
 18405 0000EB36 488B00                  	mov rax, qword [rax + 8 * 0]
 18406 0000EB39 488B00                  	mov rax, qword [rax + 8 * 0]
 18407 0000EB3C 488B00                  	mov rax, qword [rax]
 18408                                  	assert_closure(rax)
    42 0000EB3F 803805              <1>  cmp byte [%1], %2
    43 0000EB42 0F8589260000        <1>  jne L_error_incorrect_type
 18409 0000EB48 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18410 0000EB4B FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18411 0000EB4E FF7500                  	push qword [rbp] ; same the old rbp
 18412 0000EB51 BA06000000              	mov rdx, 3 + 3
 18413 0000EB56 488B4D00                	mov rcx, [rbp]
 18414 0000EB5A 4889EF                  	mov rdi, rbp
 18415                                  .L_tc_recycle_frame_loop_0160:
 18416 0000EB5D 4883FA00                	cmp rdx, 0
 18417 0000EB61 7413                    	je .L_tc_recycle_frame_done_0160
 18418 0000EB63 4883E908                	sub rcx, 8
 18419 0000EB67 4883EF08                	sub rdi, 8
 18420 0000EB6B 488B37                  	mov rsi, [rdi]
 18421 0000EB6E 488931                  	mov qword [rcx], rsi
 18422 0000EB71 48FFCA                  	dec rdx
 18423 0000EB74 EBE7                    	jmp .L_tc_recycle_frame_loop_0160
 18424                                  .L_tc_recycle_frame_done_0160:
 18425 0000EB76 5D                      	pop rbp ; restore the old rbp
 18426 0000EB77 4889CC                  	mov rsp, rcx
 18427 0000EB7A FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18428 0000EB7D C9                      	leave
 18429 0000EB7E C21800                  	ret 8 * (2 + 1)
 18430                                  .L_lambda_simple_end_0130:	; new closure is in rax
 18431 0000EB81 C9                      	leave
 18432 0000EB82 C21800                  	ret 8 * (2 + 1)
 18433                                  .L_lambda_simple_end_012e:	; new closure is in rax
 18434                                  	assert_closure(rax)
    42 0000EB85 803805              <1>  cmp byte [%1], %2
    43 0000EB88 0F8543260000        <1>  jne L_error_incorrect_type
 18435 0000EB8E FF7001                  	push SOB_CLOSURE_ENV(rax)
 18436 0000EB91 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18437 0000EB94 48890425[48040000]      	mov qword [free_var_137], rax
 18438 0000EB9C 48B8-                   	mov rax, sob_void
 18438 0000EB9E [0000000000000000] 
 18439                                  
 18440 0000EBA6 4889C7                  	mov rdi, rax
 18441 0000EBA9 E8400E0000              	call print_sexpr_if_not_void
 18442                                  
 18443 0000EBAE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18444 0000EBB3 E8250E0000              	call malloc
 18445 0000EBB8 50                      	push rax
 18446 0000EBB9 BF00000000              	mov rdi, 8 * 0	; new rib
 18447 0000EBBE E81A0E0000              	call malloc
 18448 0000EBC3 50                      	push rax
 18449 0000EBC4 BF08000000              	mov rdi, 8 * 1	; extended env
 18450 0000EBC9 E80F0E0000              	call malloc
 18451 0000EBCE 488B7D10                	mov rdi, ENV
 18452 0000EBD2 BE00000000              	mov rsi, 0
 18453 0000EBD7 BA01000000              	mov rdx, 1
 18454                                  .L_lambda_simple_env_loop_0131:	; ext_env[i + 1] <-- env[i]
 18455 0000EBDC 4883FE00                	cmp rsi, 0
 18456 0000EBE0 7410                    	je .L_lambda_simple_env_end_0131
 18457 0000EBE2 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18458 0000EBE6 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18459 0000EBEA 48FFC6                  	inc rsi
 18460 0000EBED 48FFC2                  	inc rdx
 18461 0000EBF0 EBEA                    	jmp .L_lambda_simple_env_loop_0131
 18462                                  .L_lambda_simple_env_end_0131:
 18463 0000EBF2 5B                      	pop rbx
 18464 0000EBF3 BE00000000              	mov rsi, 0
 18465                                  .L_lambda_simple_params_loop_0131:	; copy params
 18466 0000EBF8 4883FE00                	cmp rsi, 0
 18467 0000EBFC 740E                    	je .L_lambda_simple_params_end_0131
 18468 0000EBFE 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18469 0000EC03 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18470 0000EC07 48FFC6                  	inc rsi
 18471 0000EC0A EBEC                    	jmp .L_lambda_simple_params_loop_0131
 18472                                  .L_lambda_simple_params_end_0131:
 18473 0000EC0C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18474 0000EC0F 4889C3                  	mov rbx, rax
 18475 0000EC12 58                      	pop rax
 18476 0000EC13 C60005                  	mov byte [rax], T_closure
 18477 0000EC16 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18478 0000EC1A 48C74009[27EC0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0131
 18479 0000EC22 E982000000              	jmp .L_lambda_simple_end_0131
 18480                                  .L_lambda_simple_code_0131:	; lambda-simple body
 18481 0000EC27 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18482 0000EC2D 740B                    	je .L_lambda_simple_arity_check_ok_0131
 18483 0000EC2F FF742410                	push qword [rsp + 8 * 2]
 18484 0000EC33 6A01                    	push 1
 18485 0000EC35 E95C0D0000              	jmp L_error_incorrect_arity_simple
 18486                                  .L_lambda_simple_arity_check_ok_0131:
 18487 0000EC3A C8000000                	enter 0, 0
 18488 0000EC3E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18489 0000EC42 50                      	push rax
 18490 0000EC43 6A00                    	push 0
 18491 0000EC45 488B0425[D0000000]      	mov rax, qword [free_var_26]
 18492                                  	assert_closure(rax)
    42 0000EC4D 803805              <1>  cmp byte [%1], %2
    43 0000EC50 0F857B250000        <1>  jne L_error_incorrect_type
 18493 0000EC56 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18494 0000EC59 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18495 0000EC5C 50                      	push rax
 18496 0000EC5D 6A02                    	push 2
 18497 0000EC5F 488B0425[60010000]      	mov rax, qword [free_var_44]
 18498                                  	assert_closure(rax)
    42 0000EC67 803805              <1>  cmp byte [%1], %2
    43 0000EC6A 0F8561250000        <1>  jne L_error_incorrect_type
 18499 0000EC70 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18500 0000EC73 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18501 0000EC76 FF7500                  	push qword [rbp] ; same the old rbp
 18502 0000EC79 BA05000000              	mov rdx, 2 + 3
 18503 0000EC7E 488B4D00                	mov rcx, [rbp]
 18504 0000EC82 4889EF                  	mov rdi, rbp
 18505                                  .L_tc_recycle_frame_loop_0161:
 18506 0000EC85 4883FA00                	cmp rdx, 0
 18507 0000EC89 7413                    	je .L_tc_recycle_frame_done_0161
 18508 0000EC8B 4883E908                	sub rcx, 8
 18509 0000EC8F 4883EF08                	sub rdi, 8
 18510 0000EC93 488B37                  	mov rsi, [rdi]
 18511 0000EC96 488931                  	mov qword [rcx], rsi
 18512 0000EC99 48FFCA                  	dec rdx
 18513 0000EC9C EBE7                    	jmp .L_tc_recycle_frame_loop_0161
 18514                                  .L_tc_recycle_frame_done_0161:
 18515 0000EC9E 5D                      	pop rbp ; restore the old rbp
 18516 0000EC9F 4889CC                  	mov rsp, rcx
 18517 0000ECA2 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18518 0000ECA5 C9                      	leave
 18519 0000ECA6 C21800                  	ret 8 * (2 + 1)
 18520                                  .L_lambda_simple_end_0131:	; new closure is in rax
 18521 0000ECA9 48890425[50040000]      	mov qword [free_var_138], rax
 18522 0000ECB1 48B8-                   	mov rax, sob_void
 18522 0000ECB3 [0000000000000000] 
 18523                                  
 18524 0000ECBB 4889C7                  	mov rdi, rax
 18525 0000ECBE E82B0D0000              	call print_sexpr_if_not_void
 18526                                  
 18527 0000ECC3 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18528 0000ECC8 E8100D0000              	call malloc
 18529 0000ECCD 50                      	push rax
 18530 0000ECCE BF00000000              	mov rdi, 8 * 0	; new rib
 18531 0000ECD3 E8050D0000              	call malloc
 18532 0000ECD8 50                      	push rax
 18533 0000ECD9 BF08000000              	mov rdi, 8 * 1	; extended env
 18534 0000ECDE E8FA0C0000              	call malloc
 18535 0000ECE3 488B7D10                	mov rdi, ENV
 18536 0000ECE7 BE00000000              	mov rsi, 0
 18537 0000ECEC BA01000000              	mov rdx, 1
 18538                                  .L_lambda_simple_env_loop_0132:	; ext_env[i + 1] <-- env[i]
 18539 0000ECF1 4883FE00                	cmp rsi, 0
 18540 0000ECF5 7410                    	je .L_lambda_simple_env_end_0132
 18541 0000ECF7 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18542 0000ECFB 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18543 0000ECFF 48FFC6                  	inc rsi
 18544 0000ED02 48FFC2                  	inc rdx
 18545 0000ED05 EBEA                    	jmp .L_lambda_simple_env_loop_0132
 18546                                  .L_lambda_simple_env_end_0132:
 18547 0000ED07 5B                      	pop rbx
 18548 0000ED08 BE00000000              	mov rsi, 0
 18549                                  .L_lambda_simple_params_loop_0132:	; copy params
 18550 0000ED0D 4883FE00                	cmp rsi, 0
 18551 0000ED11 740E                    	je .L_lambda_simple_params_end_0132
 18552 0000ED13 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18553 0000ED18 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18554 0000ED1C 48FFC6                  	inc rsi
 18555 0000ED1F EBEC                    	jmp .L_lambda_simple_params_loop_0132
 18556                                  .L_lambda_simple_params_end_0132:
 18557 0000ED21 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18558 0000ED24 4889C3                  	mov rbx, rax
 18559 0000ED27 58                      	pop rax
 18560 0000ED28 C60005                  	mov byte [rax], T_closure
 18561 0000ED2B 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18562 0000ED2F 48C74009[39ED0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0132
 18563 0000ED37 EB73                    	jmp .L_lambda_simple_end_0132
 18564                                  .L_lambda_simple_code_0132:	; lambda-simple body
 18565 0000ED39 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18566 0000ED3F 740B                    	je .L_lambda_simple_arity_check_ok_0132
 18567 0000ED41 FF742410                	push qword [rsp + 8 * 2]
 18568 0000ED45 6A01                    	push 1
 18569 0000ED47 E94A0C0000              	jmp L_error_incorrect_arity_simple
 18570                                  .L_lambda_simple_arity_check_ok_0132:
 18571 0000ED4C C8000000                	enter 0, 0
 18572 0000ED50 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18573 0000ED54 50                      	push rax
 18574 0000ED55 48B8-                   	mov rax, L_constants + 32
 18574 0000ED57 [2000000000000000] 
 18575 0000ED5F 50                      	push rax
 18576 0000ED60 6A02                    	push 2
 18577 0000ED62 488B0425[30030000]      	mov rax, qword [free_var_102]
 18578                                  	assert_closure(rax)
    42 0000ED6A 803805              <1>  cmp byte [%1], %2
    43 0000ED6D 0F855E240000        <1>  jne L_error_incorrect_type
 18579 0000ED73 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18580 0000ED76 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18581 0000ED79 FF7500                  	push qword [rbp] ; same the old rbp
 18582 0000ED7C BA05000000              	mov rdx, 2 + 3
 18583 0000ED81 488B4D00                	mov rcx, [rbp]
 18584 0000ED85 4889EF                  	mov rdi, rbp
 18585                                  .L_tc_recycle_frame_loop_0162:
 18586 0000ED88 4883FA00                	cmp rdx, 0
 18587 0000ED8C 7413                    	je .L_tc_recycle_frame_done_0162
 18588 0000ED8E 4883E908                	sub rcx, 8
 18589 0000ED92 4883EF08                	sub rdi, 8
 18590 0000ED96 488B37                  	mov rsi, [rdi]
 18591 0000ED99 488931                  	mov qword [rcx], rsi
 18592 0000ED9C 48FFCA                  	dec rdx
 18593 0000ED9F EBE7                    	jmp .L_tc_recycle_frame_loop_0162
 18594                                  .L_tc_recycle_frame_done_0162:
 18595 0000EDA1 5D                      	pop rbp ; restore the old rbp
 18596 0000EDA2 4889CC                  	mov rsp, rcx
 18597 0000EDA5 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18598 0000EDA8 C9                      	leave
 18599 0000EDA9 C21800                  	ret 8 * (2 + 1)
 18600                                  .L_lambda_simple_end_0132:	; new closure is in rax
 18601 0000EDAC 48890425[58040000]      	mov qword [free_var_139], rax
 18602 0000EDB4 48B8-                   	mov rax, sob_void
 18602 0000EDB6 [0000000000000000] 
 18603                                  
 18604 0000EDBE 4889C7                  	mov rdi, rax
 18605 0000EDC1 E8280C0000              	call print_sexpr_if_not_void
 18606                                  
 18607 0000EDC6 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18608 0000EDCB E80D0C0000              	call malloc
 18609 0000EDD0 50                      	push rax
 18610 0000EDD1 BF00000000              	mov rdi, 8 * 0	; new rib
 18611 0000EDD6 E8020C0000              	call malloc
 18612 0000EDDB 50                      	push rax
 18613 0000EDDC BF08000000              	mov rdi, 8 * 1	; extended env
 18614 0000EDE1 E8F70B0000              	call malloc
 18615 0000EDE6 488B7D10                	mov rdi, ENV
 18616 0000EDEA BE00000000              	mov rsi, 0
 18617 0000EDEF BA01000000              	mov rdx, 1
 18618                                  .L_lambda_simple_env_loop_0133:	; ext_env[i + 1] <-- env[i]
 18619 0000EDF4 4883FE00                	cmp rsi, 0
 18620 0000EDF8 7410                    	je .L_lambda_simple_env_end_0133
 18621 0000EDFA 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18622 0000EDFE 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18623 0000EE02 48FFC6                  	inc rsi
 18624 0000EE05 48FFC2                  	inc rdx
 18625 0000EE08 EBEA                    	jmp .L_lambda_simple_env_loop_0133
 18626                                  .L_lambda_simple_env_end_0133:
 18627 0000EE0A 5B                      	pop rbx
 18628 0000EE0B BE00000000              	mov rsi, 0
 18629                                  .L_lambda_simple_params_loop_0133:	; copy params
 18630 0000EE10 4883FE00                	cmp rsi, 0
 18631 0000EE14 740E                    	je .L_lambda_simple_params_end_0133
 18632 0000EE16 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18633 0000EE1B 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18634 0000EE1F 48FFC6                  	inc rsi
 18635 0000EE22 EBEC                    	jmp .L_lambda_simple_params_loop_0133
 18636                                  .L_lambda_simple_params_end_0133:
 18637 0000EE24 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18638 0000EE27 4889C3                  	mov rbx, rax
 18639 0000EE2A 58                      	pop rax
 18640 0000EE2B C60005                  	mov byte [rax], T_closure
 18641 0000EE2E 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18642 0000EE32 48C74009[3CEE0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0133
 18643 0000EE3A EB73                    	jmp .L_lambda_simple_end_0133
 18644                                  .L_lambda_simple_code_0133:	; lambda-simple body
 18645 0000EE3C 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18646 0000EE42 740B                    	je .L_lambda_simple_arity_check_ok_0133
 18647 0000EE44 FF742410                	push qword [rsp + 8 * 2]
 18648 0000EE48 6A01                    	push 1
 18649 0000EE4A E9470B0000              	jmp L_error_incorrect_arity_simple
 18650                                  .L_lambda_simple_arity_check_ok_0133:
 18651 0000EE4F C8000000                	enter 0, 0
 18652 0000EE53 48B8-                   	mov rax, L_constants + 32
 18652 0000EE55 [2000000000000000] 
 18653 0000EE5D 50                      	push rax
 18654 0000EE5E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18655 0000EE62 50                      	push rax
 18656 0000EE63 6A02                    	push 2
 18657 0000EE65 488B0425[30030000]      	mov rax, qword [free_var_102]
 18658                                  	assert_closure(rax)
    42 0000EE6D 803805              <1>  cmp byte [%1], %2
    43 0000EE70 0F855B230000        <1>  jne L_error_incorrect_type
 18659 0000EE76 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18660 0000EE79 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18661 0000EE7C FF7500                  	push qword [rbp] ; same the old rbp
 18662 0000EE7F BA05000000              	mov rdx, 2 + 3
 18663 0000EE84 488B4D00                	mov rcx, [rbp]
 18664 0000EE88 4889EF                  	mov rdi, rbp
 18665                                  .L_tc_recycle_frame_loop_0163:
 18666 0000EE8B 4883FA00                	cmp rdx, 0
 18667 0000EE8F 7413                    	je .L_tc_recycle_frame_done_0163
 18668 0000EE91 4883E908                	sub rcx, 8
 18669 0000EE95 4883EF08                	sub rdi, 8
 18670 0000EE99 488B37                  	mov rsi, [rdi]
 18671 0000EE9C 488931                  	mov qword [rcx], rsi
 18672 0000EE9F 48FFCA                  	dec rdx
 18673 0000EEA2 EBE7                    	jmp .L_tc_recycle_frame_loop_0163
 18674                                  .L_tc_recycle_frame_done_0163:
 18675 0000EEA4 5D                      	pop rbp ; restore the old rbp
 18676 0000EEA5 4889CC                  	mov rsp, rcx
 18677 0000EEA8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18678 0000EEAB C9                      	leave
 18679 0000EEAC C21800                  	ret 8 * (2 + 1)
 18680                                  .L_lambda_simple_end_0133:	; new closure is in rax
 18681 0000EEAF 48890425[60040000]      	mov qword [free_var_140], rax
 18682 0000EEB7 48B8-                   	mov rax, sob_void
 18682 0000EEB9 [0000000000000000] 
 18683                                  
 18684 0000EEC1 4889C7                  	mov rdi, rax
 18685 0000EEC4 E8250B0000              	call print_sexpr_if_not_void
 18686                                  
 18687 0000EEC9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18688 0000EECE E80A0B0000              	call malloc
 18689 0000EED3 50                      	push rax
 18690 0000EED4 BF00000000              	mov rdi, 8 * 0	; new rib
 18691 0000EED9 E8FF0A0000              	call malloc
 18692 0000EEDE 50                      	push rax
 18693 0000EEDF BF08000000              	mov rdi, 8 * 1	; extended env
 18694 0000EEE4 E8F40A0000              	call malloc
 18695 0000EEE9 488B7D10                	mov rdi, ENV
 18696 0000EEED BE00000000              	mov rsi, 0
 18697 0000EEF2 BA01000000              	mov rdx, 1
 18698                                  .L_lambda_simple_env_loop_0134:	; ext_env[i + 1] <-- env[i]
 18699 0000EEF7 4883FE00                	cmp rsi, 0
 18700 0000EEFB 7410                    	je .L_lambda_simple_env_end_0134
 18701 0000EEFD 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18702 0000EF01 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18703 0000EF05 48FFC6                  	inc rsi
 18704 0000EF08 48FFC2                  	inc rdx
 18705 0000EF0B EBEA                    	jmp .L_lambda_simple_env_loop_0134
 18706                                  .L_lambda_simple_env_end_0134:
 18707 0000EF0D 5B                      	pop rbx
 18708 0000EF0E BE00000000              	mov rsi, 0
 18709                                  .L_lambda_simple_params_loop_0134:	; copy params
 18710 0000EF13 4883FE00                	cmp rsi, 0
 18711 0000EF17 740E                    	je .L_lambda_simple_params_end_0134
 18712 0000EF19 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18713 0000EF1E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18714 0000EF22 48FFC6                  	inc rsi
 18715 0000EF25 EBEC                    	jmp .L_lambda_simple_params_loop_0134
 18716                                  .L_lambda_simple_params_end_0134:
 18717 0000EF27 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18718 0000EF2A 4889C3                  	mov rbx, rax
 18719 0000EF2D 58                      	pop rax
 18720 0000EF2E C60005                  	mov byte [rax], T_closure
 18721 0000EF31 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18722 0000EF35 48C74009[42EF0000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0134
 18723 0000EF3D E98D000000              	jmp .L_lambda_simple_end_0134
 18724                                  .L_lambda_simple_code_0134:	; lambda-simple body
 18725 0000EF42 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18726 0000EF48 740B                    	je .L_lambda_simple_arity_check_ok_0134
 18727 0000EF4A FF742410                	push qword [rsp + 8 * 2]
 18728 0000EF4E 6A01                    	push 1
 18729 0000EF50 E9410A0000              	jmp L_error_incorrect_arity_simple
 18730                                  .L_lambda_simple_arity_check_ok_0134:
 18731 0000EF55 C8000000                	enter 0, 0
 18732 0000EF59 48B8-                   	mov rax, L_constants + 512
 18732 0000EF5B [0002000000000000] 
 18733 0000EF63 50                      	push rax
 18734 0000EF64 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18735 0000EF68 50                      	push rax
 18736 0000EF69 6A02                    	push 2
 18737 0000EF6B 488B0425[60010000]      	mov rax, qword [free_var_44]
 18738                                  	assert_closure(rax)
    42 0000EF73 803805              <1>  cmp byte [%1], %2
    43 0000EF76 0F8555220000        <1>  jne L_error_incorrect_type
 18739 0000EF7C FF7001                  	push SOB_CLOSURE_ENV(rax)
 18740 0000EF7F FF5009                  	call SOB_CLOSURE_CODE(rax)
 18741 0000EF82 50                      	push rax
 18742 0000EF83 6A01                    	push 1
 18743 0000EF85 488B0425[D8000000]      	mov rax, qword [free_var_27]
 18744                                  	assert_closure(rax)
    42 0000EF8D 803805              <1>  cmp byte [%1], %2
    43 0000EF90 0F853B220000        <1>  jne L_error_incorrect_type
 18745 0000EF96 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18746 0000EF99 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18747 0000EF9C FF7500                  	push qword [rbp] ; same the old rbp
 18748 0000EF9F BA04000000              	mov rdx, 1 + 3
 18749 0000EFA4 488B4D00                	mov rcx, [rbp]
 18750 0000EFA8 4889EF                  	mov rdi, rbp
 18751                                  .L_tc_recycle_frame_loop_0164:
 18752 0000EFAB 4883FA00                	cmp rdx, 0
 18753 0000EFAF 7413                    	je .L_tc_recycle_frame_done_0164
 18754 0000EFB1 4883E908                	sub rcx, 8
 18755 0000EFB5 4883EF08                	sub rdi, 8
 18756 0000EFB9 488B37                  	mov rsi, [rdi]
 18757 0000EFBC 488931                  	mov qword [rcx], rsi
 18758 0000EFBF 48FFCA                  	dec rdx
 18759 0000EFC2 EBE7                    	jmp .L_tc_recycle_frame_loop_0164
 18760                                  .L_tc_recycle_frame_done_0164:
 18761 0000EFC4 5D                      	pop rbp ; restore the old rbp
 18762 0000EFC5 4889CC                  	mov rsp, rcx
 18763 0000EFC8 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18764 0000EFCB C9                      	leave
 18765 0000EFCC C21800                  	ret 8 * (2 + 1)
 18766                                  .L_lambda_simple_end_0134:	; new closure is in rax
 18767 0000EFCF 48890425[68040000]      	mov qword [free_var_141], rax
 18768 0000EFD7 48B8-                   	mov rax, sob_void
 18768 0000EFD9 [0000000000000000] 
 18769                                  
 18770 0000EFE1 4889C7                  	mov rdi, rax
 18771 0000EFE4 E8050A0000              	call print_sexpr_if_not_void
 18772                                  
 18773 0000EFE9 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18774 0000EFEE E8EA090000              	call malloc
 18775 0000EFF3 50                      	push rax
 18776 0000EFF4 BF00000000              	mov rdi, 8 * 0	; new rib
 18777 0000EFF9 E8DF090000              	call malloc
 18778 0000EFFE 50                      	push rax
 18779 0000EFFF BF08000000              	mov rdi, 8 * 1	; extended env
 18780 0000F004 E8D4090000              	call malloc
 18781 0000F009 488B7D10                	mov rdi, ENV
 18782 0000F00D BE00000000              	mov rsi, 0
 18783 0000F012 BA01000000              	mov rdx, 1
 18784                                  .L_lambda_simple_env_loop_0135:	; ext_env[i + 1] <-- env[i]
 18785 0000F017 4883FE00                	cmp rsi, 0
 18786 0000F01B 7410                    	je .L_lambda_simple_env_end_0135
 18787 0000F01D 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18788 0000F021 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18789 0000F025 48FFC6                  	inc rsi
 18790 0000F028 48FFC2                  	inc rdx
 18791 0000F02B EBEA                    	jmp .L_lambda_simple_env_loop_0135
 18792                                  .L_lambda_simple_env_end_0135:
 18793 0000F02D 5B                      	pop rbx
 18794 0000F02E BE00000000              	mov rsi, 0
 18795                                  .L_lambda_simple_params_loop_0135:	; copy params
 18796 0000F033 4883FE00                	cmp rsi, 0
 18797 0000F037 740E                    	je .L_lambda_simple_params_end_0135
 18798 0000F039 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18799 0000F03E 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18800 0000F042 48FFC6                  	inc rsi
 18801 0000F045 EBEC                    	jmp .L_lambda_simple_params_loop_0135
 18802                                  .L_lambda_simple_params_end_0135:
 18803 0000F047 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18804 0000F04A 4889C3                  	mov rbx, rax
 18805 0000F04D 58                      	pop rax
 18806 0000F04E C60005                  	mov byte [rax], T_closure
 18807 0000F051 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18808 0000F055 48C74009[62F00000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0135
 18809 0000F05D E982000000              	jmp .L_lambda_simple_end_0135
 18810                                  .L_lambda_simple_code_0135:	; lambda-simple body
 18811 0000F062 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18812 0000F068 740B                    	je .L_lambda_simple_arity_check_ok_0135
 18813 0000F06A FF742410                	push qword [rsp + 8 * 2]
 18814 0000F06E 6A01                    	push 1
 18815 0000F070 E921090000              	jmp L_error_incorrect_arity_simple
 18816                                  .L_lambda_simple_arity_check_ok_0135:
 18817 0000F075 C8000000                	enter 0, 0
 18818 0000F079 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18819 0000F07D 50                      	push rax
 18820 0000F07E 6A01                    	push 1
 18821 0000F080 488B0425[68040000]      	mov rax, qword [free_var_141]
 18822                                  	assert_closure(rax)
    42 0000F088 803805              <1>  cmp byte [%1], %2
    43 0000F08B 0F8540210000        <1>  jne L_error_incorrect_type
 18823 0000F091 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18824 0000F094 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18825 0000F097 50                      	push rax
 18826 0000F098 6A01                    	push 1
 18827 0000F09A 488B0425[B0020000]      	mov rax, qword [free_var_86]
 18828                                  	assert_closure(rax)
    42 0000F0A2 803805              <1>  cmp byte [%1], %2
    43 0000F0A5 0F8526210000        <1>  jne L_error_incorrect_type
 18829 0000F0AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 18830 0000F0AE FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18831 0000F0B1 FF7500                  	push qword [rbp] ; same the old rbp
 18832 0000F0B4 BA04000000              	mov rdx, 1 + 3
 18833 0000F0B9 488B4D00                	mov rcx, [rbp]
 18834 0000F0BD 4889EF                  	mov rdi, rbp
 18835                                  .L_tc_recycle_frame_loop_0165:
 18836 0000F0C0 4883FA00                	cmp rdx, 0
 18837 0000F0C4 7413                    	je .L_tc_recycle_frame_done_0165
 18838 0000F0C6 4883E908                	sub rcx, 8
 18839 0000F0CA 4883EF08                	sub rdi, 8
 18840 0000F0CE 488B37                  	mov rsi, [rdi]
 18841 0000F0D1 488931                  	mov qword [rcx], rsi
 18842 0000F0D4 48FFCA                  	dec rdx
 18843 0000F0D7 EBE7                    	jmp .L_tc_recycle_frame_loop_0165
 18844                                  .L_tc_recycle_frame_done_0165:
 18845 0000F0D9 5D                      	pop rbp ; restore the old rbp
 18846 0000F0DA 4889CC                  	mov rsp, rcx
 18847 0000F0DD FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18848 0000F0E0 C9                      	leave
 18849 0000F0E1 C21800                  	ret 8 * (2 + 1)
 18850                                  .L_lambda_simple_end_0135:	; new closure is in rax
 18851 0000F0E4 48890425[70040000]      	mov qword [free_var_142], rax
 18852 0000F0EC 48B8-                   	mov rax, sob_void
 18852 0000F0EE [0000000000000000] 
 18853                                  
 18854 0000F0F6 4889C7                  	mov rdi, rax
 18855 0000F0F9 E8F0080000              	call print_sexpr_if_not_void
 18856                                  
 18857 0000F0FE BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18858 0000F103 E8D5080000              	call malloc
 18859 0000F108 50                      	push rax
 18860 0000F109 BF00000000              	mov rdi, 8 * 0	; new rib
 18861 0000F10E E8CA080000              	call malloc
 18862 0000F113 50                      	push rax
 18863 0000F114 BF08000000              	mov rdi, 8 * 1	; extended env
 18864 0000F119 E8BF080000              	call malloc
 18865 0000F11E 488B7D10                	mov rdi, ENV
 18866 0000F122 BE00000000              	mov rsi, 0
 18867 0000F127 BA01000000              	mov rdx, 1
 18868                                  .L_lambda_simple_env_loop_0136:	; ext_env[i + 1] <-- env[i]
 18869 0000F12C 4883FE00                	cmp rsi, 0
 18870 0000F130 7410                    	je .L_lambda_simple_env_end_0136
 18871 0000F132 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18872 0000F136 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18873 0000F13A 48FFC6                  	inc rsi
 18874 0000F13D 48FFC2                  	inc rdx
 18875 0000F140 EBEA                    	jmp .L_lambda_simple_env_loop_0136
 18876                                  .L_lambda_simple_env_end_0136:
 18877 0000F142 5B                      	pop rbx
 18878 0000F143 BE00000000              	mov rsi, 0
 18879                                  .L_lambda_simple_params_loop_0136:	; copy params
 18880 0000F148 4883FE00                	cmp rsi, 0
 18881 0000F14C 740E                    	je .L_lambda_simple_params_end_0136
 18882 0000F14E 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18883 0000F153 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18884 0000F157 48FFC6                  	inc rsi
 18885 0000F15A EBEC                    	jmp .L_lambda_simple_params_loop_0136
 18886                                  .L_lambda_simple_params_end_0136:
 18887 0000F15C 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18888 0000F15F 4889C3                  	mov rbx, rax
 18889 0000F162 58                      	pop rax
 18890 0000F163 C60005                  	mov byte [rax], T_closure
 18891 0000F166 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18892 0000F16A 48C74009[77F10000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0136
 18893 0000F172 E994000000              	jmp .L_lambda_simple_end_0136
 18894                                  .L_lambda_simple_code_0136:	; lambda-simple body
 18895 0000F177 48837C241001            	cmp qword [rsp + 8 * 2], 1
 18896 0000F17D 740B                    	je .L_lambda_simple_arity_check_ok_0136
 18897 0000F17F FF742410                	push qword [rsp + 8 * 2]
 18898 0000F183 6A01                    	push 1
 18899 0000F185 E90C080000              	jmp L_error_incorrect_arity_simple
 18900                                  .L_lambda_simple_arity_check_ok_0136:
 18901 0000F18A C8000000                	enter 0, 0
 18902 0000F18E 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18903 0000F192 50                      	push rax
 18904 0000F193 6A01                    	push 1
 18905 0000F195 488B0425[60040000]      	mov rax, qword [free_var_140]
 18906                                  	assert_closure(rax)
    42 0000F19D 803805              <1>  cmp byte [%1], %2
    43 0000F1A0 0F852B200000        <1>  jne L_error_incorrect_type
 18907 0000F1A6 FF7001                  	push SOB_CLOSURE_ENV(rax)
 18908 0000F1A9 FF5009                  	call SOB_CLOSURE_CODE(rax)
 18909 0000F1AC 483D[02000000]          	cmp rax, sob_boolean_false
 18910 0000F1B2 744F                              	je .L_if_else_00b1
 18911 0000F1B4 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 18912 0000F1B8 50                      	push rax
 18913 0000F1B9 6A01                    	push 1
 18914 0000F1BB 488B0425[10030000]      	mov rax, qword [free_var_98]
 18915                                  	assert_closure(rax)
    42 0000F1C3 803805              <1>  cmp byte [%1], %2
    43 0000F1C6 0F8505200000        <1>  jne L_error_incorrect_type
 18916 0000F1CC FF7001                  	push SOB_CLOSURE_ENV(rax)
 18917 0000F1CF FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 18918 0000F1D2 FF7500                  	push qword [rbp] ; same the old rbp
 18919 0000F1D5 BA04000000              	mov rdx, 1 + 3
 18920 0000F1DA 488B4D00                	mov rcx, [rbp]
 18921 0000F1DE 4889EF                  	mov rdi, rbp
 18922                                  .L_tc_recycle_frame_loop_0166:
 18923 0000F1E1 4883FA00                	cmp rdx, 0
 18924 0000F1E5 7413                    	je .L_tc_recycle_frame_done_0166
 18925 0000F1E7 4883E908                	sub rcx, 8
 18926 0000F1EB 4883EF08                	sub rdi, 8
 18927 0000F1EF 488B37                  	mov rsi, [rdi]
 18928 0000F1F2 488931                  	mov qword [rcx], rsi
 18929 0000F1F5 48FFCA                  	dec rdx
 18930 0000F1F8 EBE7                    	jmp .L_tc_recycle_frame_loop_0166
 18931                                  .L_tc_recycle_frame_done_0166:
 18932 0000F1FA 5D                      	pop rbp ; restore the old rbp
 18933 0000F1FB 4889CC                  	mov rsp, rcx
 18934 0000F1FE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 18935 0000F201 EB04                    	jmp .L_if_end_00b1
 18936                                            .L_if_else_00b1:
 18937 0000F203 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 18938                                  .L_if_end_00b1:
 18939 0000F207 C9                      	leave
 18940 0000F208 C21800                  	ret 8 * (2 + 1)
 18941                                  .L_lambda_simple_end_0136:	; new closure is in rax
 18942 0000F20B 48890425[78040000]      	mov qword [free_var_143], rax
 18943 0000F213 48B8-                   	mov rax, sob_void
 18943 0000F215 [0000000000000000] 
 18944                                  
 18945 0000F21D 4889C7                  	mov rdi, rax
 18946 0000F220 E8C9070000              	call print_sexpr_if_not_void
 18947                                  
 18948 0000F225 BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 18949 0000F22A E8AE070000              	call malloc
 18950 0000F22F 50                      	push rax
 18951 0000F230 BF00000000              	mov rdi, 8 * 0	; new rib
 18952 0000F235 E8A3070000              	call malloc
 18953 0000F23A 50                      	push rax
 18954 0000F23B BF08000000              	mov rdi, 8 * 1	; extended env
 18955 0000F240 E898070000              	call malloc
 18956 0000F245 488B7D10                	mov rdi, ENV
 18957 0000F249 BE00000000              	mov rsi, 0
 18958 0000F24E BA01000000              	mov rdx, 1
 18959                                  .L_lambda_simple_env_loop_0137:	; ext_env[i + 1] <-- env[i]
 18960 0000F253 4883FE00                	cmp rsi, 0
 18961 0000F257 7410                    	je .L_lambda_simple_env_end_0137
 18962 0000F259 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 18963 0000F25D 48890CD0                	mov qword [rax + 8 * rdx], rcx
 18964 0000F261 48FFC6                  	inc rsi
 18965 0000F264 48FFC2                  	inc rdx
 18966 0000F267 EBEA                    	jmp .L_lambda_simple_env_loop_0137
 18967                                  .L_lambda_simple_env_end_0137:
 18968 0000F269 5B                      	pop rbx
 18969 0000F26A BE00000000              	mov rsi, 0
 18970                                  .L_lambda_simple_params_loop_0137:	; copy params
 18971 0000F26F 4883FE00                	cmp rsi, 0
 18972 0000F273 740E                    	je .L_lambda_simple_params_end_0137
 18973 0000F275 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 18974 0000F27A 488914F3                	mov qword [rbx + 8 * rsi], rdx
 18975 0000F27E 48FFC6                  	inc rsi
 18976 0000F281 EBEC                    	jmp .L_lambda_simple_params_loop_0137
 18977                                  .L_lambda_simple_params_end_0137:
 18978 0000F283 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 18979 0000F286 4889C3                  	mov rbx, rax
 18980 0000F289 58                      	pop rax
 18981 0000F28A C60005                  	mov byte [rax], T_closure
 18982 0000F28D 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 18983 0000F291 48C74009[9EF20000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0137
 18984 0000F299 E934040000              	jmp .L_lambda_simple_end_0137
 18985                                  .L_lambda_simple_code_0137:	; lambda-simple body
 18986 0000F29E 48837C241002            	cmp qword [rsp + 8 * 2], 2
 18987 0000F2A4 740B                    	je .L_lambda_simple_arity_check_ok_0137
 18988 0000F2A6 FF742410                	push qword [rsp + 8 * 2]
 18989 0000F2AA 6A02                    	push 2
 18990 0000F2AC E9E5060000              	jmp L_error_incorrect_arity_simple
 18991                                  .L_lambda_simple_arity_check_ok_0137:
 18992 0000F2B1 C8000000                	enter 0, 0
 18993 0000F2B5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 18994 0000F2B9 50                      	push rax
 18995 0000F2BA 6A01                    	push 1
 18996 0000F2BC 488B0425[08000000]      	mov rax, qword [free_var_1]
 18997                                  	assert_closure(rax)
    42 0000F2C4 803805              <1>  cmp byte [%1], %2
    43 0000F2C7 0F85041F0000        <1>  jne L_error_incorrect_type
 18998 0000F2CD FF7001                  	push SOB_CLOSURE_ENV(rax)
 18999 0000F2D0 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19000 0000F2D3 483D[02000000]          	cmp rax, sob_boolean_false
 19001 0000F2D9 7420                              	je .L_if_else_00b2
 19002 0000F2DB 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19003 0000F2DF 50                      	push rax
 19004 0000F2E0 6A01                    	push 1
 19005 0000F2E2 488B0425[08000000]      	mov rax, qword [free_var_1]
 19006                                  	assert_closure(rax)
    42 0000F2EA 803805              <1>  cmp byte [%1], %2
    43 0000F2ED 0F85DE1E0000        <1>  jne L_error_incorrect_type
 19007 0000F2F3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19008 0000F2F6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19009 0000F2F9 EB0A                    	jmp .L_if_end_00b2
 19010                                            .L_if_else_00b2:
 19011 0000F2FB 48B8-                             	mov rax, L_constants + 2
 19011 0000F2FD [0200000000000000] 
 19012                                  .L_if_end_00b2:
 19013 0000F305 483D[02000000]          	cmp rax, sob_boolean_false
 19014 0000F30B 0F84FA000000                      	je .L_if_else_00ba
 19015 0000F311 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19016 0000F315 50                      	push rax
 19017 0000F316 6A01                    	push 1
 19018 0000F318 488B0425[80000000]      	mov rax, qword [free_var_16]
 19019                                  	assert_closure(rax)
    42 0000F320 803805              <1>  cmp byte [%1], %2
    43 0000F323 0F85A81E0000        <1>  jne L_error_incorrect_type
 19020 0000F329 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19021 0000F32C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19022 0000F32F 50                      	push rax
 19023 0000F330 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19024 0000F334 50                      	push rax
 19025 0000F335 6A01                    	push 1
 19026 0000F337 488B0425[80000000]      	mov rax, qword [free_var_16]
 19027                                  	assert_closure(rax)
    42 0000F33F 803805              <1>  cmp byte [%1], %2
    43 0000F342 0F85891E0000        <1>  jne L_error_incorrect_type
 19028 0000F348 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19029 0000F34B FF5009                  	call SOB_CLOSURE_CODE(rax)
 19030 0000F34E 50                      	push rax
 19031 0000F34F 6A02                    	push 2
 19032 0000F351 488B0425[80040000]      	mov rax, qword [free_var_144]
 19033                                  	assert_closure(rax)
    42 0000F359 803805              <1>  cmp byte [%1], %2
    43 0000F35C 0F856F1E0000        <1>  jne L_error_incorrect_type
 19034 0000F362 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19035 0000F365 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19036 0000F368 483D[02000000]          	cmp rax, sob_boolean_false
 19037 0000F36E 0F8488000000                      	je .L_if_else_00b3
 19038 0000F374 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19039 0000F378 50                      	push rax
 19040 0000F379 6A01                    	push 1
 19041 0000F37B 488B0425[88000000]      	mov rax, qword [free_var_17]
 19042                                  	assert_closure(rax)
    42 0000F383 803805              <1>  cmp byte [%1], %2
    43 0000F386 0F85451E0000        <1>  jne L_error_incorrect_type
 19043 0000F38C FF7001                  	push SOB_CLOSURE_ENV(rax)
 19044 0000F38F FF5009                  	call SOB_CLOSURE_CODE(rax)
 19045 0000F392 50                      	push rax
 19046 0000F393 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19047 0000F397 50                      	push rax
 19048 0000F398 6A01                    	push 1
 19049 0000F39A 488B0425[88000000]      	mov rax, qword [free_var_17]
 19050                                  	assert_closure(rax)
    42 0000F3A2 803805              <1>  cmp byte [%1], %2
    43 0000F3A5 0F85261E0000        <1>  jne L_error_incorrect_type
 19051 0000F3AB FF7001                  	push SOB_CLOSURE_ENV(rax)
 19052 0000F3AE FF5009                  	call SOB_CLOSURE_CODE(rax)
 19053 0000F3B1 50                      	push rax
 19054 0000F3B2 6A02                    	push 2
 19055 0000F3B4 488B0425[80040000]      	mov rax, qword [free_var_144]
 19056                                  	assert_closure(rax)
    42 0000F3BC 803805              <1>  cmp byte [%1], %2
    43 0000F3BF 0F850C1E0000        <1>  jne L_error_incorrect_type
 19057 0000F3C5 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19058 0000F3C8 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19059 0000F3CB FF7500                  	push qword [rbp] ; same the old rbp
 19060 0000F3CE BA05000000              	mov rdx, 2 + 3
 19061 0000F3D3 488B4D00                	mov rcx, [rbp]
 19062 0000F3D7 4889EF                  	mov rdi, rbp
 19063                                  .L_tc_recycle_frame_loop_0167:
 19064 0000F3DA 4883FA00                	cmp rdx, 0
 19065 0000F3DE 7413                    	je .L_tc_recycle_frame_done_0167
 19066 0000F3E0 4883E908                	sub rcx, 8
 19067 0000F3E4 4883EF08                	sub rdi, 8
 19068 0000F3E8 488B37                  	mov rsi, [rdi]
 19069 0000F3EB 488931                  	mov qword [rcx], rsi
 19070 0000F3EE 48FFCA                  	dec rdx
 19071 0000F3F1 EBE7                    	jmp .L_tc_recycle_frame_loop_0167
 19072                                  .L_tc_recycle_frame_done_0167:
 19073 0000F3F3 5D                      	pop rbp ; restore the old rbp
 19074 0000F3F4 4889CC                  	mov rsp, rcx
 19075 0000F3F7 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19076 0000F3FA EB0A                    	jmp .L_if_end_00b3
 19077                                            .L_if_else_00b3:
 19078 0000F3FC 48B8-                             	mov rax, L_constants + 2
 19078 0000F3FE [0200000000000000] 
 19079                                  .L_if_end_00b3:
 19080 0000F406 E9C3020000              	jmp .L_if_end_00ba
 19081                                            .L_if_else_00ba:
 19082 0000F40B 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19083 0000F40F 50                      	push rax
 19084 0000F410 6A01                    	push 1
 19085 0000F412 488B0425[30000000]      	mov rax, qword [free_var_6]
 19086                                  	assert_closure(rax)
    42 0000F41A 803805              <1>  cmp byte [%1], %2
    43 0000F41D 0F85AE1D0000        <1>  jne L_error_incorrect_type
 19087 0000F423 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19088 0000F426 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19089 0000F429 483D[02000000]          	cmp rax, sob_boolean_false
 19090 0000F42F 0F848B000000                      	je .L_if_else_00b5
 19091 0000F435 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19092 0000F439 50                      	push rax
 19093 0000F43A 6A01                    	push 1
 19094 0000F43C 488B0425[30000000]      	mov rax, qword [free_var_6]
 19095                                  	assert_closure(rax)
    42 0000F444 803805              <1>  cmp byte [%1], %2
    43 0000F447 0F85841D0000        <1>  jne L_error_incorrect_type
 19096 0000F44D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19097 0000F450 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19098 0000F453 483D[02000000]          	cmp rax, sob_boolean_false
 19099 0000F459 7459                              	je .L_if_else_00b4
 19100 0000F45B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19101 0000F45F 50                      	push rax
 19102 0000F460 6A01                    	push 1
 19103 0000F462 488B0425[98000000]      	mov rax, qword [free_var_19]
 19104                                  	assert_closure(rax)
    42 0000F46A 803805              <1>  cmp byte [%1], %2
    43 0000F46D 0F855E1D0000        <1>  jne L_error_incorrect_type
 19105 0000F473 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19106 0000F476 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19107 0000F479 50                      	push rax
 19108 0000F47A 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19109 0000F47E 50                      	push rax
 19110 0000F47F 6A01                    	push 1
 19111 0000F481 488B0425[98000000]      	mov rax, qword [free_var_19]
 19112                                  	assert_closure(rax)
    42 0000F489 803805              <1>  cmp byte [%1], %2
    43 0000F48C 0F853F1D0000        <1>  jne L_error_incorrect_type
 19113 0000F492 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19114 0000F495 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19115 0000F498 50                      	push rax
 19116 0000F499 6A02                    	push 2
 19117 0000F49B 488B0425[50030000]      	mov rax, qword [free_var_106]
 19118                                  	assert_closure(rax)
    42 0000F4A3 803805              <1>  cmp byte [%1], %2
    43 0000F4A6 0F85251D0000        <1>  jne L_error_incorrect_type
 19119 0000F4AC FF7001                  	push SOB_CLOSURE_ENV(rax)
 19120 0000F4AF FF5009                  	call SOB_CLOSURE_CODE(rax)
 19121 0000F4B2 EB0A                    	jmp .L_if_end_00b4
 19122                                            .L_if_else_00b4:
 19123 0000F4B4 48B8-                             	mov rax, L_constants + 2
 19123 0000F4B6 [0200000000000000] 
 19124                                  .L_if_end_00b4:
 19125 0000F4BE EB0A                    	jmp .L_if_end_00b5
 19126                                            .L_if_else_00b5:
 19127 0000F4C0 48B8-                             	mov rax, L_constants + 2
 19127 0000F4C2 [0200000000000000] 
 19128                                  .L_if_end_00b5:
 19129 0000F4CA 483D[02000000]          	cmp rax, sob_boolean_false
 19130 0000F4D0 0F848B000000                      	je .L_if_else_00b9
 19131 0000F4D6 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19132 0000F4DA 50                      	push rax
 19133 0000F4DB 6A01                    	push 1
 19134 0000F4DD 488B0425[48040000]      	mov rax, qword [free_var_137]
 19135                                  	assert_closure(rax)
    42 0000F4E5 803805              <1>  cmp byte [%1], %2
    43 0000F4E8 0F85E31C0000        <1>  jne L_error_incorrect_type
 19136 0000F4EE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19137 0000F4F1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19138 0000F4F4 50                      	push rax
 19139 0000F4F5 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19140 0000F4F9 50                      	push rax
 19141 0000F4FA 6A01                    	push 1
 19142 0000F4FC 488B0425[48040000]      	mov rax, qword [free_var_137]
 19143                                  	assert_closure(rax)
    42 0000F504 803805              <1>  cmp byte [%1], %2
    43 0000F507 0F85C41C0000        <1>  jne L_error_incorrect_type
 19144 0000F50D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19145 0000F510 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19146 0000F513 50                      	push rax
 19147 0000F514 6A02                    	push 2
 19148 0000F516 488B0425[80040000]      	mov rax, qword [free_var_144]
 19149                                  	assert_closure(rax)
    42 0000F51E 803805              <1>  cmp byte [%1], %2
    43 0000F521 0F85AA1C0000        <1>  jne L_error_incorrect_type
 19150 0000F527 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19151 0000F52A FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19152 0000F52D FF7500                  	push qword [rbp] ; same the old rbp
 19153 0000F530 BA05000000              	mov rdx, 2 + 3
 19154 0000F535 488B4D00                	mov rcx, [rbp]
 19155 0000F539 4889EF                  	mov rdi, rbp
 19156                                  .L_tc_recycle_frame_loop_0168:
 19157 0000F53C 4883FA00                	cmp rdx, 0
 19158 0000F540 7413                    	je .L_tc_recycle_frame_done_0168
 19159 0000F542 4883E908                	sub rcx, 8
 19160 0000F546 4883EF08                	sub rdi, 8
 19161 0000F54A 488B37                  	mov rsi, [rdi]
 19162 0000F54D 488931                  	mov qword [rcx], rsi
 19163 0000F550 48FFCA                  	dec rdx
 19164 0000F553 EBE7                    	jmp .L_tc_recycle_frame_loop_0168
 19165                                  .L_tc_recycle_frame_done_0168:
 19166 0000F555 5D                      	pop rbp ; restore the old rbp
 19167 0000F556 4889CC                  	mov rsp, rcx
 19168 0000F559 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19169 0000F55C E96D010000              	jmp .L_if_end_00b9
 19170                                            .L_if_else_00b9:
 19171 0000F561 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19172 0000F565 50                      	push rax
 19173 0000F566 6A01                    	push 1
 19174 0000F568 488B0425[20000000]      	mov rax, qword [free_var_4]
 19175                                  	assert_closure(rax)
    42 0000F570 803805              <1>  cmp byte [%1], %2
    43 0000F573 0F85581C0000        <1>  jne L_error_incorrect_type
 19176 0000F579 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19177 0000F57C FF5009                  	call SOB_CLOSURE_CODE(rax)
 19178 0000F57F 483D[02000000]          	cmp rax, sob_boolean_false
 19179 0000F585 0F848B000000                      	je .L_if_else_00b7
 19180 0000F58B 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19181 0000F58F 50                      	push rax
 19182 0000F590 6A01                    	push 1
 19183 0000F592 488B0425[20000000]      	mov rax, qword [free_var_4]
 19184                                  	assert_closure(rax)
    42 0000F59A 803805              <1>  cmp byte [%1], %2
    43 0000F59D 0F852E1C0000        <1>  jne L_error_incorrect_type
 19185 0000F5A3 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19186 0000F5A6 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19187 0000F5A9 483D[02000000]          	cmp rax, sob_boolean_false
 19188 0000F5AF 7459                              	je .L_if_else_00b6
 19189 0000F5B1 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19190 0000F5B5 50                      	push rax
 19191 0000F5B6 6A01                    	push 1
 19192 0000F5B8 488B0425[90000000]      	mov rax, qword [free_var_18]
 19193                                  	assert_closure(rax)
    42 0000F5C0 803805              <1>  cmp byte [%1], %2
    43 0000F5C3 0F85081C0000        <1>  jne L_error_incorrect_type
 19194 0000F5C9 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19195 0000F5CC FF5009                  	call SOB_CLOSURE_CODE(rax)
 19196 0000F5CF 50                      	push rax
 19197 0000F5D0 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19198 0000F5D4 50                      	push rax
 19199 0000F5D5 6A01                    	push 1
 19200 0000F5D7 488B0425[90000000]      	mov rax, qword [free_var_18]
 19201                                  	assert_closure(rax)
    42 0000F5DF 803805              <1>  cmp byte [%1], %2
    43 0000F5E2 0F85E91B0000        <1>  jne L_error_incorrect_type
 19202 0000F5E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19203 0000F5EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19204 0000F5EE 50                      	push rax
 19205 0000F5EF 6A02                    	push 2
 19206 0000F5F1 488B0425[50030000]      	mov rax, qword [free_var_106]
 19207                                  	assert_closure(rax)
    42 0000F5F9 803805              <1>  cmp byte [%1], %2
    43 0000F5FC 0F85CF1B0000        <1>  jne L_error_incorrect_type
 19208 0000F602 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19209 0000F605 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19210 0000F608 EB0A                    	jmp .L_if_end_00b6
 19211                                            .L_if_else_00b6:
 19212 0000F60A 48B8-                             	mov rax, L_constants + 2
 19212 0000F60C [0200000000000000] 
 19213                                  .L_if_end_00b6:
 19214 0000F614 EB0A                    	jmp .L_if_end_00b7
 19215                                            .L_if_else_00b7:
 19216 0000F616 48B8-                             	mov rax, L_constants + 2
 19216 0000F618 [0200000000000000] 
 19217                                  .L_if_end_00b7:
 19218 0000F620 483D[02000000]          	cmp rax, sob_boolean_false
 19219 0000F626 7454                              	je .L_if_else_00b8
 19220 0000F628 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19221 0000F62C 50                      	push rax
 19222 0000F62D 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19223 0000F631 50                      	push rax
 19224 0000F632 6A02                    	push 2
 19225 0000F634 488B0425[F0030000]      	mov rax, qword [free_var_126]
 19226                                  	assert_closure(rax)
    42 0000F63C 803805              <1>  cmp byte [%1], %2
    43 0000F63F 0F858C1B0000        <1>  jne L_error_incorrect_type
 19227 0000F645 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19228 0000F648 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19229 0000F64B FF7500                  	push qword [rbp] ; same the old rbp
 19230 0000F64E BA05000000              	mov rdx, 2 + 3
 19231 0000F653 488B4D00                	mov rcx, [rbp]
 19232 0000F657 4889EF                  	mov rdi, rbp
 19233                                  .L_tc_recycle_frame_loop_0169:
 19234 0000F65A 4883FA00                	cmp rdx, 0
 19235 0000F65E 7413                    	je .L_tc_recycle_frame_done_0169
 19236 0000F660 4883E908                	sub rcx, 8
 19237 0000F664 4883EF08                	sub rdi, 8
 19238 0000F668 488B37                  	mov rsi, [rdi]
 19239 0000F66B 488931                  	mov qword [rcx], rsi
 19240 0000F66E 48FFCA                  	dec rdx
 19241 0000F671 EBE7                    	jmp .L_tc_recycle_frame_loop_0169
 19242                                  .L_tc_recycle_frame_done_0169:
 19243 0000F673 5D                      	pop rbp ; restore the old rbp
 19244 0000F674 4889CC                  	mov rsp, rcx
 19245 0000F677 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19246 0000F67A EB52                    	jmp .L_if_end_00b8
 19247                                            .L_if_else_00b8:
 19248 0000F67C 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19249 0000F680 50                      	push rax
 19250 0000F681 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19251 0000F685 50                      	push rax
 19252 0000F686 6A02                    	push 2
 19253 0000F688 488B0425[B8010000]      	mov rax, qword [free_var_55]
 19254                                  	assert_closure(rax)
    42 0000F690 803805              <1>  cmp byte [%1], %2
    43 0000F693 0F85381B0000        <1>  jne L_error_incorrect_type
 19255 0000F699 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19256 0000F69C FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19257 0000F69F FF7500                  	push qword [rbp] ; same the old rbp
 19258 0000F6A2 BA05000000              	mov rdx, 2 + 3
 19259 0000F6A7 488B4D00                	mov rcx, [rbp]
 19260 0000F6AB 4889EF                  	mov rdi, rbp
 19261                                  .L_tc_recycle_frame_loop_016a:
 19262 0000F6AE 4883FA00                	cmp rdx, 0
 19263 0000F6B2 7413                    	je .L_tc_recycle_frame_done_016a
 19264 0000F6B4 4883E908                	sub rcx, 8
 19265 0000F6B8 4883EF08                	sub rdi, 8
 19266 0000F6BC 488B37                  	mov rsi, [rdi]
 19267 0000F6BF 488931                  	mov qword [rcx], rsi
 19268 0000F6C2 48FFCA                  	dec rdx
 19269 0000F6C5 EBE7                    	jmp .L_tc_recycle_frame_loop_016a
 19270                                  .L_tc_recycle_frame_done_016a:
 19271 0000F6C7 5D                      	pop rbp ; restore the old rbp
 19272 0000F6C8 4889CC                  	mov rsp, rcx
 19273 0000F6CB FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19274                                  .L_if_end_00b8:
 19275                                  .L_if_end_00b9:
 19276                                  .L_if_end_00ba:
 19277 0000F6CE C9                      	leave
 19278 0000F6CF C22000                  	ret 8 * (2 + 2)
 19279                                  .L_lambda_simple_end_0137:	; new closure is in rax
 19280 0000F6D2 48890425[80040000]      	mov qword [free_var_144], rax
 19281 0000F6DA 48B8-                   	mov rax, sob_void
 19281 0000F6DC [0000000000000000] 
 19282                                  
 19283 0000F6E4 4889C7                  	mov rdi, rax
 19284 0000F6E7 E802030000              	call print_sexpr_if_not_void
 19285                                  
 19286 0000F6EC BF11000000              	mov rdi, (1 + 8 + 8)	; sob closure
 19287 0000F6F1 E8E7020000              	call malloc
 19288 0000F6F6 50                      	push rax
 19289 0000F6F7 BF00000000              	mov rdi, 8 * 0	; new rib
 19290 0000F6FC E8DC020000              	call malloc
 19291 0000F701 50                      	push rax
 19292 0000F702 BF08000000              	mov rdi, 8 * 1	; extended env
 19293 0000F707 E8D1020000              	call malloc
 19294 0000F70C 488B7D10                	mov rdi, ENV
 19295 0000F710 BE00000000              	mov rsi, 0
 19296 0000F715 BA01000000              	mov rdx, 1
 19297                                  .L_lambda_simple_env_loop_0138:	; ext_env[i + 1] <-- env[i]
 19298 0000F71A 4883FE00                	cmp rsi, 0
 19299 0000F71E 7410                    	je .L_lambda_simple_env_end_0138
 19300 0000F720 488B0CF7                	mov rcx, qword [rdi + 8 * rsi]
 19301 0000F724 48890CD0                	mov qword [rax + 8 * rdx], rcx
 19302 0000F728 48FFC6                  	inc rsi
 19303 0000F72B 48FFC2                  	inc rdx
 19304 0000F72E EBEA                    	jmp .L_lambda_simple_env_loop_0138
 19305                                  .L_lambda_simple_env_end_0138:
 19306 0000F730 5B                      	pop rbx
 19307 0000F731 BE00000000              	mov rsi, 0
 19308                                  .L_lambda_simple_params_loop_0138:	; copy params
 19309 0000F736 4883FE00                	cmp rsi, 0
 19310 0000F73A 740E                    	je .L_lambda_simple_params_end_0138
 19311 0000F73C 488B54F520              	mov rdx, qword [rbp + 8 * rsi + 8 * 4]
 19312 0000F741 488914F3                	mov qword [rbx + 8 * rsi], rdx
 19313 0000F745 48FFC6                  	inc rsi
 19314 0000F748 EBEC                    	jmp .L_lambda_simple_params_loop_0138
 19315                                  .L_lambda_simple_params_end_0138:
 19316 0000F74A 488918                  	mov qword [rax], rbx	; ext_env[0] <-- new_rib 
 19317 0000F74D 4889C3                  	mov rbx, rax
 19318 0000F750 58                      	pop rax
 19319 0000F751 C60005                  	mov byte [rax], T_closure
 19320 0000F754 48895801                	mov SOB_CLOSURE_ENV(rax), rbx
 19321 0000F758 48C74009[65F70000]      	mov SOB_CLOSURE_CODE(rax), .L_lambda_simple_code_0138
 19322 0000F760 E950010000              	jmp .L_lambda_simple_end_0138
 19323                                  .L_lambda_simple_code_0138:	; lambda-simple body
 19324 0000F765 48837C241002            	cmp qword [rsp + 8 * 2], 2
 19325 0000F76B 740B                    	je .L_lambda_simple_arity_check_ok_0138
 19326 0000F76D FF742410                	push qword [rsp + 8 * 2]
 19327 0000F771 6A02                    	push 2
 19328 0000F773 E91E020000              	jmp L_error_incorrect_arity_simple
 19329                                  .L_lambda_simple_arity_check_ok_0138:
 19330 0000F778 C8000000                	enter 0, 0
 19331 0000F77C 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 19332 0000F780 50                      	push rax
 19333 0000F781 6A01                    	push 1
 19334 0000F783 488B0425[00000000]      	mov rax, qword [free_var_0]
 19335                                  	assert_closure(rax)
    42 0000F78B 803805              <1>  cmp byte [%1], %2
    43 0000F78E 0F853D1A0000        <1>  jne L_error_incorrect_type
 19336 0000F794 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19337 0000F797 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19338 0000F79A 483D[02000000]          	cmp rax, sob_boolean_false
 19339 0000F7A0 740F                              	je .L_if_else_00bc
 19340 0000F7A2 48B8-                             	mov rax, L_constants + 2
 19340 0000F7A4 [0200000000000000] 
 19341 0000F7AC E900010000              	jmp .L_if_end_00bc
 19342                                            .L_if_else_00bc:
 19343 0000F7B1 488B4520                          	mov rax, qword [rbp + 8 * (4 + 0)]
 19344 0000F7B5 50                      	push rax
 19345 0000F7B6 488B4528                	mov rax, qword [rbp + 8 * (4 + 1)]
 19346 0000F7BA 50                      	push rax
 19347 0000F7BB 6A01                    	push 1
 19348 0000F7BD 488B0425[C0010000]      	mov rax, qword [free_var_56]
 19349                                  	assert_closure(rax)
    42 0000F7C5 803805              <1>  cmp byte [%1], %2
    43 0000F7C8 0F85031A0000        <1>  jne L_error_incorrect_type
 19350 0000F7CE FF7001                  	push SOB_CLOSURE_ENV(rax)
 19351 0000F7D1 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19352 0000F7D4 50                      	push rax
 19353 0000F7D5 6A02                    	push 2
 19354 0000F7D7 488B0425[B8010000]      	mov rax, qword [free_var_55]
 19355                                  	assert_closure(rax)
    42 0000F7DF 803805              <1>  cmp byte [%1], %2
    43 0000F7E2 0F85E9190000        <1>  jne L_error_incorrect_type
 19356 0000F7E8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19357 0000F7EB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19358 0000F7EE 483D[02000000]          	cmp rax, sob_boolean_false
 19359 0000F7F4 744F                              	je .L_if_else_00bb
 19360 0000F7F6 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19361 0000F7FA 50                      	push rax
 19362 0000F7FB 6A01                    	push 1
 19363 0000F7FD 488B0425[80000000]      	mov rax, qword [free_var_16]
 19364                                  	assert_closure(rax)
    42 0000F805 803805              <1>  cmp byte [%1], %2
    43 0000F808 0F85C3190000        <1>  jne L_error_incorrect_type
 19365 0000F80E FF7001                  	push SOB_CLOSURE_ENV(rax)
 19366 0000F811 FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19367 0000F814 FF7500                  	push qword [rbp] ; same the old rbp
 19368 0000F817 BA04000000              	mov rdx, 1 + 3
 19369 0000F81C 488B4D00                	mov rcx, [rbp]
 19370 0000F820 4889EF                  	mov rdi, rbp
 19371                                  .L_tc_recycle_frame_loop_016b:
 19372 0000F823 4883FA00                	cmp rdx, 0
 19373 0000F827 7413                    	je .L_tc_recycle_frame_done_016b
 19374 0000F829 4883E908                	sub rcx, 8
 19375 0000F82D 4883EF08                	sub rdi, 8
 19376 0000F831 488B37                  	mov rsi, [rdi]
 19377 0000F834 488931                  	mov qword [rcx], rsi
 19378 0000F837 48FFCA                  	dec rdx
 19379 0000F83A EBE7                    	jmp .L_tc_recycle_frame_loop_016b
 19380                                  .L_tc_recycle_frame_done_016b:
 19381 0000F83C 5D                      	pop rbp ; restore the old rbp
 19382 0000F83D 4889CC                  	mov rsp, rcx
 19383 0000F840 FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19384 0000F843 EB6C                    	jmp .L_if_end_00bb
 19385                                            .L_if_else_00bb:
 19386 0000F845 488B4528                          	mov rax, qword [rbp + 8 * (4 + 1)]
 19387 0000F849 50                      	push rax
 19388 0000F84A 6A01                    	push 1
 19389 0000F84C 488B0425[88000000]      	mov rax, qword [free_var_17]
 19390                                  	assert_closure(rax)
    42 0000F854 803805              <1>  cmp byte [%1], %2
    43 0000F857 0F8574190000        <1>  jne L_error_incorrect_type
 19391 0000F85D FF7001                  	push SOB_CLOSURE_ENV(rax)
 19392 0000F860 FF5009                  	call SOB_CLOSURE_CODE(rax)
 19393 0000F863 50                      	push rax
 19394 0000F864 488B4520                	mov rax, qword [rbp + 8 * (4 + 0)]
 19395 0000F868 50                      	push rax
 19396 0000F869 6A02                    	push 2
 19397 0000F86B 488B0425[88040000]      	mov rax, qword [free_var_145]
 19398                                  	assert_closure(rax)
    42 0000F873 803805              <1>  cmp byte [%1], %2
    43 0000F876 0F8555190000        <1>  jne L_error_incorrect_type
 19399 0000F87C FF7001                  	push SOB_CLOSURE_ENV(rax)
 19400 0000F87F FF7508                  	push qword [rbp + 8 * 1] ; old ret addr
 19401 0000F882 FF7500                  	push qword [rbp] ; same the old rbp
 19402 0000F885 BA05000000              	mov rdx, 2 + 3
 19403 0000F88A 488B4D00                	mov rcx, [rbp]
 19404 0000F88E 4889EF                  	mov rdi, rbp
 19405                                  .L_tc_recycle_frame_loop_016c:
 19406 0000F891 4883FA00                	cmp rdx, 0
 19407 0000F895 7413                    	je .L_tc_recycle_frame_done_016c
 19408 0000F897 4883E908                	sub rcx, 8
 19409 0000F89B 4883EF08                	sub rdi, 8
 19410 0000F89F 488B37                  	mov rsi, [rdi]
 19411 0000F8A2 488931                  	mov qword [rcx], rsi
 19412 0000F8A5 48FFCA                  	dec rdx
 19413 0000F8A8 EBE7                    	jmp .L_tc_recycle_frame_loop_016c
 19414                                  .L_tc_recycle_frame_done_016c:
 19415 0000F8AA 5D                      	pop rbp ; restore the old rbp
 19416 0000F8AB 4889CC                  	mov rsp, rcx
 19417 0000F8AE FF6009                  	jmp SOB_CLOSURE_CODE(rax)
 19418                                  .L_if_end_00bb:
 19419                                  .L_if_end_00bc:
 19420 0000F8B1 C9                      	leave
 19421 0000F8B2 C22000                  	ret 8 * (2 + 2)
 19422                                  .L_lambda_simple_end_0138:	; new closure is in rax
 19423 0000F8B5 48890425[88040000]      	mov qword [free_var_145], rax
 19424 0000F8BD 48B8-                   	mov rax, sob_void
 19424 0000F8BF [0000000000000000] 
 19425                                  
 19426 0000F8C7 4889C7                  	mov rdi, rax
 19427 0000F8CA E81F010000              	call print_sexpr_if_not_void
 19428                                  
 19429 0000F8CF 48B8-                   	mov rax, L_constants + 512
 19429 0000F8D1 [0002000000000000] 
 19430 0000F8D9 50                      	push rax
 19431 0000F8DA 48B8-                   	mov rax, L_constants + 128
 19431 0000F8DC [8000000000000000] 
 19432 0000F8E4 50                      	push rax
 19433 0000F8E5 6A02                    	push 2
 19434 0000F8E7 488B0425[08030000]      	mov rax, qword [free_var_97]
 19435                                  	assert_closure(rax)
    42 0000F8EF 803805              <1>  cmp byte [%1], %2
    43 0000F8F2 0F85D9180000        <1>  jne L_error_incorrect_type
 19436 0000F8F8 FF7001                  	push SOB_CLOSURE_ENV(rax)
 19437 0000F8FB FF5009                  	call SOB_CLOSURE_CODE(rax)
 19438                                  
 19439 0000F8FE 4889C7                  	mov rdi, rax
 19440 0000F901 E8E8000000              	call print_sexpr_if_not_void
 19441                                  
 19442 0000F906 48BF-                           mov rdi, fmt_memory_usage
 19442 0000F908 [7002000000000000] 
 19443 0000F910 488B3425[F7020000]              mov rsi, qword [top_of_memory]
 19444 0000F918 4881EE[90040000]                sub rsi, memory
 19445 0000F91F B800000000                      mov rax, 0
 19446                                  	ENTER
    33 0000F924 C8000000            <1>  enter 0, 0
    34 0000F928 4883E4F0            <1>  and rsp, ~15
 19447 0000F92C E8(00000000)                    call printf
 19448                                  	LEAVE
    38 0000F931 C9                  <1>  leave
 19449 0000F932 C9                      	leave
 19450 0000F933 C3                      	ret
 19451                                  
 19452                                  L_error_non_closure:
 19453 0000F934 488B3C25[00000000]              mov rdi, qword [stderr]
 19454 0000F93C 48BE-                           mov rsi, fmt_non_closure
 19454 0000F93E [A702000000000000] 
 19455 0000F946 B800000000                      mov rax, 0
 19456                                  	ENTER
    33 0000F94B C8000000            <1>  enter 0, 0
    34 0000F94F 4883E4F0            <1>  and rsp, ~15
 19457 0000F953 E8(00000000)                    call fprintf
 19458                                  	LEAVE
    38 0000F958 C9                  <1>  leave
 19459 0000F959 48C7C0FEFFFFFF                  mov rax, -2
 19460 0000F960 E8(00000000)                    call exit
 19461                                  
 19462                                  L_error_improper_list:
 19463 0000F965 488B3C25[00000000]      	mov rdi, qword [stderr]
 19464 0000F96D 48BE-                   	mov rsi, fmt_error_improper_list
 19464 0000F96F [CF02000000000000] 
 19465 0000F977 B800000000              	mov rax, 0
 19466                                  	ENTER
    33 0000F97C C8000000            <1>  enter 0, 0
    34 0000F980 4883E4F0            <1>  and rsp, ~15
 19467 0000F984 E8(00000000)            	call fprintf
 19468                                  	LEAVE
    38 0000F989 C9                  <1>  leave
 19469 0000F98A 48C7C0F9FFFFFF          	mov rax, -7
 19470 0000F991 E8(00000000)            	call exit
 19471                                  
 19472                                  L_error_incorrect_arity_simple:
 19473 0000F996 488B3C25[00000000]              mov rdi, qword [stderr]
 19474 0000F99E 48BE-                           mov rsi, fmt_incorrect_arity_simple
 19474 0000F9A0 [1102000000000000] 
 19475 0000F9A8 EB12                            jmp L_error_incorrect_arity_common
 19476                                  L_error_incorrect_arity_opt:
 19477 0000F9AA 488B3C25[00000000]              mov rdi, qword [stderr]
 19478 0000F9B2 48BE-                           mov rsi, fmt_incorrect_arity_opt
 19478 0000F9B4 [3C02000000000000] 
 19479                                  L_error_incorrect_arity_common:
 19480 0000F9BC 5A                              pop rdx
 19481 0000F9BD 59                              pop rcx
 19482 0000F9BE B800000000                      mov rax, 0
 19483                                  	ENTER
    33 0000F9C3 C8000000            <1>  enter 0, 0
    34 0000F9C7 4883E4F0            <1>  and rsp, ~15
 19484 0000F9CB E8(00000000)                    call fprintf
 19485                                  	LEAVE
    38 0000F9D0 C9                  <1>  leave
 19486 0000F9D1 48C7C0FAFFFFFF                  mov rax, -6
 19487 0000F9D8 E8(00000000)                    call exit
 19488                                  
 19489                                  section .data
 19490                                  fmt_incorrect_arity_simple:
 19491 00000211 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
 19491 0000021A 74656420256C642061-
 19491 00000223 7267756D656E74732C-
 19491 0000022C 206275742067697665-
 19491 00000235 6E20256C640A00     
 19492                                  fmt_incorrect_arity_opt:
 19493 0000023C 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
 19493 00000245 746564206174206C65-
 19493 0000024E 61737420256C642061-
 19493 00000257 7267756D656E74732C-
 19493 00000260 206275742067697665-
 19493 00000269 6E20256C640A00     
 19494                                  fmt_memory_usage:
 19495 00000270 0A0A21212120557365-             db `\n\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
 19495 00000279 6420256C6420627974-
 19495 00000282 6573206F662064796E-
 19495 0000028B 616D6963616C6C792D-
 19495 00000294 616C6C6F6361746564-
 19495 0000029D 206D656D6F72790A0A-
 19495 000002A6 00                 
 19496                                  fmt_non_closure:
 19497 000002A7 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
 19497 000002B0 7074696E6720746F20-
 19497 000002B9 6170706C792061206E-
 19497 000002C2 6F6E2D636C6F737572-
 19497 000002CB 65210A00           
 19498                                  fmt_error_improper_list:
 19499 000002CF 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
 19499 000002D8 7267756D656E742069-
 19499 000002E1 73206E6F7420612070-
 19499 000002EA 726F706572206C6973-
 19499 000002F3 74210A00           
 19500                                  
 19501                                  section .bss
 19502                                  memory:
 19503 00000490 <res 40000000h>         	resb gbytes(1)
 19504                                  
 19505                                  section .data
 19506                                  top_of_memory:
 19507 000002F7 [9004000000000000]              dq memory
 19508                                  
 19509                                  section .text
 19510                                  malloc:
 19511 0000F9DD 488B0425[F7020000]              mov rax, qword [top_of_memory]
 19512 0000F9E5 48013C25[F7020000]              add qword [top_of_memory], rdi
 19513 0000F9ED C3                              ret
 19514                                          
 19515                                  print_sexpr_if_not_void:
 19516 0000F9EE 4881FF[00000000]        	cmp rdi, sob_void
 19517 0000F9F5 7501                    	jne print_sexpr
 19518 0000F9F7 C3                      	ret
 19519                                  
 19520                                  section .data
 19521                                  fmt_void:
 19522 000002FF 233C766F69643E00        	db `#<void>\0`
 19523                                  fmt_nil:
 19524 00000307 282900                  	db `()\0`
 19525                                  fmt_boolean_false:
 19526 0000030A 236600                  	db `#f\0`
 19527                                  fmt_boolean_true:
 19528 0000030D 237400                  	db `#t\0`
 19529                                  fmt_char_backslash:
 19530 00000310 235C5C00                	db `#\\\\\0`
 19531                                  fmt_char_dquote:
 19532 00000314 235C2200                	db `#\\"\0`
 19533                                  fmt_char_simple:
 19534 00000318 235C256300              	db `#\\%c\0`
 19535                                  fmt_char_null:
 19536 0000031D 235C6E756C00            	db `#\\nul\0`
 19537                                  fmt_char_bell:
 19538 00000323 235C62656C6C00          	db `#\\bell\0`
 19539                                  fmt_char_backspace:
 19540 0000032A 235C6261636B737061-     	db `#\\backspace\0`
 19540 00000333 636500             
 19541                                  fmt_char_tab:
 19542 00000336 235C74616200            	db `#\\tab\0`
 19543                                  fmt_char_newline:
 19544 0000033C 235C6E65776C696E65-     	db `#\\newline\0`
 19544 00000345 00                 
 19545                                  fmt_char_formfeed:
 19546 00000346 235C7061676500          	db `#\\page\0`
 19547                                  fmt_char_return:
 19548 0000034D 235C72657475726E00      	db `#\\return\0`
 19549                                  fmt_char_escape:
 19550 00000356 235C65736300            	db `#\\esc\0`
 19551                                  fmt_char_space:
 19552 0000035C 235C737061636500        	db `#\\space\0`
 19553                                  fmt_char_hex:
 19554 00000364 235C782530325800        	db `#\\x%02X\0`
 19555                                  fmt_closure:
 19556 0000036C 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
 19556 00000375 206174203078253038-
 19556 0000037E 5820656E763D307825-
 19556 00000387 30385820636F64653D-
 19556 00000390 3078253038583E00   
 19557                                  fmt_lparen:
 19558 00000398 2800                    	db `(\0`
 19559                                  fmt_dotted_pair:
 19560 0000039A 202E2000                	db ` . \0`
 19561                                  fmt_rparen:
 19562 0000039E 2900                    	db `)\0`
 19563                                  fmt_space:
 19564 000003A0 2000                    	db ` \0`
 19565                                  fmt_empty_vector:
 19566 000003A2 23282900                	db `#()\0`
 19567                                  fmt_vector:
 19568 000003A6 232800                  	db `#(\0`
 19569                                  fmt_real:
 19570 000003A9 256600                  	db `%f\0`
 19571                                  fmt_fraction:
 19572 000003AC 256C642F256C6400        	db `%ld/%ld\0`
 19573                                  fmt_zero:
 19574 000003B4 3000                    	db `0\0`
 19575                                  fmt_int:
 19576 000003B6 256C6400                	db `%ld\0`
 19577                                  fmt_unknown_sexpr_error:
 19578 000003BA 0A0A21212120457272-     	db `\n\n!!! Error: Unknown type of sexpr (0x%02X) `
 19578 000003C3 6F723A20556E6B6E6F-
 19578 000003CC 776E2074797065206F-
 19578 000003D5 662073657870722028-
 19578 000003DE 3078253032582920   
 19579 000003E6 617420616464726573-     	db `at address 0x%08X\n\n\0`
 19579 000003EF 73203078253038580A-
 19579 000003F8 0A00               
 19580                                  fmt_dquote:
 19581 000003FA 2200                    	db `\"\0`
 19582                                  fmt_string_char:
 19583 000003FC 256300                          db `%c\0`
 19584                                  fmt_string_char_7:
 19585 000003FF 5C6100                          db `\\a\0`
 19586                                  fmt_string_char_8:
 19587 00000402 5C6200                          db `\\b\0`
 19588                                  fmt_string_char_9:
 19589 00000405 5C7400                          db `\\t\0`
 19590                                  fmt_string_char_10:
 19591 00000408 5C6E00                          db `\\n\0`
 19592                                  fmt_string_char_11:
 19593 0000040B 5C7600                          db `\\v\0`
 19594                                  fmt_string_char_12:
 19595 0000040E 5C6600                          db `\\f\0`
 19596                                  fmt_string_char_13:
 19597 00000411 5C7200                          db `\\r\0`
 19598                                  fmt_string_char_34:
 19599 00000414 5C2200                          db `\\"\0`
 19600                                  fmt_string_char_92:
 19601 00000417 5C5C00                          db `\\\\\0`
 19602                                  fmt_string_char_hex:
 19603 0000041A 5C7825583B00                    db `\\x%X;\0`
 19604                                  
 19605                                  section .text
 19606                                  
 19607                                  print_sexpr:
 19608                                  	ENTER
    33 0000F9F8 C8000000            <1>  enter 0, 0
    34 0000F9FC 4883E4F0            <1>  and rsp, ~15
 19609 0000FA00 8A07                    	mov al, byte [rdi]
 19610 0000FA02 3C00                    	cmp al, T_void
 19611 0000FA04 744D                    	je .Lvoid
 19612 0000FA06 3C01                    	cmp al, T_nil
 19613 0000FA08 7458                    	je .Lnil
 19614 0000FA0A 3C09                    	cmp al, T_boolean_false
 19615 0000FA0C 7463                    	je .Lboolean_false
 19616 0000FA0E 3C0A                    	cmp al, T_boolean_true
 19617 0000FA10 746E                    	je .Lboolean_true
 19618 0000FA12 3C02                    	cmp al, T_char
 19619 0000FA14 7479                    	je .Lchar
 19620 0000FA16 3C04                    	cmp al, T_symbol
 19621 0000FA18 0F84BB010000            	je .Lsymbol
 19622 0000FA1E 3C21                    	cmp al, T_pair
 19623 0000FA20 0F84D6010000            	je .Lpair
 19624 0000FA26 3C22                    	cmp al, T_vector
 19625 0000FA28 0F849F020000            	je .Lvector
 19626 0000FA2E 3C05                    	cmp al, T_closure
 19627 0000FA30 0F8489010000            	je .Lclosure
 19628 0000FA36 3C12                    	cmp al, T_real
 19629 0000FA38 0F8430030000            	je .Lreal
 19630 0000FA3E 3C11                    	cmp al, T_rational
 19631 0000FA40 0F8456030000            	je .Lrational
 19632 0000FA46 3C03                    	cmp al, T_string
 19633 0000FA48 0F848F030000            	je .Lstring
 19634                                  
 19635 0000FA4E E9C7040000              	jmp .Lunknown_sexpr_type
 19636                                  
 19637                                  .Lvoid:
 19638 0000FA53 48BF-                   	mov rdi, fmt_void
 19638 0000FA55 [FF02000000000000] 
 19639 0000FA5D E9F5040000              	jmp .Lemit
 19640                                  
 19641                                  .Lnil:
 19642 0000FA62 48BF-                   	mov rdi, fmt_nil
 19642 0000FA64 [0703000000000000] 
 19643 0000FA6C E9E6040000              	jmp .Lemit
 19644                                  
 19645                                  .Lboolean_false:
 19646 0000FA71 48BF-                   	mov rdi, fmt_boolean_false
 19646 0000FA73 [0A03000000000000] 
 19647 0000FA7B E9D7040000              	jmp .Lemit
 19648                                  
 19649                                  .Lboolean_true:
 19650 0000FA80 48BF-                   	mov rdi, fmt_boolean_true
 19650 0000FA82 [0D03000000000000] 
 19651 0000FA8A E9C8040000              	jmp .Lemit
 19652                                  
 19653                                  .Lchar:
 19654 0000FA8F 8A4701                  	mov al, byte [rdi + 1]
 19655 0000FA92 3C20                    	cmp al, ' '
 19656 0000FA94 7E28                    	jle .Lchar_whitespace
 19657 0000FA96 3C5C                    	cmp al, 92 		; backslash
 19658 0000FA98 0F847C000000            	je .Lchar_backslash
 19659 0000FA9E 3C22                    	cmp al, '"'
 19660 0000FAA0 0F8483000000            	je .Lchar_dquote
 19661 0000FAA6 4825FF000000            	and rax, 255
 19662 0000FAAC 48BF-                   	mov rdi, fmt_char_simple
 19662 0000FAAE [1803000000000000] 
 19663 0000FAB6 4889C6                  	mov rsi, rax
 19664 0000FAB9 E999040000              	jmp .Lemit
 19665                                  
 19666                                  .Lchar_whitespace:
 19667 0000FABE 3C00                    	cmp al, 0
 19668 0000FAC0 7476                    	je .Lchar_null
 19669 0000FAC2 3C07                    	cmp al, 7
 19670 0000FAC4 0F847D000000            	je .Lchar_bell
 19671 0000FACA 3C08                    	cmp al, 8
 19672 0000FACC 0F8484000000            	je .Lchar_backspace
 19673 0000FAD2 3C09                    	cmp al, 9
 19674 0000FAD4 0F848B000000            	je .Lchar_tab
 19675 0000FADA 3C0A                    	cmp al, 10
 19676 0000FADC 0F8492000000            	je .Lchar_newline
 19677 0000FAE2 3C0C                    	cmp al, 12
 19678 0000FAE4 0F8499000000            	je .Lchar_formfeed
 19679 0000FAEA 3C0D                    	cmp al, 13
 19680 0000FAEC 0F84A0000000            	je .Lchar_return
 19681 0000FAF2 3C1B                    	cmp al, 27
 19682 0000FAF4 0F84A7000000            	je .Lchar_escape
 19683 0000FAFA 4825FF000000            	and rax, 255
 19684 0000FB00 3C20                    	cmp al, ' '
 19685 0000FB02 0F84A8000000            	je .Lchar_space
 19686 0000FB08 48BF-                   	mov rdi, fmt_char_hex
 19686 0000FB0A [6403000000000000] 
 19687 0000FB12 4889C6                  	mov rsi, rax
 19688 0000FB15 E93D040000              	jmp .Lemit	
 19689                                  
 19690                                  .Lchar_backslash:
 19691 0000FB1A 48BF-                   	mov rdi, fmt_char_backslash
 19691 0000FB1C [1003000000000000] 
 19692 0000FB24 E92E040000              	jmp .Lemit
 19693                                  
 19694                                  .Lchar_dquote:
 19695 0000FB29 48BF-                   	mov rdi, fmt_char_dquote
 19695 0000FB2B [1403000000000000] 
 19696 0000FB33 E91F040000              	jmp .Lemit
 19697                                  
 19698                                  .Lchar_null:
 19699 0000FB38 48BF-                   	mov rdi, fmt_char_null
 19699 0000FB3A [1D03000000000000] 
 19700 0000FB42 E910040000              	jmp .Lemit
 19701                                  
 19702                                  .Lchar_bell:
 19703 0000FB47 48BF-                   	mov rdi, fmt_char_bell
 19703 0000FB49 [2303000000000000] 
 19704 0000FB51 E901040000              	jmp .Lemit
 19705                                  
 19706                                  .Lchar_backspace:
 19707 0000FB56 48BF-                   	mov rdi, fmt_char_backspace
 19707 0000FB58 [2A03000000000000] 
 19708 0000FB60 E9F2030000              	jmp .Lemit
 19709                                  
 19710                                  .Lchar_tab:
 19711 0000FB65 48BF-                   	mov rdi, fmt_char_tab
 19711 0000FB67 [3603000000000000] 
 19712 0000FB6F E9E3030000              	jmp .Lemit
 19713                                  
 19714                                  .Lchar_newline:
 19715 0000FB74 48BF-                   	mov rdi, fmt_char_newline
 19715 0000FB76 [3C03000000000000] 
 19716 0000FB7E E9D4030000              	jmp .Lemit
 19717                                  
 19718                                  .Lchar_formfeed:
 19719 0000FB83 48BF-                   	mov rdi, fmt_char_formfeed
 19719 0000FB85 [4603000000000000] 
 19720 0000FB8D E9C5030000              	jmp .Lemit
 19721                                  
 19722                                  .Lchar_return:
 19723 0000FB92 48BF-                   	mov rdi, fmt_char_return
 19723 0000FB94 [4D03000000000000] 
 19724 0000FB9C E9B6030000              	jmp .Lemit
 19725                                  
 19726                                  .Lchar_escape:
 19727 0000FBA1 48BF-                   	mov rdi, fmt_char_escape
 19727 0000FBA3 [5603000000000000] 
 19728 0000FBAB E9A7030000              	jmp .Lemit
 19729                                  
 19730                                  .Lchar_space:
 19731 0000FBB0 48BF-                   	mov rdi, fmt_char_space
 19731 0000FBB2 [5C03000000000000] 
 19732 0000FBBA E998030000              	jmp .Lemit
 19733                                  
 19734                                  .Lclosure:
 19735 0000FBBF 4889FE                  	mov rsi, qword rdi
 19736 0000FBC2 48BF-                   	mov rdi, fmt_closure
 19736 0000FBC4 [6C03000000000000] 
 19737 0000FBCC 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
 19738 0000FBD0 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
 19739 0000FBD4 E97E030000              	jmp .Lemit
 19740                                  
 19741                                  .Lsymbol:
 19742 0000FBD9 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
 19743 0000FBDD BE01000000              	mov rsi, 1		 ; size = 1 byte
 19744 0000FBE2 488B5701                	mov rdx, qword [rdi + 1] ; length
 19745 0000FBE6 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
 19746 0000FBEA 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
 19747 0000FBF2 E8(00000000)            	call fwrite
 19748 0000FBF7 E970030000              	jmp .Lend
 19749                                  	
 19750                                  .Lpair:
 19751 0000FBFC 57                      	push rdi
 19752 0000FBFD 48BF-                   	mov rdi, fmt_lparen
 19752 0000FBFF [9803000000000000] 
 19753 0000FC07 B800000000              	mov rax, 0
 19754                                          ENTER
    33 0000FC0C C8000000            <1>  enter 0, 0
    34 0000FC10 4883E4F0            <1>  and rsp, ~15
 19755 0000FC14 E8(00000000)            	call printf
 19756                                          LEAVE
    38 0000FC19 C9                  <1>  leave
 19757 0000FC1A 488B3C24                	mov rdi, qword [rsp] 	; pair
 19758 0000FC1E 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 19759 0000FC22 E8D1FDFFFF              	call print_sexpr
 19760 0000FC27 5F                      	pop rdi 		; pair
 19761 0000FC28 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 19762                                  .Lcdr:
 19763 0000FC2C 8A07                    	mov al, byte [rdi]
 19764 0000FC2E 3C01                    	cmp al, T_nil
 19765 0000FC30 7447                    	je .Lcdr_nil
 19766 0000FC32 3C21                    	cmp al, T_pair
 19767 0000FC34 7462                    	je .Lcdr_pair
 19768 0000FC36 57                      	push rdi
 19769 0000FC37 48BF-                   	mov rdi, fmt_dotted_pair
 19769 0000FC39 [9A03000000000000] 
 19770 0000FC41 B800000000              	mov rax, 0
 19771                                  	ENTER
    33 0000FC46 C8000000            <1>  enter 0, 0
    34 0000FC4A 4883E4F0            <1>  and rsp, ~15
 19772 0000FC4E E8(00000000)            	call printf
 19773                                  	LEAVE
    38 0000FC53 C9                  <1>  leave
 19774 0000FC54 5F                      	pop rdi
 19775 0000FC55 E89EFDFFFF              	call print_sexpr
 19776 0000FC5A 48BF-                   	mov rdi, fmt_rparen
 19776 0000FC5C [9E03000000000000] 
 19777 0000FC64 B800000000              	mov rax, 0
 19778                                  	ENTER
    33 0000FC69 C8000000            <1>  enter 0, 0
    34 0000FC6D 4883E4F0            <1>  and rsp, ~15
 19779 0000FC71 E8(00000000)            	call printf
 19780                                  	LEAVE
    38 0000FC76 C9                  <1>  leave
 19781                                  	LEAVE
    38 0000FC77 C9                  <1>  leave
 19782 0000FC78 C3                      	ret
 19783                                  
 19784                                  .Lcdr_nil:
 19785 0000FC79 48BF-                   	mov rdi, fmt_rparen
 19785 0000FC7B [9E03000000000000] 
 19786 0000FC83 B800000000              	mov rax, 0
 19787                                  	ENTER
    33 0000FC88 C8000000            <1>  enter 0, 0
    34 0000FC8C 4883E4F0            <1>  and rsp, ~15
 19788 0000FC90 E8(00000000)            	call printf
 19789                                  	LEAVE
    38 0000FC95 C9                  <1>  leave
 19790                                  	LEAVE
    38 0000FC96 C9                  <1>  leave
 19791 0000FC97 C3                      	ret
 19792                                  
 19793                                  .Lcdr_pair:
 19794 0000FC98 57                      	push rdi
 19795 0000FC99 48BF-                   	mov rdi, fmt_space
 19795 0000FC9B [A003000000000000] 
 19796 0000FCA3 B800000000              	mov rax, 0
 19797                                  	ENTER
    33 0000FCA8 C8000000            <1>  enter 0, 0
    34 0000FCAC 4883E4F0            <1>  and rsp, ~15
 19798 0000FCB0 E8(00000000)            	call printf
 19799                                  	LEAVE
    38 0000FCB5 C9                  <1>  leave
 19800 0000FCB6 488B3C24                	mov rdi, qword [rsp]
 19801 0000FCBA 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
 19802 0000FCBE E835FDFFFF              	call print_sexpr
 19803 0000FCC3 5F                      	pop rdi
 19804 0000FCC4 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
 19805 0000FCC8 E95FFFFFFF              	jmp .Lcdr
 19806                                  
 19807                                  .Lvector:
 19808 0000FCCD 488B4701                	mov rax, qword [rdi + 1] ; length
 19809 0000FCD1 4883F800                	cmp rax, 0
 19810 0000FCD5 0F8484000000            	je .Lvector_empty
 19811 0000FCDB 57                      	push rdi
 19812 0000FCDC 48BF-                   	mov rdi, fmt_vector
 19812 0000FCDE [A603000000000000] 
 19813 0000FCE6 B800000000              	mov rax, 0
 19814                                  	ENTER
    33 0000FCEB C8000000            <1>  enter 0, 0
    34 0000FCEF 4883E4F0            <1>  and rsp, ~15
 19815 0000FCF3 E8(00000000)            	call printf
 19816                                  	LEAVE
    38 0000FCF8 C9                  <1>  leave
 19817 0000FCF9 488B3C24                	mov rdi, qword [rsp]
 19818 0000FCFD FF7701                  	push qword [rdi + 1]
 19819 0000FD00 6A01                    	push 1
 19820 0000FD02 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
 19821 0000FD06 E8EDFCFFFF              	call print_sexpr
 19822                                  .Lvector_loop:
 19823                                  	; [rsp] index
 19824                                  	; [rsp + 8*1] limit
 19825                                  	; [rsp + 8*2] vector
 19826 0000FD0B 488B0424                	mov rax, qword [rsp]
 19827 0000FD0F 483B442408              	cmp rax, qword [rsp + 8*1]
 19828 0000FD14 7436                    	je .Lvector_end
 19829 0000FD16 48BF-                   	mov rdi, fmt_space
 19829 0000FD18 [A003000000000000] 
 19830 0000FD20 B800000000              	mov rax, 0
 19831                                  	ENTER
    33 0000FD25 C8000000            <1>  enter 0, 0
    34 0000FD29 4883E4F0            <1>  and rsp, ~15
 19832 0000FD2D E8(00000000)            	call printf
 19833                                  	LEAVE
    38 0000FD32 C9                  <1>  leave
 19834 0000FD33 488B0424                	mov rax, qword [rsp]
 19835 0000FD37 488B5C2410              	mov rbx, qword [rsp + 8*2]
 19836 0000FD3C 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
 19837 0000FD41 E8B2FCFFFF              	call print_sexpr
 19838 0000FD46 48FF0424                	inc qword [rsp]
 19839 0000FD4A EBBF                    	jmp .Lvector_loop
 19840                                  
 19841                                  .Lvector_end:
 19842 0000FD4C 4883C418                	add rsp, 8*3
 19843 0000FD50 48BF-                   	mov rdi, fmt_rparen
 19843 0000FD52 [9E03000000000000] 
 19844 0000FD5A E9F8010000              	jmp .Lemit	
 19845                                  
 19846                                  .Lvector_empty:
 19847 0000FD5F 48BF-                   	mov rdi, fmt_empty_vector
 19847 0000FD61 [A203000000000000] 
 19848 0000FD69 E9E9010000              	jmp .Lemit
 19849                                  
 19850                                  .Lreal:
 19851 0000FD6E FF7701                  	push qword [rdi + 1]
 19852 0000FD71 F20F100424              	movsd xmm0, qword [rsp]
 19853 0000FD76 4883C408                	add rsp, 8*1
 19854 0000FD7A 48BF-                   	mov rdi, fmt_real
 19854 0000FD7C [A903000000000000] 
 19855 0000FD84 B801000000              	mov rax, 1
 19856                                  	ENTER
    33 0000FD89 C8000000            <1>  enter 0, 0
    34 0000FD8D 4883E4F0            <1>  and rsp, ~15
 19857 0000FD91 E8(00000000)            	call printf
 19858                                  	LEAVE
    38 0000FD96 C9                  <1>  leave
 19859 0000FD97 E9D0010000              	jmp .Lend
 19860                                  
 19861                                  .Lrational:
 19862 0000FD9C 488B7701                	mov rsi, qword [rdi + 1]
 19863 0000FDA0 488B5709                	mov rdx, qword [rdi + 1 + 8]
 19864 0000FDA4 4883FE00                	cmp rsi, 0
 19865 0000FDA8 7415                    	je .Lrat_zero
 19866 0000FDAA 4883FA01                	cmp rdx, 1
 19867 0000FDAE 741E                    	je .Lrat_int
 19868 0000FDB0 48BF-                   	mov rdi, fmt_fraction
 19868 0000FDB2 [AC03000000000000] 
 19869 0000FDBA E998010000              	jmp .Lemit
 19870                                  
 19871                                  .Lrat_zero:
 19872 0000FDBF 48BF-                   	mov rdi, fmt_zero
 19872 0000FDC1 [B403000000000000] 
 19873 0000FDC9 E989010000              	jmp .Lemit
 19874                                  
 19875                                  .Lrat_int:
 19876 0000FDCE 48BF-                   	mov rdi, fmt_int
 19876 0000FDD0 [B603000000000000] 
 19877 0000FDD8 E97A010000              	jmp .Lemit
 19878                                  
 19879                                  .Lstring:
 19880 0000FDDD 488D4709                	lea rax, [rdi + 1 + 8]
 19881 0000FDE1 50                      	push rax
 19882 0000FDE2 FF7701                  	push qword [rdi + 1]
 19883 0000FDE5 48BF-                   	mov rdi, fmt_dquote
 19883 0000FDE7 [FA03000000000000] 
 19884 0000FDEF B800000000              	mov rax, 0
 19885                                  	ENTER
    33 0000FDF4 C8000000            <1>  enter 0, 0
    34 0000FDF8 4883E4F0            <1>  and rsp, ~15
 19886 0000FDFC E8(00000000)            	call printf
 19887                                  	LEAVE
    38 0000FE01 C9                  <1>  leave
 19888                                  .Lstring_loop:
 19889                                  	; qword [rsp]: limit
 19890                                  	; qword [rsp + 8*1]: char *
 19891 0000FE02 48833C2400              	cmp qword [rsp], 0
 19892 0000FE07 0F84FD000000            	je .Lstring_end
 19893 0000FE0D 488B442408              	mov rax, qword [rsp + 8*1]
 19894 0000FE12 8A00                    	mov al, byte [rax]
 19895 0000FE14 4825FF000000            	and rax, 255
 19896 0000FE1A 3C07                    	cmp al, 7
 19897 0000FE1C 7468                            je .Lstring_char_7
 19898 0000FE1E 3C08                            cmp al, 8
 19899 0000FE20 7470                            je .Lstring_char_8
 19900 0000FE22 3C09                            cmp al, 9
 19901 0000FE24 7478                            je .Lstring_char_9
 19902 0000FE26 3C0A                            cmp al, 10
 19903 0000FE28 0F847C000000                    je .Lstring_char_10
 19904 0000FE2E 3C0B                            cmp al, 11
 19905 0000FE30 0F8480000000                    je .Lstring_char_11
 19906 0000FE36 3C0C                            cmp al, 12
 19907 0000FE38 0F8484000000                    je .Lstring_char_12
 19908 0000FE3E 3C0D                            cmp al, 13
 19909 0000FE40 0F8488000000                    je .Lstring_char_13
 19910 0000FE46 3C22                            cmp al, 34
 19911 0000FE48 0F848C000000                    je .Lstring_char_34
 19912 0000FE4E 3C5C                            cmp al, 92              ;         je .Lstring_char_92
 19914 0000FE50 3C20                            cmp al, ' '
 19915 0000FE52 0F8CA0000000                    jl .Lstring_char_hex
 19916 0000FE58 48BF-                           mov rdi, fmt_string_char
 19916 0000FE5A [FC03000000000000] 
 19917 0000FE62 4889C6                          mov rsi, rax
 19918                                  .Lstring_char_emit:
 19919 0000FE65 B800000000                      mov rax, 0
 19920                                          ENTER
    33 0000FE6A C8000000            <1>  enter 0, 0
    34 0000FE6E 4883E4F0            <1>  and rsp, ~15
 19921 0000FE72 E8(00000000)                    call printf
 19922                                          LEAVE
    38 0000FE77 C9                  <1>  leave
 19923 0000FE78 48FF0C24                        dec qword [rsp]
 19924 0000FE7C 48FF442408                      inc qword [rsp + 8*1]
 19925 0000FE81 E97CFFFFFF                      jmp .Lstring_loop
 19926                                  
 19927                                  .Lstring_char_7:
 19928 0000FE86 48BF-                           mov rdi, fmt_string_char_7
 19928 0000FE88 [FF03000000000000] 
 19929 0000FE90 EBD3                            jmp .Lstring_char_emit
 19930                                  
 19931                                  .Lstring_char_8:
 19932 0000FE92 48BF-                           mov rdi, fmt_string_char_8
 19932 0000FE94 [0204000000000000] 
 19933 0000FE9C EBC7                            jmp .Lstring_char_emit
 19934                                          
 19935                                  .Lstring_char_9:
 19936 0000FE9E 48BF-                           mov rdi, fmt_string_char_9
 19936 0000FEA0 [0504000000000000] 
 19937 0000FEA8 EBBB                            jmp .Lstring_char_emit
 19938                                  
 19939                                  .Lstring_char_10:
 19940 0000FEAA 48BF-                           mov rdi, fmt_string_char_10
 19940 0000FEAC [0804000000000000] 
 19941 0000FEB4 EBAF                            jmp .Lstring_char_emit
 19942                                  
 19943                                  .Lstring_char_11:
 19944 0000FEB6 48BF-                           mov rdi, fmt_string_char_11
 19944 0000FEB8 [0B04000000000000] 
 19945 0000FEC0 EBA3                            jmp .Lstring_char_emit
 19946                                  
 19947                                  .Lstring_char_12:
 19948 0000FEC2 48BF-                           mov rdi, fmt_string_char_12
 19948 0000FEC4 [0E04000000000000] 
 19949 0000FECC EB97                            jmp .Lstring_char_emit
 19950                                  
 19951                                  .Lstring_char_13:
 19952 0000FECE 48BF-                           mov rdi, fmt_string_char_13
 19952 0000FED0 [1104000000000000] 
 19953 0000FED8 EB8B                            jmp .Lstring_char_emit
 19954                                  
 19955                                  .Lstring_char_34:
 19956 0000FEDA 48BF-                           mov rdi, fmt_string_char_34
 19956 0000FEDC [1404000000000000] 
 19957 0000FEE4 E97CFFFFFF                      jmp .Lstring_char_emit
 19958                                  
 19959                                  .Lstring_char_92:
 19960 0000FEE9 48BF-                           mov rdi, fmt_string_char_92
 19960 0000FEEB [1704000000000000] 
 19961 0000FEF3 E96DFFFFFF                      jmp .Lstring_char_emit
 19962                                  
 19963                                  .Lstring_char_hex:
 19964 0000FEF8 48BF-                           mov rdi, fmt_string_char_hex
 19964 0000FEFA [1A04000000000000] 
 19965 0000FF02 4889C6                          mov rsi, rax
 19966 0000FF05 E95BFFFFFF                      jmp .Lstring_char_emit        
 19967                                  
 19968                                  .Lstring_end:
 19969 0000FF0A 4883C410                	add rsp, 8 * 2
 19970 0000FF0E 48BF-                   	mov rdi, fmt_dquote
 19970 0000FF10 [FA03000000000000] 
 19971 0000FF18 EB3D                    	jmp .Lemit
 19972                                  
 19973                                  .Lunknown_sexpr_type:
 19974 0000FF1A 48BE-                   	mov rsi, fmt_unknown_sexpr_error
 19974 0000FF1C [BA03000000000000] 
 19975 0000FF24 4825FF000000            	and rax, 255
 19976 0000FF2A 4889C2                  	mov rdx, rax
 19977 0000FF2D 4889F9                  	mov rcx, rdi
 19978 0000FF30 488B3C25[00000000]      	mov rdi, qword [stderr]
 19979 0000FF38 B800000000              	mov rax, 0
 19980                                  	ENTER
    33 0000FF3D C8000000            <1>  enter 0, 0
    34 0000FF41 4883E4F0            <1>  and rsp, ~15
 19981 0000FF45 E8(00000000)            	call fprintf
 19982                                  	LEAVE
    38 0000FF4A C9                  <1>  leave
 19983 0000FF4B 48C7C0FFFFFFFF          	mov rax, -1
 19984 0000FF52 E8(00000000)            	call exit
 19985                                  
 19986                                  .Lemit:
 19987 0000FF57 B800000000              	mov rax, 0
 19988                                  	ENTER
    33 0000FF5C C8000000            <1>  enter 0, 0
    34 0000FF60 4883E4F0            <1>  and rsp, ~15
 19989 0000FF64 E8(00000000)            	call printf
 19990                                  	LEAVE
    38 0000FF69 C9                  <1>  leave
 19991 0000FF6A EB00                    	jmp .Lend
 19992                                  
 19993                                  .Lend:
 19994                                  	LEAVE
    38 0000FF6C C9                  <1>  leave
 19995 0000FF6D C3                      	ret
 19996                                  
 19997                                  ;;; rdi: address of free variable
 19998                                  ;;; rsi: address of code-pointer
 19999                                  bind_primitive:
 20000                                          ENTER
    33 0000FF6E C8000000            <1>  enter 0, 0
    34 0000FF72 4883E4F0            <1>  and rsp, ~15
 20001 0000FF76 57                              push rdi
 20002 0000FF77 BF11000000                      mov rdi, (1 + 8 + 8)
 20003 0000FF7C E85CFAFFFF                      call malloc
 20004 0000FF81 5F                              pop rdi
 20005 0000FF82 C60005                          mov byte [rax], T_closure
 20006 0000FF85 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
 20007 0000FF8D 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
 20008 0000FF91 488907                          mov qword [rdi], rax
 20009                                          LEAVE
    38 0000FF94 C9                  <1>  leave
 20010 0000FF95 C3                              ret
 20011                                  
 20012                                  ;;; PLEASE IMPLEMENT THIS PROCEDURE
 20013                                  L_code_ptr_bin_apply:
 20014 0000FF96 C8000000                	enter 0, 0 ; mov rbp, rsp  push rbp
 20015 0000FF9A 48837D1802              	cmp COUNT, 2 ;check if number of arguments are 2 - closure and list
 20016 0000FF9F 0F858D110000            	jne L_error_arg_count_2
 20017 0000FFA5 488B4520                	mov rax, PARAM(0) ;first argument - closure
 20018 0000FFA9 803805                          cmp byte [rax], T_closure
 20019 0000FFAC 0F8582F9FFFF                    jne L_error_non_closure
 20020 0000FFB2 488B4528                        mov rax, PARAM(1) ;second argument - list
 20021 0000FFB6 803821                          cmp byte [rax], T_pair
 20022 0000FFB9 740D                            je .L_apply_second_arg_is_pair
 20023 0000FFBB 483D[01000000]                  cmp rax, sob_nil
 20024 0000FFC1 7448                            je .L_apply_second_arg_is_null
 20025 0000FFC3 E99DF9FFFF                      jmp L_error_improper_list
 20026                                  .L_apply_second_arg_is_pair:
 20027 0000FFC8 BA00000000              	mov rdx, 0 ; initialize rdx to 0
 20028 0000FFCD 488B7528                	mov rsi, PARAM(1) ; rsi will be used to iterate through the list 
 20029                                  .L_start_loop_length_pair:
 20030 0000FFD1 4881FE[01000000]        	 cmp rsi, sob_nil ; check if the current element is the end of the list 
 20031 0000FFD8 740D                    	 je .L_apply_end_count_list ; if it is, jump to done 
 20032 0000FFDA 488B7609                	 mov rsi, SOB_PAIR_CDR(rsi)  ; move to the next element in the list 
 20033 0000FFDE 48FFC2                  	 inc rdx ; increment the counter in rdx 
 20034 0000FFE1 4883EC08                	 sub rsp, 8
 20035 0000FFE5 EBEA                    	 jmp .L_start_loop_length_pair ; jump back to the beginning of the loop 
 20036                                  .L_apply_end_count_list: 
 20037 0000FFE7 4889E3                  	mov rbx, rsp
 20038 0000FFEA 488B7528                	mov rsi, PARAM(1)
 20039                                  .L_apply_push_elements: 
 20040 0000FFEE 4881FE[01000000]        	cmp rsi, sob_nil
 20041 0000FFF5 7411                    	je .L_apply_push_elements_end
 20042 0000FFF7 488B4E01                	mov rcx, SOB_PAIR_CAR(rsi)
 20043 0000FFFB 48890B                  	mov qword[rbx], rcx
 20044 0000FFFE 488B7609                	mov rsi, SOB_PAIR_CDR(rsi) 
 20045 00010002 4883C308                	add rbx, 8
 20046 00010006 EBE6                    	jmp .L_apply_push_elements
 20047                                  .L_apply_push_elements_end:
 20048 00010008 52                      	push rdx
 20049 00010009 EB02                    	jmp .L_apply_end
 20050                                  .L_apply_second_arg_is_null:
 20051 0001000B 6A00                    	push 0
 20052                                  .L_apply_end:
 20053 0001000D 488B4520                	mov rax, PARAM(0)
 20054 00010011 FF7001                  	push SOB_CLOSURE_ENV(rax) ;closure in rax
 20055 00010014 FF7508                          push qword [rbp + 8 * 1] ; old ret addr
 20056 00010017 FF7500                          push qword [rbp] ; same the old rbp
 20057 0001001A 4883C203                        add rdx, 3
 20058 0001001E 488B4D00                        mov rcx, [rbp] 
 20059 00010022 4889EF                          mov rdi, rbp
 20060                                  .L_startLoop_recycle:
 20061 00010025 4883FA00                        cmp rdx, 0
 20062 00010029 7413                            je .L_endLoop_recycle
 20063 0001002B 4883E908                       	sub rcx, 8
 20064 0001002F 4883EF08                        sub rdi, 8
 20065 00010033 488B37                          mov rsi, [rdi]
 20066 00010036 488931                          mov qword [rcx], rsi
 20067 00010039 48FFCA                          dec rdx
 20068 0001003C EBE7                            jmp .L_startLoop_recycle
 20069                                  .L_endLoop_recycle:
 20070 0001003E 5D                              pop rbp ; restore the old rbp
 20071 0001003F 4889CC                          mov rsp, rcx
 20072 00010042 FF6009                          jmp SOB_CLOSURE_CODE(rax)
 20073                                  		
 20074                                  
 20075                                  	
 20076                                  L_code_ptr_is_null:
 20077                                          ENTER
    33 00010045 C8000000            <1>  enter 0, 0
    34 00010049 4883E4F0            <1>  and rsp, ~15
 20078 0001004D 48837D1801                      cmp COUNT, 1
 20079 00010052 0F85A5100000                    jne L_error_arg_count_1
 20080 00010058 488B4520                        mov rax, PARAM(0)
 20081 0001005C 803801                          cmp byte [rax], T_nil
 20082 0001005F 750C                            jne .L_false
 20083 00010061 48B8-                           mov rax, sob_boolean_true
 20083 00010063 [0300000000000000] 
 20084 0001006B EB0A                            jmp .L_end
 20085                                  .L_false:
 20086 0001006D 48B8-                           mov rax, sob_boolean_false
 20086 0001006F [0200000000000000] 
 20087                                  .L_end:
 20088                                          LEAVE
    38 00010077 C9                  <1>  leave
 20089 00010078 C21800                          ret AND_KILL_FRAME(1)
 20090                                  
 20091                                  L_code_ptr_is_pair:
 20092                                          ENTER
    33 0001007B C8000000            <1>  enter 0, 0
    34 0001007F 4883E4F0            <1>  and rsp, ~15
 20093 00010083 48837D1801                      cmp COUNT, 1
 20094 00010088 0F856F100000                    jne L_error_arg_count_1
 20095 0001008E 488B4520                        mov rax, PARAM(0)
 20096 00010092 803821                          cmp byte [rax], T_pair
 20097 00010095 750C                            jne .L_false
 20098 00010097 48B8-                           mov rax, sob_boolean_true
 20098 00010099 [0300000000000000] 
 20099 000100A1 EB0A                            jmp .L_end
 20100                                  .L_false:
 20101 000100A3 48B8-                           mov rax, sob_boolean_false
 20101 000100A5 [0200000000000000] 
 20102                                  .L_end:
 20103                                          LEAVE
    38 000100AD C9                  <1>  leave
 20104 000100AE C21800                          ret AND_KILL_FRAME(1)
 20105                                          
 20106                                  L_code_ptr_is_void:
 20107                                          ENTER
    33 000100B1 C8000000            <1>  enter 0, 0
    34 000100B5 4883E4F0            <1>  and rsp, ~15
 20108 000100B9 48837D1801                      cmp COUNT, 1
 20109 000100BE 0F8539100000                    jne L_error_arg_count_1
 20110 000100C4 488B4520                        mov rax, PARAM(0)
 20111 000100C8 803800                          cmp byte [rax], T_void
 20112 000100CB 750C                            jne .L_false
 20113 000100CD 48B8-                           mov rax, sob_boolean_true
 20113 000100CF [0300000000000000] 
 20114 000100D7 EB0A                            jmp .L_end
 20115                                  .L_false:
 20116 000100D9 48B8-                           mov rax, sob_boolean_false
 20116 000100DB [0200000000000000] 
 20117                                  .L_end:
 20118                                          LEAVE
    38 000100E3 C9                  <1>  leave
 20119 000100E4 C21800                          ret AND_KILL_FRAME(1)
 20120                                  
 20121                                  L_code_ptr_is_char:
 20122                                          ENTER
    33 000100E7 C8000000            <1>  enter 0, 0
    34 000100EB 4883E4F0            <1>  and rsp, ~15
 20123 000100EF 48837D1801                      cmp COUNT, 1
 20124 000100F4 0F8503100000                    jne L_error_arg_count_1
 20125 000100FA 488B4520                        mov rax, PARAM(0)
 20126 000100FE 803802                          cmp byte [rax], T_char
 20127 00010101 750C                            jne .L_false
 20128 00010103 48B8-                           mov rax, sob_boolean_true
 20128 00010105 [0300000000000000] 
 20129 0001010D EB0A                            jmp .L_end
 20130                                  .L_false:
 20131 0001010F 48B8-                           mov rax, sob_boolean_false
 20131 00010111 [0200000000000000] 
 20132                                  .L_end:
 20133                                          LEAVE
    38 00010119 C9                  <1>  leave
 20134 0001011A C21800                          ret AND_KILL_FRAME(1)
 20135                                  
 20136                                  L_code_ptr_is_string:
 20137                                          ENTER
    33 0001011D C8000000            <1>  enter 0, 0
    34 00010121 4883E4F0            <1>  and rsp, ~15
 20138 00010125 48837D1801                      cmp COUNT, 1
 20139 0001012A 0F85CD0F0000                    jne L_error_arg_count_1
 20140 00010130 488B4520                        mov rax, PARAM(0)
 20141 00010134 803803                          cmp byte [rax], T_string
 20142 00010137 750C                            jne .L_false
 20143 00010139 48B8-                           mov rax, sob_boolean_true
 20143 0001013B [0300000000000000] 
 20144 00010143 EB0A                            jmp .L_end
 20145                                  .L_false:
 20146 00010145 48B8-                           mov rax, sob_boolean_false
 20146 00010147 [0200000000000000] 
 20147                                  .L_end:
 20148                                          LEAVE
    38 0001014F C9                  <1>  leave
 20149 00010150 C21800                          ret AND_KILL_FRAME(1)
 20150                                  
 20151                                  L_code_ptr_is_symbol:
 20152                                          ENTER
    33 00010153 C8000000            <1>  enter 0, 0
    34 00010157 4883E4F0            <1>  and rsp, ~15
 20153 0001015B 48837D1801                      cmp COUNT, 1
 20154 00010160 0F85970F0000                    jne L_error_arg_count_1
 20155 00010166 488B4520                        mov rax, PARAM(0)
 20156 0001016A 803804                          cmp byte [rax], T_symbol
 20157 0001016D 750C                            jne .L_false
 20158 0001016F 48B8-                           mov rax, sob_boolean_true
 20158 00010171 [0300000000000000] 
 20159 00010179 EB0A                            jmp .L_end
 20160                                  .L_false:
 20161 0001017B 48B8-                           mov rax, sob_boolean_false
 20161 0001017D [0200000000000000] 
 20162                                  .L_end:
 20163                                          LEAVE
    38 00010185 C9                  <1>  leave
 20164 00010186 C21800                          ret AND_KILL_FRAME(1)
 20165                                  
 20166                                  L_code_ptr_is_vector:
 20167                                          ENTER
    33 00010189 C8000000            <1>  enter 0, 0
    34 0001018D 4883E4F0            <1>  and rsp, ~15
 20168 00010191 48837D1801                      cmp COUNT, 1
 20169 00010196 0F85610F0000                    jne L_error_arg_count_1
 20170 0001019C 488B4520                        mov rax, PARAM(0)
 20171 000101A0 803822                          cmp byte [rax], T_vector
 20172 000101A3 750C                            jne .L_false
 20173 000101A5 48B8-                           mov rax, sob_boolean_true
 20173 000101A7 [0300000000000000] 
 20174 000101AF EB0A                            jmp .L_end
 20175                                  .L_false:
 20176 000101B1 48B8-                           mov rax, sob_boolean_false
 20176 000101B3 [0200000000000000] 
 20177                                  .L_end:
 20178                                          LEAVE
    38 000101BB C9                  <1>  leave
 20179 000101BC C21800                          ret AND_KILL_FRAME(1)
 20180                                  
 20181                                  L_code_ptr_is_closure:
 20182                                          ENTER
    33 000101BF C8000000            <1>  enter 0, 0
    34 000101C3 4883E4F0            <1>  and rsp, ~15
 20183 000101C7 48837D1801                      cmp COUNT, 1
 20184 000101CC 0F852B0F0000                    jne L_error_arg_count_1
 20185 000101D2 488B4520                        mov rax, PARAM(0)
 20186 000101D6 803805                          cmp byte [rax], T_closure
 20187 000101D9 750C                            jne .L_false
 20188 000101DB 48B8-                           mov rax, sob_boolean_true
 20188 000101DD [0300000000000000] 
 20189 000101E5 EB0A                            jmp .L_end
 20190                                  .L_false:
 20191 000101E7 48B8-                           mov rax, sob_boolean_false
 20191 000101E9 [0200000000000000] 
 20192                                  .L_end:
 20193                                          LEAVE
    38 000101F1 C9                  <1>  leave
 20194 000101F2 C21800                          ret AND_KILL_FRAME(1)
 20195                                  
 20196                                  L_code_ptr_is_real:
 20197                                          ENTER
    33 000101F5 C8000000            <1>  enter 0, 0
    34 000101F9 4883E4F0            <1>  and rsp, ~15
 20198 000101FD 48837D1801                      cmp COUNT, 1
 20199 00010202 0F85F50E0000                    jne L_error_arg_count_1
 20200 00010208 488B4520                        mov rax, PARAM(0)
 20201 0001020C 803812                          cmp byte [rax], T_real
 20202 0001020F 750C                            jne .L_false
 20203 00010211 48B8-                           mov rax, sob_boolean_true
 20203 00010213 [0300000000000000] 
 20204 0001021B EB0A                            jmp .L_end
 20205                                  .L_false:
 20206 0001021D 48B8-                           mov rax, sob_boolean_false
 20206 0001021F [0200000000000000] 
 20207                                  .L_end:
 20208                                          LEAVE
    38 00010227 C9                  <1>  leave
 20209 00010228 C21800                          ret AND_KILL_FRAME(1)
 20210                                  
 20211                                  L_code_ptr_is_rational:
 20212                                          ENTER
    33 0001022B C8000000            <1>  enter 0, 0
    34 0001022F 4883E4F0            <1>  and rsp, ~15
 20213 00010233 48837D1801                      cmp COUNT, 1
 20214 00010238 0F85BF0E0000                    jne L_error_arg_count_1
 20215 0001023E 488B4520                        mov rax, PARAM(0)
 20216 00010242 803811                          cmp byte [rax], T_rational
 20217 00010245 750C                            jne .L_false
 20218 00010247 48B8-                           mov rax, sob_boolean_true
 20218 00010249 [0300000000000000] 
 20219 00010251 EB0A                            jmp .L_end
 20220                                  .L_false:
 20221 00010253 48B8-                           mov rax, sob_boolean_false
 20221 00010255 [0200000000000000] 
 20222                                  .L_end:
 20223                                          LEAVE
    38 0001025D C9                  <1>  leave
 20224 0001025E C21800                          ret AND_KILL_FRAME(1)
 20225                                  
 20226                                  L_code_ptr_is_boolean:
 20227                                          ENTER
    33 00010261 C8000000            <1>  enter 0, 0
    34 00010265 4883E4F0            <1>  and rsp, ~15
 20228 00010269 48837D1801                      cmp COUNT, 1
 20229 0001026E 0F85890E0000                    jne L_error_arg_count_1
 20230 00010274 488B4520                        mov rax, PARAM(0)
 20231 00010278 8A18                            mov bl, byte [rax]
 20232 0001027A 80E308                          and bl, T_boolean
 20233 0001027D 740C                            je .L_false
 20234 0001027F 48B8-                           mov rax, sob_boolean_true
 20234 00010281 [0300000000000000] 
 20235 00010289 EB0A                            jmp .L_end
 20236                                  .L_false:
 20237 0001028B 48B8-                           mov rax, sob_boolean_false
 20237 0001028D [0200000000000000] 
 20238                                  .L_end:
 20239                                          LEAVE
    38 00010295 C9                  <1>  leave
 20240 00010296 C21800                          ret AND_KILL_FRAME(1)
 20241                                          
 20242                                  L_code_ptr_is_number:
 20243                                          ENTER
    33 00010299 C8000000            <1>  enter 0, 0
    34 0001029D 4883E4F0            <1>  and rsp, ~15
 20244 000102A1 48837D1801                      cmp COUNT, 1
 20245 000102A6 0F85510E0000                    jne L_error_arg_count_1
 20246 000102AC 488B4520                        mov rax, PARAM(0)
 20247 000102B0 8A18                            mov bl, byte [rax]
 20248 000102B2 80E310                          and bl, T_number
 20249 000102B5 740C                            je .L_false
 20250 000102B7 48B8-                           mov rax, sob_boolean_true
 20250 000102B9 [0300000000000000] 
 20251 000102C1 EB0A                            jmp .L_end
 20252                                  .L_false:
 20253 000102C3 48B8-                           mov rax, sob_boolean_false
 20253 000102C5 [0200000000000000] 
 20254                                  .L_end:
 20255                                          LEAVE
    38 000102CD C9                  <1>  leave
 20256 000102CE C21800                          ret AND_KILL_FRAME(1)
 20257                                          
 20258                                  L_code_ptr_is_collection:
 20259                                          ENTER
    33 000102D1 C8000000            <1>  enter 0, 0
    34 000102D5 4883E4F0            <1>  and rsp, ~15
 20260 000102D9 48837D1801                      cmp COUNT, 1
 20261 000102DE 0F85190E0000                    jne L_error_arg_count_1
 20262 000102E4 488B4520                        mov rax, PARAM(0)
 20263 000102E8 8A18                            mov bl, byte [rax]
 20264 000102EA 80E320                          and bl, T_collection
 20265 000102ED 740C                            je .L_false
 20266 000102EF 48B8-                           mov rax, sob_boolean_true
 20266 000102F1 [0300000000000000] 
 20267 000102F9 EB0A                            jmp .L_end
 20268                                  .L_false:
 20269 000102FB 48B8-                           mov rax, sob_boolean_false
 20269 000102FD [0200000000000000] 
 20270                                  .L_end:
 20271                                          LEAVE
    38 00010305 C9                  <1>  leave
 20272 00010306 C21800                          ret AND_KILL_FRAME(1)
 20273                                  
 20274                                  L_code_ptr_cons:
 20275                                          ENTER
    33 00010309 C8000000            <1>  enter 0, 0
    34 0001030D 4883E4F0            <1>  and rsp, ~15
 20276 00010311 48837D1802                      cmp COUNT, 2
 20277 00010316 0F85160E0000                    jne L_error_arg_count_2
 20278 0001031C BF11000000                      mov rdi, (1 + 8 + 8)
 20279 00010321 E8B7F6FFFF                      call malloc
 20280 00010326 C60021                          mov byte [rax], T_pair
 20281 00010329 488B5D20                        mov rbx, PARAM(0)
 20282 0001032D 48895801                        mov SOB_PAIR_CAR(rax), rbx
 20283 00010331 488B5D28                        mov rbx, PARAM(1)
 20284 00010335 48895809                        mov SOB_PAIR_CDR(rax), rbx
 20285                                          LEAVE
    38 00010339 C9                  <1>  leave
 20286 0001033A C22000                          ret AND_KILL_FRAME(2)
 20287                                  
 20288                                  L_code_ptr_display_sexpr:
 20289                                          ENTER
    33 0001033D C8000000            <1>  enter 0, 0
    34 00010341 4883E4F0            <1>  and rsp, ~15
 20290 00010345 48837D1801                      cmp COUNT, 1
 20291 0001034A 0F85AD0D0000                    jne L_error_arg_count_1
 20292 00010350 488B7D20                        mov rdi, PARAM(0)
 20293 00010354 E89FF6FFFF                      call print_sexpr
 20294 00010359 48B8-                           mov rax, sob_void
 20294 0001035B [0000000000000000] 
 20295                                          LEAVE
    38 00010363 C9                  <1>  leave
 20296 00010364 C21800                          ret AND_KILL_FRAME(1)
 20297                                  
 20298                                  L_code_ptr_write_char:
 20299                                          ENTER
    33 00010367 C8000000            <1>  enter 0, 0
    34 0001036B 4883E4F0            <1>  and rsp, ~15
 20300 0001036F 48837D1801                      cmp COUNT, 1
 20301 00010374 0F85830D0000                    jne L_error_arg_count_1
 20302 0001037A 488B4520                        mov rax, PARAM(0)
 20303                                          assert_char(rax)
    42 0001037E 803802              <1>  cmp byte [%1], %2
    43 00010381 0F854A0E0000        <1>  jne L_error_incorrect_type
 20304 00010387 8A4001                          mov al, SOB_CHAR_VALUE(rax)
 20305 0001038A 4825FF000000                    and rax, 255
 20306 00010390 48BF-                           mov rdi, fmt_char
 20306 00010392 [2004000000000000] 
 20307 0001039A 4889C6                          mov rsi, rax
 20308 0001039D B800000000                      mov rax, 0
 20309                                  	ENTER
    33 000103A2 C8000000            <1>  enter 0, 0
    34 000103A6 4883E4F0            <1>  and rsp, ~15
 20310 000103AA E8(00000000)                    call printf
 20311                                  	LEAVE
    38 000103AF C9                  <1>  leave
 20312 000103B0 48B8-                           mov rax, sob_void
 20312 000103B2 [0000000000000000] 
 20313                                          LEAVE
    38 000103BA C9                  <1>  leave
 20314 000103BB C21800                          ret AND_KILL_FRAME(1)
 20315                                  
 20316                                  L_code_ptr_car:
 20317                                          ENTER
    33 000103BE C8000000            <1>  enter 0, 0
    34 000103C2 4883E4F0            <1>  and rsp, ~15
 20318 000103C6 48837D1801                      cmp COUNT, 1
 20319 000103CB 0F852C0D0000                    jne L_error_arg_count_1
 20320 000103D1 488B4520                        mov rax, PARAM(0)
 20321                                          assert_pair(rax)
    42 000103D5 803821              <1>  cmp byte [%1], %2
    43 000103D8 0F85F30D0000        <1>  jne L_error_incorrect_type
 20322 000103DE 488B4001                        mov rax, SOB_PAIR_CAR(rax)
 20323                                          LEAVE
    38 000103E2 C9                  <1>  leave
 20324 000103E3 C21800                          ret AND_KILL_FRAME(1)
 20325                                          
 20326                                  L_code_ptr_cdr:
 20327                                          ENTER
    33 000103E6 C8000000            <1>  enter 0, 0
    34 000103EA 4883E4F0            <1>  and rsp, ~15
 20328 000103EE 48837D1801                      cmp COUNT, 1
 20329 000103F3 0F85040D0000                    jne L_error_arg_count_1
 20330 000103F9 488B4520                        mov rax, PARAM(0)
 20331                                          assert_pair(rax)
    42 000103FD 803821              <1>  cmp byte [%1], %2
    43 00010400 0F85CB0D0000        <1>  jne L_error_incorrect_type
 20332 00010406 488B4009                        mov rax, SOB_PAIR_CDR(rax)
 20333                                          LEAVE
    38 0001040A C9                  <1>  leave
 20334 0001040B C21800                          ret AND_KILL_FRAME(1)
 20335                                          
 20336                                  L_code_ptr_string_length:
 20337                                          ENTER
    33 0001040E C8000000            <1>  enter 0, 0
    34 00010412 4883E4F0            <1>  and rsp, ~15
 20338 00010416 48837D1801                      cmp COUNT, 1
 20339 0001041B 0F85DC0C0000                    jne L_error_arg_count_1
 20340 00010421 488B4520                        mov rax, PARAM(0)
 20341                                          assert_string(rax)
    42 00010425 803803              <1>  cmp byte [%1], %2
    43 00010428 0F85A30D0000        <1>  jne L_error_incorrect_type
 20342 0001042E 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
 20343 00010432 E83A0C0000                      call make_integer
 20344                                          LEAVE
    38 00010437 C9                  <1>  leave
 20345 00010438 C21800                          ret AND_KILL_FRAME(1)
 20346                                  
 20347                                  L_code_ptr_vector_length:
 20348                                          ENTER
    33 0001043B C8000000            <1>  enter 0, 0
    34 0001043F 4883E4F0            <1>  and rsp, ~15
 20349 00010443 48837D1801                      cmp COUNT, 1
 20350 00010448 0F85AF0C0000                    jne L_error_arg_count_1
 20351 0001044E 488B4520                        mov rax, PARAM(0)
 20352                                          assert_vector(rax)
    42 00010452 803822              <1>  cmp byte [%1], %2
    43 00010455 0F85760D0000        <1>  jne L_error_incorrect_type
 20353 0001045B 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
 20354 0001045F E80D0C0000                      call make_integer
 20355                                          LEAVE
    38 00010464 C9                  <1>  leave
 20356 00010465 C21800                          ret AND_KILL_FRAME(1)
 20357                                  
 20358                                  L_code_ptr_real_to_integer:
 20359                                          ENTER
    33 00010468 C8000000            <1>  enter 0, 0
    34 0001046C 4883E4F0            <1>  and rsp, ~15
 20360 00010470 48837D1801                      cmp COUNT, 1
 20361 00010475 0F85820C0000                    jne L_error_arg_count_1
 20362 0001047B 488B5D20                        mov rbx, PARAM(0)
 20363                                          assert_real(rbx)
    42 0001047F 803B12              <1>  cmp byte [%1], %2
    43 00010482 0F85490D0000        <1>  jne L_error_incorrect_type
 20364 00010488 F20F104301                      movsd xmm0, qword [rbx + 1]
 20365 0001048D F2480F2CF8                      cvttsd2si rdi, xmm0
 20366 00010492 E8DA0B0000                      call make_integer
 20367                                          LEAVE
    38 00010497 C9                  <1>  leave
 20368 00010498 C21800                          ret AND_KILL_FRAME(1)
 20369                                  
 20370                                  L_code_ptr_exit:
 20371                                          ENTER
    33 0001049B C8000000            <1>  enter 0, 0
    34 0001049F 4883E4F0            <1>  and rsp, ~15
 20372 000104A3 48837D1800                      cmp COUNT, 0
 20373 000104A8 0F851A0C0000                    jne L_error_arg_count_0
 20374 000104AE B800000000                      mov rax, 0
 20375 000104B3 E8(00000000)                    call exit
 20376                                  
 20377                                  L_code_ptr_integer_to_real:
 20378                                          ENTER
    33 000104B8 C8000000            <1>  enter 0, 0
    34 000104BC 4883E4F0            <1>  and rsp, ~15
 20379 000104C0 48837D1801                      cmp COUNT, 1
 20380 000104C5 0F85320C0000                    jne L_error_arg_count_1
 20381 000104CB 488B4520                        mov rax, PARAM(0)
 20382                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 000104CF 803811              <2>  cmp byte [%1], %2
    43 000104D2 0F85F90C0000        <2>  jne L_error_incorrect_type
    48 000104D8 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 000104DD 0F85EE0C0000        <1>  jne L_error_incorrect_type
 20383 000104E3 FF7001                          push qword [rax + 1]
 20384 000104E6 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 20385 000104EC E8640B0000                      call make_real
 20386                                          LEAVE
    38 000104F1 C9                  <1>  leave
 20387 000104F2 C21800                          ret AND_KILL_FRAME(1)
 20388                                  
 20389                                  L_code_ptr_rational_to_real:
 20390                                          ENTER
    33 000104F5 C8000000            <1>  enter 0, 0
    34 000104F9 4883E4F0            <1>  and rsp, ~15
 20391 000104FD 48837D1801                      cmp COUNT, 1
 20392 00010502 0F85F50B0000                    jne L_error_arg_count_1
 20393 00010508 488B4520                        mov rax, PARAM(0)
 20394                                          assert_rational(rax)
    42 0001050C 803811              <1>  cmp byte [%1], %2
    43 0001050F 0F85BC0C0000        <1>  jne L_error_incorrect_type
 20395 00010515 FF7001                          push qword [rax + 1]
 20396 00010518 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
 20397 0001051E FF7009                          push qword [rax + 1 + 8]
 20398 00010521 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
 20399 00010527 F20F5EC1                        divsd xmm0, xmm1
 20400 0001052B E8250B0000                      call make_real
 20401                                          LEAVE
    38 00010530 C9                  <1>  leave
 20402 00010531 C21800                          ret AND_KILL_FRAME(1)
 20403                                  
 20404                                  L_code_ptr_char_to_integer:
 20405                                          ENTER
    33 00010534 C8000000            <1>  enter 0, 0
    34 00010538 4883E4F0            <1>  and rsp, ~15
 20406 0001053C 48837D1801                      cmp COUNT, 1
 20407 00010541 0F85B60B0000                    jne L_error_arg_count_1
 20408 00010547 488B4520                        mov rax, PARAM(0)
 20409                                          assert_char(rax)
    42 0001054B 803802              <1>  cmp byte [%1], %2
    43 0001054E 0F857D0C0000        <1>  jne L_error_incorrect_type
 20410 00010554 8A4001                          mov al, byte [rax + 1]
 20411 00010557 4825FF000000                    and rax, 255
 20412 0001055D 4889C7                          mov rdi, rax
 20413 00010560 E80C0B0000                      call make_integer
 20414                                          LEAVE
    38 00010565 C9                  <1>  leave
 20415 00010566 C21800                          ret AND_KILL_FRAME(1)
 20416                                  
 20417                                  L_code_ptr_integer_to_char:
 20418                                          ENTER
    33 00010569 C8000000            <1>  enter 0, 0
    34 0001056D 4883E4F0            <1>  and rsp, ~15
 20419 00010571 48837D1801                      cmp COUNT, 1
 20420 00010576 0F85810B0000                    jne L_error_arg_count_1
 20421 0001057C 488B4520                        mov rax, PARAM(0)
 20422                                          assert_integer(rax)
    47                              <1>  assert_rational(%1)
    42 00010580 803811              <2>  cmp byte [%1], %2
    43 00010583 0F85480C0000        <2>  jne L_error_incorrect_type
    48 00010589 4883780901          <1>  cmp qword [%1 + 1 + 8], 1
    49 0001058E 0F853D0C0000        <1>  jne L_error_incorrect_type
 20423 00010594 488B5801                        mov rbx, qword [rax + 1]
 20424 00010598 4883FB00                        cmp rbx, 0
 20425 0001059C 0F8EF50A0000                    jle L_error_integer_range
 20426 000105A2 4881FB00010000                  cmp rbx, 256
 20427 000105A9 0F8DE80A0000                    jge L_error_integer_range
 20428 000105AF BF02000000                      mov rdi, (1 + 1)
 20429 000105B4 E824F4FFFF                      call malloc
 20430 000105B9 C60002                          mov byte [rax], T_char
 20431 000105BC 885801                          mov byte [rax + 1], bl
 20432                                          LEAVE
    38 000105BF C9                  <1>  leave
 20433 000105C0 C21800                          ret AND_KILL_FRAME(1)
 20434                                  
 20435                                  L_code_ptr_trng:
 20436                                          ENTER
    33 000105C3 C8000000            <1>  enter 0, 0
    34 000105C7 4883E4F0            <1>  and rsp, ~15
 20437 000105CB 48837D1800                      cmp COUNT, 0
 20438 000105D0 0F85F20A0000                    jne L_error_arg_count_0
 20439 000105D6 480FC7F7                        rdrand rdi
 20440 000105DA 48D1EF                          shr rdi, 1
 20441 000105DD E88F0A0000                      call make_integer
 20442                                          LEAVE
    38 000105E2 C9                  <1>  leave
 20443 000105E3 C21000                          ret AND_KILL_FRAME(0)
 20444                                  
 20445                                  L_code_ptr_is_zero:
 20446                                          ENTER
    33 000105E6 C8000000            <1>  enter 0, 0
    34 000105EA 4883E4F0            <1>  and rsp, ~15
 20447 000105EE 48837D1801                      cmp COUNT, 1
 20448 000105F3 0F85040B0000                    jne L_error_arg_count_1
 20449 000105F9 488B4520                        mov rax, PARAM(0)
 20450 000105FD 803811                          cmp byte [rax], T_rational
 20451 00010600 740A                            je .L_rational
 20452 00010602 803812                          cmp byte [rax], T_real
 20453 00010605 740E                            je .L_real
 20454 00010607 E9C50B0000                      jmp L_error_incorrect_type
 20455                                  .L_rational:
 20456 0001060C 4883780100                      cmp qword [rax + 1], 0
 20457 00010611 7420                            je .L_zero
 20458 00010613 EB12                            jmp .L_not_zero
 20459                                  .L_real:
 20460 00010615 660FEFC0                        pxor xmm0, xmm0
 20461 00010619 FF7001                          push qword [rax + 1]
 20462 0001061C F20F100C24                      movsd xmm1, qword [rsp]
 20463 00010621 660F2EC1                        ucomisd xmm0, xmm1
 20464 00010625 740C                            je .L_zero
 20465                                  .L_not_zero:
 20466 00010627 48B8-                           mov rax, sob_boolean_false
 20466 00010629 [0200000000000000] 
 20467 00010631 EB0A                            jmp .L_end
 20468                                  .L_zero:
 20469 00010633 48B8-                           mov rax, sob_boolean_true
 20469 00010635 [0300000000000000] 
 20470                                  .L_end:
 20471                                          LEAVE
    38 0001063D C9                  <1>  leave
 20472 0001063E C21800                          ret AND_KILL_FRAME(1)
 20473                                  
 20474                                  L_code_ptr_is_integer:
 20475                                          ENTER
    33 00010641 C8000000            <1>  enter 0, 0
    34 00010645 4883E4F0            <1>  and rsp, ~15
 20476 00010649 48837D1801                      cmp COUNT, 1
 20477 0001064E 0F85A90A0000                    jne L_error_arg_count_1
 20478 00010654 488B4520                        mov rax, PARAM(0)
 20479 00010658 803811                          cmp byte [rax], T_rational
 20480 0001065B 7513                            jne .L_false
 20481 0001065D 4883780901                      cmp qword [rax + 1 + 8], 1
 20482 00010662 750C                            jne .L_false
 20483 00010664 48B8-                           mov rax, sob_boolean_true
 20483 00010666 [0300000000000000] 
 20484 0001066E EB0A                            jmp .L_exit
 20485                                  .L_false:
 20486 00010670 48B8-                           mov rax, sob_boolean_false
 20486 00010672 [0200000000000000] 
 20487                                  .L_exit:
 20488                                          LEAVE
    38 0001067A C9                  <1>  leave
 20489 0001067B C21800                          ret AND_KILL_FRAME(1)
 20490                                  
 20491                                  L_code_ptr_raw_bin_add_rr:
 20492                                          ENTER
    33 0001067E C8000000            <1>  enter 0, 0
    34 00010682 4883E4F0            <1>  and rsp, ~15
 20493 00010686 48837D1802                      cmp COUNT, 2
 20494 0001068B 0F85A10A0000                    jne L_error_arg_count_2
 20495 00010691 488B5D20                        mov rbx, PARAM(0)
 20496                                          assert_real(rbx)
    42 00010695 803B12              <1>  cmp byte [%1], %2
    43 00010698 0F85330B0000        <1>  jne L_error_incorrect_type
 20497 0001069E 488B4D28                        mov rcx, PARAM(1)
 20498                                          assert_real(rcx)
    42 000106A2 803912              <1>  cmp byte [%1], %2
    43 000106A5 0F85260B0000        <1>  jne L_error_incorrect_type
 20499 000106AB F20F104301                      movsd xmm0, qword [rbx + 1]
 20500 000106B0 F20F104901                      movsd xmm1, qword [rcx + 1]
 20501 000106B5 F20F58C1                        addsd xmm0, xmm1
 20502 000106B9 E897090000                      call make_real
 20503                                          LEAVE
    38 000106BE C9                  <1>  leave
 20504 000106BF C22000                          ret AND_KILL_FRAME(2)
 20505                                  
 20506                                  L_code_ptr_raw_bin_sub_rr:
 20507                                          ENTER
    33 000106C2 C8000000            <1>  enter 0, 0
    34 000106C6 4883E4F0            <1>  and rsp, ~15
 20508 000106CA 48837D1802                      cmp COUNT, 2
 20509 000106CF 0F855D0A0000                    jne L_error_arg_count_2
 20510 000106D5 488B5D20                        mov rbx, PARAM(0)
 20511                                          assert_real(rbx)
    42 000106D9 803B12              <1>  cmp byte [%1], %2
    43 000106DC 0F85EF0A0000        <1>  jne L_error_incorrect_type
 20512 000106E2 488B4D28                        mov rcx, PARAM(1)
 20513                                          assert_real(rcx)
    42 000106E6 803912              <1>  cmp byte [%1], %2
    43 000106E9 0F85E20A0000        <1>  jne L_error_incorrect_type
 20514 000106EF F20F104301                      movsd xmm0, qword [rbx + 1]
 20515 000106F4 F20F104901                      movsd xmm1, qword [rcx + 1]
 20516 000106F9 F20F5CC1                        subsd xmm0, xmm1
 20517 000106FD E853090000                      call make_real
 20518                                          LEAVE
    38 00010702 C9                  <1>  leave
 20519 00010703 C22000                          ret AND_KILL_FRAME(2)
 20520                                  
 20521                                  L_code_ptr_raw_bin_mul_rr:
 20522                                          ENTER
    33 00010706 C8000000            <1>  enter 0, 0
    34 0001070A 4883E4F0            <1>  and rsp, ~15
 20523 0001070E 48837D1802                      cmp COUNT, 2
 20524 00010713 0F85190A0000                    jne L_error_arg_count_2
 20525 00010719 488B5D20                        mov rbx, PARAM(0)
 20526                                          assert_real(rbx)
    42 0001071D 803B12              <1>  cmp byte [%1], %2
    43 00010720 0F85AB0A0000        <1>  jne L_error_incorrect_type
 20527 00010726 488B4D28                        mov rcx, PARAM(1)
 20528                                          assert_real(rcx)
    42 0001072A 803912              <1>  cmp byte [%1], %2
    43 0001072D 0F859E0A0000        <1>  jne L_error_incorrect_type
 20529 00010733 F20F104301                      movsd xmm0, qword [rbx + 1]
 20530 00010738 F20F104901                      movsd xmm1, qword [rcx + 1]
 20531 0001073D F20F59C1                        mulsd xmm0, xmm1
 20532 00010741 E80F090000                      call make_real
 20533                                          LEAVE
    38 00010746 C9                  <1>  leave
 20534 00010747 C22000                          ret AND_KILL_FRAME(2)
 20535                                  
 20536                                  L_code_ptr_raw_bin_div_rr:
 20537                                          ENTER
    33 0001074A C8000000            <1>  enter 0, 0
    34 0001074E 4883E4F0            <1>  and rsp, ~15
 20538 00010752 48837D1802                      cmp COUNT, 2
 20539 00010757 0F85D5090000                    jne L_error_arg_count_2
 20540 0001075D 488B5D20                        mov rbx, PARAM(0)
 20541                                          assert_real(rbx)
    42 00010761 803B12              <1>  cmp byte [%1], %2
    43 00010764 0F85670A0000        <1>  jne L_error_incorrect_type
 20542 0001076A 488B4D28                        mov rcx, PARAM(1)
 20543                                          assert_real(rcx)
    42 0001076E 803912              <1>  cmp byte [%1], %2
    43 00010771 0F855A0A0000        <1>  jne L_error_incorrect_type
 20544 00010777 F20F104301                      movsd xmm0, qword [rbx + 1]
 20545 0001077C F20F104901                      movsd xmm1, qword [rcx + 1]
 20546 00010781 660FEFD2                        pxor xmm2, xmm2
 20547 00010785 660F2ECA                        ucomisd xmm1, xmm2
 20548 00010789 0F84730A0000                    je L_error_division_by_zero
 20549 0001078F F20F5EC1                        divsd xmm0, xmm1
 20550 00010793 E8BD080000                      call make_real
 20551                                          LEAVE
    38 00010798 C9                  <1>  leave
 20552 00010799 C22000                          ret AND_KILL_FRAME(2)
 20553                                  
 20554                                  L_code_ptr_raw_bin_add_qq:
 20555                                          ENTER
    33 0001079C C8000000            <1>  enter 0, 0
    34 000107A0 4883E4F0            <1>  and rsp, ~15
 20556 000107A4 48837D1802                      cmp COUNT, 2
 20557 000107A9 0F8583090000                    jne L_error_arg_count_2
 20558 000107AF 4C8B4520                        mov r8, PARAM(0)
 20559                                          assert_rational(r8)
    42 000107B3 41803811            <1>  cmp byte [%1], %2
    43 000107B7 0F85140A0000        <1>  jne L_error_incorrect_type
 20560 000107BD 4C8B4D28                        mov r9, PARAM(1)
 20561                                          assert_rational(r9)
    42 000107C1 41803911            <1>  cmp byte [%1], %2
    43 000107C5 0F85060A0000        <1>  jne L_error_incorrect_type
 20562 000107CB 498B4001                        mov rax, qword [r8 + 1] ; num1
 20563 000107CF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 20564 000107D3 4899                            cqo
 20565 000107D5 48F7EB                          imul rbx
 20566 000107D8 4889C6                          mov rsi, rax
 20567 000107DB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20568 000107DF 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 20569 000107E3 4899                            cqo
 20570 000107E5 48F7EB                          imul rbx
 20571 000107E8 4801C6                          add rsi, rax
 20572 000107EB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20573 000107EF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 20574 000107F3 4899                            cqo
 20575 000107F5 48F7EB                          imul rbx
 20576 000107F8 4889C7                          mov rdi, rax
 20577 000107FB E827010000                      call normalize_rational
 20578                                          LEAVE
    38 00010800 C9                  <1>  leave
 20579 00010801 C22000                          ret AND_KILL_FRAME(2)
 20580                                  
 20581                                  L_code_ptr_raw_bin_sub_qq:
 20582                                          ENTER
    33 00010804 C8000000            <1>  enter 0, 0
    34 00010808 4883E4F0            <1>  and rsp, ~15
 20583 0001080C 48837D1802                      cmp COUNT, 2
 20584 00010811 0F851B090000                    jne L_error_arg_count_2
 20585 00010817 4C8B4520                        mov r8, PARAM(0)
 20586                                          assert_rational(r8)
    42 0001081B 41803811            <1>  cmp byte [%1], %2
    43 0001081F 0F85AC090000        <1>  jne L_error_incorrect_type
 20587 00010825 4C8B4D28                        mov r9, PARAM(1)
 20588                                          assert_rational(r9)
    42 00010829 41803911            <1>  cmp byte [%1], %2
    43 0001082D 0F859E090000        <1>  jne L_error_incorrect_type
 20589 00010833 498B4001                        mov rax, qword [r8 + 1] ; num1
 20590 00010837 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 20591 0001083B 4899                            cqo
 20592 0001083D 48F7EB                          imul rbx
 20593 00010840 4889C6                          mov rsi, rax
 20594 00010843 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20595 00010847 498B5901                        mov rbx, qword [r9 + 1]     ; num2
 20596 0001084B 4899                            cqo
 20597 0001084D 48F7EB                          imul rbx
 20598 00010850 4829C6                          sub rsi, rax
 20599 00010853 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20600 00010857 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 20601 0001085B 4899                            cqo
 20602 0001085D 48F7EB                          imul rbx
 20603 00010860 4889C7                          mov rdi, rax
 20604 00010863 E8BF000000                      call normalize_rational
 20605                                          LEAVE
    38 00010868 C9                  <1>  leave
 20606 00010869 C22000                          ret AND_KILL_FRAME(2)
 20607                                  
 20608                                  L_code_ptr_raw_bin_mul_qq:
 20609                                          ENTER
    33 0001086C C8000000            <1>  enter 0, 0
    34 00010870 4883E4F0            <1>  and rsp, ~15
 20610 00010874 48837D1802                      cmp COUNT, 2
 20611 00010879 0F85B3080000                    jne L_error_arg_count_2
 20612 0001087F 4C8B4520                        mov r8, PARAM(0)
 20613                                          assert_rational(r8)
    42 00010883 41803811            <1>  cmp byte [%1], %2
    43 00010887 0F8544090000        <1>  jne L_error_incorrect_type
 20614 0001088D 4C8B4D28                        mov r9, PARAM(1)
 20615                                          assert_rational(r9)
    42 00010891 41803911            <1>  cmp byte [%1], %2
    43 00010895 0F8536090000        <1>  jne L_error_incorrect_type
 20616 0001089B 498B4001                        mov rax, qword [r8 + 1] ; num1
 20617 0001089F 498B5901                        mov rbx, qword [r9 + 1] ; num2
 20618 000108A3 4899                            cqo
 20619 000108A5 48F7EB                          imul rbx
 20620 000108A8 4889C6                          mov rsi, rax
 20621 000108AB 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20622 000108AF 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
 20623 000108B3 4899                            cqo
 20624 000108B5 48F7EB                          imul rbx
 20625 000108B8 4889C7                          mov rdi, rax
 20626 000108BB E867000000                      call normalize_rational
 20627                                          LEAVE
    38 000108C0 C9                  <1>  leave
 20628 000108C1 C22000                          ret AND_KILL_FRAME(2)
 20629                                          
 20630                                  L_code_ptr_raw_bin_div_qq:
 20631                                          ENTER
    33 000108C4 C8000000            <1>  enter 0, 0
    34 000108C8 4883E4F0            <1>  and rsp, ~15
 20632 000108CC 48837D1802                      cmp COUNT, 2
 20633 000108D1 0F855B080000                    jne L_error_arg_count_2
 20634 000108D7 4C8B4520                        mov r8, PARAM(0)
 20635                                          assert_rational(r8)
    42 000108DB 41803811            <1>  cmp byte [%1], %2
    43 000108DF 0F85EC080000        <1>  jne L_error_incorrect_type
 20636 000108E5 4C8B4D28                        mov r9, PARAM(1)
 20637                                          assert_rational(r9)
    42 000108E9 41803911            <1>  cmp byte [%1], %2
    43 000108ED 0F85DE080000        <1>  jne L_error_incorrect_type
 20638 000108F3 4983790100                      cmp qword [r9 + 1], 0
 20639 000108F8 0F8404090000                    je L_error_division_by_zero
 20640 000108FE 498B4001                        mov rax, qword [r8 + 1] ; num1
 20641 00010902 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
 20642 00010906 4899                            cqo
 20643 00010908 48F7EB                          imul rbx
 20644 0001090B 4889C6                          mov rsi, rax
 20645 0001090E 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
 20646 00010912 498B5901                        mov rbx, qword [r9 + 1] ; num2
 20647 00010916 4899                            cqo
 20648 00010918 48F7EB                          imul rbx
 20649 0001091B 4889C7                          mov rdi, rax
 20650 0001091E E804000000                      call normalize_rational
 20651                                          LEAVE
    38 00010923 C9                  <1>  leave
 20652 00010924 C22000                          ret AND_KILL_FRAME(2)
 20653                                          
 20654                                  normalize_rational:
 20655 00010927 56                              push rsi
 20656 00010928 57                              push rdi
 20657 00010929 E839000000                      call gcd
 20658 0001092E 4889C3                          mov rbx, rax
 20659 00010931 58                              pop rax
 20660 00010932 4899                            cqo
 20661 00010934 48F7FB                          idiv rbx
 20662 00010937 4989C0                          mov r8, rax
 20663 0001093A 58                              pop rax
 20664 0001093B 4899                            cqo
 20665 0001093D 48F7FB                          idiv rbx
 20666 00010940 4989C1                          mov r9, rax
 20667 00010943 BF11000000                      mov rdi, (1 + 8 + 8)
 20668 00010948 E890F0FFFF                      call malloc
 20669 0001094D C60011                          mov byte [rax], T_rational
 20670 00010950 4C894801                        mov qword [rax + 1], r9
 20671 00010954 4C894009                        mov qword [rax + 1 + 8], r8
 20672 00010958 C3                              ret
 20673                                  
 20674                                  iabs:
 20675 00010959 4889F8                          mov rax, rdi
 20676 0001095C 4883F800                        cmp rax, 0
 20677 00010960 7C01                            jl .Lneg
 20678 00010962 C3                              ret
 20679                                  .Lneg:
 20680 00010963 48F7D8                          neg rax
 20681 00010966 C3                              ret
 20682                                  
 20683                                  gcd:
 20684 00010967 E8EDFFFFFF                      call iabs
 20685 0001096C 4889C3                          mov rbx, rax
 20686 0001096F 4889F7                          mov rdi, rsi
 20687 00010972 E8E2FFFFFF                      call iabs
 20688 00010977 4883F800                        cmp rax, 0
 20689 0001097B 7502                            jne .L0
 20690 0001097D 4893                            xchg rax, rbx
 20691                                  .L0:
 20692 0001097F 4883FB00                        cmp rbx, 0
 20693 00010983 740C                            je .L1
 20694 00010985 4899                            cqo
 20695 00010987 48F7F3                          div rbx
 20696 0001098A 4889D0                          mov rax, rdx
 20697 0001098D 4893                            xchg rax, rbx
 20698 0001098F EBEE                            jmp .L0
 20699                                  .L1:
 20700 00010991 C3                              ret
 20701                                  
 20702                                  L_code_ptr_error:
 20703                                          ENTER
    33 00010992 C8000000            <1>  enter 0, 0
    34 00010996 4883E4F0            <1>  and rsp, ~15
 20704 0001099A 48837D1802                      cmp COUNT, 2
 20705 0001099F 0F858D070000                    jne L_error_arg_count_2
 20706 000109A5 488B7520                        mov rsi, PARAM(0)
 20707                                          assert_symbol(rsi)
    42 000109A9 803E04              <1>  cmp byte [%1], %2
    43 000109AC 0F851F080000        <1>  jne L_error_incorrect_type
 20708 000109B2 488B7528                        mov rsi, PARAM(1)
 20709                                          assert_string(rsi)
    42 000109B6 803E03              <1>  cmp byte [%1], %2
    43 000109B9 0F8512080000        <1>  jne L_error_incorrect_type
 20710 000109BF 48BF-                           mov rdi, fmt_scheme_error_part_1
 20710 000109C1 [5805000000000000] 
 20711 000109C9 B800000000                      mov rax, 0
 20712                                  	ENTER
    33 000109CE C8000000            <1>  enter 0, 0
    34 000109D2 4883E4F0            <1>  and rsp, ~15
 20713 000109D6 E8(00000000)                    call printf
 20714                                  	LEAVE
    38 000109DB C9                  <1>  leave
 20715 000109DC 488B7D20                        mov rdi, PARAM(0)
 20716 000109E0 E813F0FFFF                      call print_sexpr
 20717 000109E5 48BF-                           mov rdi, fmt_scheme_error_part_2
 20717 000109E7 [6C05000000000000] 
 20718 000109EF B800000000                      mov rax, 0
 20719                                  	ENTER
    33 000109F4 C8000000            <1>  enter 0, 0
    34 000109F8 4883E4F0            <1>  and rsp, ~15
 20720 000109FC E8(00000000)                    call printf
 20721                                  	LEAVE
    38 00010A01 C9                  <1>  leave
 20722 00010A02 488B4528                        mov rax, PARAM(1)       ; sob_string
 20723 00010A06 BE01000000                      mov rsi, 1              ; size = 1 byte
 20724 00010A0B 488B5001                        mov rdx, qword [rax + 1] ; length
 20725 00010A0F 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
 20726 00010A13 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
 20727 00010A1B E8(00000000)                    call fwrite
 20728 00010A20 48BF-                           mov rdi, fmt_scheme_error_part_3
 20728 00010A22 [AE05000000000000] 
 20729 00010A2A B800000000                      mov rax, 0
 20730                                  	ENTER
    33 00010A2F C8000000            <1>  enter 0, 0
    34 00010A33 4883E4F0            <1>  and rsp, ~15
 20731 00010A37 E8(00000000)                    call printf
 20732                                  	LEAVE
    38 00010A3C C9                  <1>  leave
 20733 00010A3D 48C7C0F7FFFFFF                  mov rax, -9
 20734 00010A44 E8(00000000)                    call exit
 20735                                  
 20736                                  L_code_ptr_raw_less_than_rr:
 20737                                          ENTER
    33 00010A49 C8000000            <1>  enter 0, 0
    34 00010A4D 4883E4F0            <1>  and rsp, ~15
 20738 00010A51 48837D1802                      cmp COUNT, 2
 20739 00010A56 0F85D6060000                    jne L_error_arg_count_2
 20740 00010A5C 488B7520                        mov rsi, PARAM(0)
 20741                                          assert_real(rsi)
    42 00010A60 803E12              <1>  cmp byte [%1], %2
    43 00010A63 0F8568070000        <1>  jne L_error_incorrect_type
 20742 00010A69 488B7D28                        mov rdi, PARAM(1)
 20743                                          assert_real(rdi)
    42 00010A6D 803F12              <1>  cmp byte [%1], %2
    43 00010A70 0F855B070000        <1>  jne L_error_incorrect_type
 20744 00010A76 F20F104601                      movsd xmm0, qword [rsi + 1]
 20745 00010A7B F20F104F01                      movsd xmm1, qword [rdi + 1]
 20746 00010A80 660F2FC1                        comisd xmm0, xmm1
 20747 00010A84 730C                            jae .L_false
 20748 00010A86 48B8-                           mov rax, sob_boolean_true
 20748 00010A88 [0300000000000000] 
 20749 00010A90 EB0A                            jmp .L_exit
 20750                                  .L_false:
 20751 00010A92 48B8-                           mov rax, sob_boolean_false
 20751 00010A94 [0200000000000000] 
 20752                                  .L_exit:
 20753                                          LEAVE
    38 00010A9C C9                  <1>  leave
 20754 00010A9D C22000                          ret AND_KILL_FRAME(2)
 20755                                          
 20756                                  L_code_ptr_raw_less_than_qq:
 20757                                          ENTER
    33 00010AA0 C8000000            <1>  enter 0, 0
    34 00010AA4 4883E4F0            <1>  and rsp, ~15
 20758 00010AA8 48837D1802                      cmp COUNT, 2
 20759 00010AAD 0F857F060000                    jne L_error_arg_count_2
 20760 00010AB3 488B7520                        mov rsi, PARAM(0)
 20761                                          assert_rational(rsi)
    42 00010AB7 803E11              <1>  cmp byte [%1], %2
    43 00010ABA 0F8511070000        <1>  jne L_error_incorrect_type
 20762 00010AC0 488B7D28                        mov rdi, PARAM(1)
 20763                                          assert_rational(rdi)
    42 00010AC4 803F11              <1>  cmp byte [%1], %2
    43 00010AC7 0F8504070000        <1>  jne L_error_incorrect_type
 20764 00010ACD 488B4601                        mov rax, qword [rsi + 1] ; num1
 20765 00010AD1 4899                            cqo
 20766 00010AD3 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 20767 00010AD7 4889C1                          mov rcx, rax
 20768 00010ADA 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
 20769 00010ADE 4899                            cqo
 20770 00010AE0 48F76F01                        imul qword [rdi + 1]          ; num2
 20771 00010AE4 4829C1                          sub rcx, rax
 20772 00010AE7 7D0C                            jge .L_false
 20773 00010AE9 48B8-                           mov rax, sob_boolean_true
 20773 00010AEB [0300000000000000] 
 20774 00010AF3 EB0A                            jmp .L_exit
 20775                                  .L_false:
 20776 00010AF5 48B8-                           mov rax, sob_boolean_false
 20776 00010AF7 [0200000000000000] 
 20777                                  .L_exit:
 20778                                          LEAVE
    38 00010AFF C9                  <1>  leave
 20779 00010B00 C22000                          ret AND_KILL_FRAME(2)
 20780                                  
 20781                                  L_code_ptr_raw_equal_rr:
 20782                                          ENTER
    33 00010B03 C8000000            <1>  enter 0, 0
    34 00010B07 4883E4F0            <1>  and rsp, ~15
 20783 00010B0B 48837D1802                      cmp COUNT, 2
 20784 00010B10 0F851C060000                    jne L_error_arg_count_2
 20785 00010B16 488B7520                        mov rsi, PARAM(0)
 20786                                          assert_real(rsi)
    42 00010B1A 803E12              <1>  cmp byte [%1], %2
    43 00010B1D 0F85AE060000        <1>  jne L_error_incorrect_type
 20787 00010B23 488B7D28                        mov rdi, PARAM(1)
 20788                                          assert_real(rdi)
    42 00010B27 803F12              <1>  cmp byte [%1], %2
    43 00010B2A 0F85A1060000        <1>  jne L_error_incorrect_type
 20789 00010B30 F20F104601                      movsd xmm0, qword [rsi + 1]
 20790 00010B35 F20F104F01                      movsd xmm1, qword [rdi + 1]
 20791 00010B3A 660F2FC1                        comisd xmm0, xmm1
 20792 00010B3E 750C                            jne .L_false
 20793 00010B40 48B8-                           mov rax, sob_boolean_true
 20793 00010B42 [0300000000000000] 
 20794 00010B4A EB0A                            jmp .L_exit
 20795                                  .L_false:
 20796 00010B4C 48B8-                           mov rax, sob_boolean_false
 20796 00010B4E [0200000000000000] 
 20797                                  .L_exit:
 20798                                          LEAVE
    38 00010B56 C9                  <1>  leave
 20799 00010B57 C22000                          ret AND_KILL_FRAME(2)
 20800                                          
 20801                                  L_code_ptr_raw_equal_qq:
 20802                                          ENTER
    33 00010B5A C8000000            <1>  enter 0, 0
    34 00010B5E 4883E4F0            <1>  and rsp, ~15
 20803 00010B62 48837D1802                      cmp COUNT, 2
 20804 00010B67 0F85C5050000                    jne L_error_arg_count_2
 20805 00010B6D 488B7520                        mov rsi, PARAM(0)
 20806                                          assert_rational(rsi)
    42 00010B71 803E11              <1>  cmp byte [%1], %2
    43 00010B74 0F8557060000        <1>  jne L_error_incorrect_type
 20807 00010B7A 488B7D28                        mov rdi, PARAM(1)
 20808                                          assert_rational(rdi)
    42 00010B7E 803F11              <1>  cmp byte [%1], %2
    43 00010B81 0F854A060000        <1>  jne L_error_incorrect_type
 20809 00010B87 488B4601                        mov rax, qword [rsi + 1] ; num1
 20810 00010B8B 4899                            cqo
 20811 00010B8D 48F76F09                        imul qword [rdi + 1 + 8] ; den2
 20812 00010B91 4889C1                          mov rcx, rax
 20813 00010B94 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
 20814 00010B98 4899                            cqo
 20815 00010B9A 48F76F01                        imul qword [rdi + 1]          ; num2
 20816 00010B9E 4829C1                          sub rcx, rax
 20817 00010BA1 750C                            jne .L_false
 20818 00010BA3 48B8-                           mov rax, sob_boolean_true
 20818 00010BA5 [0300000000000000] 
 20819 00010BAD EB0A                            jmp .L_exit
 20820                                  .L_false:
 20821 00010BAF 48B8-                           mov rax, sob_boolean_false
 20821 00010BB1 [0200000000000000] 
 20822                                  .L_exit:
 20823                                          LEAVE
    38 00010BB9 C9                  <1>  leave
 20824 00010BBA C22000                          ret AND_KILL_FRAME(2)
 20825                                  
 20826                                  L_code_ptr_quotient:
 20827                                          ENTER
    33 00010BBD C8000000            <1>  enter 0, 0
    34 00010BC1 4883E4F0            <1>  and rsp, ~15
 20828 00010BC5 48837D1802                      cmp COUNT, 2
 20829 00010BCA 0F8562050000                    jne L_error_arg_count_2
 20830 00010BD0 488B7520                        mov rsi, PARAM(0)
 20831                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010BD4 803E11              <2>  cmp byte [%1], %2
    43 00010BD7 0F85F4050000        <2>  jne L_error_incorrect_type
    48 00010BDD 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010BE2 0F85E9050000        <1>  jne L_error_incorrect_type
 20832 00010BE8 488B7D28                        mov rdi, PARAM(1)
 20833                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00010BEC 803F11              <2>  cmp byte [%1], %2
    43 00010BEF 0F85DC050000        <2>  jne L_error_incorrect_type
    48 00010BF5 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010BFA 0F85D1050000        <1>  jne L_error_incorrect_type
 20834 00010C00 488B4601                        mov rax, qword [rsi + 1]
 20835 00010C04 488B5F01                        mov rbx, qword [rdi + 1]
 20836 00010C08 4883FB00                        cmp rbx, 0
 20837 00010C0C 0F84F0050000                    je L_error_division_by_zero
 20838 00010C12 4899                            cqo
 20839 00010C14 48F7FB                          idiv rbx
 20840 00010C17 4889C7                          mov rdi, rax
 20841 00010C1A E852040000                      call make_integer
 20842                                          LEAVE
    38 00010C1F C9                  <1>  leave
 20843 00010C20 C22000                          ret AND_KILL_FRAME(2)
 20844                                          
 20845                                  L_code_ptr_remainder:
 20846                                          ENTER
    33 00010C23 C8000000            <1>  enter 0, 0
    34 00010C27 4883E4F0            <1>  and rsp, ~15
 20847 00010C2B 48837D1802                      cmp COUNT, 2
 20848 00010C30 0F85FC040000                    jne L_error_arg_count_2
 20849 00010C36 488B7520                        mov rsi, PARAM(0)
 20850                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010C3A 803E11              <2>  cmp byte [%1], %2
    43 00010C3D 0F858E050000        <2>  jne L_error_incorrect_type
    48 00010C43 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010C48 0F8583050000        <1>  jne L_error_incorrect_type
 20851 00010C4E 488B7D28                        mov rdi, PARAM(1)
 20852                                          assert_integer(rdi)
    47                              <1>  assert_rational(%1)
    42 00010C52 803F11              <2>  cmp byte [%1], %2
    43 00010C55 0F8576050000        <2>  jne L_error_incorrect_type
    48 00010C5B 48837F0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010C60 0F856B050000        <1>  jne L_error_incorrect_type
 20853 00010C66 488B4601                        mov rax, qword [rsi + 1]
 20854 00010C6A 488B5F01                        mov rbx, qword [rdi + 1]
 20855 00010C6E 4883FB00                        cmp rbx, 0
 20856 00010C72 0F848A050000                    je L_error_division_by_zero
 20857 00010C78 4899                            cqo
 20858 00010C7A 48F7FB                          idiv rbx
 20859 00010C7D 4889D7                          mov rdi, rdx
 20860 00010C80 E8EC030000                      call make_integer
 20861                                          LEAVE
    38 00010C85 C9                  <1>  leave
 20862 00010C86 C22000                          ret AND_KILL_FRAME(2)
 20863                                  
 20864                                  L_code_ptr_set_car:
 20865                                          ENTER
    33 00010C89 C8000000            <1>  enter 0, 0
    34 00010C8D 4883E4F0            <1>  and rsp, ~15
 20866 00010C91 48837D1802                      cmp COUNT, 2
 20867 00010C96 0F8596040000                    jne L_error_arg_count_2
 20868 00010C9C 488B4520                        mov rax, PARAM(0)
 20869                                          assert_pair(rax)
    42 00010CA0 803821              <1>  cmp byte [%1], %2
    43 00010CA3 0F8528050000        <1>  jne L_error_incorrect_type
 20870 00010CA9 488B5D28                        mov rbx, PARAM(1)
 20871 00010CAD 48895801                        mov SOB_PAIR_CAR(rax), rbx
 20872 00010CB1 48B8-                           mov rax, sob_void
 20872 00010CB3 [0000000000000000] 
 20873                                          LEAVE
    38 00010CBB C9                  <1>  leave
 20874 00010CBC C22000                          ret AND_KILL_FRAME(2)
 20875                                  
 20876                                  L_code_ptr_set_cdr:
 20877                                          ENTER
    33 00010CBF C8000000            <1>  enter 0, 0
    34 00010CC3 4883E4F0            <1>  and rsp, ~15
 20878 00010CC7 48837D1802                      cmp COUNT, 2
 20879 00010CCC 0F8560040000                    jne L_error_arg_count_2
 20880 00010CD2 488B4520                        mov rax, PARAM(0)
 20881                                          assert_pair(rax)
    42 00010CD6 803821              <1>  cmp byte [%1], %2
    43 00010CD9 0F85F2040000        <1>  jne L_error_incorrect_type
 20882 00010CDF 488B5D28                        mov rbx, PARAM(1)
 20883 00010CE3 48895809                        mov SOB_PAIR_CDR(rax), rbx
 20884 00010CE7 48B8-                           mov rax, sob_void
 20884 00010CE9 [0000000000000000] 
 20885                                          LEAVE
    38 00010CF1 C9                  <1>  leave
 20886 00010CF2 C22000                          ret AND_KILL_FRAME(2)
 20887                                  
 20888                                  L_code_ptr_string_ref:
 20889                                          ENTER
    33 00010CF5 C8000000            <1>  enter 0, 0
    34 00010CF9 4883E4F0            <1>  and rsp, ~15
 20890 00010CFD 48837D1802                      cmp COUNT, 2
 20891 00010D02 0F852A040000                    jne L_error_arg_count_2
 20892 00010D08 488B7D20                        mov rdi, PARAM(0)
 20893                                          assert_string(rdi)
    42 00010D0C 803F03              <1>  cmp byte [%1], %2
    43 00010D0F 0F85BC040000        <1>  jne L_error_incorrect_type
 20894 00010D15 488B7528                        mov rsi, PARAM(1)
 20895                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010D19 803E11              <2>  cmp byte [%1], %2
    43 00010D1C 0F85AF040000        <2>  jne L_error_incorrect_type
    48 00010D22 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010D27 0F85A4040000        <1>  jne L_error_incorrect_type
 20896 00010D2D 488B5701                        mov rdx, qword [rdi + 1]
 20897 00010D31 488B4E01                        mov rcx, qword [rsi + 1]
 20898 00010D35 4839D1                          cmp rcx, rdx
 20899 00010D38 0F8D59030000                    jge L_error_integer_range
 20900 00010D3E 4883F900                        cmp rcx, 0
 20901 00010D42 0F8C4F030000                    jl L_error_integer_range
 20902 00010D48 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
 20903 00010D4C BF02000000                      mov rdi, 2
 20904 00010D51 E887ECFFFF                      call malloc
 20905 00010D56 C60002                          mov byte [rax], T_char
 20906 00010D59 885801                          mov byte [rax + 1], bl
 20907                                          LEAVE
    38 00010D5C C9                  <1>  leave
 20908 00010D5D C22000                          ret AND_KILL_FRAME(2)
 20909                                  
 20910                                  L_code_ptr_vector_ref:
 20911                                          ENTER
    33 00010D60 C8000000            <1>  enter 0, 0
    34 00010D64 4883E4F0            <1>  and rsp, ~15
 20912 00010D68 48837D1802                      cmp COUNT, 2
 20913 00010D6D 0F85BF030000                    jne L_error_arg_count_2
 20914 00010D73 488B7D20                        mov rdi, PARAM(0)
 20915                                          assert_vector(rdi)
    42 00010D77 803F22              <1>  cmp byte [%1], %2
    43 00010D7A 0F8551040000        <1>  jne L_error_incorrect_type
 20916 00010D80 488B7528                        mov rsi, PARAM(1)
 20917                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010D84 803E11              <2>  cmp byte [%1], %2
    43 00010D87 0F8544040000        <2>  jne L_error_incorrect_type
    48 00010D8D 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010D92 0F8539040000        <1>  jne L_error_incorrect_type
 20918 00010D98 488B5701                        mov rdx, qword [rdi + 1]
 20919 00010D9C 488B4E01                        mov rcx, qword [rsi + 1]
 20920 00010DA0 4839D1                          cmp rcx, rdx
 20921 00010DA3 0F8DEE020000                    jge L_error_integer_range
 20922 00010DA9 4883F900                        cmp rcx, 0
 20923 00010DAD 0F8CE4020000                    jl L_error_integer_range
 20924 00010DB3 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
 20925                                          LEAVE
    38 00010DB8 C9                  <1>  leave
 20926 00010DB9 C22000                          ret AND_KILL_FRAME(2)
 20927                                  
 20928                                  L_code_ptr_vector_set:
 20929                                          ENTER
    33 00010DBC C8000000            <1>  enter 0, 0
    34 00010DC0 4883E4F0            <1>  and rsp, ~15
 20930 00010DC4 48837D1803                      cmp COUNT, 3
 20931 00010DC9 0F85CD030000                    jne L_error_arg_count_3
 20932 00010DCF 488B7D20                        mov rdi, PARAM(0)
 20933                                          assert_vector(rdi)
    42 00010DD3 803F22              <1>  cmp byte [%1], %2
    43 00010DD6 0F85F5030000        <1>  jne L_error_incorrect_type
 20934 00010DDC 488B7528                        mov rsi, PARAM(1)
 20935                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010DE0 803E11              <2>  cmp byte [%1], %2
    43 00010DE3 0F85E8030000        <2>  jne L_error_incorrect_type
    48 00010DE9 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010DEE 0F85DD030000        <1>  jne L_error_incorrect_type
 20936 00010DF4 488B5701                        mov rdx, qword [rdi + 1]
 20937 00010DF8 488B4E01                        mov rcx, qword [rsi + 1]
 20938 00010DFC 4839D1                          cmp rcx, rdx
 20939 00010DFF 0F8D92020000                    jge L_error_integer_range
 20940 00010E05 4883F900                        cmp rcx, 0
 20941 00010E09 0F8C88020000                    jl L_error_integer_range
 20942 00010E0F 488B4530                        mov rax, PARAM(2)
 20943 00010E13 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
 20944 00010E18 48B8-                           mov rax, sob_void
 20944 00010E1A [0000000000000000] 
 20945                                          LEAVE
    38 00010E22 C9                  <1>  leave
 20946 00010E23 C22800                          ret AND_KILL_FRAME(3)
 20947                                  
 20948                                  L_code_ptr_string_set:
 20949                                          ENTER
    33 00010E26 C8000000            <1>  enter 0, 0
    34 00010E2A 4883E4F0            <1>  and rsp, ~15
 20950 00010E2E 48837D1803                      cmp COUNT, 3
 20951 00010E33 0F8563030000                    jne L_error_arg_count_3
 20952 00010E39 488B7D20                        mov rdi, PARAM(0)
 20953                                          assert_string(rdi)
    42 00010E3D 803F03              <1>  cmp byte [%1], %2
    43 00010E40 0F858B030000        <1>  jne L_error_incorrect_type
 20954 00010E46 488B7528                        mov rsi, PARAM(1)
 20955                                          assert_integer(rsi)
    47                              <1>  assert_rational(%1)
    42 00010E4A 803E11              <2>  cmp byte [%1], %2
    43 00010E4D 0F857E030000        <2>  jne L_error_incorrect_type
    48 00010E53 48837E0901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010E58 0F8573030000        <1>  jne L_error_incorrect_type
 20956 00010E5E 488B5701                        mov rdx, qword [rdi + 1]
 20957 00010E62 488B4E01                        mov rcx, qword [rsi + 1]
 20958 00010E66 4839D1                          cmp rcx, rdx
 20959 00010E69 0F8D28020000                    jge L_error_integer_range
 20960 00010E6F 4883F900                        cmp rcx, 0
 20961 00010E73 0F8C1E020000                    jl L_error_integer_range
 20962 00010E79 488B4530                        mov rax, PARAM(2)
 20963                                          assert_char(rax)
    42 00010E7D 803802              <1>  cmp byte [%1], %2
    43 00010E80 0F854B030000        <1>  jne L_error_incorrect_type
 20964 00010E86 8A4001                          mov al, byte [rax + 1]
 20965 00010E89 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
 20966 00010E8D 48B8-                           mov rax, sob_void
 20966 00010E8F [0000000000000000] 
 20967                                          LEAVE
    38 00010E97 C9                  <1>  leave
 20968 00010E98 C22800                          ret AND_KILL_FRAME(3)
 20969                                  
 20970                                  L_code_ptr_make_vector:
 20971                                          ENTER
    33 00010E9B C8000000            <1>  enter 0, 0
    34 00010E9F 4883E4F0            <1>  and rsp, ~15
 20972 00010EA3 48837D1802                      cmp COUNT, 2
 20973 00010EA8 0F8584020000                    jne L_error_arg_count_2
 20974 00010EAE 488B4D20                        mov rcx, PARAM(0)
 20975                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00010EB2 803911              <2>  cmp byte [%1], %2
    43 00010EB5 0F8516030000        <2>  jne L_error_incorrect_type
    48 00010EBB 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010EC0 0F850B030000        <1>  jne L_error_incorrect_type
 20976 00010EC6 488B4901                        mov rcx, qword [rcx + 1]
 20977 00010ECA 4883F900                        cmp rcx, 0
 20978 00010ECE 0F8CC3010000                    jl L_error_integer_range
 20979 00010ED4 488B5528                        mov rdx, PARAM(1)
 20980 00010ED8 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
 20981 00010EE0 E8F8EAFFFF                      call malloc
 20982 00010EE5 C60022                          mov byte [rax], T_vector
 20983 00010EE8 48894801                        mov qword [rax + 1], rcx
 20984 00010EEC 41B800000000                    mov r8, 0
 20985                                  .L0:
 20986 00010EF2 4939C8                          cmp r8, rcx
 20987 00010EF5 740A                            je .L1
 20988 00010EF7 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
 20989 00010EFC 49FFC0                          inc r8
 20990 00010EFF EBF1                            jmp .L0
 20991                                  .L1:
 20992                                          LEAVE
    38 00010F01 C9                  <1>  leave
 20993 00010F02 C22000                          ret AND_KILL_FRAME(2)
 20994                                          
 20995                                  L_code_ptr_make_string:
 20996                                          ENTER
    33 00010F05 C8000000            <1>  enter 0, 0
    34 00010F09 4883E4F0            <1>  and rsp, ~15
 20997 00010F0D 48837D1802                      cmp COUNT, 2
 20998 00010F12 0F851A020000                    jne L_error_arg_count_2
 20999 00010F18 488B4D20                        mov rcx, PARAM(0)
 21000                                          assert_integer(rcx)
    47                              <1>  assert_rational(%1)
    42 00010F1C 803911              <2>  cmp byte [%1], %2
    43 00010F1F 0F85AC020000        <2>  jne L_error_incorrect_type
    48 00010F25 4883790901          <1>  cmp qword [%1 + 1 + 8], 1
    49 00010F2A 0F85A1020000        <1>  jne L_error_incorrect_type
 21001 00010F30 488B4901                        mov rcx, qword [rcx + 1]
 21002 00010F34 4883F900                        cmp rcx, 0
 21003 00010F38 0F8C59010000                    jl L_error_integer_range
 21004 00010F3E 488B5528                        mov rdx, PARAM(1)
 21005                                          assert_char(rdx)
    42 00010F42 803A02              <1>  cmp byte [%1], %2
    43 00010F45 0F8586020000        <1>  jne L_error_incorrect_type
 21006 00010F4B 8A5201                          mov dl, byte [rdx + 1]
 21007 00010F4E 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
 21008 00010F52 E886EAFFFF                      call malloc
 21009 00010F57 C60003                          mov byte [rax], T_string
 21010 00010F5A 48894801                        mov qword [rax + 1], rcx
 21011 00010F5E 41B800000000                    mov r8, 0
 21012                                  .L0:
 21013 00010F64 4939C8                          cmp r8, rcx
 21014 00010F67 740A                            je .L1
 21015 00010F69 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
 21016 00010F6E 49FFC0                          inc r8
 21017 00010F71 EBF1                            jmp .L0
 21018                                  .L1:
 21019                                          LEAVE
    38 00010F73 C9                  <1>  leave
 21020 00010F74 C22000                          ret AND_KILL_FRAME(2)
 21021                                  
 21022                                  L_code_ptr_numerator:
 21023                                          ENTER
    33 00010F77 C8000000            <1>  enter 0, 0
    34 00010F7B 4883E4F0            <1>  and rsp, ~15
 21024 00010F7F 48837D1801                      cmp COUNT, 1
 21025 00010F84 0F8573010000                    jne L_error_arg_count_1
 21026 00010F8A 488B4520                        mov rax, PARAM(0)
 21027                                          assert_rational(rax)
    42 00010F8E 803811              <1>  cmp byte [%1], %2
    43 00010F91 0F853A020000        <1>  jne L_error_incorrect_type
 21028 00010F97 488B7801                        mov rdi, qword [rax + 1]
 21029 00010F9B E8D1000000                      call make_integer
 21030                                          LEAVE
    38 00010FA0 C9                  <1>  leave
 21031 00010FA1 C21800                          ret AND_KILL_FRAME(1)
 21032                                          
 21033                                  L_code_ptr_denominator:
 21034                                          ENTER
    33 00010FA4 C8000000            <1>  enter 0, 0
    34 00010FA8 4883E4F0            <1>  and rsp, ~15
 21035 00010FAC 48837D1801                      cmp COUNT, 1
 21036 00010FB1 0F8546010000                    jne L_error_arg_count_1
 21037 00010FB7 488B4520                        mov rax, PARAM(0)
 21038                                          assert_rational(rax)
    42 00010FBB 803811              <1>  cmp byte [%1], %2
    43 00010FBE 0F850D020000        <1>  jne L_error_incorrect_type
 21039 00010FC4 488B7809                        mov rdi, qword [rax + 1 + 8]
 21040 00010FC8 E8A4000000                      call make_integer
 21041                                          LEAVE
    38 00010FCD C9                  <1>  leave
 21042 00010FCE C21800                          ret AND_KILL_FRAME(1)
 21043                                  
 21044                                  L_code_ptr_eq:
 21045                                  	ENTER
    33 00010FD1 C8000000            <1>  enter 0, 0
    34 00010FD5 4883E4F0            <1>  and rsp, ~15
 21046 00010FD9 48837D1802              	cmp COUNT, 2
 21047 00010FDE 0F854E010000            	jne L_error_arg_count_2
 21048 00010FE4 488B7D20                	mov rdi, PARAM(0)
 21049 00010FE8 488B7528                	mov rsi, PARAM(1)
 21050 00010FEC 4839F7                  	cmp rdi, rsi
 21051 00010FEF 744A                    	je .L_eq_true
 21052 00010FF1 8A17                    	mov dl, byte [rdi]
 21053 00010FF3 3A16                    	cmp dl, byte [rsi]
 21054 00010FF5 7550                    	jne .L_eq_false
 21055 00010FF7 80FA02                  	cmp dl, T_char
 21056 00010FFA 7437                    	je .L_char
 21057 00010FFC 80FA04                  	cmp dl, T_symbol
 21058 00010FFF 742A                    	je .L_symbol
 21059 00011001 80FA12                  	cmp dl, T_real
 21060 00011004 741D                    	je .L_real
 21061 00011006 80FA11                  	cmp dl, T_rational
 21062 00011009 7402                    	je .L_rational
 21063 0001100B EB3A                    	jmp .L_eq_false
 21064                                  .L_rational:
 21065 0001100D 488B4601                	mov rax, qword [rsi + 1]
 21066 00011011 483B4701                	cmp rax, qword [rdi + 1]
 21067 00011015 7530                    	jne .L_eq_false
 21068 00011017 488B4609                	mov rax, qword [rsi + 1 + 8]
 21069 0001101B 483B4709                	cmp rax, qword [rdi + 1 + 8]
 21070 0001101F 7526                    	jne .L_eq_false
 21071 00011021 EB18                    	jmp .L_eq_true
 21072                                  .L_real:
 21073 00011023 488B4601                	mov rax, qword [rsi + 1]
 21074 00011027 483B4701                	cmp rax, qword [rdi + 1]
 21075                                  .L_symbol:
 21076                                  	; never reached, because symbols are static!
 21077                                  	; but I'm keeping it in case, I'll ever change
 21078                                  	; the implementation
 21079 0001102B 488B4601                	mov rax, qword [rsi + 1]
 21080 0001102F 483B4701                	cmp rax, qword [rdi + 1]
 21081                                  .L_char:
 21082 00011033 8A5E01                  	mov bl, byte [rsi + 1]
 21083 00011036 3A5F01                  	cmp bl, byte [rdi + 1]
 21084 00011039 750C                    	jne .L_eq_false
 21085                                  .L_eq_true:
 21086 0001103B 48B8-                   	mov rax, sob_boolean_true
 21086 0001103D [0300000000000000] 
 21087 00011045 EB0A                    	jmp .L_eq_exit
 21088                                  .L_eq_false:
 21089 00011047 48B8-                   	mov rax, sob_boolean_false
 21089 00011049 [0200000000000000] 
 21090                                  .L_eq_exit:
 21091                                  	LEAVE
    38 00011051 C9                  <1>  leave
 21092 00011052 C22000                  	ret AND_KILL_FRAME(2)
 21093                                  
 21094                                  make_real:
 21095                                          ENTER
    33 00011055 C8000000            <1>  enter 0, 0
    34 00011059 4883E4F0            <1>  and rsp, ~15
 21096 0001105D BF09000000                      mov rdi, (1 + 8)
 21097 00011062 E876E9FFFF                      call malloc
 21098 00011067 C60012                          mov byte [rax], T_real
 21099 0001106A F20F114001                      movsd qword [rax + 1], xmm0
 21100                                          LEAVE
    38 0001106F C9                  <1>  leave
 21101 00011070 C3                              ret
 21102                                          
 21103                                  make_integer:
 21104                                          ENTER
    33 00011071 C8000000            <1>  enter 0, 0
    34 00011075 4883E4F0            <1>  and rsp, ~15
 21105 00011079 4889FE                          mov rsi, rdi
 21106 0001107C BF11000000                      mov rdi, (1 + 8 + 8)
 21107 00011081 E857E9FFFF                      call malloc
 21108 00011086 C60011                          mov byte [rax], T_rational
 21109 00011089 48897001                        mov qword [rax + 1], rsi
 21110 0001108D 48C7400901000000                mov qword [rax + 1 + 8], 1
 21111                                          LEAVE
    38 00011095 C9                  <1>  leave
 21112 00011096 C3                              ret
 21113                                          
 21114                                  L_error_integer_range:
 21115 00011097 488B3C25[00000000]              mov rdi, qword [stderr]
 21116 0001109F 48BE-                           mov rsi, fmt_integer_range
 21116 000110A1 [2505000000000000] 
 21117 000110A9 B800000000                      mov rax, 0
 21118                                  	ENTER
    33 000110AE C8000000            <1>  enter 0, 0
    34 000110B2 4883E4F0            <1>  and rsp, ~15
 21119 000110B6 E8(00000000)                    call fprintf
 21120                                  	LEAVE
    38 000110BB C9                  <1>  leave
 21121 000110BC 48C7C0FBFFFFFF                  mov rax, -5
 21122 000110C3 E8(00000000)                    call exit
 21123                                  
 21124                                  L_error_arg_count_0:
 21125 000110C8 488B3C25[00000000]              mov rdi, qword [stderr]
 21126 000110D0 48BE-                           mov rsi, fmt_arg_count_0
 21126 000110D2 [2304000000000000] 
 21127 000110DA 488B5518                        mov rdx, COUNT
 21128 000110DE B800000000                      mov rax, 0
 21129                                  	ENTER
    33 000110E3 C8000000            <1>  enter 0, 0
    34 000110E7 4883E4F0            <1>  and rsp, ~15
 21130 000110EB E8(00000000)                    call fprintf
 21131                                  	LEAVE
    38 000110F0 C9                  <1>  leave
 21132 000110F1 48C7C0FDFFFFFF                  mov rax, -3
 21133 000110F8 E8(00000000)                    call exit
 21134                                  
 21135                                  L_error_arg_count_1:
 21136 000110FD 488B3C25[00000000]              mov rdi, qword [stderr]
 21137 00011105 48BE-                           mov rsi, fmt_arg_count_1
 21137 00011107 [4B04000000000000] 
 21138 0001110F 488B5518                        mov rdx, COUNT
 21139 00011113 B800000000                      mov rax, 0
 21140                                  	ENTER
    33 00011118 C8000000            <1>  enter 0, 0
    34 0001111C 4883E4F0            <1>  and rsp, ~15
 21141 00011120 E8(00000000)                    call fprintf
 21142                                  	LEAVE
    38 00011125 C9                  <1>  leave
 21143 00011126 48C7C0FDFFFFFF                  mov rax, -3
 21144 0001112D E8(00000000)                    call exit
 21145                                  
 21146                                  L_error_arg_count_2:
 21147 00011132 488B3C25[00000000]              mov rdi, qword [stderr]
 21148 0001113A 48BE-                           mov rsi, fmt_arg_count_2
 21148 0001113C [B104000000000000] 
 21149 00011144 488B5518                        mov rdx, COUNT
 21150 00011148 B800000000                      mov rax, 0
 21151                                  	ENTER
    33 0001114D C8000000            <1>  enter 0, 0
    34 00011151 4883E4F0            <1>  and rsp, ~15
 21152 00011155 E8(00000000)                    call fprintf
 21153                                  	LEAVE
    38 0001115A C9                  <1>  leave
 21154 0001115B 48C7C0FDFFFFFF                  mov rax, -3
 21155 00011162 E8(00000000)                    call exit
 21156                                  
 21157                                  L_error_arg_count_12:
 21158 00011167 488B3C25[00000000]              mov rdi, qword [stderr]
 21159 0001116F 48BE-                           mov rsi, fmt_arg_count_12
 21159 00011171 [7104000000000000] 
 21160 00011179 488B5518                        mov rdx, COUNT
 21161 0001117D B800000000                      mov rax, 0
 21162                                  	ENTER
    33 00011182 C8000000            <1>  enter 0, 0
    34 00011186 4883E4F0            <1>  and rsp, ~15
 21163 0001118A E8(00000000)                    call fprintf
 21164                                  	LEAVE
    38 0001118F C9                  <1>  leave
 21165 00011190 48C7C0FDFFFFFF                  mov rax, -3
 21166 00011197 E8(00000000)                    call exit
 21167                                  
 21168                                  L_error_arg_count_3:
 21169 0001119C 488B3C25[00000000]              mov rdi, qword [stderr]
 21170 000111A4 48BE-                           mov rsi, fmt_arg_count_3
 21170 000111A6 [D804000000000000] 
 21171 000111AE 488B5518                        mov rdx, COUNT
 21172 000111B2 B800000000                      mov rax, 0
 21173                                  	ENTER
    33 000111B7 C8000000            <1>  enter 0, 0
    34 000111BB 4883E4F0            <1>  and rsp, ~15
 21174 000111BF E8(00000000)                    call fprintf
 21175                                  	LEAVE
    38 000111C4 C9                  <1>  leave
 21176 000111C5 48C7C0FDFFFFFF                  mov rax, -3
 21177 000111CC E8(00000000)                    call exit
 21178                                          
 21179                                  L_error_incorrect_type:
 21180 000111D1 488B3C25[00000000]              mov rdi, qword [stderr]
 21181 000111D9 48BE-                           mov rsi, fmt_type
 21181 000111DB [0105000000000000] 
 21182 000111E3 B800000000                      mov rax, 0
 21183                                  	ENTER
    33 000111E8 C8000000            <1>  enter 0, 0
    34 000111EC 4883E4F0            <1>  and rsp, ~15
 21184 000111F0 E8(00000000)                    call fprintf
 21185                                  	LEAVE
    38 000111F5 C9                  <1>  leave
 21186 000111F6 48C7C0FCFFFFFF                  mov rax, -4
 21187 000111FD E8(00000000)                    call exit
 21188                                  
 21189                                  L_error_division_by_zero:
 21190 00011202 488B3C25[00000000]              mov rdi, qword [stderr]
 21191 0001120A 48BE-                           mov rsi, fmt_division_by_zero
 21191 0001120C [4205000000000000] 
 21192 00011214 B800000000                      mov rax, 0
 21193                                  	ENTER
    33 00011219 C8000000            <1>  enter 0, 0
    34 0001121D 4883E4F0            <1>  and rsp, ~15
 21194 00011221 E8(00000000)                    call fprintf
 21195                                  	LEAVE
    38 00011226 C9                  <1>  leave
 21196 00011227 48C7C0F8FFFFFF                  mov rax, -8
 21197 0001122E E8(00000000)                    call exit
 21198                                  
 21199                                  section .data
 21200                                  fmt_char:
 21201 00000420 256300                          db `%c\0`
 21202                                  fmt_arg_count_0:
 21203 00000423 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
 21203 0000042C 74696E67207A65726F-
 21203 00000435 20617267756D656E74-
 21203 0000043E 732E20466F756E6420-
 21203 00000447 25640A00           
 21204                                  fmt_arg_count_1:
 21205 0000044B 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
 21205 00000454 74696E67206F6E6520-
 21205 0000045D 617267756D656E742E-
 21205 00000466 20466F756E64202564-
 21205 0000046F 0A00               
 21206                                  fmt_arg_count_12:
 21207 00000471 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
 21207 0000047A 74696E67206F6E6520-
 21207 00000483 726571756972656420-
 21207 0000048C 616E64206F6E65206F-
 21207 00000495 7074696F6E616C2061-
 21207 0000049E 7267756D656E742E20-
 21207 000004A7 466F756E642025640A-
 21207 000004B0 00                 
 21208                                  fmt_arg_count_2:
 21209 000004B1 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
 21209 000004BA 74696E672074776F20-
 21209 000004C3 617267756D656E7473-
 21209 000004CC 2E20466F756E642025-
 21209 000004D5 640A00             
 21210                                  fmt_arg_count_3:
 21211 000004D8 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
 21211 000004E1 74696E672074687265-
 21211 000004EA 6520617267756D656E-
 21211 000004F3 74732E20466F756E64-
 21211 000004FC 2025640A00         
 21212                                  fmt_type:
 21213 00000501 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
 21213 0000050A 696F6E207061737365-
 21213 00000513 6420696E636F727265-
 21213 0000051C 637420747970650A00 
 21214                                  fmt_integer_range:
 21215 00000525 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
 21215 0000052E 7265637420696E7465-
 21215 00000537 6765722072616E6765-
 21215 00000540 0A00               
 21216                                  fmt_division_by_zero:
 21217 00000542 212121204469766973-             db `!!! Division by zero\n\0`
 21217 0000054B 696F6E206279207A65-
 21217 00000554 726F0A00           
 21218                                  fmt_scheme_error_part_1:
 21219 00000558 0A2121212054686520-             db `\n!!! The procedure \0`
 21219 00000561 70726F636564757265-
 21219 0000056A 2000               
 21220                                  fmt_scheme_error_part_2:
 21221 0000056C 2061736B656420746F-             db ` asked to terminate the program\n`
 21221 00000575 207465726D696E6174-
 21221 0000057E 65207468652070726F-
 21221 00000587 6772616D0A         
 21222 0000058C 202020207769746820-             db `    with the following message:\n\n\0`
 21222 00000595 74686520666F6C6C6F-
 21222 0000059E 77696E67206D657373-
 21222 000005A7 6167653A0A0A00     
 21223                                  fmt_scheme_error_part_3:
 21224 000005AE 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
 21224 000005B7 210A0A00           
 21225                                  
